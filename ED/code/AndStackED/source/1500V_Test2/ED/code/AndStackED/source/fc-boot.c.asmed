/*==== DECLARATION CONTROL ===================================================*/
/*==== INCLUDES ==============================================================*/

#include "hal_main.h"
#include "main.h"

SchedulerInterface __xdata *si = (SchedulerInterface __xdata *)0xF500;

#define MKS_IN_TICK     200
#define TICKS_IN_SEC    5000
#define TICKS_IN_MS     5

#define _mppCycle            ( TICKS_IN_SEC / 16 ) 
#define _firstAdcMeasurement ( TICKS_IN_SEC / 50 )

/******************************************************************************
* @fn  main
* @brief
*      Main function. Triggers setup menus and main loops for both receiver
*      and transmitter. This function supports both CC1110 and CC2510.
* Parameters:
* @param  void
* @return void
******************************************************************************/
#pragma optimize=z 9
void main(void){
//BYTE cnt = 0xFF;
//BYTE *dst  = (BYTE *)0xF500;

    SET_WORD(T1CC0H, T1CC0L, 600 - 1);
    //        prescaler = 8      modulo mode            ie
    T1CTL   = 0x04  | 0x02;           T1CCTL0 = 0x44;
    //mymemset( (BYTE *) 0xF500, 0, 0xFF );
    //while( cnt-- ) *dst++ = 0;
    asm(    "MOV DPTR, #0xF500" );
    asm(    "CLR A" );
    asm(    "MOV R1, #0xFF" );
    asm( "Label_Clear_Mem:" );
    asm(    "MOVX @DPTR, A" );
    asm(    "INC DPTR" );
    asm(    "DJNZ R1, Label_Clear_Mem" );
    
    // long jump to code, 1k or 16k ...
    //si->ticks[ MppCycle ]  = 5;   // 1 ms
    asm( "MOV  DPTR, #0xF500" );
    asm( "MOV  A, #5" );
    asm( "MOVX @DPTR, A" );
    
    //si->mppCycle        = _mppCycle;  //_mppCycle == 312 = 0x138
    asm( "MOV  DPTR, #0xF55B" ); 
    asm( "MOV  A,    #0x38" );
    asm( "MOVX @DPTR, A" );
    asm( "INC  DPTR" );
    asm( "MOV  A, #0x1" );
    asm( "MOVX @DPTR, A" );
    //si->firstAdcReading = _firstAdcMeasurement; // _firstAdcMeasurement == 100 = 0x64
    asm( "INC  DPTR" );
    asm( "MOV  A, #0x64" );
    asm( "MOVX @DPTR, A" );
    
    WDCTL = 0x8; 
    
    HAL_INT_ENABLE(INUM_T1,  INT_ON);       // enable Timer1 interrupt
    INT_GLOBAL_ENABLE( INT_ON );

    //if( (*((BYTE *)0x7CD5)) & 0x4  ){ asm("LJMP 0x476"); }
    //asm("LJMP 0x4076"); 
    
    asm( "MOV   DPTR, #0x7CD4" );
    asm( "MOVX  A,    @DPTR"  );
    asm( "MOV   0xFE,   A"  );
    asm( "PUSH  0xFE" );
    asm( "INC   DPTR" );
    asm( "MOVX  A,    @DPTR"  );
    asm( "MOV   0xFF,   A"  );
    asm( "PUSH  0xFF" );
    asm( "RET" );
    
}
/*==== INTERRUPT SERVICE ROUTINES ============================================*/
/******************************************************************************
* @fn  rf_IRQ
* @brief
*      The only interrupt flag which throws this interrupt is the IRQ_DONE interrupt.
*      So this is the code which runs after a packet has been received or transmitted.
* Parameters:
* @param  void
* @return void
******************************************************************************/
//#pragma optimize=s 9

void flagWork(){
    if( si->radioMode == RADIO_MODE_RX){     
        si->flags[ PackageReceived ]  = TRUE;  
    }else if( si->radioMode == RADIO_MODE_TX){
        si->ticks[ CheckFlag ] = 0;
        si->flags[ DataSent  ] = TRUE;
    }
    si->flags[ IncreaseSleepCnt ] = TRUE;
    si->radioMode = RADIO_MODE_UNDEF;
}

#pragma vector=RF_VECTOR 
//#pragma register_bank=1
__interrupt void rf_IRQ(void) {
    INT_GLOBAL_ENABLE( INT_OFF );
        RFIF &= ~IRQ_DONE;        // Tx/Rx completed, clear interrupt flag
        S1CON &= ~0x03;           // Clear the general RFIF interrupt registers
        DMAARM = 0x80 | DMAARM_CHANNEL1 | DMAARM_CHANNEL0;
        flagWork();
        //RFST = STROBE_IDLE;
        //if( si->rfCallback ) si->rfCallback();
    INT_GLOBAL_ENABLE( INT_ON );
}
#pragma vector=ADC_VECTOR 
__interrupt void adc_IRQ(void) {
        ADCIF &= ~IRQ_DONE;     // clear interrupt flag
        (*(si->readNextValue))();
}
//BYTE firstMppCycle = 1;
#pragma vector=T1_VECTOR 
__interrupt void t1_IRQ(void) {
//register BYTE _idx = 0;
//register INT16 __xdata *ticks = si->ticks;
    TIMIF &= ~IRQ_DONE;     // clear interrupt flag
    //si->runningTick++;
    asm( "MOV DPTR, #0xF538" );
    asm( "MOVX A, @DPTR" );
    asm( "INC  A" );
    asm( "MOVX @DPTR, A" );
    asm( "JNZ  __t1_label1" );
    asm( "INC DPTR" );
    asm( "MOVX A, @DPTR" );
    asm( "INC  A" );
    asm( "MOVX @DPTR, A" );
    asm( "__t1_label1:" );
    //do {
    asm( "MOV R1, #0x10" );
    asm( "MOV R2, #0" );
    asm( "MOV DPTR, #0xF500" );
    asm( "__t1_loop:" );
        //if( ( *ticks  > 0 ) && ( --(*ticks) == 0 ) )
        asm( "INC  DPTR");
        asm( "MOVX A, @DPTR" );
        asm( "ANL  A, #0x80" );
        asm( "JNZ  _t1_end_of_case" );
        
        asm( "DEC 0x82" );
        asm( "MOVX A, @DPTR" );
        asm( "DEC  A" );
        asm( "MOVX @DPTR, A" );
        asm( "INC  DPTR" );
        asm( "JNZ  _t1_continue_2_decrement" );

        // test higher byte for 0
        asm( "MOVX A, @DPTR" );
        asm( "JZ   _t1_switch" );
        asm( "SJMP _t1_end_of_case" );
          
        asm( "_t1_continue_2_decrement:" );
        asm( "CJNE A, #0xFF, _t1_end_of_case" );
        asm( "MOVX A, @DPTR" );
        asm( "DEC  A" );
        asm( "MOVX @DPTR, A" );
        asm( "SJMP _t1_end_of_case" );
        
        asm( "_t1_switch:" );
            //switch( _idx ){
                //case MppCycle:
                asm( "CJNE R2, #0, __t1_label2");
                    P1_0 ^= 1;

                    //*ticks = _mppCycle;
                    //ticks[ 1 ] = _firstAdcMeasurement;                       // 20 ms
                    
                    //*ticks     = si->mppCycle;
                    //ticks[ 1 ] = si->firstAdcReading;
                    
                    asm(    "MOV DPTR, #0xF500" );
                    asm(    "XRL 0x92, #1" );           // DPTR0 => DPTR1
                    asm(    "MOV DPTR, #0xF55B" );
                    asm(    "MOV R1,   #4" );
                    asm( "COPYBYTES:");
                    asm(    "MOVX A, @DPTR" );          // 
                    asm(    "INC DPTR" );
                    asm(    "XRL 0x92, #1" );           // DPTR1 => DPTR0
                    asm(    "MOVX @DPTR, A" );
                    asm(    "INC DPTR" );
                    asm(    "XRL 0x92, #1" );           // DPTR0 => DPTR1
                    asm(    "DJNZ R1, COPYBYTES" );
                    asm(    "XRL 0x92, #1" );           // DPTR1 => DPTR0
                    
                    //si->inCurCycle = 0;                                    // 62.5 ms
                    asm( "MOV DPTR, #0xF536" );
                    asm( "CLR A" );
                    asm( "MOVX @DPTR, A" );

                    asm( "MOV DPTR, #0xF500" );
                    asm( "INC DPTR" );                
                asm( "SJMP _t1_end_of_case");    
                //break;
                //case AdcMeasurement: 
                asm( "__t1_label2:");
                asm( "CJNE R2, #1, __t1_label3");
                    asm( "PUSH DPL");
                    asm( "PUSH DPH");
                    asm( "PUSH 1" );
                    asm( "PUSH 2" );
                    if( si->armAdcs ) (*(si->armAdcs))();  
                    else{
                        INT_GLOBAL_ENABLE( INT_ON );
                                                 
                        asm( "MOV   R7, #0xF" );
                    //Clear_Stack:
                        asm( "Clear_Stack:" );
                        asm( "POP 0xFF" );
                        asm( "DJNZ  R7, Clear_Stack" );
                        
                      // si->interImageCommunications[ OtherImageWasTried ] = TRUE;
                        asm( "MOV   DPTR, #0x7CD4" );
                        asm( "MOVX  A,    @DPTR"  );
                        asm( "MOV   0xFE,   A"  );
                        asm( "PUSH  0xFE" );
                        asm( "INC   DPTR" );
                        asm( "MOVX  A,    @DPTR"  );
                        asm( "SWAP  A" );
                        asm( "MOV   0xFF,   A"  );
                        asm( "PUSH  0xFF" );

                        asm( "RETI" );
                        
                        //if( ( (*((BYTE *)0x7CD5)) & 0x4 ) != 0){  asm("LJMP 0x4076");  }else{  asm("LJMP 0x476"); }
                    }
                    asm( "POP 2" );
                    asm( "POP 1" );
                    asm( "POP DPH");
                    asm( "POP DPL");
                //break;
                //default: 
                asm( "__t1_label3:");
                //  *ticks = -1; 
                asm( "MOV A, #0xFF" );
                asm( "MOVX @DPTR, A" );
                asm( "DEC 0x82" );
                asm( "MOVX @DPTR, A" );
                asm( "INC DPTR" );
                //break;
        //    }
        asm( "_t1_end_of_case:");
        //ticks++;
        asm( "INC DPTR" );
    //} while( ++_idx < N_Of_Ticks );
    asm( "INC R2" );
    asm( "DJNZ R1, __t1_loop" );
    //si->flags[ IncreaseSleepCnt ] = TRUE;
    asm( "MOV DPTR, #0xF520" );
    asm( "MOV A, #1");
    asm( "MOVX @DPTR, A" );
}
#pragma vector=DMA_VECTOR
__interrupt void dmaFlash_IRQ(void) {
    DMAIF &= ~IRQ_DONE;
    if( DMAIRQ & 0x4 ) (*(si->flashCallback))();
}
//______________________________________________________________________________________________________________________________
/*==== END OF FILE ==========================================================*/
