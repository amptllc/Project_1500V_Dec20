###############################################################################
#                                                                             #
# IAR 8051 C/C++ Compiler V7.30B/W32                    06/Apr/2017  13:54:35 #
# Copyright 2004-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\1500V_Test2\ED\code\AndStackED\source\aes.c     #
#    Command line       =  E:\1500V_Test2\ED\code\AndStackED\source\aes.c -D  #
#                          NDEBUG -D chip=2510 -D LOWER_IMAGE -D MidString    #
#                          -D MIDSTRING -lCN "E:\1500V_Test2\ED\iar\Build     #
#                          .hex for CC2510\List\" -lA                         #
#                          "E:\1500V_Test2\ED\iar\Build .hex for              #
#                          CC2510\List\" -o "E:\1500V_Test2\ED\iar\Build      #
#                          .hex for CC2510\Obj\" -e -z9 --core=plain          #
#                          --dptr=16,1 --data_model=large --code_model=near   #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 32 -I     #
#                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\  #
#                          -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INCLU #
#                          DE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL_B #
#                          UI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\     #
#    List file          =  E:\1500V_Test2\ED\iar\Build .hex for               #
#                          CC2510\List\aes.lst                                #
#    Object file        =  E:\1500V_Test2\ED\iar\Build .hex for               #
#                          CC2510\Obj\aes.r51                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\1500V_Test2\ED\code\AndStackED\source\aes.c
      1          #include "hal_main.h"

   \                                 In  segment SFR_AN, at 0xb1
   \   unsigned char volatile __sfr ENCDI
   \                     ENCDI:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb2
   \   unsigned char volatile __sfr ENCDO
   \                     ENCDO:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb3
   \   unsigned char volatile __sfr ENCCS
   \                     ENCCS:
   \   000000                DS 1
      2          
      3          #define AES_SIZE 16
      4          #define NOPS     12
      5          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
      6          void load(const unsigned char what, char *ptr){
   \                     load:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
      7          unsigned char i;
      8              ENCCS = what | 0x01;
   \   000004   7401         MOV     A,#0x1
   \   000006   49           ORL     A,R1
   \   000007   F5B3         MOV     0xb3,A
      9              i = AES_SIZE; while( i-- ) ENCDI = *ptr++;
   \   000009   7C10         MOV     R4,#0x10
   \   00000B   800C         SJMP    ??load_0
   \                     ??load_1:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5B1         MOV     0xb1,A
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \                     ??load_0:
   \   000019   EC           MOV     A,R4
   \   00001A   1C           DEC     R4
   \   00001B   70F0         JNZ     ??load_1
     10          }
   \   00001D   D083         POP     DPH
   \   00001F   D082         POP     DPL
   \   000021   22           RET
   \   000022                REQUIRE ENCDI
   \   000022                REQUIRE ENCCS
     11          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     12          void wait_aes(void){ 
   \                     wait_aes:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8001         SJMP    ??wait_aes_0
     13              while((ENCCS & 0x08) == 0) asm("NOP"); 
   \                     ??wait_aes_1:
   \   000002   00           NOP
   \                     ??wait_aes_0:
   \   000003   E5B3         MOV     A,0xb3
   \   000005   A2E3         MOV     C,0xE0 /* A   */.3
   \   000007   50F9         JNC     ??wait_aes_1
     14              //asm( "WC2: MOV A, 0xB3" );
     15              //asm( "ANL  A, #8h" );
     16              //asm( "JZ   WC2" );  
     17          }
   \   000009   22           RET
   \   00000A                REQUIRE ENCCS
     18          
     19          //void wait_aes( void );
     20          //void wait_nops( void );

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     21          void code(    unsigned char what, unsigned char size,  char *from, char *to ){
   \                     `code`:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007   EC           MOV     A,R4
   \   000008   FE           MOV     R6,A
   \   000009   ED           MOV     A,R5
   \   00000A   FF           MOV     R7,A
   \   00000B   7409         MOV     A,#0x9
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   8882         MOV     DPL,R0
   \   000017   8983         MOV     DPH,R1
     22              unsigned char i, cnt;
     23              //if( (size % AES_SIZE) == 0 ){
     24                  for( cnt = size / AES_SIZE; cnt; cnt--, from+=AES_SIZE ){
   \   000019   EA           MOV     A,R2
   \   00001A   C4           SWAP    A
   \   00001B   540F         ANL     A,#0xf
   \   00001D   F5..         MOV     ?V0 + 0,A
   \   00001F   8015         SJMP    ??code_0
     25                      load( what, from );
     26                      i = NOPS;     while( i-- ) asm("NOP"); 
     27                      //asm( "MOV R1, #0x20"); asm("WAIT_NOPS: NOP"); asm( "DJNZ R1, WAIT_NOPS" );
     28                      //wait_nops();
     29                      i = AES_SIZE; while( i-- ) *to++ = ENCDO;
   \                     ??code_1:
   \   000021   E5B2         MOV     A,0xb2
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \                     ??code_2:
   \   000025   EB           MOV     A,R3
   \   000026   1B           DEC     R3
   \   000027   70F8         JNZ     ??code_1
     30                      wait_aes();
   \   000029                ; Setup parameters for call to function wait_aes
   \   000029   12....       LCALL   wait_aes
   \   00002C   15..         DEC     ?V0 + 0
   \   00002E   EE           MOV     A,R6
   \   00002F   2410         ADD     A,#0x10
   \   000031   FE           MOV     R6,A
   \   000032   EF           MOV     A,R7
   \   000033   3400         ADDC    A,#0x0
   \   000035   FF           MOV     R7,A
   \                     ??code_0:
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   6016         JZ      ??code_3
   \   00003A                ; Setup parameters for call to function load
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   A9..         MOV     R1,?V0 + 1
   \   000040   12....       LCALL   load
   \   000043   7B0C         MOV     R3,#0xc
   \   000045   8001         SJMP    ??code_4
   \                     ??code_5:
   \   000047   00           NOP
   \                     ??code_4:
   \   000048   EB           MOV     A,R3
   \   000049   1B           DEC     R3
   \   00004A   70FB         JNZ     ??code_5
   \   00004C   7B10         MOV     R3,#0x10
   \   00004E   80D5         SJMP    ??code_2
     31                  }
     32              //}
     33          }
   \                     ??code_3:
   \   000050   7F02         MOV     R7,#0x2
   \   000052   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   000055                REQUIRE ENCDO
     34          /*
     35          void loadKey( char *key ){ load( 0x04, key ); wait(); }
     36          void loadIV(  char *iv ){  load( 0x06, iv  ); wait(); }
     37          void encode( unsigned char size,  char *from, char *to ){ code( 0x00, size, from, to ); }
     38          void decode( unsigned char size,  char *from, char *to ){ code( 0x02, size, from, to ); }
     39          */

   Maximum stack usage in bytes:

     Function      ISTACK PSTACK XSTACK
     --------      ------ ------ ------
     code              1      0     11
       -> wait_aes     0      0     18
       -> load         0      0     18
     load              2      0      9
     wait_aes          0      0      9


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     ENCDI             1
     ENCDO             1
     ENCCS             1
     load             34
     wait_aes         10
     code             85

 
 129 bytes in segment NEAR_CODE
   3 bytes in segment SFR_AN
 
 129 bytes of CODE memory
   0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
