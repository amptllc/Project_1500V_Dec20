///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   06/Apr/2017  13:54:46 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\1500V_Test2\ED\code\Library\HAL\source\hal_pow /
//                          er_clk_mgmt.c                                     /
//    Command line       =  E:\1500V_Test2\ED\code\Library\HAL\source\hal_pow /
//                          er_clk_mgmt.c -D NDEBUG -D chip=2510 -D           /
//                          LOWER_IMAGE -lA "E:\1500V_Test2\ED\iar\Build      /
//                          .hex for CC2510\List\" -o                         /
//                          "E:\1500V_Test2\ED\iar\Build .hex for             /
//                          CC2510\Obj\" -e -z9 --core=plain --dptr=16,1      /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\ /
//                           -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INC /
//                          LUDE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HA /
//                          L_BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\ /
//    List file          =  E:\1500V_Test2\ED\iar\Build .hex for              /
//                          CC2510\List\hal_power_clk_mgmt.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_power_clk_mgmt

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        PUBWEAK CLKCON
        PUBWEAK SLEEP
        PUBLIC halPowerClkMgmtSetMainClkSrc
        FUNCTION halPowerClkMgmtSetMainClkSrc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        EXTERN halWait
        FUNCTION halWait,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\1500V_Test2\ED\code\Library\HAL\source\hal_power_clk_mgmt.c
//    1 /*-----------------------------------------------------------------------------
//    2 |   File:      hal_power_clk_mgmt.c
//    3 |   Target:    cc1110, cc2510
//    4 |   Author:    TFL
//    5 |   Revised:   2007-09-05
//    6 |   Revision:  1.0
//    7 +------------------------------------------------------------------------------
//    8 |  Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
//    9 |
//   10 |  IMPORTANT: Your use of this Software is limited to those specific rights
//   11 |  granted under the terms of a software license agreement between the user who
//   12 |  downloaded the software, his/her employer (which must be your employer) and
//   13 |  Texas Instruments Incorporated (the "License"). You may not use this Software
//   14 |  unless you agree to abide by the terms of the License. The License limits
//   15 |  your use, and you acknowledge, that the Software may not be modified, copied
//   16 |  or distributed unless embedded on a Texas Instruments microcontroller or used
//   17 |  solely and exclusively in conjunction with a Texas Instruments radio
//   18 |  frequency transceiver, which is integrated into your product. Other than for
//   19 |  the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20 |  works of, modify, distribute, perform, display or sell this Software and/or
//   21 |  its documentation for any purpose.
//   22 |
//   23 |  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24 |  PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25 |  INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26 |  NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27 |  TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28 |  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29 |  LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING
//   30 |  BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
//   31 |  CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
//   32 |  SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33 |  (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 |
//   35 |  Should you have any questions regarding your right to use this Software,
//   36 |  contact Texas Instruments Incorporated at www.TI.com.
//   37 |
//   38 +------------------------------------------------------------------------------
//   39 | Purpose:    Power and clock management
//   40 +------------------------------------------------------------------------------
//   41 | Decription: In this file the handlers for power and clock management are placed
//   42 |             These functions are used to set power-mode, clock source and clock speed.
//   43 +----------------------------------------------------------------------------*/
//   44 
//   45 /*==== DECLARATION CONTROL ==================================================*/
//   46 
//   47 /*==== INCLUDES ==============================================================*/
//   48 
//   49 #include "hal_power_clk_mgmt.h"

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEP
SLEEP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCON
CLKCON:
        DS 1
//   50 
//   51 /*==== MACROS ================================================================*/
//   52 /*==== CONSTS ================================================================*/
//   53 /*==== TYPES =================================================================*/
//   54 /*==== LOCALS ================================================================*/
//   55 /*==== PRIVATE FUNCTIONS =====================================================*/
//   56 /*==== PUBLIC FUNCTIONS ======================================================*/
//   57 
//   58 extern void halWait(BYTE wait);
//   59 /*----------------------------------------------------------------------------*/
//   60 /* See hal_power_clk_mgmt.h for a description of this function.               */
//   61 /*----------------------------------------------------------------------------*/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   62 void halPowerClkMgmtSetMainClkSrc(UINT8 source)
halPowerClkMgmtSetMainClkSrc:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function halPowerClkMgmtSetMainClkSrc
//   63 {
        FUNCALL halPowerClkMgmtSetMainClkSrc, halWait
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL halPowerClkMgmtSetMainClkSrc, halWait
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
        CFI R6 A
        PUSH    A
        CFI R6 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
//   64   BYTE counter = 127;
        MOV     R6,#0x7f
//   65     // source can have the following values:
//   66     // CRYSTAL 0x00  /*  High speed Crystal Oscillator Control */
//   67     // RC      0x01  /*  Low power RC Oscillator */
//   68 
//   69     if(source) {
        MOV     A,R1
        JZ      ??halPowerClkMgmtSetMainClkSrc_0
//   70       CLKCON |= OSC_BIT;                    // starting the RC Oscillator
        ORL     0xc6,#0x40
        SJMP    ??halPowerClkMgmtSetMainClkSrc_1
//   71       while(!HIGH_FREQUENCY_RC_OSC_STABLE && counter-- ) halWait(2); // waiting until the oscillator is stable
??halPowerClkMgmtSetMainClkSrc_2:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x2
        LCALL   halWait
??halPowerClkMgmtSetMainClkSrc_1:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.5
        JC      ??halPowerClkMgmtSetMainClkSrc_3
        MOV     A,R6
        DEC     R6
        JNZ     ??halPowerClkMgmtSetMainClkSrc_2
//   72       SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
        SJMP    ??halPowerClkMgmtSetMainClkSrc_3
//   73     }
//   74     else {
//   75       SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
??halPowerClkMgmtSetMainClkSrc_0:
        ANL     0xbe,#0xfb
        SJMP    ??halPowerClkMgmtSetMainClkSrc_4
//   76       while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
??halPowerClkMgmtSetMainClkSrc_5:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x2
        LCALL   halWait
??halPowerClkMgmtSetMainClkSrc_4:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.6
        JC      ??halPowerClkMgmtSetMainClkSrc_6
        MOV     A,R6
        DEC     R6
        JNZ     ??halPowerClkMgmtSetMainClkSrc_5
//   77       asm("NOP");
??halPowerClkMgmtSetMainClkSrc_6:
        NOP
//   78       CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
        ANL     0xc6,#0x80
        MOV     A,0xc6
//   79       SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
??halPowerClkMgmtSetMainClkSrc_3:
        ORL     0xbe,#0x4
//   80     }
//   81 
//   82 
//   83 }
        POP     A
        CFI R6 A
        CFI CFA_SP SP+-2
        MOV     R6,A
        CFI R6 SameValue
        RET
        CFI EndBlock cfiBlock0
        REQUIRE SLEEP
        REQUIRE CLKCON

        END
//   84 
//   85 /*==== END OF FILE ==========================================================*/
// 
// 63 bytes in segment NEAR_CODE
//  2 bytes in segment SFR_AN
// 
// 63 bytes of CODE memory
//  0 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
