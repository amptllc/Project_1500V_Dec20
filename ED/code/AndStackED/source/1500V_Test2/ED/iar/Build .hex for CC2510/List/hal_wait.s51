///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   06/Apr/2017  13:54:46 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\1500V_Test2\ED\code\Library\HAL\source\hal_wai /
//                          t.c                                               /
//    Command line       =  E:\1500V_Test2\ED\code\Library\HAL\source\hal_wai /
//                          t.c -D NDEBUG -D chip=2510 -D LOWER_IMAGE -lA     /
//                          "E:\1500V_Test2\ED\iar\Build .hex for             /
//                          CC2510\List\" -o "E:\1500V_Test2\ED\iar\Build     /
//                          .hex for CC2510\Obj\" -e -z9 --core=plain         /
//                          --dptr=16,1 --data_model=large --code_model=near  /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\ /
//                           -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INC /
//                          LUDE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HA /
//                          L_BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\ /
//    List file          =  E:\1500V_Test2\ED\iar\Build .hex for              /
//                          CC2510\List\hal_wait.s51                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_wait

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        PUBLIC halWait
        FUNCTION halWait,080203H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
// E:\1500V_Test2\ED\code\Library\HAL\source\hal_wait.c
//    1 /*-----------------------------------------------------------------------------
//    2 |   File:      hal_wait.c
//    3 |   Target:    cc1110, cc2510
//    4 |   Author:    TFL
//    5 |   Revised:   2007-09-05
//    6 |   Revision:  1.0
//    7 +------------------------------------------------------------------------------
//    8 |  Copyright 2004-2007 Texas Instruments Incorporated. All rights reserved.
//    9 |
//   10 |  IMPORTANT: Your use of this Software is limited to those specific rights
//   11 |  granted under the terms of a software license agreement between the user who
//   12 |  downloaded the software, his/her employer (which must be your employer) and
//   13 |  Texas Instruments Incorporated (the "License"). You may not use this Software
//   14 |  unless you agree to abide by the terms of the License. The License limits
//   15 |  your use, and you acknowledge, that the Software may not be modified, copied
//   16 |  or distributed unless embedded on a Texas Instruments microcontroller or used
//   17 |  solely and exclusively in conjunction with a Texas Instruments radio
//   18 |  frequency transceiver, which is integrated into your product. Other than for
//   19 |  the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20 |  works of, modify, distribute, perform, display or sell this Software and/or
//   21 |  its documentation for any purpose.
//   22 |
//   23 |  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24 |  PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25 |  INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26 |  NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27 |  TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28 |  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29 |  LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING
//   30 |  BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
//   31 |  CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
//   32 |  SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33 |  (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 |
//   35 |  Should you have any questions regarding your right to use this Software,
//   36 |  contact Texas Instruments Incorporated at www.TI.com.
//   37 |
//   38 +------------------------------------------------------------------------------
//   39 | Purpose:    Waiting function
//   40 +------------------------------------------------------------------------------
//   41 | Decription: This file contains the functionality to pause the execution.
//   42 +----------------------------------------------------------------------------*/
//   43 
//   44 /*==== DECLARATION CONTROL ==================================================*/
//   45 
//   46 /*==== INCLUDES ==============================================================*/
//   47 
//   48 #include "hal_main.h"
//   49 
//   50 /*==== MACROS ================================================================*/
//   51 /*==== CONSTS ================================================================*/
//   52 /*==== TYPES =================================================================*/
//   53 /*==== LOCALS ================================================================*/
//   54 /*==== PRIVATE FUNCTIONS =====================================================*/
//   55 /*==== PUBLIC FUNCTIONS ======================================================*/
//   56 
//   57 /******************************************************************************
//   58 * @fn  halWait
//   59 *
//   60 * @brief
//   61 *      This function waits approximately a given number of m-seconds
//   62 *      regardless of main clock speed.
//   63 *
//   64 * Parameters:
//   65 *
//   66 * @param  BYTE	 wait ( hence max value = 255 )
//   67 *         The number of m-seconds to wait.
//   68 *
//   69 * @return void
//   70 *
//   71 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   72 void halWait(BYTE wait){
halWait:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function halWait
        ; Saved register size: 0
        ; Auto size: 0
//   73 /*
//   74    largeWait = ((UINT16) (wait << 7));
//   75    largeWait += 45*wait;
//   76    largeWait = (largeWait >> CLKSPD);
//   77    while(largeWait--);
//   78 */
//   79 //   if(wait){
//   80   /*
//   81    UINT32 largeWait; 
//   82        //largeWait = ((UINT16) (wait << 7));
//   83        largeWait = wait*(128+45);
//   84        largeWait >>= CLKSPD;
//   85        while(largeWait--);
//   86 //   }  
//   87   */ 
//   88    // parameter wait in R1
//   89    asm( "__loop0:" );
//   90    asm( "MOV R2, #0x17" );
__loop0:
        MOV R2, #0x17
//   91    asm( "__loop1:" );
//   92    asm( "MOV R3, #0xFF" );
__loop1:
        MOV R3, #0xFF
//   93    asm( "__loop2:" );
//   94    asm( "NOP" );
__loop2:
        NOP
//   95    asm( "DJNZ R3, __loop2" );
        DJNZ R3, __loop2
//   96    asm( "DJNZ R2, __loop1" );
        DJNZ R2, __loop1
//   97    asm( "DJNZ R1, __loop0" );
        DJNZ R1, __loop0
//   98 }
        RET
        CFI EndBlock cfiBlock0

        END
//   99 
//  100 /*==== END OF FILE ==========================================================*/
// 
// 12 bytes in segment NEAR_CODE
// 
// 12 bytes of CODE memory
//
//Errors: none
//Warnings: none
