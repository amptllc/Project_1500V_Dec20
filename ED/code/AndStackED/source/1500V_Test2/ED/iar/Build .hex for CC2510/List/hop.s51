///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   06/Apr/2017  13:54:46 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\1500V_Test2\ED\code\AndStackED\source\hop.c    /
//    Command line       =  E:\1500V_Test2\ED\code\AndStackED\source\hop.c    /
//                          -D NDEBUG -D chip=2510 -D LOWER_IMAGE -lA         /
//                          "E:\1500V_Test2\ED\iar\Build .hex for             /
//                          CC2510\List\" -o "E:\1500V_Test2\ED\iar\Build     /
//                          .hex for CC2510\Obj\" -e -z9 --core=plain         /
//                          --dptr=16,1 --data_model=large --code_model=near  /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\ /
//                           -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INC /
//                          LUDE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HA /
//                          L_BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\ /
//    List file          =  E:\1500V_Test2\ED\iar\Build .hex for              /
//                          CC2510\List\hop.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hop

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?S_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK RFST
        PUBWEAK __Constant_3039
        PUBWEAK __Constant_41c64e6d
        PUBLIC hop
        FUNCTION hop,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC hopping_channels
        PUBLIC setup_hopper
        FUNCTION setup_hopper,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
// E:\1500V_Test2\ED\code\AndStackED\source\hop.c
//    1 #include "hal_main.h"

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1
//    2 //#include <stdlib.h>
//    3 
//    4 #define TX          0x13
//    5 #define TX_END      0x14
//    6 #define STARTCAL    0x8
//    7 #define ENDCAL      0xC
//    8 #define RX          0xD
//    9 #define RX_END      0xE
//   10 #define RX_RST      0xF
//   11 
//   12 #define FALSE       0
//   13 #define TRUE        1
//   14 
//   15 #define STROBE_TX                    0x03   // Strobe commands for the RFST
//   16 #define STROBE_RX                    0x02   // register
//   17 #define STROBE_CAL                   0x01  
//   18 #define STROBE_IDLE                  0x04   
//   19 
//   20 #define HOP_N_CHANNELS 25
//   21 #define HOP_K_CHANNELS 10
//   22 
//   23 //static UINT32 __next_rand;
//   24 #define RAND_MAX 0x7FFF
//   25 /*
//   26 inline void srand(unsigned int seed){
//   27   __next_rand = seed;
//   28 }
//   29 inline int rand(void){
//   30   __next_rand = __next_rand * 1103515245 + 12345;
//   31   return (unsigned int) (__next_rand >> 16) & RAND_MAX;
//   32 }
//   33 */
//   34 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   35 BYTE hopping_channels[ HOP_N_CHANNELS ];
hopping_channels:
        DS 25
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   36 void setup_hopper( BYTE curch ){
setup_hopper:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function setup_hopper
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//   37 BYTE idx = 0, idx1 = 0, swp;
//   38 UINT32 __next_rand;
//   39     idx = HOP_N_CHANNELS; while( idx-- ) hopping_channels[ idx ] = ( curch + HOP_K_CHANNELS * idx ) & 0xFF;
        MOV     R4,#0x19
        SJMP    ??setup_hopper_0
??setup_hopper_1:
        MOV     B,#0xa
        MOV     A,R4
        MUL     AB
        ADD     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R4
        LCALL   ?Subroutine1
??CrossCallReturnLabel_2:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
??setup_hopper_0:
        MOV     A,R4
        DEC     R4
        JNZ     ??setup_hopper_1
//   40     //srand( curch );
//   41     __next_rand = curch;
        MOV     A,R1
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
//   42     //RNDL = curch; RNDL = 0xFF - curch; 
//   43     for( idx = 0; idx < HOP_N_CHANNELS; idx++ ) {
        MOV     R4,#0x0
//   44         //idx1 = rand() % HOP_N_CHANNELS; 
//   45 
//   46         __next_rand = __next_rand * 1103515245 + 12345;
??setup_hopper_2:
        MOV     DPTR,#__Constant_41c64e6d
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_3039
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
//   47         idx1 = ( (unsigned int) (__next_rand >> 16) & RAND_MAX ) % HOP_N_CHANNELS;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,#-0x1
        ANL     A,?V0 + 0
        MOV     R0,A
        MOV     A,#0x7f
        ANL     A,?V0 + 1
        MOV     R1,A
        MOV     R2,#0x19
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//   48       
//   49         //ADCCON1 &= 0xF3; ADCCON1 |= 4; idx1 = RNDL % HOP_N_CHANNELS;
//   50         swp = hopping_channels[ idx ];  hopping_channels[ idx ] = hopping_channels[ idx1 ]; hopping_channels[ idx1 ] = swp;
        MOV     ?V0 + 2,R4
        MOV     A,?V0 + 2
        ADD     A,#(hopping_channels & 0xff)
        MOV     R0,A
        CLR     A
        ADDC    A,#((hopping_channels >> 8) & 0xff)
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R2
        ADD     A,#(hopping_channels & 0xff)
        MOV     R2,A
        CLR     A
        ADDC    A,#((hopping_channels >> 8) & 0xff)
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        MOV     A,R5
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//   51     }
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x19
        JC      ??setup_hopper_2
//   52 }
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   53 void hop(void){
hop:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function hop
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//   54     BYTE idx;//, state; //BOOL loopFlag;
//   55     idx = HOP_N_CHANNELS; while( idx-- ) if( CHANNR == hopping_channels[ idx ] )  break;
        MOV     R3,#0x19
??hop_0:
        MOV     A,R3
        DEC     R3
        MOV     DPL,R3
        MOV     R0,DPL
        JZ      ??hop_1
        MOV     DPTR,#-0x20fa
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        LCALL   ?Subroutine0
??CrossCallReturnLabel_0:
        XRL     A,R2
        JNZ     ??hop_0
//   56     idx = (idx + 1) % HOP_N_CHANNELS;
//   57     //state = MARCSTATE;
//   58     /* ???
//   59     do{
//   60         loopFlag  = FALSE;
//   61         switch( MARCSTATE ){
//   62             case STARTCAL:  case ENDCAL:
//   63             case TX: case TX_END: 
//   64             case RX_END:
//   65                  halWait( 1 ); 
//   66                  loopFlag  = TRUE;
//   67             break;
//   68         }
//   69     }while( loopFlag );
//   70     */
//   71     RFST   = STROBE_IDLE;               
??hop_1:
        MOV     0xe1,#0x4
//   72     CHANNR = hopping_channels[ idx ];
        MOV     A,#0x1
        ADD     A,R0
        INC     R0
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x19
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        LCALL   ?Subroutine0
??CrossCallReturnLabel_1:
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
//   73     //if( state == RX ) RFST = STROBE_RX; 
//   74 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock1
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond3) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond3) CFA_SP SP+-4
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        LCALL   ?Subroutine1
??CrossCallReturnLabel_3:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond6) CFA_SP SP+-4
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond7) CFA_SP SP+-4
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        ADD     A,#(hopping_channels & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((hopping_channels >> 8) & 0xff)
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_41c64e6d:
        DS 4
        REQUIRE `?<Initializer for __Constant_41c64e6d>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_41c64e6d>`:
        DD 1103515245

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_3039:
        DS 4
        REQUIRE `?<Initializer for __Constant_3039>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_3039>`:
        DD 12345

        END
// 
// 226 bytes in segment NEAR_CODE
//   1 byte  in segment SFR_AN
//   8 bytes in segment XDATA_I
//   8 bytes in segment XDATA_ID
//  25 bytes in segment XDATA_Z
// 
// 226 bytes of CODE  memory (+ 8 bytes shared)
//   0 bytes of DATA  memory (+ 1 byte  shared)
//  25 bytes of XDATA memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none
