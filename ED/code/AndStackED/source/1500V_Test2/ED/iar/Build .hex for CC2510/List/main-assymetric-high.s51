///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   06/Apr/2017  13:54:45 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\1500V_Test2\ED\code\AndStackED\source\main-ass /
//                          ymetric-high.c                                    /
//    Command line       =  E:\1500V_Test2\ED\code\AndStackED\source\main-ass /
//                          ymetric-high.c -D NDEBUG -D chip=2510 -D          /
//                          ASSYMETRIC_HIGH -lA "E:\1500V_Test2\ED\iar\Build  /
//                          .hex for CC2510\List\" -o                         /
//                          "E:\1500V_Test2\ED\iar\Build .hex for             /
//                          CC2510\Obj\" -e -z9 --core=plain --dptr=16,1      /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\ /
//                           -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INC /
//                          LUDE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HA /
//                          L_BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\ /
//    List file          =  E:\1500V_Test2\ED\iar\Build .hex for              /
//                          CC2510\List\main-assymetric-high.s51              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `main-assymetric-high`

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_X
        EXTERN ?SC_DIV_MOD
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_GT_X
        EXTERN ?US_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK CLKCON
        PUBWEAK DMAARM
        PUBWEAK FADDRH
        PUBWEAK FCTL
        PUBWEAK FWT
        PUBWEAK IEN2
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK RFIF
        PUBWEAK RFIM
        PUBWEAK RFST
        PUBWEAK RNDH
        PUBWEAK RNDL
        PUBWEAK S1CON
        PUBWEAK SLEEP
        PUBWEAK T3CC0
        PUBWEAK T3CC1
        PUBWEAK T3CTL
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_P1
        PUBLIC abs
        FUNCTION abs,0203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC adcChannels
        PUBLIC adcCount
        PUBLIC adcsTemp
        PUBLIC armAdcs
        FUNCTION armAdcs,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC base_ptr
        PUBLIC bufferCount
        PUBLIC bunchCount
        PUBLIC calibrationRepeat
        PUBLIC checkItOut
        FUNCTION checkItOut,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC clearThePage
        FUNCTION clearThePage,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC cmdCount
        PUBLIC computeADCs
        FUNCTION computeADCs,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC copyMac
        FUNCTION copyMac,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC curBunch
        PUBLIC curChannel
        PUBLIC cycles2HardKick
        PUBLIC cycles2SoftKick
        PUBLIC cycles2Step10Channel
        PUBLIC cyclesFromStart
        PUBLIC cyclesTo10
        PUBLIC cyclesTo500
        PUBLIC cyclesToHop
        PUBLIC cyclesToStep500Channel
        PUBLIC `dec`
        FUNCTION `dec`,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC def_freq
        FUNCTION def_freq,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC enable2SendData
        PUBLIC got_gw
        PUBLIC init
        FUNCTION init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC isCalibrationPackage
        PUBLIC isOnTestStand
        PUBLIC joinRequestWasSend
        PUBLIC lastCycle
        PUBLIC lastOff
        PUBLIC lastRssi
        PUBLIC lastVals
        PUBLIC main
        FUNCTION main,021a03H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC main_loop
        FUNCTION main_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC main_pb
        PUBLIC ms
        PUBLIC msLast
        PUBLIC nextIV
        PUBLIC nextKey
        PUBLIC ov_startup
        FUNCTION ov_startup,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC packagePrepared
        PUBLIC page
        PUBLIC parseCommands
        FUNCTION parseCommands,0a1203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC parseGWPackage
        FUNCTION parseGWPackage,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 56, STACK
        PUBLIC prepareData
        FUNCTION prepareData,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareFlashCheck
        FUNCTION prepareFlashCheck,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC prepareJoinRequest
        FUNCTION prepareJoinRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC prepareScaling
        FUNCTION prepareScaling,021603H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareSpecial
        FUNCTION prepareSpecial,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareTxBuffer
        FUNCTION prepareTxBuffer,021201H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC quartz
        FUNCTION quartz,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        PUBLIC readNextValue
        FUNCTION readNextValue,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC read_page
        FUNCTION read_page,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC receive
        FUNCTION receive,0203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC reportFlashCheck
        PUBLIC reportScaling
        PUBLIC resetReason
        PUBLIC reset_kicks
        FUNCTION reset_kicks,0201H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC savePB
        FUNCTION savePB,0a1201H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC search_stat
        PUBLIC sendData
        FUNCTION sendData,021203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC setByte
        FUNCTION setByte,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC setInt
        FUNCTION setInt,080203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC setOC
        PUBLIC setupRadio
        FUNCTION setupRadio,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC setupRadioDR
        FUNCTION setupRadioDR,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC setupRepeater
        FUNCTION setupRepeater,021203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC softKick
        FUNCTION softKick,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC tempAdcsCount
        PUBLIC theRealOffset
        PUBLIC the_frequency
        PUBLIC tickWait
        FUNCTION tickWait,0203H
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC turnOnFlag
        PUBLIC txDisabled
        PUBLIC utc
        PUBLIC utcLast
        PUBLIC was_listening
        PUBLIC wdWork
        FUNCTION wdWork,0201H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN mymemcpy
        FUNCTION mymemcpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN radioConfigure
        FUNCTION radioConfigure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zerofill
        FUNCTION zerofill,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halWait
        FUNCTION halWait,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN setup_hopper
        FUNCTION setup_hopper,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmaRadioSetup
        FUNCTION dmaRadioSetup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN hop
        FUNCTION hop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN reset
        FUNCTION reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN load
        FUNCTION load,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN wait_aes
        FUNCTION wait_aes,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `code`
        FUNCTION `code`,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN addDF
        FUNCTION addDF,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initiateTransfer
        FUNCTION initiateTransfer,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mymemcmp
        FUNCTION mymemcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN delta
        EXTERN dmaConfig
        EXTERN perRssiOffset
        EXTERN radioPktBuffer
        EXTERN radioPktBufferRx
        EXTERN radioPktBufferTx

// E:\1500V_Test2\ED\code\AndStackED\source\main-assymetric-high.c
//    1 /*==== DECLARATION CONTROL ===================================================*/
//    2 /*==== INCLUDES ==============================================================*/
//    3 
//    4 #include "hal_main.h"

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIM
RFIM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr FWT
FWT:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0adH
// unsigned char volatile __sfr FADDRH
FADDRH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0aeH
// unsigned char volatile __sfr FCTL
FCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bcH
// unsigned char volatile __sfr RNDL
RNDL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bdH
// unsigned char volatile __sfr RNDH
RNDH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEP
SLEEP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCON
CLKCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cdH
// unsigned char volatile __sfr T3CC0
T3CC0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cfH
// unsigned char volatile __sfr T3CC1
T3CC1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIF
RFIF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1
//    5 #include "main.h"
//    6 #include "commands.h"
//    7 #include "parameter_block.h"
//    8 #include "timing.h"
//    9 
//   10 void tickWait(BYTE wait);
//   11 //void rc(void);
//   12 void quartz(void);
//   13 void prepareData(void);
//   14 void sendData(BYTE *buffer, BOOL is500 );
//   15 void armAdcs(void);
//   16 void readNextValue(void);
//   17 void parseGWPackage(void);
//   18 void computeADCs(BOOL timeout);//(BOOL timeout, BOOL accumulateEnergy);
//   19 void prepareJoinRequest(void);
//   20 void prepareScaling(void);
//   21 void prepareFlashCheck(void);
//   22 void setup500( BOOL flag );
//   23 void setByte( BYTE reg, BYTE val );
//   24 //void checkVin(void);
//   25 void savePB();
//   26 
//   27 void parseCommands(BYTE l);
//   28 
//   29 extern void flashCallback(void);
//   30 extern void setup_hopper(BYTE curch);
//   31 extern void hop(void);
//   32 
//   33 extern void wait_aes(void);
//   34 extern void load(const unsigned char what, char *ptr);
//   35 extern void code(    unsigned char size,  char *from, char *to );
//   36 extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, BYTE len);
//   37 
//   38 #define loadKey( key )           { load( 0x04, key );     wait_aes(); }
//   39 #define loadIV(  iv )            { load( 0x06, iv  );     wait_aes(); }
//   40 #define encode( from, to )       code( 0x00, from, to );
//   41 #define decode( from, to )       code( 0x02, from, to );
//   42 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   43 ParameterBlock page; // page is always 240 bytes long
page:
        DS 242
        REQUIRE __INIT_XDATA_Z
//   44 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   45 BYTE *base_ptr = NULL;
base_ptr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   46 BYTE  search_stat = 2;//, need2clean = FALSE;//, maxBunch = 0;
search_stat:
        DS 1
        REQUIRE `?<Initializer for search_stat>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   47 INT8 theRealOffset  = 0;
theRealOffset:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   48 
//   49 /*==== PUBLIC FUNCTIONS ======================================================*/
//   50 #define BUFFER_SIZE     8
//   51 #define BUFFER_MASK     0x7    
//   52 
//   53 #define PAGEADDR        0x400
//   54 #define N_CHANNELS      9
//   55 
//   56 //INT16  adcBuf  [ N_CHANNELS_128 ][ BUFFER_SIZE    ];
//   57 //UINT16 adcs16[   N_CHANNELS ];

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   58 UINT16 adcsTemp[ N_CHANNELS ];
adcsTemp:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   59 
//   60 //INT32 *adcs;
//   61 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   62 BYTE tempAdcsCount = 0;
tempAdcsCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   63 
//   64 // not used for now
//   65 UINT16            
//   66        //ticks2ProcessCmd = 0,       

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   67        cmdCount = 0,
cmdCount:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   68        lastCycle   = 840*TICKS_IN_MS; 
lastCycle:
        DS 2
        REQUIRE `?<Initializer for lastCycle>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   69 BYTE   cyclesFromStart = 0;
cyclesFromStart:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   70        //cyclesTo500 = 120, cyclesTo10 = 220, cyclesToStep500Channel = 20, cycles2Step10Channel = 30,
//   71        //cycles2SoftKick = 3, /*cycles2HardKick = 400,*/ cyclesFromStart = 0;
//   72 //BYTE   cycles2HardKick = 40;

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   73 BYTE   cyclesTo500 = 180, cyclesTo10 = 30, cyclesToStep500Channel = 3, cycles2Step10Channel = 4, cycles2SoftKick = 8, cycles2HardKick = 80;
cyclesTo500:
        DS 1
        REQUIRE `?<Initializer for cyclesTo500>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cyclesTo10:
        DS 1
        REQUIRE `?<Initializer for cyclesTo10>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cyclesToStep500Channel:
        DS 1
        REQUIRE `?<Initializer for cyclesToStep500Channel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2Step10Channel:
        DS 1
        REQUIRE `?<Initializer for cycles2Step10Channel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2SoftKick:
        DS 1
        REQUIRE `?<Initializer for cycles2SoftKick>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2HardKick:
        DS 1
        REQUIRE `?<Initializer for cycles2HardKick>`
        REQUIRE __INIT_XDATA_I
//   74 //BYTE   cycles[] = {180, 30, 3, 4, 8, 80};  // might be needed later    

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   75 BYTE   curChannel = 0,  curBunch = 0,  
curChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
curBunch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   76        bufferCount = 0, adcCount = 0,  reportScaling = 0,       joinRequestWasSend = 0,
bufferCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
adcCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
reportScaling:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
joinRequestWasSend:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   77        resetReason,     reportFlashCheck = 0,                   calibrationRepeat = 4,
resetReason:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
reportFlashCheck:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
calibrationRepeat:
        DS 1
        REQUIRE `?<Initializer for calibrationRepeat>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   78        cyclesToHop = 0, setOC,          bunchCount = 0,         got_gw = 0;  
cyclesToHop:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
setOC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
bunchCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
got_gw:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 
//   80 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   81 BOOL   enable2SendData  = FALSE,       txDisabled = FALSE,      packagePrepared = FALSE,
enable2SendData:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
txDisabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
packagePrepared:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   82        was_listening = FALSE,          isOnTestStand = 0,  isCalibrationPackage = FALSE, main_pb = FALSE,
was_listening:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
isOnTestStand:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
isCalibrationPackage:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
main_pb:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   83        /*zeroPackageWasNotReceived = FALSE,*/ turnOnFlag = FALSE;
turnOnFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   84 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   85 UINT32 utc;// = 0;
utc:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   86 UINT16 ms;//  = 0;
ms:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   88 UINT32 utcLast;// = 0;
utcLast:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   89 UINT16 msLast;//  = 0,  /*processingTime,*/ pt;
msLast:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   90 UINT16 lastVals[N_CHANNELS];
lastVals:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   91 /*
//   92 UINT16 *ptr2RunningTick = NULL;
//   93 UINT16 computeTI(UINT16 _pt)
//   94     { return ( ( _pt <= (*ptr2RunningTick) ) ? ((*ptr2RunningTick) - _pt) : ((*ptr2RunningTick) + (65535 - _pt)) ); } 
//   95 */
//   96 //INT16  text = 0;
//   97 
//   98 //SchedulerInterface *si = (SchedulerInterface *)0xF500;
//   99 
//  100 //static BOOL  *flags;// = si->flags;
//  101 //static INT16 *ticks;// = si->ticks;
//  102 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  103 INT16  lastOff = 0; //, delta = 0;
lastOff:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  104 INT8   lastRssi = 0;
lastRssi:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  105 extern INT32 delta; // LBC defined in utils.c, used in function addDF
//  106 
//  107 #define ASSYM_EXT_GND 7
//  108 #define REF     8
//  109 #define TEXT    4
//  110 
//  111 #ifdef MidString
//  112   #define REFERENCE       ADC_REF_AVDD
//  113   #define REFERENCE_PIN   ADC_AIN7
//  114   #define TIN_CUR_PIN     ADC_AIN6
//  115 #else
//  116   #define REFERENCE       ADC_REF_P0_7
//  117   #define REFERENCE_PIN   ADC_AIN6
//  118   #define TIN_CUR_PIN     ADC_TEMP_SENS
//  119 #endif
//  120 /*
//  121 __xdata_rom const BYTE  adcChannels[ N_CHANNELS ] = {  
//  122   // Vout  0                                    Pin 1
//  123     REFERENCE | ADC_12_BIT | ADC_AIN1,  REFERENCE | ADC_12_BIT | ADC_AIN2,
//  124   // Iout  2                                    Vin 3
//  125     REFERENCE | ADC_12_BIT | ADC_AIN3,  REFERENCE | ADC_12_BIT | ADC_AIN0,  
//  126   // Text  4                                    Tin or Iin2 5
//  127     REFERENCE | ADC_12_BIT | ADC_AIN5,  REFERENCE | ADC_12_BIT | TIN_CUR_PIN,
//  128   // Gnd ext 6                                  Ref 7
//  129     REFERENCE | ADC_12_BIT | ADC_AIN4,  REFERENCE | ADC_12_BIT | REFERENCE_PIN
//  130 };
//  131 */

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  132 __xdata_rom const BYTE  adcChannels[ N_CHANNELS ] = {  
adcChannels:
        DB 113, 114, 115, 112, 117, 116, 118, 124, 118
//  133   // Vout  0                                Pin   1                                
//  134     REFERENCE | ADC_12_BIT | ADC_AIN1,      REFERENCE | ADC_12_BIT | ADC_AIN2,    
//  135  // Iout 2                                  Vin  3                                              
//  136     REFERENCE | ADC_12_BIT | ADC_AIN3,      REFERENCE | ADC_12_BIT | ADC_AIN0,      
//  137   // Text  4                                Tin 5                                  
//  138     REFERENCE | ADC_12_BIT | ADC_AIN5,      REFERENCE | ADC_12_BIT | ADC_AIN4,
//  139   //         Iin2 6                         Gnd ext 7
//  140     REFERENCE | ADC_12_BIT | ADC_AIN6,      REFERENCE | ADC_12_BIT | ADC_GND,       
//  141   //         Ref 8
//  142     REFERENCE | ADC_12_BIT | REFERENCE_PIN,    
//  143 };
//  144 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  145 static __xdata_rom const char theKey[ 2*AES_SIZE ] = { 'A', 'N', 'D', 'S',  0,  'l', 'a', 'r', 'A', 'u', 'g', 'u', 's', 't',  0,   7 ,
theKey:
        DB 65, 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7
        DB 65, 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7
//  146                                                        'A', 'u', 'g', 'u', 's', 't',  0,   7,  'A', 'u', 'g', 'u', 's', 't',  0,   7 };
//  147 /******************************************************************************/
//  148 //#define atomicChange( idx, val ) ticks[idx]=val
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  150 BYTE nextKey[ AES_SIZE ];
nextKey:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  151 BYTE nextIV [ AES_SIZE ];
nextIV:
        DS 16
        REQUIRE __INIT_XDATA_Z
//  152 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  153 INT16 abs( INT16 a ) { return ( a > 0 ) ? a : -a; }
abs:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function abs
        ; Saved register size: 0
        ; Auto size: 0
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        LCALL   ??Subroutine0_0
??CrossCallReturnLabel_81:
        JC      ??abs_0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        SJMP    ??abs_1
??abs_0:
        CLR     C
        CLR     A
        SUBB    A,R2
        MOV     R0,A
        CLR     A
        SUBB    A,R3
??abs_1:
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        RET
        CFI EndBlock cfiBlock0
//  154 /******************************************************************************/
//  155 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  156 const BYTE the_frequency[3] = { 0x64, 0x6A, 0xAA };
the_frequency:
        DS 3
        REQUIRE `?<Initializer for the_frequency>`
        REQUIRE __INIT_XDATA_I

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  157 void def_freq(void){ mymemcpy( (BYTE *)0xDF09, (BYTE *)the_frequency, 3 ); }
def_freq:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function def_freq
        FUNCALL def_freq, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x3
        MOV     R4,#(the_frequency & 0xff)
        MOV     R5,#((the_frequency >> 8) & 0xff)
        MOV     R2,#0x9
        MOV     R3,#-0x21
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  158 void wdWork() { WDCTL = 0xA8;  WDCTL = 0x58; /* *((BYTE *)0xFFFF) = 0x10; */ } 
wdWork:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function wdWork
        ; Saved register size: 0
        ; Auto size: 0
        MOV     0xc9,#-0x58
        MOV     0xc9,#0x58
        RET
        CFI EndBlock cfiBlock2
        REQUIRE WDCTL
//  159 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  160 void setupRadioDR(BYTE dr, BYTE channel ){
setupRadioDR:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function setupRadioDR
        FUNCALL setupRadioDR, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRadioDR, radioConfigure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRadioDR, radioConfigure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        SJMP    ??setupRadioDR_0
//  161     //INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
//  162         while( *((BYTE *)0xF53A) == RADIO_MODE_TX) tickWait(1);            
??setupRadioDR_1:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x1
        LCALL   tickWait
??setupRadioDR_0:
        MOV     DPTR,#-0xac6
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      ??setupRadioDR_1
//  163         RFST = STROBE_IDLE; 
        MOV     0xe1,#0x4
//  164         *((BYTE *)0xF53A) = RADIO_MODE_UNDEF;            
        MOV     A,#-0x10
        MOVX    @DPTR,A
//  165         //si->radioMode = RADIO_MODE_UNDEF;            
//  166         S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
        ANL     0x9b,#0xfc
        MOV     A,0x9b
        ANL     0xe9,#0xef
        MOV     0x91,#0x10
//  167         if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??setupRadioDR_2
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??setupRadioDR_2
        ; Setup parameters for call to function radioConfigure
        MOV     R1,#0x19
        SJMP    ??setupRadioDR_3
//  168         else                                                  radioConfigure( dr ); 
??setupRadioDR_2:
        ; Setup parameters for call to function radioConfigure
        MOV     A,R6
        MOV     R1,A
??setupRadioDR_3:
        LCALL   radioConfigure
//  169         //radioConfigure( dr/*, _freq */); 
//  170         CHANNR = channel;      
        MOV     A,R7
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
//  171         if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??setupRadioDR_4
        MOV     DPTR,#(page + 193)
        SJMP    ??setupRadioDR_5
//  172         else                           PA_TABLE0 = page.radioPower;
??setupRadioDR_4:
        MOV     DPTR,#(page + 189)
??setupRadioDR_5:
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20d2
        MOVX    @DPTR,A
//  173         ADDR = page.edAddr;
        MOV     DPTR,#(page + 190)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fb
        MOVX    @DPTR,A
//  174         SYNC0 = page.syncword & 0xFF;  SYNC1 = ( page.syncword >> 8 ) & 0xFF;
        MOV     DPTR,#(page + 154)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20ff
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 155)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x2100
        MOVX    @DPTR,A
//  175         //RFST = STROBE_CAL; 
//  176         HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
        LJMP    ?Subroutine35
        CFI EndBlock cfiBlock3
        REQUIRE RFIM
        REQUIRE IEN2
        REQUIRE S1CON
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE RFST
        REQUIRE RFIF
//  177     //INT_GLOBAL_ENABLE( INT_ON );           // Enable interrupts globally
//  178 }
//  179 extern BOOL transfer;

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  180 void setupRadio( BYTE channel ){ 
setupRadio:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function setupRadio
        FUNCALL setupRadio, setupRadioDR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//  181     register BYTE dr = DATA_RATE_3_CC2511;
        MOV     R1,#0xc
//  182     if( page.is500Always ) dr = DATA_RATE_1_CC2511;
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??setupRadio_0
        MOV     R1,#0x32
//  183     setupRadioDR( dr, channel ); 
??setupRadio_0:
        ; Setup parameters for call to function setupRadioDR
        LCALL   setupRadioDR
//  184     //setupRadioDR( page.is500Always ? DATA_RATE_1_CC2511 : DATA_RATE_3_CC2511, channel ); 
//  185 }
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock4

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  186 void softKick(void){
softKick:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function softKick
        FUNCALL softKick, zerofill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, def_freq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, setupRadio
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, zerofill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, computeADCs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  187     //DMAARM = 0x83; RFST = STROBE_IDLE; 
//  188     //*((BYTE *)0xF53A) = RADIO_MODE_UNDEF; 
//  189     DMAARM = 0x83; 
        MOV     0xd6,#-0x7d
//  190     //si->radioMode = RADIO_MODE_UNDEF;            
//  191     zerofill( (BYTE *)&delta, 4 ); //delta = 0;     
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x4
        MOV     R2,#(delta & 0xff)
        MOV     R3,#((delta >> 8) & 0xff)
        LCALL   zerofill
//  192     FSCTRL0 = 0;      def_freq();
        CLR     A
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
        ; Setup parameters for call to function def_freq
        LCALL   def_freq
//  193     // loadKey( page.curKey );
//  194     //setupRadio( curChannel );        // global interrups are enabled inside setup radio
//  195     if( !page.is500Always ) curChannel = page.channel;
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??CrossCallReturnLabel_7
        MOV     DPTR,#(page + 164)
        LCALL   ??Subroutine6_0
//  196     setupRadio( curChannel );
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine13
//  197     //setupRadio( curChannel = ( page.is500Always ? curChannel : page.channel ) );        // global interrups are enabled inside setup radio
//  198     zerofill( (BYTE *)&utcLast, 6 ); //utcLast = 0; msLast = 0;
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x6
        MOV     R2,#(utcLast & 0xff)
        MOV     R3,#((utcLast >> 8) & 0xff)
        LCALL   zerofill
//  199     cmdCount = 0;
        MOV     DPTR,#cmdCount
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  200     computeADCs(TRUE);//( TRUE, FALSE );   // adjust quarz to temperature only if buffer is already full
        ; Setup parameters for call to function computeADCs
        MOV     R1,#0x1
        LCALL   computeADCs
//  201 //    ticks[ ReceiveData ] = 1;
//  202     *((INT16 *)0xF508) = 1;
        LCALL   ?Subroutine20
//  203 }
??CrossCallReturnLabel_37:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock5
        REQUIRE DMAARM
//  204 
//  205 inline void restoreRadio(){
//  206     //ticks[ ReceiveData ] = 1;
//  207     //HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
//  208     //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
//  209     //DMAARM = 0x83; RFST = STROBE_IDLE; 
//  210     //ticks[ ReceiveData ] = 1;
//  211     *((INT16 *)0xF508) = 1;
//  212 }
//  213 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  214 void setupRepeater( BOOL flag ){
setupRepeater:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function setupRepeater
        FUNCALL setupRepeater, setupRadioDR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRepeater, setupRadio
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  215   if( flag && (!page.is500Always) ){  
        MOV     A,R1
        JZ      ??setupRepeater_0
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??setupRepeater_0
//  216        setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel );  
        ; Setup parameters for call to function setupRadioDR
        MOV     DPTR,#(page + 192)
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x32
        LCALL   setupRadioDR
//  217        ADDR = page.gwAddr;  
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fb
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_19
//  218   }else setupRadio( curChannel );                    
??setupRepeater_0:
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine13
//  219 }
??CrossCallReturnLabel_19:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock6
//  220 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  221 void init(void){
init:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function init
        FUNCALL init, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, halWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, dmaRadioSetup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, def_freq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
//  222 //BYTE pin;
//  223 
//  224     P0DIR = 0;      // all port 0 pins are input
        MOV     0xfd,#0x0
//  225     // pins 7(oc) 6(ov) 4(on/off), 3(mpp), 1(LED), 0(mpp cycle) are for output
//  226 //    P1DIR = 0xDB;   // 1101 1011                                                  // commented to save space, done in ny-boot
//  227 
//  228     P0INP = 0xFF;   // all port 0 pins are tristate
        MOV     0x8f,#-0x1
//  229    
//  230     // 2 top pins are secial function - timer 3 channels
//  231 //    PERCFG  = 0x20; // Timer3 has alternate 2 location - P1_6 & P1_7              // commented to save space, done in ny-boot
//  232     ADCCFG  = 0xFF;
        MOV     0xf2,#-0x1
//  233     P0SEL   = 0;
        MOV     0xf3,#0x0
//  234 //    P1SEL   = 0xC0;                                                               // commented to save space, done in ny-boot
//  235     
//  236 //    P2SEL   = 0x20; // Timer3 has priority over USART1                            // commented to save space, done in ny-boot
//  237     //P2DIR   = 0x0F; P2_1 = 0; P2_2 = 0;
//  238 
//  239 //    T3CTL   = 0x50; // was 0x70, normal operation, mode - free running            // commented to save space, done in ny-boot
//  240 //    T3CCTL0 = 0x24; // clear output on compare up, set on 0, enabled              // commented to save space, done in ny-boot
//  241 //    T3CCTL1 = 0x24; // clear output on compare up, set on 0, enabled              // commented to save space, done in ny-boot
//  242     
//  243     //P1_3 = 1; //P1 |= 8;  // MPP ON
//  244     zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x12
        MOV     R2,#(adcsTemp & 0xff)
        MOV     R3,#((adcsTemp >> 8) & 0xff)
        LCALL   zerofill
//  245     //     LED down,  MPP off,  Off 
//  246     //P1 &= ~ ( 2 | 8 | 0x10 ); 
//  247     
//  248     // Choose the crystal oscillator as the system clock
//  249 //    halPowerClkMgmtSetMainClkSrc(CRYSTAL);
//  250     { BYTE counter = 127;
        MOV     R6,#0x7f
//  251       SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
        ANL     0xbe,#0xfb
        SJMP    ??init_0
//  252       while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
??init_1:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x2
        LCALL   halWait
??init_0:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.6
        JC      ??init_2
        MOV     A,R6
        DEC     R6
        JNZ     ??init_1
//  253       asm("NOP");
??init_2:
        NOP
//  254       //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
//  255       CLKCON = 0x89;  
        MOV     0xc6,#-0x77
//  256       SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
        ORL     0xbe,#0x4
//  257     }
//  258    
//  259     // Select frequency and data rate from LCD menu, then configure the radio
//  260     
//  261     // Configure interrupt for every time a packet is sent
//  262     //FSCTRL0 = 0;
//  263         
//  264     setup_hopper( page.channel );
        ; Setup parameters for call to function setup_hopper
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setup_hopper
//  265     dmaRadioSetup();
        ; Setup parameters for call to function dmaRadioSetup
        LCALL   dmaRadioSetup
//  266 
//  267     //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC setupFrequency();
//  268     def_freq();
        ; Setup parameters for call to function def_freq
        LCALL   def_freq
//  269     setupRadio( curChannel ); //page.is500Always? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine13
//  270     //__________________________________________________________________________
//  271    // Over Voltage     Over Current
//  272     
//  273     T3CC0 = page.ov;  T3CC1 = page.oc;    T3CTL |= 0x14;
??CrossCallReturnLabel_20:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     0xcd,A
        MOV     DPTR,#(page + 188)
        MOVX    A,@DPTR
        MOV     0xcf,A
        ORL     0xcb,#0x14
        MOV     A,0xcb
//  274     
//  275     HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
        SETB    0xb8.1
//  276     HAL_INT_ENABLE(INUM_ADC, INT_ON);    // enable ADC interrupt
        SETB    0xa8.1
//  277     HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
        LJMP    ?Subroutine35
        CFI EndBlock cfiBlock7
        REQUIRE P0INP
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE SLEEP
        REQUIRE CLKCON
        REQUIRE T3CTL
        REQUIRE T3CC0
        REQUIRE T3CC1
        REQUIRE ADCCFG
        REQUIRE P0SEL
        REQUIRE P0DIR
//  278     
//  279 //    initialize_ecc();
//  280 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond9) CFA_SP SP+-4
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setupRadio
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  281 /******************************************************************************/
//  282 //void ov_startup(void){ if( page.ov_startup ){ T3CC0 = page.ov_startup; atomicChange( OvStartup, TICKS_IN_SEC ); } P1_4 = 1; }
//  283 //void ov_startup(void){ if( page.ov_startup ){ T3CC0 = page.ov_startup; *((INT16 *)0xF51E) = TICKS_IN_SEC; } P1_4 = 1; }

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  284 void ov_startup(void){ if( page.ov_startup ){ T3CC0 = page.ov_startup<page.ov ? page.ov_startup : page.ov; *((INT16 *)0xF51E) = TICKS_IN_SEC; } P1_4 = 1; }
ov_startup:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function ov_startup
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#(page + 223)
        MOVX    A,@DPTR
        MOV     R2,A
        JZ      ??ov_startup_0
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        JNC     ??ov_startup_1
        MOV     A,R2
        SJMP    ??ov_startup_2
??ov_startup_1:
        MOV     A,R3
??ov_startup_2:
        MOV     R4,A
        MOV     0xcd,R4
        MOV     DPTR,#-0xae2
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
??ov_startup_0:
        SETB    0x90.4
        SJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock13
        REQUIRE _A_P1
        REQUIRE T3CC0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        MOVX    @DPTR,A
??Subroutine32_0:
        POP     DPH
        CFI CFA_SP SP+-3
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-2
        CFI DPL0 SameValue
        RET
        CFI EndBlock cfiBlock14
//  285 /******************************************************************************/
//  286 //INT16   last[ 8 ]; //Vout, lastPin, lastIout, lastGnd, lastRef, lastVin, lastTex, lastTin;

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  287 void read_page(void){
read_page:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function read_page
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  288     mymemcpy( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#-0xe
        MOV     R4,#0x0
        MOV     R5,#0x4
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  289     // mymemcpy( (BYTE *)&page, (BYTE *)0x5C00, PAGESIZE ); 
//  290     // if( ( page.barrier != 0xAAAA ) || ( page.post_barrier != 0x5555 ) ) 
//  291       // mymemcpy( (BYTE *)&page, (BYTE *)0x400, PAGESIZE ); 
//  292     //else 
//  293     //  page.imageAddr = *((INT16 *)0x4D4);
//  294     //if( page.barrier != UINT_BARRIER ){     // partial PB restoration goes here
//  295     if( ( page.barrier != 0xAAAA ) || ( page.post_barrier != 0x5555 ) ){
        MOV     DPTR,#page
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JNZ     ??read_page_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xaa
??read_page_0:
        JNZ     ??read_page_1
        MOV     DPTR,#(page + 240)
        MOVX    A,@DPTR
        XRL     A,#0x55
        JNZ     ??read_page_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x55
??read_page_2:
        JZ      ??read_page_3
//  296         BYTE *ptr = &page.repeaterPower;        *(++ptr) = 0x17;  // in 8b search become off - was 0x97
??read_page_1:
        MOV     A,#0x17
        MOV     DPTR,#(page + 194)
        MOVX    @DPTR,A
//  297         //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
//  298         page.post_barrier = 0x5555;
        MOV     DPTR,#(page + 240)
        MOV     A,#0x55
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  299         ptr = &page.starting500Channel;   *(++ptr) = 0x09;
        MOV     A,#0x9
        MOV     DPTR,#(page + 219)
        MOVX    @DPTR,A
//  300       
//  301         page.channel = 255; page.radioPower = 255;
        MOV     A,#-0x1
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 189)
        MOVX    @DPTR,A
//  302         //page.channel = 255; 
//  303         // page.channel, page.radioPower
//  304           
//  305         page.pureOffset = -265;
        MOV     DPTR,#(page + 198)
        MOV     A,#-0x9
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
//  306         page.edAddr = 2; page.gwAddr = 1; page.syncword = 0xF0F0;
        MOV     A,#0x2
        MOV     DPTR,#(page + 190)
        MOVX    @DPTR,A
        MOV     A,#0x1
        MOV     DPTR,#(page + 191)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 154)
        MOV     A,#-0x10
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  307         page.vin_limit = 0;
        CLR     A
        MOV     DPTR,#(page + 237)
        MOVX    @DPTR,A
//  308         mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x20
        MOV     R4,#(theKey & 0xff)
        MOV     R5,#((theKey >> 8) & 0xff)
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        LCALL   mymemcpy
//  309         mymemcpy( (BYTE *)&page,       (BYTE *)0x3D0,  12 );    // netid, bunch, mac
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0xc
        MOV     R4,#-0x30
        MOV     R5,#0x3
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  310         page.ov         = *((BYTE *)0x3DC);
        MOV     DPTR,#0x3dc
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 187)
        MOVX    @DPTR,A
//  311         page.oc         = *((BYTE *)0x3DD);
        MOV     DPTR,#0x3dd
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 188)
        MOVX    @DPTR,A
//  312         page.ov_startup = 100;//*((BYTE *)0x3DE);
        MOV     A,#0x64
        MOV     DPTR,#(page + 223)
        MOVX    @DPTR,A
//  313 //        page.ov_step    = 10; //*((BYTE *)0x3DF);
//  314 //        page.oc_step    = 10;
//  315     }
//  316 }
??read_page_3:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock15

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  317 BOOL checkItOut( BOOL *flag_ptr ){
checkItOut:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function checkItOut
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  318   if( *flag_ptr ){ *flag_ptr = FALSE; return TRUE; }
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??checkItOut_0
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
        SJMP    ??checkItOut_1
//  319   return FALSE;
??checkItOut_0:
        MOV     R1,#0x0
??checkItOut_1:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock16
//  320 }
//  321 /*
//  322 BYTE clearAndHop( BYTE p ){
//  323    clearThePage( p );
//  324    if( ticks[ Hop ] && page.hoppingAllowed && !page.is500Always ){
//  325        CHANNR = curChannel; hop(); curChannel = CHANNR; 
//  326        atomicChange( Hop, lastCycle ); //- _slot );  
//  327    }
//  328    return 1;
//  329 }
//  330 */
//  331 //UINT16 *ptr2RunningTick = NULL;
//  332 /*
//  333 UINT16 computeTI(UINT16 _pt)
//  334 { return ( ( _pt <= (*ptr2RunningTick) ) ? ((*ptr2RunningTick) - _pt) : ((*ptr2RunningTick) + (65535 - _pt)) ); } 
//  335 */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  336 void tickWait(BYTE wait){ 
tickWait:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function tickWait
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  337     /*ticks[ TickWait ] = ( (INT16)wait ) + 1;
//  338     while( ticks[ TickWait ] > 0 ) { P1_2 ^= 1; }
//  339     ticks[ TickWait ] = 0;*/
//  340 static INT16 *ticks = (INT16 *)0xF500; //si->ticks;
//  341     *((INT16 *)0xF51C) = ++wait;
        MOV     A,#0x1
        ADD     A,R1
        MOV     DPTR,#-0xae4
        LCALL   ??Subroutine20_0
//  342     while( 1 ){ if( ticks[ TickWait ] < 0 ) break; }
??CrossCallReturnLabel_38:
        MOV     DPTR,#??ticks
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     C
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_82:
        JNC     ??CrossCallReturnLabel_38
//  343     *((INT16 *)0xF51C) = 0;
        MOV     DPTR,#-0xae4
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LJMP    ?Subroutine32
        CFI EndBlock cfiBlock17
//  344 }

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??ticks:
        DS 2
        REQUIRE `?<Initializer for ticks>`
        REQUIRE __INIT_XDATA_I

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  345 BOOL dec( UINT16 *cntPtr ) { return ((*cntPtr) && (--(*cntPtr) == 0 ))?TRUE:FALSE; }
`dec`:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function `dec`
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??dec_0
        INC     DPTR
        MOVX    A,@DPTR
??dec_0:
        JZ      ??dec_1
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine5_0
??CrossCallReturnLabel_4:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??dec_2
        INC     DPTR
        MOVX    A,@DPTR
??dec_2:
        JNZ     ??dec_1
        MOV     R1,#0x1
        SJMP    ??dec_3
??dec_1:
        MOV     R1,#0x0
??dec_3:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock18
//  346 /******************************************************************************
//  347 * @fn  main
//  348 * @brief
//  349 *      Main function. Triggers setup menus and main loops for both receiver
//  350 *      and transmitter. This function supports both CC1110 and CC2510.
//  351 * Parameters:
//  352 * @param  void
//  353 * @return void
//  354 ******************************************************************************/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  355 static BOOL wasAHardResetOrPowerOn = TRUE;
wasAHardResetOrPowerOn:
        DS 1
        REQUIRE `?<Initializer for wasAHardResetOrPowerOn>`
        REQUIRE __INIT_XDATA_I

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  356 void main_loop(void){
main_loop:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function main_loop
        FUNCALL main_loop, prepareJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, parseGWPackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, hop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, hop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, prepareData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  357 BOOL  *flags = (BOOL *)0xF520;  //si->flags;
//  358 INT16 *ticks = (INT16 *)0xF500; //si->ticks;
//  359 BYTE idx; 
//  360     idx = N_Of_Flags; do{ 
        MOV     R6,#0x10
//  361         if( flags[ --idx ] ){
??main_loop_0:
        DEC     R6
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,#-0xb
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_1
//  362             flags[ idx ] = FALSE;
        CLR     A
        MOVX    @DPTR,A
//  363             switch( idx ){
        MOV     A,R6
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for main_loop>_0`:
        DATA
        DB        0
        DB        4
        DB        1
        DW        ??main_loop_2
        DB        2
        DW        ??main_loop_3
        DB        3
        DW        ??main_loop_4
        DB        9
        DW        ??main_loop_5
        DW        ??main_loop_1
        CODE
//  364                 case PrepareJoin:       prepareJoinRequest( );                  break;
??main_loop_4:
        ; Setup parameters for call to function prepareJoinRequest
        LCALL   prepareJoinRequest
        LJMP    ??main_loop_1
//  365                 case PackageReceived:
//  366                     //pt = (*ptr2RunningTick); //si->runningTick;   
//  367                     parseGWPackage();
??main_loop_2:
        ; Setup parameters for call to function parseGWPackage
        LCALL   parseGWPackage
        LJMP    ??main_loop_1
//  368                 break; // retransmitting slave package to gateway 
//  369                 case DataSent:
//  370                     //rc();
//  371                     //if( page.isRelay && (!page.is500Always) ) setupRepeater( got_gw );  
//  372                     //else                                      setupRepeater( FALSE ); 
//  373                     //receive(); 
//  374                     if( page.isRelay && (!page.is500Always) ){ setupRepeater( got_gw );  receive(); }
??main_loop_3:
        LCALL   ?Subroutine15
??CrossCallReturnLabel_24:
        JNZ     ??main_loop_6
        ; Setup parameters for call to function setupRepeater
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        MOV     R1,A
??main_loop_7:
        LCALL   ??Subroutine24_0
??CrossCallReturnLabel_49:
        LJMP    ??main_loop_1
//  375                     else if( was_listening )                 { setupRepeater( FALSE );   receive(); }
??main_loop_6:
        MOV     DPTR,#was_listening
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_1
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
        SJMP    ??main_loop_7
//  376                 break;
//  377                 case Cycle:
//  378                         if( got_gw )     got_gw--;
??main_loop_5:
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        JZ      ??main_loop_8
        DEC     A
        MOVX    @DPTR,A
//  379                         if( bunchCount ) bunchCount--;
??main_loop_8:
        MOV     DPTR,#bunchCount
        MOVX    A,@DPTR
        JZ      ??main_loop_9
        DEC     A
        MOVX    @DPTR,A
//  380                         //if( dec( &cycles2SoftKick )  ){ softKick();  cycles2SoftKick  = page.defCycles2SoftKick;  }
//  381                         if( 0 == --cycles2SoftKick ){ softKick();  cycles2SoftKick  = (BYTE)page.defCycles2SoftKick;  }
??main_loop_9:
        MOV     DPTR,#cycles2SoftKick
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_10
        ; Setup parameters for call to function softKick
        LCALL   softKick
        MOV     DPTR,#(page + 208)
        MOVX    A,@DPTR
        MOV     DPTR,#cycles2SoftKick
        MOVX    @DPTR,A
//  382 //                        if( dec( &cycles2HardKick ) && page.production ) reset();  // a reset
//  383 //                        if( dec( &cycles2HardKick ) ) reset();  // a reset
//  384 //                        if( 0 == --cycles2HardKick ) reset();
//  385                         if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
??main_loop_10:
        MOV     DPTR,#cyclesFromStart
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x33
        JC      ??main_loop_11
        CLR     A
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    @DPTR,A
        SJMP    ??main_loop_12
//  386                         if( (!wasAHardResetOrPowerOn) && page.searchCommunication ){
??main_loop_11:
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??main_loop_1
??main_loop_12:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      $+5
        LJMP    ??main_loop_1
//  387                             if( page.is500Always ){
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_loop_13
//  388 //                                if( dec( &cyclesTo10 ) ) { 
//  389                                 if( cyclesTo10 && ( 0 == --cyclesTo10 ) ){
        MOV     DPTR,#cyclesTo10
        MOVX    A,@DPTR
        JZ      ??main_loop_14
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_14
//  390                                     //cyclesTo500 = page.defCyclesTo500;  cycles2Step10Channel = page.defCyclesToStep10Channel;
//  391                                     cyclesTo500 = (BYTE)page.defCyclesTo500;  cycles2Step10Channel = (BYTE)page.defCyclesToStep10Channel;
        LCALL   ?Subroutine7
//  392                                     page.is500Always = FALSE; //cycles2Step10Channel = page.defCyclesToStep10Channel;
??CrossCallReturnLabel_11:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
        MOVX    @DPTR,A
//  393                                     setupRadio( curChannel = page.channel );
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
??main_loop_15:
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
??main_loop_16:
        MOV     R1,A
        LCALL   setupRadio
        LJMP    ??main_loop_1
//  394                                 //}else if( dec( &cyclesToStep500Channel ) ) { 
//  395                                 }else if( cyclesToStep500Channel && ( 0 == --cyclesToStep500Channel ) ) { 
??main_loop_14:
        MOV     DPTR,#cyclesToStep500Channel
        MOVX    A,@DPTR
        JZ      ??main_loop_1
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_1
//  396                                     //cyclesToStep500Channel = page.defCyclesToStep500Channel; 
//  397                                     cyclesToStep500Channel = (BYTE)page.defCyclesToStep500Channel;
        MOV     DPTR,#(page + 204)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesToStep500Channel
        MOVX    @DPTR,A
//  398                                     page.starting500Channel = curChannel = (curChannel + page.repStep) % 250;
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#(page + 222)
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#-0x6
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 218)
        SJMP    ??main_loop_15
//  399                                     setupRadio( curChannel );
//  400                                 }
//  401                             }else{
//  402 //                                if( dec( &cyclesTo500 ) ) { 
//  403                                 if( cyclesTo500 && ( 0 == --cyclesTo500 ) ) { 
??main_loop_13:
        MOV     DPTR,#cyclesTo500
        MOVX    A,@DPTR
        JZ      ??main_loop_17
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_17
//  404                                     //cyclesTo10 = page.defCyclesTo10;    cycles2Step10Channel = 0;
//  405                                     cyclesTo10 = (BYTE)page.defCyclesTo10;    cycles2Step10Channel = 0;
        MOV     DPTR,#(page + 202)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesTo10
        MOVX    @DPTR,A
        CLR     A
        MOV     DPTR,#cycles2Step10Channel
        MOVX    @DPTR,A
//  406                                     //page.is500Always = TRUE; cyclesToStep500Channel = page.defCyclesToStep500Channel; 
//  407                                     page.is500Always = TRUE; cyclesToStep500Channel = (BYTE)page.defCyclesToStep500Channel; 
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        LCALL   ?Subroutine17
//  408                                     if( page.starting500Channel == 0xFF ) page.starting500Channel = page.channel;
??CrossCallReturnLabel_30:
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??main_loop_18
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 218)
        MOVX    @DPTR,A
//  409                                     curChannel = page.starting500Channel;
??main_loop_18:
        LCALL   ??Subroutine6_0
//  410                                     //ticks[ Hop ] = 0;
//  411                                     *((INT16 *)0xF510) = 0;
??CrossCallReturnLabel_8:
        MOV     DPTR,#-0xaf0
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  412                                     setupRadio( curChannel );
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        SJMP    ??main_loop_16
//  413                                 //}else if( dec( &cycles2Step10Channel ) ){
//  414                                 }else if( cycles2Step10Channel && ( 0 == --cycles2Step10Channel ) ){
??main_loop_17:
        MOV     DPTR,#cycles2Step10Channel
        MOVX    A,@DPTR
        JZ      ??main_loop_1
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_1
//  415                                     CHANNR = curChannel; hop(); curChannel = CHANNR; 
        LCALL   ?Subroutine6
//  416                                     //cycles2Step10Channel = page.defCyclesToStep10Channel;
//  417                                     cycles2Step10Channel = (BYTE)page.defCyclesToStep10Channel;
??CrossCallReturnLabel_5:
        MOV     DPTR,#(page + 206)
        MOVX    A,@DPTR
        MOV     DPTR,#cycles2Step10Channel
        MOVX    @DPTR,A
//  418                                 }
//  419                             }
//  420                         }
//  421                 break;
//  422             } // switch
//  423         } // if( flags )
//  424     }while(idx);// after the whole for cycle
??main_loop_1:
        MOV     A,R6
        JZ      $+5
        LJMP    ??main_loop_0
//  425     //for( idx = 0; idx < N_Of_Ticks; idx++ )
//  426     idx = N_Of_Ticks; do{ 
        MOV     R6,#0x10
//  427         //INT_GLOBAL_ENABLE( INT_OFF ); 
//  428         if( ticks[ --idx ] < 0 ){
??main_loop_19:
        DEC     R6
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        ADDC    A,#-0xb
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     C
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_83:
        JC      $+5
        LJMP    ??main_loop_20
//  429             ticks[ idx ] = 0;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  430             //INT_GLOBAL_ENABLE( INT_ON ); 
//  431             switch( idx ){
        MOV     A,R6
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for main_loop>_1`:
        DATA
        DB        0
        DB        8
        DB        2
        DW        ??main_loop_21
        DB        3
        DW        ??main_loop_22
        DB        4
        DW        ??main_loop_23
        DB        8
        DW        ??main_loop_24
        DB        9
        DW        ??main_loop_25
        DB        11
        DW        ??main_loop_26
        DB        13
        DW        ??main_loop_27
        DB        15
        DW        ??main_loop_28
        DW        ??main_loop_20
        CODE
//  432                 //case Reset: reset();
//  433                 case FeedTheDog:    wdWork();      *((INT16 *)0xF504) = _dogFeeding; break;// ticks[ FeedTheDog ] = _dogFeeding; 
??main_loop_21:
        MOV     0xc9,#-0x58
        MOV     0xc9,#0x58
        MOV     DPTR,#-0xafc
        MOV     A,#0x7d
        LJMP    ??main_loop_29
//  434                 case SendData:          
//  435                     if( !bunchCount ) break;
??main_loop_22:
        MOV     DPTR,#bunchCount
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_20
//  436                     if( packagePrepared ){
        MOV     DPTR,#packagePrepared
        MOVX    A,@DPTR
        JZ      ??main_loop_30
//  437                         //if( reportScaling ){         reportScaling--; if( !reportScaling ) base_ptr = NULL; }
//  438                         if( isCalibrationPackage && reportScaling ){ isCalibrationPackage--; reportScaling--; if( !reportScaling ) base_ptr = NULL; }
        MOV     DPTR,#isCalibrationPackage
        MOVX    A,@DPTR
        JZ      ??main_loop_31
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      ??main_loop_31
        MOV     DPTR,#isCalibrationPackage
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_32
        MOV     DPTR,#base_ptr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??main_loop_33
//  439                         else if( reportFlashCheck )  reportFlashCheck--;
??main_loop_31:
        MOV     DPTR,#reportFlashCheck
        MOVX    A,@DPTR
        JZ      ??main_loop_32
        DEC     A
??main_loop_33:
        MOVX    @DPTR,A
//  440                         //was_listening = (si->radioMode == RADIO_MODE_RX);                        
//  441                         was_listening = ((*((BYTE *)0xF53A)) == RADIO_MODE_RX);   
??main_loop_32:
        MOV     DPTR,#-0xac6
        MOVX    A,@DPTR
        XRL     A,#0x20
        JNZ     ??main_loop_34
        MOV     R2,#0x1
        SJMP    ??main_loop_35
??main_loop_34:
        MOV     R2,#0x0
??main_loop_35:
        MOV     A,R2
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
//  442                         //P1_1 = 0;
//  443                         sendData( radioPktBufferTx, FALSE ); 
        ; Setup parameters for call to function sendData
        MOV     R1,#0x0
        MOV     R2,#(radioPktBufferTx & 0xff)
        MOV     R3,#((radioPktBufferTx >> 8) & 0xff)
        LCALL   sendData
        SJMP    ??main_loop_36
//  444                     }else *((BYTE *)0xF522) = 1; //flags[ DataSent ] = 1;
??main_loop_30:
        MOV     A,#0x1
        MOV     DPTR,#-0xade
        MOVX    @DPTR,A
//  445                     if( page.gbunch && ( ( page.gbunch <= 7 ) || ( page.rbunch <= 7 ) ) ){
??main_loop_36:
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     R2,A
        JNZ     $+5
        LJMP    ??main_loop_20
        MOV     DPTR,#(page + 157)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??main_loop_37
        MOV     A,R3
        CLR     C
        SUBB    A,#0x8
        JC      $+5
        LJMP    ??main_loop_20
//  446                         BYTE b; 
//  447                         if( page.rbunch && ( page.rbunch < page.gbunch ) ) b = page.rbunch; else b = page.gbunch;
??main_loop_37:
        MOV     A,R3
        JZ      ??main_loop_38
        CLR     C
        SUBB    A,R2
        JNC     ??main_loop_38
        MOV     ?V0 + 0,R3
        SJMP    ??main_loop_39
??main_loop_38:
        MOV     ?V0 + 0,R2
//  448                         if( b <= 7 ) *((INT16 *)0xF506) = lastCycle*b - 3; // atomicChange( SendData, lastCycle*b - 3 );
??main_loop_39:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      $+5
        LJMP    ??main_loop_20
        LCALL   ?Subroutine3
??CrossCallReturnLabel_90:
        MOV     A,#-0x3
        ADD     A,R0
        DEC     R0
        DEC     R0
        DEC     R0
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#-0xafa
??main_loop_40:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LJMP    ??main_loop_41
//  449                     }
//  450                     //atomicChange( CheckFlag, _slot );
//  451                 break;
//  452                 //case CheckFlag:         if( si->radioMode == RADIO_MODE_TX )  flags[ DataSent ] = TRUE; break;        
//  453                 case Hop: if( page.hoppingAllowed && !page.is500Always ){
??main_loop_24:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x50
        XRL     A,#0x10
        JNZ     ??main_loop_23
//  454                     //if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( Hop, 1 ); break; }
//  455                     if( (*((BYTE *)0xF53A)) == RADIO_MODE_TX  ) { *((INT16 *)0xF510) =  1; break; }
        MOV     DPTR,#-0xac6
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     ??main_loop_42
        MOV     DPTR,#-0xaf0
        MOV     A,#0x1
        LJMP    ??main_loop_29
//  456                     if( cyclesToHop-- ){ 
??main_loop_42:
        MOV     DPTR,#cyclesToHop
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x1
        ADD     A,R2
        MOVX    @DPTR,A
        MOV     A,R2
        JZ      ??main_loop_43
//  457                         CHANNR = curChannel; hop(); curChannel = CHANNR; 
        LCALL   ?Subroutine6
//  458                         //atomicChange( Hop, lastCycle - 10 ); //- _slot );  
//  459                         *((INT16 *)0xF510) = lastCycle - 10;
??CrossCallReturnLabel_6:
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#-0xa
        LCALL   ?Subroutine10
//  460 //                        ticks[ ReceiveData ] = 0;
//  461                         *((INT16 *)0xF508) = 0;
??CrossCallReturnLabel_73:
        MOV     DPTR,#-0xaf8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??main_loop_44
//  462                     } else   { curChannel = page.channel; CHANNR = curChannel; }
??main_loop_43:
        MOV     DPTR,#(page + 164)
        LCALL   ??Subroutine6_0
??CrossCallReturnLabel_9:
        MOV     DPTR,#-0x20fa
??main_loop_44:
        MOVX    @DPTR,A
//  463                 } // go through
//  464                 case ReceiveData: setupRepeater( FALSE );     receive();                      break;
??main_loop_23:
        ; Setup parameters for call to function setupRepeater
        LCALL   ?Subroutine24
??CrossCallReturnLabel_47:
        SJMP    ??main_loop_20
//  465 //                case Ms:   atomicChange( Ms, TICKS_IN_MS );                                   break;
//  466                 case Ms:  (*((INT16 *)0xF516)) = TICKS_IN_SEC; if( 0 == --cycles2HardKick ) reset(); break;// atomicChange( Ms, TICKS_IN_SEC ); 
??main_loop_26:
        MOV     DPTR,#-0xaea
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
        MOV     DPTR,#cycles2HardKick
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_20
        ; Setup parameters for call to function reset
        LCALL   reset
        SJMP    ??main_loop_20
//  467                 case Cycle: // kicking and search logic
//  468                     //atomicChange( Cycle, lastCycle ); 
//  469                     *((INT16 *)0xF512) = lastCycle;
??main_loop_25:
        LCALL   ?Subroutine8
//  470                     //atomicChange( ReceiveData, lastCycle - _slot - 25  );    
//  471                     *((INT16 *)0xF508) = lastCycle - _slot - 25;
??CrossCallReturnLabel_71:
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#-0x69
        LCALL   ?Subroutine11
//  472 //                    flags[ Cycle ] = TRUE;   
//  473                     *((BYTE *)0xF529) = 1;
??CrossCallReturnLabel_75:
        MOV     A,#0x1
        MOV     DPTR,#-0xad7
        SJMP    ??main_loop_41
//  474                 break;
//  475                 case DelayedPrepareData: { // here most of the time is spent
//  476                     //UINT16 ticks2Prepare = (*ptr2RunningTick); 
//  477                     prepareData(); 
??main_loop_27:
        ; Setup parameters for call to function prepareData
        LCALL   prepareData
//  478                     //ticks2Prepare = computeTI(ticks2Prepare); 
//  479                     //if( page.gbunch && ( page.gbunch <= 7 ) ) atomicChange( DelayedPrepareData, page.gbunch * lastCycle - 44 );
//  480                     if( page.gbunch && ( page.gbunch <= 7 ) ) *((INT16 *)0xF51A) = page.gbunch * lastCycle - 44;
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        JZ      ??main_loop_20
        CLR     C
        SUBB    A,#0x8
        JNC     ??main_loop_20
        LCALL   ?Subroutine3
??CrossCallReturnLabel_91:
        MOV     A,#-0x2c
        ADD     A,R0
        MOV     R0,A
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#-0xae6
        LJMP    ??main_loop_40
//  481                 }break;  
//  482                 case OvStartup:{
//  483                       register BOOL b = 0;
//  484                       //BYTE cnt = (T3CC0<page.ov)?(page.ov - T3CC0):0; if(cnt>10) cnt = 10;
//  485                       //T3CC0 += cnt;
//  486                       if( T3CC0 < page.ov ){ T3CC0 = T3CC0+1; b++; }
??main_loop_28:
        MOV     A,0xcd
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        CLR     C
        SUBB    A,R2
        JNC     ??main_loop_20
        INC     0xcd
        MOV     A,0xcd
//  487                       #ifdef MidString
//  488                           if( (((INT16)lastVals[ 2 ]) > 54 ) ){
//  489                                 if( T3CC1 < setOC ){ T3CC1 = T3CC1+1;  b++; }
//  490                           }else                      T3CC1 = 0;
//  491                       #endif
//  492                       if( b ) *((INT16 *)0xF51E) = TICKS_IN_SEC / 8; // atomicChange( OvStartup, TICKS_IN_SEC / 8 );
        MOV     DPTR,#-0xae2
        MOV     A,#-0x6
??main_loop_29:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
??main_loop_41:
        MOVX    @DPTR,A
//  493                 }break;
//  494             } // switch
//  495         }
//  496     }while( idx );// for idx
??main_loop_20:
        MOV     A,R6
        JZ      $+5
        LJMP    ??main_loop_19
//  497 }
        LJMP    ?Subroutine36
        CFI EndBlock cfiBlock19
        REQUIRE T3CC0
        REQUIRE WDCTL

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        ; Setup parameters for call to function hop
        ; Setup parameters for call to function hop
        LCALL   hop
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond23) CFA_SP SP+-4
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
??Subroutine6_0:
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,?V0 + 0
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        REQUIRE ?Subroutine34
        ; // Fall through to label ?Subroutine34

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
//  498 /** timer-based waits in quants equal 50 ms */
//  499 inline void longTickWait( BYTE q ){ while( q-- ) tickWait( 50*TICKS_IN_MS ); }
//  500 //void reset_kicks(){ mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); }
//  501 //void reset_kicks(){ mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); }
//  502 //void reset_kicks(){ mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 2 );  cycles2HardKick = 40; }

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  503 void reset_kicks(){ cycles2SoftKick = (BYTE)page.defCycles2SoftKick;  cycles2HardKick = (BYTE)page.defCycles2HardKick; }
reset_kicks:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function reset_kicks
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#(page + 208)
        MOVX    A,@DPTR
        MOV     DPTR,#cycles2SoftKick
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 210)
        MOVX    A,@DPTR
        MOV     DPTR,#cycles2HardKick
        LJMP    ?Subroutine32
        CFI EndBlock cfiBlock35

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  504 void main(void){
main:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function main
        FUNCALL main, read_page
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset_kicks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, main_loop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Auto size: 0
//  505     *((BYTE *)0xF53B) = 0x55;
        MOV     A,#0x55
        MOV     DPTR,#-0xac5
        MOVX    @DPTR,A
//  506 //    if( PARTNUM != 0x81 ) reset(); //{ WDCTL = 0x8 | 0x3; while( TRUE ) halWait( 10 ); } //a reset  
//  507     //WDCTL = 0xA8; WDCTL = 0x58;
//  508 //    *((BYTE *)0xFFFF) = 0x10; 
//  509     //si->armAdcs       = &armAdcs;
//  510     //si->readNextValue = &readNextValue;
//  511     *((INT16 *)0xF530) = (INT16) &armAdcs;
        MOV     DPTR,#-0xad0
        MOV     A,#(armAdcs & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((armAdcs >> 8) & 0xff)
        MOVX    @DPTR,A
//  512     *((INT16 *)0xF532) = (INT16) &readNextValue;
        MOV     DPTR,#-0xace
        MOV     A,#(readNextValue & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((readNextValue >> 8) & 0xff)
        MOVX    @DPTR,A
//  513     //si->mppCycle      = _mppCycle; // not necessary because 8k image cannot be changed and it will stay the same as boot sector
//  514 //    *((INT16 *)0xF55B) = _mppCycle;   // it is already done in boot sector
//  515     *((BOOL  *)0xF537) = 1;   //si->adcEnabled    = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#-0xac9
        MOVX    @DPTR,A
//  516 //    flags = (BOOL *)0xF520;  //si->flags;
//  517 //    ticks = (INT16 *)0xF500; //si->ticks;
//  518     //ptr2RunningTick = & (si->runningTick);
//  519     
//  520     //unnecessary if da_boot is right
//  521     //SET_WORD(T1CC0H, T1CC0L, 600 - 1); // 300 - 1    
//  522     
//  523     resetReason = (SLEEP & 0x18)>>3;
        MOV     A,#0x18
        ANL     A,0xbe
        CLR     C
        RRC     A
        RRC     A
        RRC     A
        MOV     DPTR,#resetReason
        MOVX    @DPTR,A
//  524       
//  525     read_page();
        ; Setup parameters for call to function read_page
        LCALL   read_page
//  526     
//  527     reset_kicks();
        ; Setup parameters for call to function reset_kicks
        LCALL   reset_kicks
//  528     curChannel  = page.is500Always ? page.starting500Channel : page.channel; 
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_0
        MOV     DPTR,#(page + 218)
        SJMP    ??main_1
??main_0:
        MOV     DPTR,#(page + 164)
??main_1:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
//  529     search_stat = page.searchCommunication; 
        LCALL   ?Subroutine14
//  530     //init();
//  531 
//  532 //    P1_4 = 1;  P1_3 = 1; // MPP always on
//  533     P1_4 = page.module;  P1_3 = page.mpp; 
??CrossCallReturnLabel_22:
        MOV     DPTR,#(page + 186)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.4,C
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.3,C
//  534     if( resetReason  == 2 ){ setOC = page.oc; T3CC0 = page.ov; }
        MOV     DPTR,#(page + 188)
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#resetReason
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??main_2
        MOV     A,R2
        MOV     DPTR,#setOC
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     0xcd,A
        SJMP    ??main_3
//  535     else                   {
//  536             #ifdef MidString
//  537                 T3CC1 = 0; setOC = page.oc;  
//  538             #else    
//  539                 T3CC1 = page.oc; 
??main_2:
        MOV     0xcf,R2
//  540             #endif
//  541 //            ov_startup();
//  542             if( P1_4 ) ov_startup();
        MOV     C,0x90.4
        JNC     ??main_3
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
//  543     }
//  544     init();
??main_3:
        ; Setup parameters for call to function init
        LCALL   init
//  545     //ticks[ MppCycle ]    = _mppCycle;   // 62.5 ms
//  546 //    ticks[ Ms       ]    = TICKS_IN_MS;
//  547     *((INT16 *)0xF516) = TICKS_IN_SEC;
        MOV     DPTR,#-0xaea
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  548 //    ticks[ ReceiveData ] = TICKS_IN_MS;    
//  549     *((INT16 *)0xF508) = TICKS_IN_MS;
        MOV     DPTR,#-0xaf8
        MOV     A,#0x2
        LCALL   ??Subroutine20_0
//  550     //ticks[ FeedTheDog ]  = _dogFeeding; 
//  551     *((INT16 *)0xF504) = _dogFeeding;
??CrossCallReturnLabel_39:
        MOV     DPTR,#-0xafc
        MOV     A,#0x7d
        LCALL   ??Subroutine20_0
//  552     //ticks[ Cycle ]       = lastCycle;
//  553     *((INT16 *)0xF512) = lastCycle;
??CrossCallReturnLabel_40:
        LCALL   ?Subroutine8
//  554 
//  555     loadKey( page.curKey ); 
??CrossCallReturnLabel_72:
        ; Setup parameters for call to function load
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        MOV     R1,#0x4
        LCALL   ??Subroutine25_0
//  556     RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
??CrossCallReturnLabel_53:
        LCALL   ?Subroutine16
//  557 
//  558     //longTickWait( 20 );
//  559     longTickWait( 10 );
??CrossCallReturnLabel_28:
        MOV     R6,#0xa
        SJMP    ??main_4
??main_5:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x64
        LCALL   tickWait
??main_4:
        MOV     A,R6
        DEC     R6
        JNZ     ??main_5
//  560     softKick();
        ; Setup parameters for call to function softKick
        LCALL   softKick
//  561     
//  562     for(;;){
//  563         if( *((BYTE *)0xF53B) != 0x55 ) reset(); 
??main_6:
        MOV     DPTR,#-0xac5
        MOVX    A,@DPTR
        XRL     A,#0x55
        JZ      ??main_7
        ; Setup parameters for call to function reset
        LCALL   reset
//  564         if( PARTNUM != 0x81 ) reset(); //{ WDCTL = 0x8 | 0x3; while( TRUE ) halWait( 10 ); } //a reset  
??main_7:
        MOV     DPTR,#-0x20ca
        MOVX    A,@DPTR
        XRL     A,#0x81
        JZ      ??main_8
        ; Setup parameters for call to function reset
        LCALL   reset
//  565         main_loop(); 
??main_8:
        ; Setup parameters for call to function main_loop
        LCALL   main_loop
//  566         if( lastCycle > (840*TICKS_IN_MS) ) lastCycle = 840*TICKS_IN_MS;
        MOV     DPTR,#lastCycle
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x6f
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x6
        JC      ??main_6
        MOV     DPTR,#lastCycle
        MOV     A,#-0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??main_6
        CFI EndBlock cfiBlock36
        REQUIRE _A_P1
        REQUIRE RNDL
        REQUIRE SLEEP
        REQUIRE T3CC0
        REQUIRE T3CC1
//  567         //if( cycles2HardKick > 400 )         cycles2HardKick = 400;
//  568     }
//  569 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_72
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#-0xaee
        LJMP    ?Subroutine31
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
//  570 /*==== PRIVATE FUNCTIONS =====================================================*/
//  571 /******************************************************************************
//  572 * Work with watchdogs and LED's
//  573 ******************************************************************************/
//  574 //void feedTheDog(void){ WDCTL = 0xA8;  WDCTL = 0x58; }
//  575 /******************************************************************************
//  576 * initiate reading of adc channels
//  577 ******************************************************************************/
//  578 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  579 void armAdcs(void){  
armAdcs:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function armAdcs
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  580     adcCount = 0;
        CLR     A
        MOV     DPTR,#adcCount
        MOVX    @DPTR,A
//  581     //si->inCurCycle++; 
//  582     (*((BYTE *)0xF536))++;
        MOV     DPTR,#-0xaca
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  583     //if( si->inCurCycle < 4 ) ticks[ AdcMeasurement ] = _adcMeasurement;  // 5ms
//  584     if( *((BYTE *)0xF536) < 4 ) *((INT16 *)0xF502) = _adcMeasurement;  //ticks[ AdcMeasurement ] = _adcMeasurement;  // 5ms
        CLR     C
        SUBB    A,#0x4
        JNC     ??CrossCallReturnLabel_41
        MOV     DPTR,#-0xafe
        MOV     A,#0x14
        LCALL   ??Subroutine20_0
//  585     ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
??CrossCallReturnLabel_41:
        MOV     DPTR,#adcCount
        LCALL   ?Subroutine9
//  586 }
??CrossCallReturnLabel_13:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock40
        REQUIRE ADCCON3
//  587 /******************************************************************************
//  588 * Read ADC's once into buffer
//  589 ******************************************************************************/
//  590 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  591 void readNextValue(void){
readNextValue:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function readNextValue
        FUNCALL readNextValue, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL readNextValue, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  592 INT16 value;
//  593     ADC_GET_VALUE( value ); value+=200; value >>= 4; //6
        MOV     A,0xbb
        MOV     R1,A
        MOV     A,0xba
        MOV     R0,A
        MOV     A,#-0x38
        ADD     A,R0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  594     if( adcCount == 0xFF ){ adcCount = 0; return; }
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??readNextValue_0
??readNextValue_1:
        CLR     A
        MOV     DPTR,#adcCount
        MOVX    @DPTR,A
??readNextValue_2:
        LJMP    ?Subroutine36
//  595     adcsTemp[ adcCount++ ] += value;
??readNextValue_0:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1
        ADD     A,R2
        MOVX    @DPTR,A
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,R2
        ADD     A,#(adcsTemp & 0xff)
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#((adcsTemp >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
//  596 
//  597     if( adcCount < N_CHANNELS ){
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x9
        JNC     ??readNextValue_3
//  598         ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
        LCALL   ?Subroutine9
??CrossCallReturnLabel_14:
        SJMP    ??readNextValue_2
//  599     }else{
//  600         if( ++tempAdcsCount > 7 ){  // >= 8
??readNextValue_3:
        MOV     DPTR,#tempAdcsCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x8
        JC      ??readNextValue_1
//  601             mymemcpy( (BYTE *)lastVals, (BYTE *)adcsTemp, N_CHANNELS*2 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x12
        MOV     R4,#(adcsTemp & 0xff)
        MOV     R5,#((adcsTemp >> 8) & 0xff)
        MOV     R2,#(lastVals & 0xff)
        MOV     R3,#((lastVals >> 8) & 0xff)
        LCALL   mymemcpy
//  602             zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );    tempAdcsCount = 0;
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x12
        MOV     R2,#(adcsTemp & 0xff)
        MOV     R3,#((adcsTemp >> 8) & 0xff)
        LCALL   zerofill
        CLR     A
        MOVX    @DPTR,A
//  603             if( ++bufferCount == BUFFER_SIZE ){ enable2SendData = TRUE; bufferCount = 0; }
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        XRL     A,#0x8
        JNZ     ??readNextValue_1
        MOV     A,#0x1
        MOV     DPTR,#enable2SendData
        MOVX    @DPTR,A
        CLR     A
        MOV     DPTR,#bufferCount
        MOVX    @DPTR,A
        SJMP    ??readNextValue_1
        CFI EndBlock cfiBlock41
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH
//  604         }
//  605         adcCount = 0;
//  606     }
//  607 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOVX    A,@DPTR
        ADD     A,#(adcChannels & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((adcChannels >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xb6,A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
//  608 //________________________________________________________________________________

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  609 void prepareTxBuffer(){
prepareTxBuffer:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function prepareTxBuffer
        FUNCALL prepareTxBuffer, load
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, wait_aes
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, `code`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, `code`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  610      loadIV( page.curIV );  
        ; Setup parameters for call to function load
        LCALL   ?Subroutine25
//  611      encode( (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2)    );
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function code
        MOV     R4,#((radioPktBufferTx + 2) & 0xff)
        MOV     R5,#(((radioPktBufferTx + 2) >> 8) & 0xff)
        MOV     R2,#(radioPktBuffer & 0xff)
        MOV     R3,#((radioPktBuffer >> 8) & 0xff)
        MOV     R1,#0x0
        LCALL   `code`
//  612      encode( (char *)(radioPktBuffer+16), (char *)(radioPktBufferTx+18)    );
        ; Setup parameters for call to function code
        MOV     R4,#((radioPktBufferTx + 18) & 0xff)
        MOV     R5,#(((radioPktBufferTx + 18) >> 8) & 0xff)
        MOV     R2,#((radioPktBuffer + 16) & 0xff)
        MOV     R3,#(((radioPktBuffer + 16) >> 8) & 0xff)
        MOV     R1,#0x0
        LCALL   `code`
//  613      radioPktBufferTx[0] = PACKET_LENGTH;               // Length byte
        MOV     A,#0x22
        MOV     DPTR,#radioPktBufferTx
        MOVX    @DPTR,A
//  614      radioPktBufferTx[1] = page.gwAddr;                 // GW address
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBufferTx + 1)
        MOVX    @DPTR,A
//  615      packagePrepared = TRUE;  
        MOV     A,#0x1
        MOV     DPTR,#packagePrepared
        LJMP    ?Subroutine32
        CFI EndBlock cfiBlock45
//  616 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        MOV     R1,#0x6
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_53
??Subroutine25_0:
        LCALL   load
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        LCALL   wait_aes
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48
        CFI EndBlock cfiCond49
//  617 //________________________________________________________________________________

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  618 void copyMac( BYTE *ptr) { mymemcpy( ptr, page.myMac, 6); }
copyMac:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function copyMac
        FUNCALL copyMac, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#((page + 6) & 0xff)
        MOV     R5,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiBlock50
//  619 //#define copyMac( ptr ) mymemcpy( (BYTE *)ptr, page.myMac, 6); 
//  620 /******************************************************************************
//  621 * Prepare data - average the round robin buffer into 10 values
//  622 ******************************************************************************/
//  623 //extern BYTE ErrorLocs[];

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  624 void prepareData(void){ 
prepareData:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function prepareData
        FUNCALL prepareData, prepareScaling
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, prepareFlashCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, computeADCs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, copyMac
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, prepareTxBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
//  625   isCalibrationPackage = FALSE;
        CLR     A
        MOV     DPTR,#isCalibrationPackage
        MOVX    @DPTR,A
//  626   //if(      reportScaling    ) prepareScaling();
//  627   if(      reportScaling    ){ prepareScaling();   isCalibrationPackage = TRUE;  }
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      ??prepareData_0
        ; Setup parameters for call to function prepareScaling
        LCALL   prepareScaling
        MOV     A,#0x1
        MOV     DPTR,#isCalibrationPackage
        LJMP    ??prepareData_1
//  628   else if( reportFlashCheck ) prepareFlashCheck();
??prepareData_0:
        MOV     DPTR,#reportFlashCheck
        MOVX    A,@DPTR
        JZ      ??prepareData_2
        ; Setup parameters for call to function prepareFlashCheck
        LCALL   prepareFlashCheck
        LJMP    ??prepareData_3
//  629   else if( enable2SendData  ){
??prepareData_2:
        MOV     DPTR,#enable2SendData
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??prepareData_4
//  630       BYTE *ptr  = radioPktBuffer;
//  631       UINT16 value = 30; 
        MOV     R6,#0x1e
        MOV     R7,#0x0
//  632       computeADCs( FALSE ); 
        ; Setup parameters for call to function computeADCs
        MOV     R1,#0x0
        LCALL   computeADCs
//  633       // Insert the 6 byte timestamp into a static packet buffer
//  634       //zerofill( radioPktBuffer, 4 );
//  635       (*(UINT16 *)radioPktBuffer ) = lastVals[ REF ];
        MOV     DPTR,#(lastVals + 16)
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#radioPktBuffer
        LCALL   ?Subroutine31
//  636       *((UINT16 *)ptr) = lastVals[ REF ];
??CrossCallReturnLabel_66:
        MOV     DPTR,#radioPktBuffer
        LCALL   ?Subroutine31
//  637       ptr +=4;  // do not use UTC
//  638       *ptr++ = (BYTE)CHANNR;
??CrossCallReturnLabel_67:
        MOV     DPTR,#-0x20fa
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 4)
        MOVX    @DPTR,A
//  639       *ptr++ = ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );    // 0 is the tag - 2 lower bytes
        MOV     A,#0x18
        ANL     A,0x90
        CLR     C
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ORL     A,R2
        RLC     A
        RLC     A
        ANL     A,#0xfc
        LCALL   ?Subroutine22
//  640       copyMac( ptr );   ptr += 6;                  // mac   
//  641       mymemcpy( ptr, (BYTE *)lastVals, 16 );
??CrossCallReturnLabel_45:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(lastVals & 0xff)
        MOV     R5,#((lastVals >> 8) & 0xff)
        MOV     R2,#((radioPktBuffer + 12) & 0xff)
        MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
        LCALL   mymemcpy
//  642       if( page.is500Always )             value += 2 + ((UINT16)CHANNR)*100;
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??prepareData_5
        MOV     DPTR,#-0x20fa
        LCALL   ?Subroutine18
??CrossCallReturnLabel_32:
        MOV     A,#0x20
        SJMP    ??prepareData_6
//  643       else if( page.isRelay  )           value += 1 + page.repeaterChannel*100;
??prepareData_5:
        MOV     C,0xE0 /* A   */.5
        JNC     ??prepareData_7
        MOV     DPTR,#(page + 192)
        LCALL   ?Subroutine18
??CrossCallReturnLabel_33:
        MOV     A,#0x1f
??prepareData_6:
        ADD     A,R0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  644       if( page.searchCommunication )     value += 4;
??prepareData_7:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??prepareData_8
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  645       if( page.use250kbod )              value += 8;
??prepareData_8:
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??prepareData_9
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  646       //mymemcpy( ptr+14, (BYTE *)value, 2 );
//  647       *((INT16 *)(ptr+14)) = value;
??prepareData_9:
        MOV     DPTR,#(radioPktBuffer + 26)
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  648       ptr += 16;
//  649       *ptr++ = lastRssi ? ((BYTE) theRealOffset) : 0x7F;
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        JZ      ??prepareData_10
        MOV     DPTR,#theRealOffset
        MOVX    A,@DPTR
        MOV     R2,A
        SJMP    ??prepareData_11
??prepareData_10:
        MOV     R2,#0x7f
??prepareData_11:
        MOV     A,R2
        MOV     DPTR,#(radioPktBuffer + 28)
        MOVX    @DPTR,A
//  650       *ptr++ = (BYTE) ( lastRssi );    // 29
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 29)
        MOVX    @DPTR,A
//  651       *ptr++ = (BYTE)   T3CC0;          
        MOV     A,0xcd
        MOV     DPTR,#(radioPktBuffer + 30)
        MOVX    @DPTR,A
//  652       *ptr++ = (BYTE)   T3CC1;// timer2oc( T3CC1 ); //T3CC1;         // 30 & 31
        MOV     A,0xcf
        MOV     DPTR,#(radioPktBuffer + 31)
??prepareData_1:
        MOVX    @DPTR,A
//  653   }else return;
//  654   prepareTxBuffer();      
??prepareData_3:
        ; Setup parameters for call to function prepareTxBuffer
        LCALL   prepareTxBuffer
//  655 }
??prepareData_4:
        SJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock51
        REQUIRE _A_P1
        REQUIRE T3CC0
        REQUIRE T3CC1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
//  656 /******************************************************************************
//  657 * Prepare scaling coeff to send
//  658 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  659 void prepareSpecial( BYTE tag, BYTE *p ){
prepareSpecial:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function prepareSpecial
        FUNCALL prepareSpecial, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareSpecial, copyMac
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareSpecial, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  660 BYTE *ptr = radioPktBuffer;
//  661     mymemcpy( ptr,    p,   4 ); ptr+=4;
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#(radioPktBuffer & 0xff)
        MOV     R3,#((radioPktBuffer >> 8) & 0xff)
        LCALL   mymemcpy
//  662     *ptr++ = tag;
        MOV     A,?V0 + 0
        MOV     DPTR,#(radioPktBuffer + 4)
        MOVX    @DPTR,A
//  663     *ptr++ = 3 | (page.netId << 2);
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        ANL     A,#0xfc
        ORL     A,#0x3
        LCALL   ?Subroutine22
//  664     copyMac( ptr ); 
//  665     mymemcpy( ptr+6, p+4, 20 );
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x14
        MOV     A,R6
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#((radioPktBuffer + 12) & 0xff)
        MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
        LCALL   mymemcpy
//  666 }
        SJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock55

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        ORL     0x9a,#0x1
??Subroutine35_0:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock56

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     DPTR,#(radioPktBuffer + 5)
        MOVX    @DPTR,A
        ; Setup parameters for call to function copyMac
        ; Setup parameters for call to function copyMac
        MOV     R2,#((radioPktBuffer + 6) & 0xff)
        MOV     R3,#(((radioPktBuffer + 6) >> 8) & 0xff)
        LCALL   copyMac
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
//  667 //________________________________________________________________________________

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  668 void prepareFlashCheck(void){
prepareFlashCheck:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function prepareFlashCheck
        FUNCALL prepareFlashCheck, prepareSpecial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  669 BYTE arr[ 20 ];
//  670 BYTE k = (reportFlashCheck-1) / calibrationRepeat ;
        MOV     DPTR,#reportFlashCheck
        LCALL   ?Subroutine4
??CrossCallReturnLabel_0:
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     ?V0 + 2,A
//  671 //BYTE *flashPtr = (BYTE *)( page.imageAddr & 0xFF00 ) + ( /*(reportFlashCheck-1) / calibrationRepeat*/ k ) * 0xA00; //24 * 8 * 16;
//  672 BYTE *flashPtr = (BYTE *)( 0x800 ) + k * 0xC00; //24 * 8 * 16;
        MOV     B,#0xc
        MUL     AB
        MOV     R2,A
        CLR     A
        ADD     A,R2
        MOV     R2,#0x0
        ADDC    A,#0x8
        MOV     R3,A
//  673 BYTE bytes, bits, cnt;
//  674     for( bytes = 0; bytes < 24; bytes++ ){
        MOV     R6,#0x0
//  675         arr[ bytes ] = 0xFF;
??prepareFlashCheck_0:
        MOV     ?V0 + 0,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#-0x1
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  676         for( bits = 0; bits < 8; bits++ ){
        MOV     R7,#0x0
//  677             cnt = 16; do { if( flashPtr[--cnt] != 0xFF ){ arr[ bytes ] ^= ( 1 << bits );  break; } }while( cnt );
??prepareFlashCheck_1:
        MOV     R0,#0x10
??prepareFlashCheck_2:
        DEC     R0
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??prepareFlashCheck_3
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,R7
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        MOVX    @DPTR,A
        SJMP    ??prepareFlashCheck_4
??prepareFlashCheck_3:
        MOV     A,R0
        JNZ     ??prepareFlashCheck_2
//  678             flashPtr += 16;
??prepareFlashCheck_4:
        MOV     A,R2
        ADD     A,#0x10
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
//  679         }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x8
        JC      ??prepareFlashCheck_1
//  680     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x18
        JC      ??prepareFlashCheck_0
//  681     prepareSpecial( 0xF8 + ( /* (reportFlashCheck-1) / calibrationRepeat */ k ), arr );
        ; Setup parameters for call to function prepareSpecial
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,#-0x8
        ADD     A,?V0 + 2
        MOV     R1,A
        LCALL   prepareSpecial
//  682 }
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x3
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock60
//  683 //________________________________________________________________________________

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  684 void prepareScaling(void){ 
prepareScaling:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function prepareScaling
        FUNCALL prepareScaling, prepareSpecial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
//  685 BYTE k = (reportScaling-1) / calibrationRepeat;
        MOV     DPTR,#reportScaling
        LCALL   ?Subroutine4
??CrossCallReturnLabel_1:
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     R4,A
//  686     page.prepAddr = (UINT16)(&prepareScaling);
        MOV     DPTR,#(page + 220)
        MOV     A,#(prepareScaling & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((prepareScaling >> 8) & 0xff)
        MOVX    @DPTR,A
//  687     prepareSpecial( 0xED + k, base_ptr + k * 24 ); 
        ; Setup parameters for call to function prepareSpecial
        MOV     A,R4
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#-0x13
        ADD     A,R4
        MOV     R1,A
        LCALL   prepareSpecial
//  688 }
        LJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock61

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R0
        MOV     A,#-0x1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64
//  689 /******************************************************************************
//  690 * Prepare request to join network
//  691 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  692 void prepareJoinRequest(void){  // need to be changed drastically
prepareJoinRequest:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function prepareJoinRequest
        FUNCALL prepareJoinRequest, copyMac
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareJoinRequest, prepareTxBuffer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  693 BYTE *ptr  = radioPktBuffer;
//  694 //register BYTE i = 4; do{ ptr[--i] = 0xFF; }while( i );
//  695     *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF;
        MOV     A,#-0x1
        MOV     DPTR,#radioPktBuffer
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 1)
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 3)
        MOVX    @DPTR,A
//  696     //mymemset( ptr, 0xFF, 4); 
//  697     //mymemcpy( ptr, (BYTE *)&utc, 6 ); 
//  698     copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6 );
        ; Setup parameters for call to function copyMac
        MOV     R2,#((radioPktBuffer + 10) & 0xff)
        MOV     R3,#(((radioPktBuffer + 10) >> 8) & 0xff)
        LCALL   copyMac
//  699     prepareTxBuffer();   
        ; Setup parameters for call to function prepareTxBuffer
        LCALL   prepareTxBuffer
//  700     radioPktBufferTx[0] = PACKET_LENGTH_GW_2;
        MOV     A,#0x12
        MOV     DPTR,#radioPktBufferTx
        LJMP    ?Subroutine32
        CFI EndBlock cfiBlock65
//  701 }
//  702 /******************************************************************************
//  703 * Send the previously prepared data package
//  704 ******************************************************************************/
//  705 extern DMA_DESC dmaConfig[3]; 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  706 void sendData(BYTE *buffer, BOOL isRepeater ){  
sendData:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function sendData
        FUNCALL sendData, setupRepeater
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  707     if( txDisabled ) return;
        MOV     DPTR,#txDisabled
        MOVX    A,@DPTR
        JNZ     ??sendData_0
//  708     RFST = STROBE_IDLE; 
        MOV     0xe1,#0x4
//  709     //setupTxBuffer( buffer );
//  710     SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, buffer );
        MOV     A,R3
        MOV     DPTR,#(dmaConfig + 8)
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#(dmaConfig + 9)
        MOVX    @DPTR,A
//  711     setupRepeater( isRepeater );
        ; Setup parameters for call to function setupRepeater
        LCALL   setupRepeater
//  712     //INT_GLOBAL_ENABLE(INT_OFF); 
//  713         //si->radioMode = RADIO_MODE_TX;  
//  714         *((BYTE *)0xF53A) = RADIO_MODE_TX;  
        MOV     A,#0x10
        MOV     DPTR,#-0xac6
        MOVX    @DPTR,A
//  715         // Send the packet
//  716         DMAARM = DMAARM_CHANNEL1;      // Arm DMA channel 1
        MOV     0xd6,#0x2
//  717         //quartz();
//  718         RFST   = STROBE_TX;            // Switch radio to TX
        MOV     0xe1,#0x3
//  719     //INT_GLOBAL_ENABLE(INT_ON); 
//  720 }
??sendData_0:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock66
        REQUIRE DMAARM
        REQUIRE RFST
//  721 #define NDEV_MASK   0x1F
//  722 #define JOIN_MASK   0x80
//  723 #define HOP_MASK    0x40

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  724 static UINT32 utcLocal;// = 0;
utcLocal:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  725 static UINT16 msLocal; // = 0;
msLocal:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  726 extern INT16  perRssiOffset;
//  727 /******************************************************************************
//  728 * @fn  parseGWPackage
//  729 * @brief       This function makes appropriate actions after receiving message from Gateway
//  730 * Parameters:
//  731 * @return void
//  732 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  733 void parseGWPackage(void){
parseGWPackage:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function parseGWPackage
        FUNCALL parseGWPackage, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, reset_kicks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, parseCommands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 56)
//  734 BYTE bunch;//, plen;//, lqi;
//  735 INT8 o = FREQEST, sh = FSCTRL0;
        MOV     DPTR,#-0x20c8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     DPTR,#-0x20f8
        MOVX    A,@DPTR
        MOV     R6,A
//  736 INT16 shift, _lastRssi = 0;
//  737 BYTE tmp = RSSI;
        MOV     DPTR,#-0x20c6
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  738 BYTE ndev = 0, plen;
//  739 BYTE buff[ PACKET_LENGTH + 3 ];
//  740 BOOL goodForCommands = (PKTSTATUS&0x80); //FALSE;
        MOV     DPTR,#-0x20c4
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOV     ?V0 + 2,A
//  741     //rc();
//  742     plen = radioPktBufferRx[0]; 
        MOV     DPTR,#radioPktBufferRx
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  743     if( page.isRelay && (!page.is500Always) && ( radioPktBufferRx[1] == page.gwAddr ) && (ADDR == page.gwAddr) ){
        MOV     DPTR,#(radioPktBufferRx + 1)
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine15
??CrossCallReturnLabel_25:
        JNZ     ??parseGWPackage_0
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     R3,A
        XRL     A,R2
        JNZ     ??parseGWPackage_0
        MOV     DPTR,#-0x20fb
        MOVX    A,@DPTR
        XRL     A,R3
        JNZ     ??parseGWPackage_0
//  744         //sendData( radioPktBufferRx, FALSE );  return;
//  745         if( goodForCommands ) sendData( radioPktBufferRx, FALSE );  
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_50
        ; Setup parameters for call to function sendData
        MOV     R1,#0x0
        MOV     R2,#(radioPktBufferRx & 0xff)
        MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
        LCALL   sendData
        LJMP    ??CrossCallReturnLabel_50
//  746         return;
//  747     }else if( radioPktBufferRx[1] == page.edAddr ){
??parseGWPackage_0:
        MOV     DPTR,#(page + 190)
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      $+5
        LJMP    ??parseGWPackage_1
//  748 //        goodForCommands = ( 0 != (PKTSTATUS&0x80) ); 
//  749 //        ticks2ProcessCmd = (*ptr2RunningTick); 
//  750         mymemcpy( buff, radioPktBufferRx, radioPktBufferRx[0]+3 );
        ; Setup parameters for call to function mymemcpy
        MOV     DPTR,#radioPktBufferRx
        MOVX    A,@DPTR
        ADD     A,#0x3
        MOV     R1,A
        MOV     R4,#(radioPktBufferRx & 0xff)
        MOV     R5,#((radioPktBufferRx >> 8) & 0xff)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   mymemcpy
//  751         if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
        MOV     DPTR,#cyclesFromStart
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x33
        JC      ??parseGWPackage_2
        CLR     A
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    @DPTR,A
//  752         if( !page.is500Always  ) {
??parseGWPackage_2:
        MOV     A,R6
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R7,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??parseGWPackage_3
//  753             //if( page.isRelay ){ sendData( radioPktBufferRx, TRUE ); tickWait( 3+2*TICKS_IN_MS ); }
//  754             if(       o > page.max_off  ) o = page.max_off;
        LCALL   ?Subroutine2
??CrossCallReturnLabel_88:
        JNC     ??parseGWPackage_4
        MOV     ?V0 + 3,R4
        SJMP    ??parseGWPackage_5
//  755             else if(  o < -page.max_off ) o = -page.max_off;
??parseGWPackage_4:
        LCALL   ?Subroutine1
??CrossCallReturnLabel_86:
        JNC     ??parseGWPackage_5
        MOV     A,R4
        CPL     A
        INC     A
        MOV     ?V0 + 3,A
//  756             shift = (INT16)sh + (INT16)o;
??parseGWPackage_5:
        LCALL   ?Subroutine0
//  757             if( abs( shift ) > 96 ) addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift;
??CrossCallReturnLabel_79:
        JC      ??parseGWPackage_6
        ; Setup parameters for call to function addDF
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine28
??CrossCallReturnLabel_60:
        SJMP    ??parseGWPackage_3
??parseGWPackage_6:
        MOV     A,?V0 + 0
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
//  758         }
//  759         bunchCount = 7;
??parseGWPackage_3:
        MOV     A,#0x7
        MOV     DPTR,#bunchCount
        MOVX    @DPTR,A
//  760         
//  761         if(tmp < 128)   _lastRssi = (tmp >> 1)               ;// - perRssiOffset;
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#-0x80
        JNC     ??parseGWPackage_7
        MOV     A,?V0 + 6
        CLR     C
        SJMP    ??parseGWPackage_8
//  762         else            _lastRssi =(((UINT16)tmp - 256) >> 1);// - perRssiOffset;
??parseGWPackage_7:
        CLR     A
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,#-0x1
        RRC     A
        MOV     A,R0
??parseGWPackage_8:
        RRC     A
        MOV     R0,A
//  763         _lastRssi -= perRssiOffset;
//  764         lastRssi = (INT8)_lastRssi;
        MOV     DPTR,#perRssiOffset
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     DPTR,#lastRssi
        MOVX    @DPTR,A
//  765 
//  766         loadIV( page.curIV );  
        ; Setup parameters for call to function load
        LCALL   ?Subroutine25
//  767         decode( (char *)(buff+2),  (char *)radioPktBuffer );
??CrossCallReturnLabel_52:
        ; Setup parameters for call to function code
        MOV     R4,#(radioPktBuffer & 0xff)
        MOV     R5,#((radioPktBuffer >> 8) & 0xff)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x2
        LCALL   `code`
//  768         //if( buff[0] > 18 ) 
//  769         decode( (char *)(buff+18), (char *)(radioPktBuffer+16) );
        ; Setup parameters for call to function code
        MOV     R4,#((radioPktBuffer + 16) & 0xff)
        MOV     R5,#(((radioPktBuffer + 16) >> 8) & 0xff)
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x2
        LCALL   `code`
//  770         //mymemcpy( radioPktBuffer+16, buff+18, 16 );
//  771         bunch = radioPktBuffer[0]; ndev = radioPktBuffer[1]; 
        MOV     DPTR,#radioPktBuffer
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     DPTR,#(radioPktBuffer + 1)
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//  772         mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#((radioPktBuffer + 2) & 0xff)
        MOV     R5,#(((radioPktBuffer + 2) >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcpy
//  773         if( ((ndev & NDEV_MASK ) <= 16) && //(msLocal < 1000) && 
//  774             //((utcLocal > utcLast) || ( (utcLocal == utcLast) && (msLocal != msLast) ) ) //protects ONLY from replay attack
//  775             ((utcLocal >= utcLast)/* || ( (mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal != msLast) )*/ ) //protects ONLY from replay attack
//  776         ){
        MOV     A,#0x1f
        ANL     A,?V0 + 6
        CLR     C
        SUBB    A,#0x11
        JC      $+5
        LJMP    ??parseGWPackage_1
        MOV     DPTR,#utcLast
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPH,#((utcLocal >> 8) & 0xff)
        MOV     DPL,#(utcLocal & 0xff)
        MOV     R0,#?V0 + 8
        LCALL   ?UL_GT_X
        JNC     $+5
        LJMP    ??parseGWPackage_1
//  777             P1_1 ^= 1;
        XRL     0x90,#0x2
        MOV     A,0x90
//  778             if( !page.is500Always ) {
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??parseGWPackage_9
//  779                 if(       o > page.max_off  ) o =  page.max_off;
        LCALL   ?Subroutine2
??CrossCallReturnLabel_89:
        JNC     ??parseGWPackage_10
        MOV     ?V0 + 3,R4
        SJMP    ??parseGWPackage_11
//  780                 else if(  o < -page.max_off ) o = -page.max_off;
??parseGWPackage_10:
        LCALL   ?Subroutine1
??CrossCallReturnLabel_87:
        JNC     ??parseGWPackage_11
        MOV     A,R4
        CPL     A
        INC     A
        MOV     ?V0 + 3,A
//  781                 shift = (INT16)sh + (INT16)o;
??parseGWPackage_11:
        LCALL   ?Subroutine0
//  782                 if( abs( shift ) > 96 ) addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift;
??CrossCallReturnLabel_80:
        JC      ??parseGWPackage_12
        ; Setup parameters for call to function addDF
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine28
??CrossCallReturnLabel_61:
        SJMP    ??parseGWPackage_9
??parseGWPackage_12:
        MOV     A,?V0 + 0
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
//  783             }
//  784             if( goodForCommands /*&& ( page.is500Always || (0!=(LQI & 0x7F) ) )*/ ){
??parseGWPackage_9:
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??parseGWPackage_1
//  785                 got_gw = 8;
        MOV     A,#0x8
        MOV     DPTR,#got_gw
        MOVX    @DPTR,A
//  786                 if( (!page.is500Always) && page.isRelay ) sendData( radioPktBufferRx, TRUE );  
        LCALL   ?Subroutine15
??CrossCallReturnLabel_26:
        JNZ     ??parseGWPackage_13
        ; Setup parameters for call to function sendData
        MOV     R1,#0x1
        MOV     R2,#(radioPktBufferRx & 0xff)
        MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
        LCALL   sendData
//  787                 //mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 );
//  788                 reset_kicks();
??parseGWPackage_13:
        ; Setup parameters for call to function reset_kicks
        LCALL   reset_kicks
//  789                 msLast = 0; msLocal = 0; ms = 0; // to prevent deletion of this variables by optimizer
        MOV     DPTR,#msLast
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#msLocal
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#ms
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  790                 mymemcpy( (BYTE *)&utcLast, (BYTE *)&utcLocal, 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
        MOV     R2,#(utcLast & 0xff)
        MOV     R3,#((utcLast >> 8) & 0xff)
        LCALL   mymemcpy
//  791                 lastCycle = _slot * ( (ndev & NDEV_MASK) + ((ndev & JOIN_MASK)?1:4) ) + _loop_delay;
        MOV     A,?V0 + 6
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_14
        MOV     R0,#0x1
        SJMP    ??parseGWPackage_15
??parseGWPackage_14:
        MOV     R0,#0x4
??parseGWPackage_15:
        MOV     ?V0 + 0,A
        MOV     A,#0x1f
        ANL     A,?V0 + 0
        MOV     R6,A
        MOV     A,R0
        LCALL   ?Subroutine23
??CrossCallReturnLabel_92:
        MOV     A,#0x50
        LCALL   ??Subroutine26_0
??CrossCallReturnLabel_54:
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine31
//  792                 if( page.synch_freq && (((2+(ndev & NDEV_MASK))%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ *((INT16 *)0xF500) = page.synch_phase; cnt = page.synch_freq; } }
??CrossCallReturnLabel_68:
        MOV     DPTR,#(page + 162)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_16
        MOV     A,#0x1f
        ANL     A,?V0 + 6
        ADD     A,#0x2
        MOV     B,#0x3
        LCALL   ?SC_DIV_MOD
        MOV     A,B
        JNZ     ??parseGWPackage_16
        MOV     DPTR,#??cnt
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??parseGWPackage_16
        MOV     DPTR,#(page + 161)
        MOVX    A,@DPTR
        MOV     DPTR,#-0xb00
        LCALL   ??Subroutine20_0
??CrossCallReturnLabel_42:
        MOV     DPTR,#(page + 162)
        MOVX    A,@DPTR
        MOV     DPTR,#??cnt
        MOVX    @DPTR,A
//  793                 if( (bunch == 0) || ( page.gbunch && (page.gbunch - bunch) <= 7 ) ){ 
??parseGWPackage_16:
        MOV     DPL,?V0 + 5
        MOV     R0,DPL
        MOV     A,R0
        JZ      ??parseGWPackage_17
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_18
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        CLR     A
        SUBB    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x8
        LCALL   ??Subroutine0_0
??CrossCallReturnLabel_84:
        JNC     ??parseGWPackage_18
//  794                     packagePrepared = FALSE;
??parseGWPackage_17:
        CLR     A
        MOV     DPTR,#packagePrepared
        MOVX    @DPTR,A
//  795                     //atomicChange( DelayedPrepareData , 6*TICKS_IN_MS + ((bunch!=0)?lastCycle*( page.gbunch - bunch ):0) );  
//  796                     *((INT16 *)0xF51A) = 6*TICKS_IN_MS + ((bunch!=0)?lastCycle*( page.gbunch - bunch ):0);
        MOV     A,R0
        JZ      ??parseGWPackage_19
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine12
??CrossCallReturnLabel_15:
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        SJMP    ??parseGWPackage_20
??parseGWPackage_19:
        MOV     R0,#0x0
        MOV     R1,#0x0
??parseGWPackage_20:
        MOV     A,#0xc
        LCALL   ??Subroutine26_0
??CrossCallReturnLabel_55:
        MOV     DPTR,#-0xae6
        LCALL   ?Subroutine31
//  797                     mymemcpy( (BYTE *)&utc, (BYTE *)&utcLocal, 6 ); 
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
        MOV     R2,#(utc & 0xff)
        MOV     R3,#((utc >> 8) & 0xff)
        LCALL   mymemcpy
//  798                 } 
//  799                 //atomicChange( ReceiveData, lastCycle - _slot - 10 /*- processingTime*/ );  
//  800                 *((INT16 *)0xF508) = lastCycle - _slot - 10;
??parseGWPackage_18:
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#-0x5a
        LCALL   ?Subroutine11
//  801                 curBunch = bunch;
??CrossCallReturnLabel_76:
        MOV     A,?V0 + 5
        MOV     DPTR,#curBunch
        LCALL   ?Subroutine19
//  802                 if( !page.is500Always  ) {
??CrossCallReturnLabel_34:
        JC      ??parseGWPackage_21
//  803                     if( ndev & HOP_MASK ){ 
        MOV     A,?V0 + 6
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_22
//  804 //                        atomicChange( Hop,  ticks[ ReceiveData ] - 2*TICKS_IN_MS ); 
//  805                         //atomicChange( Hop,  *((INT16 *)0xF508) - 2*TICKS_IN_MS ); 
//  806                         *((INT16 *)0xF510) = *((INT16 *)0xF508) - 2*TICKS_IN_MS;
        MOV     DPTR,#-0xaf8
        MOVX    A,@DPTR
        ADD     A,#-0x4
        LCALL   ?Subroutine10
//  807                         cyclesToHop = 8;
??CrossCallReturnLabel_74:
        MOV     A,#0x8
        MOV     DPTR,#cyclesToHop
        SJMP    ??parseGWPackage_23
//  808                     }else { cyclesToHop = 0;  *((INT16 *)0xF510) = 0; }//  atomicChange( Hop, 0 ); }
??parseGWPackage_22:
        CLR     A
        MOV     DPTR,#cyclesToHop
        MOVX    @DPTR,A
        MOV     DPTR,#-0xaf0
        MOVX    @DPTR,A
        INC     DPTR
??parseGWPackage_23:
        MOVX    @DPTR,A
//  809                 }
//  810                 //atomicChange(  Cycle, lastCycle + TICKS_IN_MS );
//  811                 *((INT16 *)0xF512) = lastCycle + TICKS_IN_MS;
??parseGWPackage_21:
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#-0xaee
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine19
//  812                 
//  813                 if( page.is500Always ){
??CrossCallReturnLabel_35:
        JNC     ??parseGWPackage_24
//  814                       if( lastRssi > page.CriticalLevel500 ) 
        MOV     DPTR,#(page + 196)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        CLR     C
        SUBB    A,R2
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??parseGWPackage_25
//  815                           { cyclesToStep500Channel = page.defCyclesToStep500Channel; cyclesTo10 = page.defCyclesTo10; }
        MOV     DPTR,#(page + 204)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesToStep500Channel
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 202)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesTo10
        SJMP    ??CrossCallReturnLabel_62
//  816                       else *((BYTE *)0xF529) = 1; // flags[ Cycle ] = TRUE;
??parseGWPackage_25:
        MOV     A,#0x1
        MOV     DPTR,#-0xad7
        SJMP    ??CrossCallReturnLabel_62
//  817                 }else if( lastRssi > page.CriticalLevel10 )  
??parseGWPackage_24:
        MOV     DPTR,#(page + 197)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        CLR     C
        SUBB    A,R2
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??parseGWPackage_25
//  818                           { cyclesTo500 = page.defCyclesTo500;   cycles2Step10Channel = page.defCyclesToStep10Channel; }
        LCALL   ?Subroutine29
??CrossCallReturnLabel_62:
        MOVX    @DPTR,A
//  819                       else *((BYTE *)0xF529) = 1; // flags[ Cycle ] = TRUE;
//  820     
//  821                 if( bunch != 0xFF ){
        MOV     A,#-0x1
        XRL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??parseGWPackage_26
//  822                 BYTE b = bunch;
        MOV     ?V0 + 0,?V0 + 5
//  823                 INT16 sd = _slot * page.netId + _gw_delay;// - /*ticks2ProcessCmd - */processingTime;
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        MOV     B,#0x50
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine26
//  824                     if( page.rbunch ) b %= page.rbunch;
??CrossCallReturnLabel_56:
        MOV     DPTR,#(page + 157)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_27
        MOV     B,A
        MOV     A,?V0 + 0
        DIV     AB
        MOV     A,B
        MOV     ?V0 + 0,A
//  825                     if( b == page.myBunch ){
??parseGWPackage_27:
        MOV     DPTR,#(page + 3)
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        XRL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??parseGWPackage_28
//  826                         //if( sd < ( ticks[ DelayedPrepareData ] + 60 ) ) sd = ( ticks[ DelayedPrepareData ] + 60 );
//  827                         *((INT16 *)0xF506) =  sd; // atomicChange( SendData, sd );   // - TICKS_IN_MS; 
//  828                     }else if( (page.myBunch == 0xFF) && ((ndev & JOIN_MASK) == 0) ) {
        MOV     A,#-0x1
        XRL     A,?V0 + 2
        JNZ     ??parseGWPackage_29
        MOV     A,?V0 + 6
        MOV     C,0xE0 /* A   */.7
        JC      ??parseGWPackage_29
//  829                         *((INT16 *)0xF51A) =  0; //ticks[ DelayedPrepareData ] = 0;
        MOV     DPTR,#-0xae6
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  830                         if( joinRequestWasSend > 0 )  joinRequestWasSend --;    
        MOV     DPTR,#joinRequestWasSend
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_30
        DEC     A
        LJMP    ??parseGWPackage_31
//  831                         else {
//  832                             ADCCON1 &= 0xF3; ADCCON1 |= 4;
??parseGWPackage_30:
        ANL     0xb4,#0xf3
        MOV     A,0xb4
        ORL     0xb4,#0x4
//  833                             joinRequestWasSend = page.network_cnst_1 + RNDH % page.network_cnst_2; 
        MOV     A,0xbd
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 229)
        MOVX    A,@DPTR
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        DIV     AB
        MOV     DPTR,#(page + 228)
        MOV     R2,B
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     DPTR,#joinRequestWasSend
        MOVX    @DPTR,A
//  834                             //atomicChange( SendData, (ndev & NDEV_MASK) * _slot + (RNDL % 3) * _join_slot + _gw_delay /*- ticks2ProcessCmd */);  // 12 * 
//  835                             *((INT16 *)0xF506) = (ndev & NDEV_MASK) * _slot + (RNDL % 3) * _join_slot + _gw_delay;
        MOV     A,0xbc
        MOV     B,#0x3
        DIV     AB
        MOV     A,B
        LCALL   ?Subroutine23
??CrossCallReturnLabel_93:
        LCALL   ?Subroutine26
??CrossCallReturnLabel_57:
        MOV     DPTR,#-0xafa
        LCALL   ?Subroutine31
//  836                             *((BYTE *)0xF523) = 1; //flags[ PrepareJoin ] = TRUE;
??CrossCallReturnLabel_70:
        MOV     A,#0x1
        MOV     DPTR,#-0xadd
        SJMP    ??parseGWPackage_31
//  837                         }
//  838                     }else if( page.gbunch && (b < page.myBunch) && ((page.myBunch-b)<7) ){ 
??parseGWPackage_29:
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_26
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 2
        JNC     ??parseGWPackage_26
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 0,A
        CLR     A
        SUBB    A,#0x0
        MOV     ?V0 + 1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x7
        MOV     A,?V0 + 1
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_85:
        JNC     ??parseGWPackage_26
//  839                         //atomicChange( SendData, (page.myBunch-b)*lastCycle + sd);// - TICKS_IN_MS; 
//  840                         *((INT16 *)0xF506) = (page.myBunch-b)*lastCycle + sd;
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        MOV     B,?V0 + 0
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R1,A
??parseGWPackage_28:
        MOV     DPTR,#-0xafa
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??parseGWPackage_31:
        MOVX    @DPTR,A
//  841                     }
//  842                 }
//  843                 /*if( ticks[ SendData ] ){
//  844                 INT8 adjustment = 24;
//  845                     if( bunch == 0 )                adjustment -= 41;
//  846                     if( plen == PACKET_LENGTH_GW_2) adjustment += 57;
//  847                     if( page.is500Always )          adjustment -= 22;
//  848                     else if( page.isRelay )         adjustment -=  2;
//  849                     ticks[ SendData ] +=  adjustment;
//  850                 }*/
//  851                 if( *((INT16 *)0xF506) ){// ticks[ SendData ] ){
??parseGWPackage_26:
        MOV     DPTR,#-0xafa
        MOVX    A,@DPTR
        JNZ     ??parseGWPackage_32
        INC     DPTR
        MOVX    A,@DPTR
??parseGWPackage_32:
        JZ      ??parseGWPackage_33
//  852                 //signed char adjustment = 5*TICKS_IN_MS+1; // was 24;
//  853                 //    if( bunch == 0 )                adjustment -= 8*TICKS_IN_MS;  // was 41;
//  854                 signed char adjustment = -3*TICKS_IN_MS;
        MOV     R2,#-0x6
//  855                     if( plen == PACKET_LENGTH_GW_2) adjustment += 11*TICKS_IN_MS; // was 57; 
        MOV     A,#0x12
        XRL     A,?V0 + 4
        JNZ     ??parseGWPackage_34
        MOV     R2,#0x10
//  856                     if( page.is500Always ){
??parseGWPackage_34:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_35
//  857                         if( page.use250kbod )     adjustment -= (5*TICKS_IN_MS+3); 
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??parseGWPackage_36
        MOV     A,#-0xd
        SJMP    ??parseGWPackage_37
//  858                         else                      adjustment -= 5*TICKS_IN_MS+1; // was 22;
??parseGWPackage_36:
        MOV     A,#-0xb
??parseGWPackage_37:
        ADD     A,R2
        MOV     R2,A
//  859                     }//else if( page.isRelay )        adjustment -= TICKS_IN_MS/2; // 2; //in order to make sure that repeater works when it is right after slave
//  860                     *((INT16 *)0xF506) += adjustment; //ticks[ SendData ] +=  adjustment;
??parseGWPackage_35:
        MOV     A,R2
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     DPTR,#-0xafa
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
//  861                 }
//  862                 tickWait( 10 );
??parseGWPackage_33:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0xa
        LCALL   tickWait
//  863                 parseCommands( buff[0] );
        ; Setup parameters for call to function parseCommands
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   parseCommands
//  864                 //if( newProtocol ) setByte( SET_CUR_CHANNEL, radioPktBuffer[7] );                
//  865                 //if( page.treatLastByteAsChannel ){ if( !page.is500Always && (cyclesTo500 < 200) ){ curChannel = CHANNR = radioPktBufferRx[ plen ]; } }
//  866                 if( !page.is500Always && (cyclesTo500 < 200) ){ curChannel = CHANNR = radioPktBufferRx[ plen ]; } 
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??parseGWPackage_1
        MOV     DPTR,#cyclesTo500
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x38
        JNC     ??parseGWPackage_1
        MOV     A,?V0 + 4
        ADD     A,#(radioPktBufferRx & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((radioPktBufferRx >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
//  867             }
//  868         }//else ticks[ ReceiveData ] = 2;
//  869     }
//  870     //setupRepeater( FALSE );  // uncomment to get G+ behavior
//  871     /*
//  872     if( !enable2SendData ){  flags[ PrepareData ] = 0;   flags[ SendData ] = 0; 
//  873     }else 
//  874     */
//  875     //if( (!page.is500Always) && page.isRelay ) setupRepeater( got_gw );  
//  876     //receive();   // uncomment to get G+ behavior
//  877     if( (!page.is500Always) && page.isRelay ){ setupRepeater( got_gw ); receive(); }     
??parseGWPackage_1:
        LCALL   ?Subroutine15
??CrossCallReturnLabel_27:
        JNZ     ??CrossCallReturnLabel_50
        ; Setup parameters for call to function setupRepeater
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Subroutine24_0
??CrossCallReturnLabel_50:
        MOV     A,#0x25
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xc
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock67
        REQUIRE _A_P1
        REQUIRE ADCCON1
        REQUIRE RNDL
        REQUIRE RNDH
//  878 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        MOV     R3,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        LCALL   addDF
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOV     A,#0x3c
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 56)
??Subroutine26_0:
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOV     R1,#0x0
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 56)
??Subroutine24_0:
        LCALL   setupRepeater
        ; Setup parameters for call to function receive
        ; Setup parameters for call to function receive
        ; Setup parameters for call to function receive
        ; Setup parameters for call to function receive
        LCALL   receive
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_92
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        ADD     A,R6
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x50
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x50
        LJMP    ?Subroutine34
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond85) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond85) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond85) CFA_SP SP+-4
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond86) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond86) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond86) CFA_SP SP+-4
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        MOV     DPTR,#-0xaf8
        MOV     A,#0x1
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond88) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond88) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond88) CFA_SP SP+-4
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_39
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_40
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond91) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond91) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond91) CFA_SP SP+-4
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 56)
??Subroutine20_0:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_75
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     DPTR,#-0xaf8
        SJMP    ?Subroutine31
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     DPTR,#-0xaf0
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103
        REQUIRE ?Subroutine31
        ; // Fall through to label ?Subroutine31

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_72
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     DPTR,#(page + 236)
        MOVX    A,@DPTR
        MOV     DPL,A
        MOV     R4,DPL
        MOV     A,?V0 + 3
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        CLR     C
        MOV     A,R4
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
        REQUIRE ?Subroutine33
        ; // Fall through to label ?Subroutine33

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_81
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond129) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond129) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond129) CFA_SP SP+-4
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker132 Using cfiCommon1
        CFI (cfiPicker132) NoFunction
        CFI (cfiPicker132) Picker
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiPicker132

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond133 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker135 Using cfiCommon1
        CFI (cfiPicker135) NoFunction
        CFI (cfiPicker135) Picker
        CLR     C
        CLR     A
        SUBB    A,R4
        MOV     R2,A
        CLR     A
        SUBB    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        SJMP    ?Subroutine33
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiPicker135

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        MOV     A,?V0 + 3
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        ADD     A,R6
        MOV     ?V0 + 0,A
        MOV     A,R1
        ADDC    A,R7
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function abs
        ; Setup parameters for call to function abs
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   abs
        CLR     C
        MOV     A,R2
        SUBB    A,#0x61
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_81
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 56)
??Subroutine0_0:
        MOV     A,R3
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond141) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond141) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond141) CFA_SP SP+-4
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 56)
??Subroutine0_1:
        SUBB    A,#0x0
        SJMP    ?Subroutine33
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??cnt:
        DS 1
        REQUIRE `?<Initializer for cnt>`
        REQUIRE __INIT_XDATA_I
//  879 /******************************************************************************
//  880 * @fn  receive
//  881 * @brief       This function switch radio into receiving radioMode
//  882 * Parameters:
//  883 * @return void
//  884 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  885 void receive(void){
receive:
        CFI Block cfiBlock144 Using cfiCommon0
        CFI Function receive
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  886     //if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( ReceiveData, 1 ); return; }
//  887     if( (*((BYTE *)0xF53A)) == RADIO_MODE_TX  ) *((INT16 *)0xF508) = 1; //atomicChange( ReceiveData, 1 ); 
        MOV     DPTR,#-0xac6
        MOVX    A,@DPTR
        XRL     A,#0x10
        JNZ     ??receive_0
        LCALL   ?Subroutine20
??CrossCallReturnLabel_43:
        SJMP    ??receive_1
//  888     else{
//  889         RFST = STROBE_IDLE;       
??receive_0:
        MOV     0xe1,#0x4
//  890         //INT_GLOBAL_ENABLE( INT_OFF );
//  891             //radioPktBufferRx[0] = 0;    
//  892             radioPktBufferRx[1] = 0;
        CLR     A
        MOV     DPTR,#(radioPktBufferRx + 1)
        MOVX    @DPTR,A
//  893             //si->radioMode = RADIO_MODE_RX;
//  894             *((BYTE *)0xF53A) = RADIO_MODE_RX;  
        MOV     A,#0x20
        MOV     DPTR,#-0xac6
        MOVX    @DPTR,A
//  895             DMAARM = DMAARM_CHANNEL0;            // Arm DMA channel 0
        MOV     0xd6,#0x1
//  896             //quartz();
//  897             RFST = STROBE_RX;                     // Switch radio to RX
        MOV     0xe1,#0x2
//  898         //INT_GLOBAL_ENABLE( INT_ON );
//  899     }
//  900 }
??receive_1:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock144
        REQUIRE DMAARM
        REQUIRE RFST
//  901 /******************************************************************************
//  902 * @fn  computeADCs
//  903 * @brief       This function makes all the regular computations
//  904 * Parameters:  
//  905 * @return void
//  906 ******************************************************************************/
//  907 extern BYTE buff[ ];
//  908 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  909 void computeADCs(BOOL timeout){//BOOL timeout, BOOL accumulate_energy){
computeADCs:
        CFI Block cfiBlock145 Using cfiCommon0
        CFI Function computeADCs
        FUNCALL computeADCs, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  910 INT8 off = FSCTRL0, i;
        MOV     DPTR,#-0x20f8
        MOVX    A,@DPTR
//  911 INT16  df;
//  912 UINT16 temp2; // temp1
//  913     lastOff  = (INT16)off;          // 75=600/8
        MOV     R2,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     DPTR,#lastOff
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  914     {   temp2 = lastVals[ ASSYM_EXT_GND ]-75; i = 9; do{ lastVals[--i] -= temp2; }while(i);
        MOV     DPTR,#(lastVals + 14)
        MOVX    A,@DPTR
        ADD     A,#-0x4b
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     R6,#0x9
??computeADCs_0:
        MOV     A,#-0x1
        ADD     A,R6
        MOV     R2,A
        DEC     R6
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
        MOV     A,R2
        ADD     A,#(lastVals & 0xff)
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#((lastVals >> 8) & 0xff)
        MOV     DPH,A
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        MOVX    @DPTR,A
        MOV     A,R6
        JNZ     ??computeADCs_0
//  915         lastVals[ ASSYM_EXT_GND ] = temp2; 
        MOV     DPTR,#(lastVals + 14)
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  916 /* ----- counts in transmission 
//  917         #ifdef MidString
//  918             // using 2496 here instead of 2495 ...  2496 = 26 * 16 * 6
//  919             temp2 = lastVals[ REF ] / 26;  i = 8; do{ temp1 = lastVals[--i]*16; lastVals[i] = 6 * ( temp1 / temp2 ); }while(i);
//  920         #else        
//  921             // using 2436 here instead of 2435 ...  2436 = 29 * 14 * 6
//  922             temp2 = lastVals[ REF ] / 29;  i = 8; do{ temp1 = lastVals[--i]*14; lastVals[i] = 6 * ( temp1 / temp2 ); }while(i);
//  923         #endif
//  924         //t = (INT16)( adcs[ TEXT ] * 2495 ) / adcs[ REF ];
//  925         lastVals[ TEXT ] = ( ((625 - lastVals[ TEXT ])*87)/2 ); 
//  926   ----- counts in transmission */        
//  927         /* no adjustments - useless
//  928         t /= 100;
//  929         ttt = t; 
//  930         if( t < t1 ) ttt = t1;
//  931         if( t > t2 ) ttt = t2;
//  932         df = off + k*( t-ttt)/10;
//  933         */
//  934         df = page.pureOffset; //-285;        
        MOV     DPTR,#(page + 198)
        LCALL   ?Subroutine12
//  935     }
//  936     
//  937     // dfk = -0.000693, 0.0556, 0.613, -285.44
//  938     //df = rlOff;
//  939     theRealOffset = (INT8)( (delta + (lastOff<<2) - df) >> 2 );
??CrossCallReturnLabel_16:
        MOV     DPTR,#delta
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#lastOff
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 5
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,R3
        SUBB    A,?V0 + 1
        MOV     ?V0 + 3,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?SS_SHR
        MOV     A,?V0 + 2
        MOV     DPTR,#theRealOffset
        MOVX    @DPTR,A
//  940 
//  941     // adjust frequency by temperature
//  942     if( timeout ){
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_48
//  943         RFST = STROBE_IDLE;
        MOV     0xe1,#0x4
//  944         addDF( df /*+ page.theDelta*/ - delta ); 
        ; Setup parameters for call to function addDF
        MOV     A,?V0 + 1
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#delta
        MOV     R0,#?V0 + 0
        LCALL   ?L_SUB_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   addDF
//  945         setupRepeater( FALSE );     receive();
        ; Setup parameters for call to function setupRepeater
        LCALL   ?Subroutine24
//  946     }
//  947 }
??CrossCallReturnLabel_48:
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock145
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker149 Using cfiCommon1
        CFI (cfiPicker149) NoFunction
        CFI (cfiPicker149) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiPicker149
//  948 //______________________________________________________________________________________________________________________________
//  949 //BOOL checkPage( BYTE val ){ return val && val != 0x1F && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ); }
//  950 //______________________________________________________________________________________________________________________________
//  951 /******************************************************************************
//  952 * @fn  setByte
//  953 * @brief       set the byte value to register
//  954 * Parameters:  byte reg - register, byte val - value
//  955 * @return      void
//  956 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  957 void setByte( BYTE reg, BYTE val ){
setByte:
        CFI Block cfiBlock150 Using cfiCommon0
        CFI Function setByte
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, clearThePage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, quartz
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  958 BYTE *ptr; BYTE *pptr = (BYTE *)&page;
        MOV     R4,#(page & 0xff)
        MOV     R5,#((page >> 8) & 0xff)
//  959     /*
//  960     if(page.isRelay && !page.is500Always ) switch(reg){
//  961         case SET_CUR_CHANNEL: case SET_CHANNEL:     case RADIO_POWER:
//  962         case IS_RELAY:        case IS_500_ALWAYS:   case REPEATER_POWER:
//  963             tickWait( 3+2*TICKS_IN_MS );  // give repeater chance to finish transmission
//  964         break;
//  965     }*/
//  966     switch(reg){
        MOV     A,R1
        ADD     A,#(page & 0xff)
        MOV     R2,A
        CLR     A
        ADDC    A,#((page >> 8) & 0xff)
        MOV     R3,A
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setByte>_0`:
        DATA
        DB        4
        DB        47
        DB        48
        DW        ??setByte_0
        DB        67
        DB        68
        DW        ??setByte_1
        DB        79
        DB        82
        DW        ??setByte_2
        DB        87
        DB        88
        DW        ??setByte_3
        DB        28
        DB        4
        DW        ??setByte_4
        DB        5
        DW        ??setByte_5
        DB        10
        DW        ??setByte_6
        DB        22
        DW        ??setByte_7
        DB        23
        DW        ??setByte_8
        DB        26
        DW        ??setByte_9
        DB        28
        DW        ??setByte_10
        DB        31
        DW        ??setByte_11
        DB        32
        DW        ??setByte_12
        DB        33
        DW        ??setByte_13
        DB        35
        DW        ??setByte_14
        DB        36
        DW        ??setByte_15
        DB        38
        DW        ??setByte_16
        DB        41
        DW        ??setByte_17
        DB        42
        DW        ??setByte_18
        DB        43
        DW        ??setByte_19
        DB        45
        DW        ??setByte_20
        DB        53
        DW        ??setByte_21
        DB        55
        DW        ??setByte_22
        DB        57
        DW        ??setByte_23
        DB        58
        DW        ??setByte_24
        DB        59
        DW        ??setByte_25
        DB        61
        DW        ??setByte_1
        DB        70
        DW        ??setByte_1
        DB        75
        DW        ??setByte_1
        DB        110
        DW        ??setByte_26
        DB        111
        DW        ??setByte_27
        DB        112
        DW        ??setByte_28
        DW        ??setByte_29
        CODE
//  967         case MPP:  // MPP
//  968             if( val )  P1_3 = 1;   else P1_3 = 0;
??setByte_4:
        MOV     A,R6
        JZ      ??setByte_30
        SETB    0x90.3
//  969             if( val ) { 
//  970                 //atomicChange( BypassMode, 0 ); // do not need that delayed mpp off anymore
//  971                 *((INT16 *)0xF50A) = 0; //atomicChange( BypassMode, 0 ); // do not need that delayed mpp off anymore
        MOV     DPTR,#-0xaf6
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  972                 //if( turnOnFlag || ticks[ TurnOn ] ) { ov_startup(); turnOnFlag = FALSE;  ticks[ TurnOn ] = 0; } //P1 |= 0x10; }
//  973                 if( turnOnFlag || *((INT16 *)0xF514) ) { ov_startup(); turnOnFlag = FALSE;  *((INT16 *)0xF514) = 0; } //P1 |= 0x10; }
        MOV     DPTR,#turnOnFlag
        MOVX    A,@DPTR
        JNZ     ??setByte_31
        MOV     DPTR,#-0xaec
        MOVX    A,@DPTR
        JNZ     ??setByte_32
        INC     DPTR
        MOVX    A,@DPTR
??setByte_32:
        JNZ     $+5
        LJMP    ??setByte_29
??setByte_31:
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        CLR     A
        MOV     DPTR,#turnOnFlag
        MOVX    @DPTR,A
        MOV     DPTR,#-0xaec
??setByte_33:
        MOVX    @DPTR,A
        INC     DPTR
        LJMP    ??setByte_34
//  974             }
??setByte_30:
        CLR     0x90.3
        LJMP    ??setByte_29
//  975         break;
//  976         case MODULE: // Module on / off
//  977             //if( val && ((P1 & 0x18)==0) ){ P1_3 = 1; ov_startup(); /*P1 |= 0x18;*/ atomicChange( BypassMode, TICKS_IN_SEC );            } // bypass mode with delay
//  978             if( val && ((P1 & 0x18)==0) ){ P1_3 = 1; ov_startup(); /*P1 |= 0x18;*/  *((INT16 *)0xF50A) = TICKS_IN_SEC ;  } // bypass mode with delay          
??setByte_5:
        MOV     A,R6
        JZ      ??setByte_35
        MOV     A,#0x18
        ANL     A,0x90
        JNZ     ??setByte_36
        SETB    0x90.3
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        MOV     DPTR,#-0xaf6
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        LJMP    ??setByte_34
//  979             //else                         { if( val ) P1 |= 0x10; else P1 &= ~0x10; }
//  980             //else                         { if( val ){ if( P1_4 == 0 ) ov_startup(); }else P1_4 = 0; }
//  981             else                         { if( val ){ if( P1_4 == 0 ){ T3CC1 = 0; ov_startup(); } }else P1_4 = 0; }
??setByte_35:
        CLR     0x90.4
        LJMP    ??setByte_29
??setByte_36:
        MOV     C,0x90.4
        JNC     $+5
        LJMP    ??setByte_29
        MOV     0xcf,#0x0
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        LJMP    ??setByte_29
//  982         break;
//  983         case SET_T3CH0:  /*if( !page.fuseOVOC )*/ T3CC0 = val;      break;
??setByte_7:
        MOV     0xcd,R6
        LJMP    ??setByte_29
//  984         case SET_T3CH1:  /*if( !page.fuseOVOC )*/ T3CC1 = val;      break;
??setByte_8:
        MOV     0xcf,R6
        LJMP    ??setByte_29
//  985         /*
//  986         case SET_CUR_CHANNEL:
//  987             if( !page.is500Always ){ RFST = STROBE_IDLE; curChannel = CHANNR = val;  }
//  988         break;
//  989         */
//  990         case SET_CHANNEL: 
//  991             page.channel = val; setup_hopper( page.channel ); 
??setByte_9:
        MOV     A,R6
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
        ; Setup parameters for call to function setup_hopper
        MOV     R1,A
        LCALL   setup_hopper
//  992             if( !page.is500Always ) curChannel = CHANNR = val;  
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     $+5
        LJMP    ??setByte_29
        MOV     A,R6
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
??setByte_37:
        MOV     DPTR,#curChannel
        LJMP    ??setByte_34
//  993         break;
//  994         
//  995         //case RANDOMIZE:    RNDL = page.myMac[4]; RNDL = page.myMac[5];         break;
//  996 
//  997         //Nobody should be able to shut it down when in high assymetric image
//  998         //case FUSE_OVOC:      page.fuseOVOC = 0;
//  999             // go through
// 1000         case EIGHT_K_WRITEMFPB: main_pb = 1; // go through
??setByte_27:
        MOV     A,#0x1
        MOV     DPTR,#main_pb
        MOVX    @DPTR,A
// 1001         case FLASH_AVAILABLE: 
// 1002             page.mpp    = P1_3;
??setByte_10:
        MOV     C,0x90.3
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#(page + 185)
        MOVX    @DPTR,A
// 1003             page.module = P1_4;
        MOV     C,0x90.4
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#(page + 186)
        MOVX    @DPTR,A
// 1004             //if( !page.fuseOVOC ){ page.ov = T3CC0; page.oc = setOC; }
// 1005             page.ov = T3CC0; page.oc = setOC; 
        MOV     A,0xcd
        MOV     DPTR,#(page + 187)
        MOVX    @DPTR,A
        MOV     DPTR,#setOC
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 188)
??setByte_38:
        MOVX    @DPTR,A
// 1006             // go through
// 1007         case COEFFICIENTS_AVAILABLE:     savePB();     break;
??setByte_13:
        ; Setup parameters for call to function savePB
        LCALL   savePB
        LJMP    ??setByte_29
// 1008         case EIGHT_K_WRITEMPB:  main_pb = 1; savePB(); break;
??setByte_26:
        MOV     A,#0x1
        MOV     DPTR,#main_pb
        SJMP    ??setByte_38
// 1009         case DISSOLVE_NETWORK:      
// 1010           RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
??setByte_11:
        LCALL   ?Subroutine16
// 1011           page.netId = page.myBunch =  0xFF;  //maxBunch = 0;  
??CrossCallReturnLabel_29:
        MOV     A,#-0x1
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
// 1012           *((BYTE *)0xF524) = 0; *((INT16 *)0xF506) = 0; //ticks[ SendData ] = 0; flags[ PrepareData ] = FALSE; 
        CLR     A
        MOV     DPTR,#-0xadc
        MOVX    @DPTR,A
        MOV     DPTR,#-0xafa
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??setByte_38
// 1013           savePB();
// 1014         break;
// 1015         /*
// 1016         case CALIBRATION_FROM_FLASH: 
// 1017           if( (!reportScaling) && (base_ptr==NULL) ){
// 1018                 base_ptr = (BYTE *)0x400;
// 1019                 reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
// 1020           }
// 1021         // go through
// 1022         case REPORT_SCALING:   
// 1023           if( !reportScaling ){
// 1024                 if( base_ptr==NULL ){
// 1025                     base_ptr = (BYTE *)&page;
// 1026                     reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
// 1027                 }else reportScaling    = val * calibrationRepeat;
// 1028           }
// 1029         break;
// 1030         */
// 1031         case CALIBRATION_FROM_FLASH:   pptr = (BYTE *)0x400;        /* go through */
??setByte_23:
        MOV     R4,#0x0
        MOV     R5,#0x4
// 1032         case EIGHT_K_READMFPB: if( reg != CALIBRATION_FROM_FLASH ) pptr = (BYTE *)0x5C00;
??setByte_28:
        MOV     A,#0x39
        XRL     A,R1
        JZ      ??setByte_12
        MOV     R4,#0x0
        MOV     R5,#0x5c
// 1033         case REPORT_SCALING:   
// 1034           if( !reportScaling ){
??setByte_12:
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??setByte_29
// 1035                 if( base_ptr==NULL ){
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        JNZ     ??setByte_39
        INC     DPTR
        MOVX    A,@DPTR
??setByte_39:
        JNZ     ??setByte_40
// 1036                     base_ptr = pptr; //(BYTE *)&page;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        LCALL   ?Subroutine21
// 1037                     reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
??CrossCallReturnLabel_77:
        MOV     B,#0xa
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
??setByte_41:
        MUL     AB
        MOV     DPTR,#reportScaling
        LJMP    ??setByte_34
// 1038                 }else reportScaling    = val * calibrationRepeat;
??setByte_40:
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R6
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        SJMP    ??setByte_41
// 1039           }
// 1040         break;
// 1041         
// 1042         case CHECK_FLASH:      reportFlashCheck = calibrationRepeat*8 + 1; /* 5*4-1 */;    break;
??setByte_22:
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        INC     A
        MOV     DPTR,#reportFlashCheck
        LJMP    ??setByte_34
// 1043         case RADIO_POWER:      page.radioPower = val;     PA_TABLE0 = val;  break;
??setByte_14:
        MOV     A,R6
        MOV     DPTR,#(page + 189)
        MOVX    @DPTR,A
        MOV     DPTR,#-0x20d2
        LJMP    ??setByte_34
// 1044         case PRODUCTION:       page.production = val;                       break;
??setByte_15:
        MOV     DPTR,#(page + 194)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.0,C
        LJMP    ??setByte_34
// 1045         //case ENSURE_WD_RESET:  page.ensureWDReset = val;                    break;
// 1046 
// 1047         //case ENABLE_HOPPING:   page.hoppingAllowed = val;  break;     
// 1048         case REPEATER_CHANNEL: page.repeaterChannel = val; break;     
??setByte_19:
        MOV     A,R6
        MOV     DPTR,#(page + 192)
        LJMP    ??setByte_34
// 1049         case IS_RELAY:         page.isRelay = val;   if( !val ) setupRadio( curChannel );     break;
??setByte_17:
        MOV     DPTR,#(page + 194)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.5,C
        MOVX    @DPTR,A
        MOV     A,R6
        JZ      $+5
        LJMP    ??setByte_29
??setByte_42:
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine13
??CrossCallReturnLabel_21:
        LJMP    ??setByte_29
// 1050         case USE_12_kBod:      page.use12kbod = val;  break;
??setByte_16:
        MOV     DPTR,#(page + 194)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.2,C
        LJMP    ??setByte_34
// 1051 
// 1052         case USE250:           page.use250kbod = val; //break;
??setByte_25:
        MOV     DPTR,#(page + 219)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        MOVX    @DPTR,A
// 1053         case IS_500_ALWAYS:    
// 1054             if( reg == IS_500_ALWAYS ) page.is500Always = val;     
??setByte_18:
        MOV     A,#0x2a
        XRL     A,R1
        JNZ     ??setByte_43
        MOV     DPTR,#(page + 194)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.6,C
        MOVX    @DPTR,A
// 1055             if( page.is500Always ){ 
??setByte_43:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??setByte_44
// 1056                  cyclesTo10 = page.defCyclesTo10; 
        MOV     DPTR,#(page + 202)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesTo10
        MOVX    @DPTR,A
// 1057                  cyclesTo500 = 0;                   
        CLR     A
        MOV     DPTR,#cyclesTo500
        LCALL   ?Subroutine17
// 1058                  cyclesToStep500Channel = page.defCyclesToStep500Channel; 
// 1059                  setupRadio( curChannel = page.starting500Channel );
??CrossCallReturnLabel_31:
        LCALL   ??Subroutine6_0
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function setupRadio
        MOV     R1,A
        LCALL   setupRadio
// 1060                  //atomicChange( Hop, 0 ); 
// 1061                  *((INT16 *)0xF510) = 0;
        MOV     DPTR,#-0xaf0
        CLR     A
        LJMP    ??setByte_33
// 1062             }else{      
// 1063                  cyclesTo10 = 0;                  
??setByte_44:
        CLR     A
        MOV     DPTR,#cyclesTo10
        MOVX    @DPTR,A
// 1064                  cyclesTo500 = page.defCyclesTo500; 
        LCALL   ?Subroutine7
// 1065                  cycles2Step10Channel   = page.defCyclesToStep10Channel;
// 1066                  curChannel = page.channel;
??CrossCallReturnLabel_12:
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        LJMP    ??setByte_37
// 1067                  //if( reg == IS_500_ALWAYS ) setupRadio( curChannel = page.channel ); 
// 1068             }    
// 1069         break;     
// 1070         //case REPEATER_POWER:           page.repeaterPower = val;   if( page.is500Always ) setupRadio( page.channel ); break;
// 1071         case SEARCH_FOR_COMMUNICATION: page.searchCommunication = search_stat = val;  break;
??setByte_20:
        MOV     A,R6
        MOV     DPTR,#search_stat
        MOVX    @DPTR,A
        MOV     C,0xE0 /* A   */.0
        MOV     DPH,#(((page + 194) >> 8) & 0xff)
        MOV     DPL,#((page + 194) & 0xff)
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.7,C
        SJMP    ??setByte_34
// 1072 
// 1073         // win 7 bytes. 
// 1074         case SetCriticalLevel500:   case SetCriticalLevel10:
// 1075             (&page.showState)[ reg-SET_SHOW_STATE ]  = (signed char)val;            
??setByte_0:
        MOV     A,R2
        ADD     A,#-0x6b
        SJMP    ??setByte_45
// 1076         break;
// 1077         case SET_START500_CHANNEL:
// 1078             page.starting500Channel = val; if( page.is500Always ) setupRadio( curChannel = val );
??setByte_21:
        MOV     A,R6
        MOV     DPTR,#(page + 218)
        LCALL   ?Subroutine19
??CrossCallReturnLabel_36:
        JNC     ??setByte_29
        MOV     A,R6
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        LJMP    ??setByte_42
// 1079         break;
// 1080 
// 1081         case CLEAR_THE_PAGE:
// 1082           //val <<= 1;  
// 1083           // this is always high image
// 1084           //if( val && (val < 0x3E) && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ) ){
// 1085           //if( ( val > 2 ) && ( val < 24 ) ){
// 1086              //tickWait( 5 * TICKS_IN_MS );
// 1087              //clearAndHop( val << 1 );
// 1088              //tickWait( 2 * TICKS_IN_MS );
// 1089              asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
??setByte_6:
        ORL 0xC6, #0x40
// 1090              asm( "NOP" );
        NOP
// 1091              asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1092              asm( "NOP" );
        NOP
// 1093 //             asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1094 //             asm( "NOP" );
// 1095 //             asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1096 //             asm( "NOP" );
// 1097 //             asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1098 //             asm( "NOP" );
// 1099 //             asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1100 //             asm( "NOP" );
// 1101 //             if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--;   CLKCON = 0x89;  asm( "NOP" ); asm( "NOP" );  asm( "NOP" ); break; }
// 1102              clearThePage( val << 1 );
        ; Setup parameters for call to function clearThePage
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R1,A
        LCALL   ?Subroutine27
// 1103              tickWait( 25 * TICKS_IN_MS );
// 1104 //             CLKCON = 0x89;  asm( "NOP" );
// 1105 //             asm( "NOP" );   asm( "NOP" );             
// 1106              //softKick();
// 1107              //restoreRadio();
// 1108              //ticks[ ReceiveData ] = 25*TICKS_IN_MS;
// 1109              quartz(); softKick();
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function quartz
        LCALL   quartz
        ; Setup parameters for call to function softKick
        LCALL   softKick
        SJMP    ??setByte_29
// 1110           //}
// 1111         break;
// 1112         //case TRY_OTHER_IMAGE:            page.tryOtherImageFirst = val;        break;
// 1113         case CALIBRATION_REPEAT:
// 1114             if( val&0x1F  ) calibrationRepeat = val; else calibrationRepeat = 4;
??setByte_24:
        MOV     A,#0x1f
        ANL     A,R6
        JZ      ??setByte_46
        MOV     A,R6
??setByte_47:
        MOV     DPTR,#calibrationRepeat
        SJMP    ??setByte_34
??setByte_46:
        MOV     A,#0x4
        SJMP    ??setByte_47
// 1115         break;
// 1116 
// 1117         case REP_STEP:   if( val < 5 && val >50 )  break;  // else go through
// 1118         case NETWORK_CNST_1: case NETWORK_CNST_2: 
// 1119         case MAX_OFF:        case OC_STEP: 
// 1120             ptr = (BYTE *)&page.repStep; ptr[ reg-REP_STEP ] = val; break;
??setByte_1:
        MOV     A,R2
        ADD     A,#-0x5f
        SJMP    ??setByte_45
// 1121         case VIN_DISABLE_RADIO: case SET_RBUNCH: case SET_GBUNCH: case SHORT_CIRCUIT_LEVEL: //DEV250:
// 1122             ptr = (BYTE *)&page.vin_disable_radio; ptr[ reg-VIN_DISABLE_RADIO ] = val; 
??setByte_2:
        MOV     A,R2
        ADD     A,#0x4d
        SJMP    ??setByte_45
// 1123         break;
// 1124         /* saving the space
// 1125         case LOW_UTC: case HIGH_UTC: 
// 1126             mymemcpy( ((BYTE *)(&page.utcLow))+4*(reg-LOW_UTC), (BYTE *)&utcLast, 4);
// 1127         break;
// 1128         */
// 1129         //case TREAT_LB_AS_CHAN : page.treatLastByteAsChannel = val; break;
// 1130         case K_OV_VOLT:  case K_OC_CUR:
// 1131             ptr = (BYTE *)&page.k_ov_volt; ptr[ reg - K_OV_VOLT ] = val; 
??setByte_3:
        MOV     A,R2
        ADD     A,#0x41
??setByte_45:
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R6
??setByte_34:
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock150
// 1132         break;       
// 1133     }
// 1134 }
??setByte_29:
        REQUIRE ?Subroutine36
        REQUIRE _A_P1
        REQUIRE RNDL
        REQUIRE T3CC0
        REQUIRE T3CC1
        ; // Fall through to label ?Subroutine36

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiBlock151 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock151

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker154 Using cfiCommon1
        CFI (cfiPicker154) NoFunction
        CFI (cfiPicker154) Picker
        MOV     R1,A
        MOV     DPTR,#base_ptr
        LJMP    ?Subroutine31
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiPicker154

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond155 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        RET
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond159 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 204)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesToStep500Channel
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 218)
        RET
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker164 Using cfiCommon1
        CFI (cfiPicker164) NoFunction
        CFI (cfiPicker164) Picker
        MOV     DPTR,#(page + 10)
        MOVX    A,@DPTR
        MOV     0xbc,A
        MOV     DPTR,#(page + 11)
        MOVX    A,@DPTR
        MOV     0xbc,A
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiPicker164

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond165 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker167 Using cfiCommon1
        CFI (cfiPicker167) NoFunction
        CFI (cfiPicker167) Picker
        LCALL   ?Subroutine29
??CrossCallReturnLabel_63:
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiPicker167

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond168 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 56)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_11
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_12
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        MOV     DPTR,#(page + 200)
        MOVX    A,@DPTR
        MOV     DPTR,#cyclesTo500
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 206)
        MOVX    A,@DPTR
        MOV     DPTR,#cycles2Step10Channel
        RET
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1135 void savePB(){  // delays can be 20 ms and 2400 mks, delays below are overkill
savePB:
        CFI Block cfiBlock172 Using cfiCommon0
        CFI Function savePB
        FUNCALL savePB, clearThePage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, clearThePage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, tickWait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, initiateTransfer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, tickWait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1136   //clearAndHop( 2 ); 
// 1137   //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
// 1138 //  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1139 //  asm( "NOP" );
// 1140   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1141   asm( "NOP" );
        NOP
// 1142   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1143   asm( "NOP" );
        NOP
// 1144   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1145   asm( "NOP" );
        NOP
// 1146   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1147   asm( "NOP" );
        NOP
// 1148   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1149   asm( "NOP" );
        NOP
// 1150   if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--;   CLKCON = 0x89;  asm( "NOP" ); asm( "NOP" );  asm( "NOP" ); return; }
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??savePB_0
        LCALL   ?Subroutine5
??CrossCallReturnLabel_2:
        MOV     0xc6,#-0x77
        NOP
        NOP
        NOP
        SJMP    ??CrossCallReturnLabel_44
// 1151   //clearThePage( 2 );
// 1152   if( main_pb ) clearThePage( 0x2E ); else clearThePage( 2 );
??savePB_0:
        MOV     DPTR,#main_pb
        MOVX    A,@DPTR
        JZ      ??savePB_1
        ; Setup parameters for call to function clearThePage
        MOV     R1,#0x2e
        SJMP    ??savePB_2
??savePB_1:
        ; Setup parameters for call to function clearThePage
        MOV     R1,#0x2
??savePB_2:
        LCALL   ?Subroutine27
// 1153   tickWait( 25*TICKS_IN_MS );
// 1154   //initiateTransfer( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE );
// 1155   initiateTransfer( (BYTE *)&page, (BYTE *)(main_pb ? 0x5C00 : PAGEADDR), PAGESIZE );
??CrossCallReturnLabel_59:
        MOVX    A,@DPTR
        MOV     R4,#0x0
        JZ      ??savePB_3
        MOV     R5,#0x5c
        SJMP    ??savePB_4
??savePB_3:
        MOV     R5,#0x4
??savePB_4:
        ; Setup parameters for call to function initiateTransfer
        MOV     R1,#-0xe
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   initiateTransfer
// 1156   main_pb = FALSE; 
        CLR     A
        MOVX    @DPTR,A
// 1157   tickWait( 11*TICKS_IN_MS );  // was 5 ms
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x16
        LCALL   tickWait
// 1158   CLKCON = 0x89;  asm( "NOP" );
        MOV     0xc6,#-0x77
        NOP
// 1159   asm( "NOP" );   asm( "NOP" );             
        NOP
        NOP
// 1160   //softKick();
// 1161   restoreRadio();
        LCALL   ?Subroutine20
// 1162 }
??CrossCallReturnLabel_44:
        LJMP    ??Subroutine32_0
        CFI EndBlock cfiBlock172
        REQUIRE CLKCON

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond173 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond174) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond174) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond174) CFA_SP SP+-4
        CFI Block cfiPicker175 Using cfiCommon1
        CFI (cfiPicker175) NoFunction
        CFI (cfiPicker175) Picker
        LCALL   clearThePage
        ; Setup parameters for call to function tickWait
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x32
        LCALL   tickWait
        RET
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiPicker175

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond176 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker178 Using cfiCommon1
        CFI (cfiPicker178) NoFunction
        CFI (cfiPicker178) Picker
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     DPTR,#cmdCount
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond179) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond179) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond179) CFA_SP SP+-4
??Subroutine5_0:
        LCALL   ?Subroutine30
??CrossCallReturnLabel_65:
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiPicker178
        CFI EndBlock cfiCond179
// 1163 /******************************************************************************
// 1164 * @fn  setInt
// 1165 * @brief       set the int16 value to register
// 1166 * Parameters:  byte reg - register, int val - value
// 1167 * @return      void
// 1168 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1169 void setInt( BYTE reg, UINT16 val ){
setInt:
        CFI Block cfiBlock180 Using cfiCommon0
        CFI Function setInt
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1170 UINT16 *ptr = &page.defCyclesTo500;
// 1171 BYTE *pptr = (BYTE *)&page;
        MOV     R6,#(page & 0xff)
        MOV     R7,#((page >> 8) & 0xff)
// 1172     /*
// 1173     if(page.isRelay && !page.is500Always ) switch(reg){
// 1174         case SET_ED_GW:       case BootImage:     case SyncWord:
// 1175             tickWait( 3+2*TICKS_IN_MS );  // give repeater chance to finish transmission
// 1176         break;
// 1177     }
// 1178     */
// 1179     switch(reg){     
        MOV     A,R2
        ANL     A,#0xf
        MOV     ?V0 + 0,A
        MOV     A,R3
        MOV     R4,A
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setInt>_0`:
        DATA
        DB        1
        DB        4
        DB        12
        DW        ??setInt_0
        DB        9
        DB        1
        DW        ??setInt_1
        DB        2
        DW        ??setInt_2
        DB        3
        DW        ??setInt_3
        DB        13
        DW        ??setInt_4
        DB        14
        DW        ??setInt_5
        DB        16
        DW        ??setInt_6
        DB        18
        DW        ??setInt_7
        DB        24
        DW        ??setInt_8
        DB        25
        DW        ??setInt_9
        DW        ??setInt_10
        CODE
// 1180         case SET_GROUP_ID: page.groupId = val; break;
??setInt_1:
        MOV     DPTR,#(page + 4)
??setInt_11:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LJMP    ??setInt_12
// 1181         case JOIN: page.netId = (val & 0xF); page.myBunch = ( val >> 8 ) & 0xFF;  break;
??setInt_2:
        MOV     A,?V0 + 0
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPTR,#(page + 3)
        LJMP    ??setInt_12
// 1182         case SET_ED_GW:
// 1183             // this check for not 0 is a mistake, because it prohibits setting addr to 0, was a big issue on Remington Hi-Volts !!!
// 1184             //if( val & 0xFF   ) page.edAddr = val & 0xFF;
// 1185             //if( val & 0xFF00 ) page.gwAddr = ( val >> 8 ) & 0xFF;
// 1186             
// 1187             ADDR = page.edAddr = val; // & 0xFF;
??setInt_3:
        MOV     A,R2
        MOV     DPTR,#(page + 190)
        MOVX    @DPTR,A
        MOV     DPTR,#-0x20fb
        MOVX    @DPTR,A
// 1188             page.gwAddr = ( val >> 8 ); // & 0xFF;
        MOV     A,R4
        MOV     DPTR,#(page + 191)
        LJMP    ??setInt_12
// 1189         break;
// 1190         case BootImage:
// 1191             //tickWait( 12 * TICKS_IN_MS);
// 1192             {void (*f)( void ) = ( void (*)( void ) )val;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}          
??setInt_4:
        ; Setup parameters for indirect call
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?CALL_IND
        LJMP    ??setInt_10
// 1193         break;
// 1194         case SyncWord: 
// 1195           SYNC0 = val;    SYNC1 = ( val >> 8 ); // & 0xFF;
??setInt_5:
        MOV     A,R2
        MOV     DPTR,#-0x20ff
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     DPTR,#-0x2100
        MOVX    @DPTR,A
// 1196           page.syncword = val; 
        MOV     DPTR,#(page + 154)
        SJMP    ??setInt_11
// 1197         break;
// 1198         
// 1199         case SetCyclesTo500:                    case SetCyclesTo10:             
// 1200         case SetCyclesToStep500Channel:         case SetCyclesToStep10Channel:  
// 1201         case SetCyclesToSoftKick:               case SetCyclesToHardKick:   
// 1202         case SetImageAddr:
// 1203         case SetVersionLow:                     case SetVersionHigh:
// 1204         //default:
// 1205             //if( (reg > (SetCyclesTo500-1) ) && ( reg < (SetVersionHigh+1) ) ){
// 1206                 //UINT16 *ptr = &page.defCyclesTo500;
// 1207                 ptr[ reg - SetCyclesTo500 ] = val;
??setInt_0:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#((page + 192) & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#(((page + 192) >> 8) & 0xff)
        MOV     DPH,A
        SJMP    ??setInt_11
// 1208             //}
// 1209         break;
// 1210         case SetBasePtr:
// 1211             //if( (base_ptr == NULL) && (((UINT16)val) > 0x3FF) && (((UINT16)val) < 0x800) )  base_ptr = (BYTE *)val; // to save space
// 1212           base_ptr = (BYTE *)val; 
??setInt_6:
        MOV     DPTR,#base_ptr
        SJMP    ??setInt_11
// 1213         break;
// 1214         case MicroOffset: page.pureOffset = (INT16)val; break;
??setInt_7:
        MOV     DPTR,#(page + 198)
        SJMP    ??setInt_11
// 1215         case ReadPBOneCommand: 
// 1216             switch( (val>>12)&0xF ){
??setInt_8:
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,#0xc
        MOV     R0,#?V0 + 2
        LCALL   ?US_SHR
        MOV     A,?V0 + 2
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for setInt>_1`:
        DATA
        DB        1
        DB        1
        DW        ??setInt_13
        DW        ??setInt_14
        DW        ??setInt_15
        CODE
// 1217                 case 1: pptr = (BYTE *)0x400;  break;
??setInt_14:
        MOV     R6,#0x0
        MOV     R7,#0x4
        SJMP    ??setInt_13
// 1218                 case 2: pptr = (BYTE *)0x5C00; break;
??setInt_15:
        MOV     R6,#0x0
        MOV     R7,#0x5c
// 1219             }
// 1220             base_ptr = pptr + 24*((val>>8)&0xF);
??setInt_13:
        MOV     A,#0xf
        ANL     A,R4
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,R6
        ADD     A,R0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R1
        LCALL   ?Subroutine21
// 1221             calibrationRepeat = (val>>4)&0xF;
??CrossCallReturnLabel_78:
        MOV     A,R2
        SWAP    A
        ANL     A,#0xf
        MOV     DPTR,#calibrationRepeat
        MOVX    @DPTR,A
// 1222             reportScaling  = (val&0xF) * calibrationRepeat; 
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        MUL     AB
        MOV     DPTR,#reportScaling
        SJMP    ??setInt_12
// 1223         break;
// 1224         case SetPBByte: pptr[ ( val >> 8 )&0xFF ] = val & 0xFF; break;
??setInt_9:
        MOV     A,R4
        ADD     A,#(page & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((page >> 8) & 0xff)
        MOV     DPH,A
        MOV     A,R2
??setInt_12:
        MOVX    @DPTR,A
// 1225     }
// 1226 }
??setInt_10:
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock180
// 1227 
// 1228 /******************************************************************************
// 1229 * @fn  parseCommands
// 1230 * @brief       This function parses commands and sets global flags
// 1231 * Parameters:
// 1232 * @return void
// 1233 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1234 void parseCommands(BYTE l){
parseCommands:
        CFI Block cfiBlock181 Using cfiCommon0
        CFI Function parseCommands
        FUNCALL parseCommands, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, initiateTransfer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
// 1235 BYTE *ptr     = radioPktBuffer + 8;
        MOV     R6,#((radioPktBuffer + 8) & 0xff)
        MOV     R7,#(((radioPktBuffer + 8) >> 8) & 0xff)
// 1236 BYTE cmd, reg;
// 1237 BOOL flag = TRUE, addrFlag = FALSE; //, boa2 = FALSE;//, individualAddr = FALSE;;
        MOV     ?V0 + 3,#0x1
// 1238 UINT16 cmdCnt = 0; //, i;
        SJMP    ??parseCommands_0
// 1239     //while( (*ptr != NULLOP) && (ptr < barrier) ){
// 1240     while( *ptr && (l--) ){
// 1241         cmd = *ptr++; 
// 1242         if( (cmd & 0xF0) == SHORT_NETJOIN ){
// 1243             reg = *ptr++;
??parseCommands_1:
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
// 1244             if( mymemcmp( page.myMac, ptr, 6 ) == 0 ){ page.netId = (cmd & 0xF); page.myBunch = reg; }
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseCommands_2
        MOV     A,#0xf
        ANL     A,?V0 + 4
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     A,?V0 + 5
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
// 1245             ptr += 6;
??parseCommands_2:
        MOV     A,R6
        ADD     A,#0x6
        MOV     R6,A
??parseCommands_3:
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1246         }else{
??parseCommands_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        JNZ     $+5
        LJMP    ??parseCommands_4
        MOV     R3,?V0 + 2
        MOV     A,#-0x1
        ADD     A,R3
        MOV     ?V0 + 2,A
        MOV     A,R3
        JNZ     $+5
        LJMP    ??parseCommands_4
        MOV     ?V0 + 4,R2
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,#-0x10
        ANL     A,?V0 + 4
        MOV     ?V0 + 5,A
        MOV     A,#-0x10
        XRL     A,?V0 + 5
        JZ      ??parseCommands_1
// 1247             if( search_stat == 2 ) search_stat = page.searchCommunication;
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??CrossCallReturnLabel_23
        LCALL   ?Subroutine14
// 1248             cmdCnt = *((UINT16 *)ptr);
??CrossCallReturnLabel_23:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12
// 1249             ptr += 2;
??CrossCallReturnLabel_17:
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1250             switch( cmd & 0x3 ){ 
        MOV     A,R6
        ADD     A,#0x2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x3
        ANL     A,?V0 + 4
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for parseCommands>_0`:
        DATA
        DB        0
        DB        3
        DW        ??parseCommands_5
        DW        ??parseCommands_6
        DW        ??parseCommands_7
        DW        ??parseCommands_8
        DW        ??parseCommands_9
        CODE
// 1251                 case BROADCAST:                                                             flag = TRUE; break;
??parseCommands_6:
        MOV     ?V0 + 3,#0x1
        SJMP    ??parseCommands_5
// 1252                 case STRINGADDR: flag = ( *((UINT16 *) ptr) == page.groupId );              ptr += 2; /*individualAddr = flag;*/ break;
??parseCommands_7:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#(page + 4)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??parseCommands_10:
        JNZ     ??parseCommands_11
??parseCommands_12:
        MOV     R2,#0x1
        SJMP    ??parseCommands_13
??parseCommands_11:
        MOV     R2,#0x0
??parseCommands_13:
        MOV     ?V0 + 3,R2
        INC     R6
        INC     R6
        MOV     A,R1
        SJMP    ??parseCommands_14
// 1253                 case NIADDR:     flag = ( ptr[0] == page.myBunch && ptr[1] == page.netId ); ptr += 2;    break;
??parseCommands_8:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 3)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_11
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_11
        SJMP    ??parseCommands_12
// 1254                 case MACADDR:    
// 1255                     flag = ( mymemcmp( page.myMac, ptr, 6 ) == 0 );// flag = TRUE; else flag = FALSE;
??parseCommands_9:
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseCommands_15
        MOV     R2,#0x1
        SJMP    ??parseCommands_16
??parseCommands_15:
        MOV     R2,#0x0
??parseCommands_16:
        MOV     ?V0 + 3,R2
// 1256                     //individualAddr = flag;
// 1257                     ptr += 6;
        MOV     A,R6
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
??parseCommands_14:
        MOV     R7,A
// 1258                 break;
// 1259             }
// 1260             addrFlag = flag;
??parseCommands_5:
        MOV     ?V0 + 6,?V0 + 3
// 1261             if( cmdCnt ){
        MOV     A,?V0 + 0
        JNZ     ??parseCommands_17
        MOV     A,?V0 + 1
??parseCommands_17:
        JZ      ??parseCommands_18
// 1262                 if( cmdCount > 0xFF00 && cmdCnt < 0x100 ) cmdCount = cmdCnt;
        MOV     DPTR,#cmdCount
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        JC      ??parseCommands_19
        CLR     C
        MOV     A,?V0 + 1
        SUBB    A,#0x1
        JNC     ??parseCommands_19
        MOV     DPTR,#cmdCount
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        SJMP    ??parseCommands_18
// 1263                 else                                      flag = flag && (cmdCnt > cmdCount);
??parseCommands_19:
        MOV     A,?V0 + 3
        JZ      ??parseCommands_20
        MOV     DPTR,#cmdCount
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 1
        JNC     ??parseCommands_20
        MOV     R2,#0x1
        SJMP    ??parseCommands_21
??parseCommands_20:
        MOV     R2,#0x0
??parseCommands_21:
        MOV     ?V0 + 3,R2
// 1264             }
// 1265             if( cmdCnt > cmdCount ) cmdCount = cmdCnt;            
??parseCommands_18:
        MOV     DPTR,#cmdCount
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,?V0 + 0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 1
        JNC     ??parseCommands_22
        MOV     DPTR,#cmdCount
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 1266             switch( cmd & 0xF0 ){
??parseCommands_22:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     A,?V0 + 5
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for parseCommands>_1`:
        DATA
        DB        0
        DB        3
        DB        16
        DW        ??parseCommands_23
        DB        32
        DW        ??parseCommands_24
        DB        96
        DW        ??parseCommands_25
        DW        ??parseCommands_0
        CODE
// 1267                 case SETREG:
// 1268                     if( search_stat != page.searchCommunication ) page.searchCommunication = search_stat;
??parseCommands_23:
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        XRL     A,R2
        JZ      ??parseCommands_26
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     DPH,#(((page + 194) >> 8) & 0xff)
        MOV     DPL,#((page + 194) & 0xff)
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.7,C
        MOVX    @DPTR,A
// 1269                     reg = *ptr++;
??parseCommands_26:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1270                     switch( cmd&0xC ){
        MOV     A,#0xc
        ANL     A,?V0 + 4
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for parseCommands>_2`:
        DATA
        DB        0
        DB        2
        DB        4
        DW        ??parseCommands_27
        DB        8
        DW        ??parseCommands_28
        DW        ??parseCommands_0
        CODE
// 1271                         case BYTE_VAL:   if( flag ) setByte ( reg, *ptr );               ptr++;   break;
??parseCommands_27:
        MOV     A,?V0 + 3
        JZ      ??parseCommands_29
        ; Setup parameters for call to function setByte
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 5
        LCALL   setByte
??parseCommands_29:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        LJMP    ??parseCommands_0
// 1272                         case SHORT_VAL:  if( flag ) setInt  ( reg, *((UINT16*)ptr) );    ptr+=2;  break;
??parseCommands_28:
        MOV     A,?V0 + 3
        JZ      ??parseCommands_30
        ; Setup parameters for call to function setInt
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 5
        LCALL   setInt
??parseCommands_30:
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        LJMP    ??parseCommands_3
// 1273                     }
// 1274                 break;
// 1275                 case RESET: if( flag ) reset(); else break; // ticks[ Reset ] = TICKS_IN_SEC; else break;
??parseCommands_24:
        MOV     A,?V0 + 3
        JNZ     $+5
        LJMP    ??parseCommands_0
        ; Setup parameters for call to function reset
        LCALL   reset
// 1276                 
// 1277                 //case BOA_CHANNEL:   boa2 = TRUE;
// 1278                 case BOOT_OVER_AIR: if( addrFlag ) {
??parseCommands_25:
        MOV     A,?V0 + 6
        JZ      ??parseCommands_4
// 1279                 UINT16 addr;  
// 1280 //                        asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1281 //                        asm( "NOP" );
// 1282 //                        asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1283                         asm( "NOP" );
        NOP
// 1284                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1285                         asm( "NOP" );
        NOP
// 1286                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1287                         asm( "NOP" );
        NOP
// 1288                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1289                         asm( "NOP" );
        NOP
// 1290                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1291                         asm( "NOP" );
        NOP
// 1292                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1293                         asm( "NOP" );
        NOP
// 1294                         if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" );  return; }  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??parseCommands_31
        LCALL   ?Subroutine5
??CrossCallReturnLabel_3:
        SJMP    ??parseCommands_32
// 1295                     page.searchCommunication = FALSE;
??parseCommands_31:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        MOVX    @DPTR,A
// 1296                     reg = *ptr++; addr = *((UINT16*)ptr);  
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1297                     //if( boa2 ){ setByte( SET_CUR_CHANNEL, reg ); reg = 16; }
// 1298                     //if( ( addr > 0x3FF ) && ( addr < 0x6000 ) ){ // to save space - all other addresses are protected anyway
// 1299                         ptr += 2;
// 1300                         //if( reg & 1 ) reg++;
// 1301                         //tickWait( 12 * TICKS_IN_MS );
// 1302                         initiateTransfer( ptr, (BYTE *)addr, reg );
        ; Setup parameters for call to function initiateTransfer
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   initiateTransfer
// 1303                         tickWait( 4 );  // delay should be 160 mks
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x4
        LCALL   tickWait
// 1304                         //softKick();
// 1305                     //}
// 1306                     CLKCON = 0x89; asm( "NOP" );
??parseCommands_32:
        MOV     0xc6,#-0x77
        NOP
??parseCommands_4:
        MOV     R7,#0x7
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock181
        REQUIRE CLKCON
// 1307                 }return;
// 1308                 /*
// 1309                 case SET_NEXT_KEY: case SET_NEXT_IV: 
// 1310                     if( individualAddr ){ 
// 1311                         loadKey( (char *)0x3E0 ); loadIV( (char *)0x3F0 ); 
// 1312                         decode( (char *)ptr, ((cmd&0xF0)==SET_NEXT_IV) ? (char *)nextIV : (char *)nextKey ); 
// 1313                         loadKey( page.curKey );
// 1314                     }
// 1315                 return;
// 1316                 case ASVOL_NETCMD:
// 1317                     if( individualAddr ){                   
// 1318                         cmd = *ptr++;
// 1319                         page.channel = page.starting500Channel = *ptr++;                // 7 bytes so far, 1 bit free
// 1320                         page.edAddr  =                           *ptr++;
// 1321                         page.gwAddr  =                           *ptr++;
// 1322                         page.myBunch =                           *ptr++;
// 1323                         page.groupId =                           *((UINT16 *) ptr);  
// 1324 
// 1325                         page.netId   =                           0xF & cmd;
// 1326                         //page.use12kbod  = (0!=(0x10 & cmd ) )?1:0;
// 1327                         //page.useFEC     = (0!=(0x20 & cmd ) )?1:0;
// 1328                         //page.use250kbod = (0!=(0x40 & cmd ) )?1:0;
// 1329 
// 1330                         savePB();
// 1331                         setup_hopper( page.channel );
// 1332                         setupRadio(   page.channel ); //page.is500Always ? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
// 1333                     }
// 1334                 break;
// 1335                 */
// 1336             }
// 1337 //            if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
// 1338         }
// 1339     }
// 1340 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond182 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#search_stat
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184
// 1341 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1342 void clearThePage(BYTE page){
clearThePage:
        CFI Block cfiBlock185 Using cfiCommon0
        CFI Function clearThePage
        FUNCALL clearThePage, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL clearThePage, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1343   //asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
// 1344   //asm( "NOP" );
// 1345   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1346   asm( "NOP" );
        NOP
// 1347   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1348   asm( "NOP" );
        NOP
// 1349   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1350   asm( "NOP" );
        NOP
// 1351   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 1352   asm( "NOP" );
        NOP
// 1353   if( *((BYTE *)0xF53B) != 0x55 ) reset(); 
        MOV     DPTR,#-0xac5
        MOVX    A,@DPTR
        XRL     A,#0x55
        JZ      ??clearThePage_0
        ; Setup parameters for call to function reset
        LCALL   reset
// 1354   if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; return; }
??clearThePage_0:
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??clearThePage_1
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     DPTR,#cmdCount
        LCALL   ?Subroutine30
??CrossCallReturnLabel_64:
        SJMP    ??clearThePage_2
// 1355   //rc();
// 1356   asm("CLR  0xA8.7");
??clearThePage_1:
        CLR  0xA8.7
// 1357   if( !isOnTestStand ) reset();  
        JNZ     ??clearThePage_3
        ; Setup parameters for call to function reset
        LCALL   reset
// 1358   FADDRH = page; FWT = 0x21; FCTL = 1; asm("NOP");
??clearThePage_3:
        MOV     0xad,R6
        MOV     0xab,#0x21
        MOV     0xae,#0x1
        NOP
// 1359   FADDRH = 0;
        MOV     0xad,#0x0
// 1360   asm("SETB 0xA8.7");
        SETB 0xA8.7
// 1361   //FADDRH = 0;
// 1362   isOnTestStand = 0;  
        CLR     A
??clearThePage_2:
        MOVX    @DPTR,A
// 1363 }
        LJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock185
        REQUIRE FWT
        REQUIRE FADDRH
        REQUIRE FCTL

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond186 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_3
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_4
        CFI (cfiCond188) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond188) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond188) CFA_SP SP+-4
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker190 Using cfiCommon1
        CFI (cfiPicker190) NoFunction
        CFI (cfiPicker190) Picker
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        RET
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiPicker190

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1364 void quartz(void){
quartz:
        CFI Block cfiBlock191 Using cfiCommon0
        CFI Function quartz
        FUNCALL quartz, halWait
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
        CFI R6 A
        PUSH    A
        CFI R6 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
// 1365 BYTE counter = 127;
        MOV     R6,#0x7f
// 1366       SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
        ANL     0xbe,#0xfb
        SJMP    ??quartz_0
// 1367       while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
??quartz_1:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x2
        LCALL   halWait
??quartz_0:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.6
        JC      ??quartz_2
        MOV     A,R6
        DEC     R6
        JNZ     ??quartz_1
// 1368       asm("NOP");
??quartz_2:
        NOP
// 1369       //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
// 1370       CLKCON = 0x89;  
        MOV     0xc6,#-0x77
// 1371       SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
        ORL     0xbe,#0x4
// 1372 }
        POP     A
        CFI R6 A
        CFI CFA_SP SP+-2
        MOV     R6,A
        CFI R6 SameValue
        RET
        CFI EndBlock cfiBlock191
        REQUIRE SLEEP
        REQUIRE CLKCON

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for search_stat>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for lastCycle>`:
        DW 1680

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesTo500>`:
        DB 180

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesTo10>`:
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesToStep500Channel>`:
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2Step10Channel>`:
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2SoftKick>`:
        DB 8

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2HardKick>`:
        DB 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for calibrationRepeat>`:
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for the_frequency>`:
        DB 100, 106, 170

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ticks>`:
        DW 0F500H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for wasAHardResetOrPowerOn>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cnt>`:
        DB 1

        END
// 1373 /*inline void rc(){
// 1374     CLKCON |= OSC_BIT;                    // starting the RC Oscillator
// 1375     asm( "NOP" );
// 1376     SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
// 1377 }*/
// 1378 /*==== END OF FILE ==========================================================*/
// 
// 6 084 bytes in segment NEAR_CODE
//    28 bytes in segment SFR_AN
//    17 bytes in segment XDATA_I
//    17 bytes in segment XDATA_ID
//    41 bytes in segment XDATA_ROM_C
//   358 bytes in segment XDATA_Z
// 
// 6 101 bytes of CODE  memory
//    41 bytes of CONST memory
//     0 bytes of DATA  memory (+ 28 bytes shared)
//   375 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
