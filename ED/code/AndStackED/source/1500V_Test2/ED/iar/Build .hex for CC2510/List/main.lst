###############################################################################
#                                                                             #
# IAR 8051 C/C++ Compiler V7.30B/W32                    06/Apr/2017  13:54:34 #
# Copyright 2004-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\1500V_Test2\ED\code\AndStackED\source\main.c    #
#    Command line       =  E:\1500V_Test2\ED\code\AndStackED\source\main.c    #
#                          -D NDEBUG -D chip=2510 -D LOWER_IMAGE -D           #
#                          MidString -D MIDSTRING -lCN                        #
#                          "E:\1500V_Test2\ED\iar\Build .hex for              #
#                          CC2510\List\" -lA "E:\1500V_Test2\ED\iar\Build     #
#                          .hex for CC2510\List\" -o                          #
#                          "E:\1500V_Test2\ED\iar\Build .hex for              #
#                          CC2510\Obj\" -e -z9 --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 32 -I     #
#                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\  #
#                          -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INCLU #
#                          DE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL_B #
#                          UI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\     #
#    List file          =  E:\1500V_Test2\ED\iar\Build .hex for               #
#                          CC2510\List\main.lst                               #
#    Object file        =  E:\1500V_Test2\ED\iar\Build .hex for               #
#                          CC2510\Obj\main.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\1500V_Test2\ED\code\AndStackED\source\main.c
      1          /*==== DECLARATION CONTROL ===================================================*/
      2          /*==== INCLUDES ==============================================================*/
      3          
      4          #include "hal_main.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIM
   \                     RFIM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr FWT
   \                     FWT:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr FADDRH
   \                     FADDRH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xae
   \   unsigned char volatile __sfr FCTL
   \                     FCTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbc
   \   unsigned char volatile __sfr RNDL
   \                     RNDL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbd
   \   unsigned char volatile __sfr RNDH
   \                     RNDH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEP
   \                     SLEEP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCON
   \                     CLKCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcb
   \   unsigned char volatile __sfr T3CTL
   \                     T3CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcc
   \   unsigned char volatile __sfr T3CCTL0
   \                     T3CCTL0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcd
   \   unsigned char volatile __sfr T3CC0
   \                     T3CC0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xce
   \   unsigned char volatile __sfr T3CCTL1
   \                     T3CCTL1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcf
   \   unsigned char volatile __sfr T3CC1
   \                     T3CC1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe2
   \   unsigned char volatile __sfr T1CNTL
   \                     T1CNTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe3
   \   unsigned char volatile __sfr T1CNTH
   \                     T1CNTH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe5
   \   unsigned char volatile __sfr T1CCTL0
   \                     T1CCTL0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIF
   \                     RFIF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      5          #include "main.h"
      6          #include "parameter_block.h"
      7          #include "commands.h"
      8          //#include <stdio.h>
      9          //#include <stdlib.h>
     10          //#include <string.h>
     11          
     12          #define MKS_IN_TICK     500
     13          #define TICKS_IN_SEC    2000
     14          #define TICKS_IN_MS     2
     15          /*
     16          #define MKS_IN_TICK     200
     17          #define TICKS_IN_SEC    5000
     18          #define TICKS_IN_MS     5
     19          */
     20          //UINT32  _freq         = FREQUENCY_FCC_CC2511;

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          INT16  _slot         = ( 40 * TICKS_IN_MS );
   \                     _slot:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _slot>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     22          INT16  _join_slot    = ( 24 * TICKS_IN_MS );
   \                     _join_slot:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _join_slot>`
   \   000002                REQUIRE __INIT_XDATA_I
     23          //#define  _slot         ( 40 * TICKS_IN_MS )
     24          //#define  _join_slot    ( 24 * TICKS_IN_MS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
     25          INT16  _gw_delay     = ( 30 * TICKS_IN_MS );
   \                     _gw_delay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _gw_delay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     26          INT16  _loop_delay   = ( 40 * TICKS_IN_MS );
   \                     _loop_delay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _loop_delay>`
   \   000002                REQUIRE __INIT_XDATA_I
     27          //#define  _gw_delay      ( 30 * TICKS_IN_MS )
     28          //#define  _loop_delay     ( 40 * TICKS_IN_MS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
     29          BYTE    _datarate     = DATA_RATE_4_CC2511;
   \                     _datarate:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for _datarate>`
   \   000001                REQUIRE __INIT_XDATA_I
     30          
     31          //#define _mppCycle            ( TICKS_IN_SEC / 16 ) 
     32          #define _mppCycle            ( 60 * TICKS_IN_MS ) 
     33          #define _dogFeeding          ( TICKS_IN_SEC / 16 )
     34          #define _adjustFrequency     ( (UINT16)TICKS_IN_SEC * 2 )
     35          #define _firstAdcMeasurement ( TICKS_IN_SEC / 50 )
     36          //#define _adcMeasurement      ( TICKS_IN_SEC / 100 )
     37          #define _adcMeasurement      ( 4 * TICKS_IN_MS )
     38          #define _calibrationDelay    ( TICKS_IN_MS  )
     39          
     40          //void configureAdcs(void);
     41          
     42          //void feedTheDog(void);
     43          //BYTE clearAndHop( BYTE p );
     44          void tickWait(BYTE wait);
     45          void rc(void);
     46          void prepareData(void);
     47          void sendData(BYTE *buffer, BOOL is500 );
     48          void armAdcs(void);
     49          void readNextValue(void);
     50          void parseGWPackage(void);
     51          //void calibrate(void);
     52          void computeADCs(BOOL timeout, BOOL accumulateEnergy);
     53          void prepareJoinRequest(void);
     54          void prepareScaling(void);
     55          //void prepareFlashCheck(void);
     56          void setup500( BOOL flag );
     57          BYTE *nextSlot(void);
     58          void switchTo255(void);
     59          
     60          void parseCommands(BYTE l);
     61          void setByte( BYTE reg, BYTE val );
     62          
     63          extern void flashCallback(void);
     64          extern void setup_hopper(BYTE curch);
     65          extern void hop(void);
     66          
     67          extern void wait_aes(void);
     68          extern void load(const unsigned char what, char *ptr);
     69          extern void code(    unsigned char what, unsigned char size,  char *from, char *to );
     70          //extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, UINT16 len);
     71          extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, BYTE len);
     72          //extern void writeTheLatest(BYTE *ptr, BYTE len);
     73          extern BOOL readTheLatest( BYTE *ptr, BYTE len);
     74          
     75          //#ifdef MidString
     76          //void compute98(void);
     77          //#endif
     78          
     79          #define loadKey( key )                  { load( 0x04, key );     wait_aes(); }
     80          #define loadIV(  iv )                   { load( 0x06, iv  );     wait_aes(); }
     81          #define encode( size,  from, to )       code( 0x00, size, from, to );
     82          #define decode( size,  from, to )       code( 0x02, size, from, to );
     83          
     84          // must be even

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          ParameterBlock page;
   \                     page:
   \   000000                DS 242
   \   0000F2                REQUIRE __INIT_XDATA_Z
     86          //float energy       = 0.0;
     87          //float deltaEnergy  = 0.0;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          BYTE *base_ptr = NULL;
   \                     base_ptr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     89          
     90          //#define PAGESIZE 240
     91          #define PAGESIZE 242
     92          #define PAGEADDR 0x5C00
     93          
     94          //#define ENERGY_WRITE_LIMIT   ((BYTE *) (PAGEADDR + 0x3F0) )
     95          #ifdef MidString 
     96              #define KE (1E-3*20.0*1E-3*0.125 / 3600.0)
     97          #else
     98              #define KE (1E-3*2.0*1E-3*0.125  / 3600.0)
     99          #endif

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          BYTE  search_stat = 2;
   \                     search_stat:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for search_stat>`
   \   000001                REQUIRE __INIT_XDATA_I
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          float invVref0 = 0;
   \                     invVref0:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          INT8 theRealOffset  = 0;
   \                     theRealOffset:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          /*==== PUBLIC FUNCTIONS ======================================================*/
    106          #define BUFFER_SIZE 8
    107          #define BUFFER_MASK 0x7    
    108          #define N_CHANNELS  9
    109          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          UINT16 adcBuf  [ N_CHANNELS ][ BUFFER_SIZE    ];
   \                     adcBuf:
   \   000000                DS 144
   \   000090                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          INT32  adcs[     N_CHANNELS ];
   \                     adcs:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          UINT16 adcs16[   N_CHANNELS ];
   \                     adcs16:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          UINT16 adcsTemp[ N_CHANNELS ];
   \                     adcsTemp:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          BYTE tempAdcsCount = 0;
   \                     tempAdcsCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          
    117          extern BYTE mdm_rate1[6];
    118          
    119          UINT16            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120                 ticks2ProcessCmd = 0,       
   \                     ticks2ProcessCmd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121                 cmdCount = 0,
   \                     cmdCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    122                 lastCycle   = (40 * TICKS_IN_MS * 21),
   \                     lastCycle:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for lastCycle>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123                 cyclesTo500 = 120, cyclesTo10 = 220, cyclesToStep500Channel = 20, cycles2Step10Channel = 30,
   \                     cyclesTo500:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cyclesTo500>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cyclesTo10:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cyclesTo10>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cyclesToStep500Channel:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cyclesToStep500Channel>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cycles2Step10Channel:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cycles2Step10Channel>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124                 cycles2SoftKick = 8, cycles2HardKick = 80, cyclesFromStart = 0;
   \                     cycles2SoftKick:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cycles2SoftKick>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cycles2HardKick:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cycles2HardKick>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     cyclesFromStart:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          UINT16 temperatureProtectionDelay, decodeDelay;
   \                     temperatureProtectionDelay:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     decodeDelay:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          BYTE   curChannel = 0,  curBunch = 0,  /*maxBunch = 0,*/        
   \                     curChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     curBunch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128                 bufferCount = 0, adcCount = 0,  reportScaling = 0,       joinRequestWasSend = 0,
   \                     bufferCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     adcCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     reportScaling:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     joinRequestWasSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129                 resetReason,     theOC,         setOC,
   \                     resetReason:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     theOC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     setOC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130                 reportFlashCheck = 0,           calibrationRepeat = 4,   cyclesToHop = 0, 
   \                     reportFlashCheck:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     calibrationRepeat:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for calibrationRepeat>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     cyclesToHop:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131                 bunchCount = 0,                 got_gw = 0,              isOnTestStand = 0,
   \                     bunchCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     got_gw:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     isOnTestStand:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    132                 oscWhatToWaitFor = SetOscLowCurrentOnlyDelay,
   \                     oscWhatToWaitFor:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for oscWhatToWaitFor>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    133                 ocShortCircuitLimit = 255; //, page2clear = 255;
   \                     ocShortCircuitLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ocShortCircuitLimit>`
   \   000001                REQUIRE __INIT_XDATA_I
    134          
    135          // Pointer to memory location tracking whether module can turn on,                                              
    136          // and the three acceptable values. Module turning off because of                                               
    137          // temperature is not tracked.  Pointer to memory location is                                                   
    138          // constant.                                                                                                    

   \                                 In  segment XDATA_I, align 1, keep-with-next
    139          BYTE * const ModuleOffRememberedPtr = ((BYTE *) 0xFFFD);
   \                     ModuleOffRememberedPtr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ModuleOffRememberedPtr>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          BYTE ModuleStatusOff = 0xE7;
   \                     ModuleStatusOff:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ModuleStatusOff>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    141          BYTE ModuleStatusOffFetFailure = 0x7E;
   \                     ModuleStatusOffFetFailure:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ModuleStatusOffFetFailure>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          BYTE ModuleStatusCanTurnOn = 0x00;
   \                     ModuleStatusCanTurnOn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          BOOL   enable2SendData  = FALSE,       txDisabled = FALSE,                    alignMPP = TRUE,     //cleanTxBuffer   = FALSE,
   \                     enable2SendData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txDisabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     alignMPP:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for alignMPP>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145                 from_flash = FALSE,             /*zeroPackageWasNotReceived = FALSE,*/ turnOnFlag = FALSE,  isCalibrationPackage = FALSE,
   \                     from_flash:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     turnOnFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     isCalibrationPackage:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146                 was_listening = FALSE, rcgen = FALSE,
   \                     was_listening:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     rcgen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147                 ch255 = FALSE,                  packagePrepared = FALSE;//,                  real_cw_mode = FALSE;
   \                     ch255:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     packagePrepared:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          INT16 gnd_shift = -600;
   \                     gnd_shift:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for gnd_shift>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          //UINT16 Vout98 = 0; 
    151          //INT16  Cur98  = 0;
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          UINT32 utc = 0;
   \                     utc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          UINT16 ms  = 0;
   \                     ms:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    155          //UINT16 ticks2Prepare = 0;
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          UINT32 utcLast = 0;
   \                     utcLast:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158          UINT16 msLast = 0,  processingTime, pt;
   \                     msLast:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     processingTime:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     pt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          UINT16 mdmcfg4_cycles = 0;
   \                     mdmcfg4_cycles:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    161          
    162          // variables to control turning module on/ "track" FET failures                                             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          static BOOL fetFailure = FALSE; // static variable indicating if a FET failure recognized
   \                     fetFailure:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    164          BOOL checkForFETFailure = TRUE; // once FET failure recognized, no longer check unless restart
   \                     checkForFETFailure:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for checkForFETFailure>`
   \   000001                REQUIRE __INIT_XDATA_I
    165          // netValue made global so fetFailure condition can access/change reported "status"

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          static UINT16 netValue = MainNetValueStandard;
   \                     netValue:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for netValue>`
   \   000002                REQUIRE __INIT_XDATA_I
    167          
    168          static __xdata_rom const UINT16 cyclesDefaults[] = {180, 30, 3, 4, 8, 80};

   \                                 In  segment XDATA_ROM_C, align 1
    169          static __xdata_rom const BYTE default_pb[] = {
   \                     default_pb:
   \   000000   AAAA0000     DB 170, 170, 0, 0, 255, 255, 44, 118, 64, 2, 39, 68, 113, 170, 53, 186
   \            FFFF2C76
   \            40022744
   \            71AA35BA
   \   000010   D3BC633D     DB 211, 188, 99, 61, 145, 237, 28, 63, 0, 0, 117, 195, 0, 0, 28, 69
   \            91ED1C3F
   \            000075C3
   \            00001C45
   \   000020   95BFD634     DB 149, 191, 214, 52, 0, 0, 146, 66, 184, 30, 221, 65, 0, 192, 90, 197
   \            00009242
   \            B81EDD41
   \            00C05AC5
   \   000030   E17AC841     DB 225, 122, 200, 65, 0, 0, 0, 0, 0, 0, 248, 64, 0, 128, 14, 196, 143
   \            00000000
   \            0000F840
   \            00800EC4
   \            8F      
   \   000041   C2C74100     DB 194, 199, 65, 0, 0, 107, 195, 82, 184, 222, 62, 0, 64, 28, 68, 205
   \            006BC352
   \            B8DE3E00
   \            401C44CD
   \   000051   CCFC4000     DB 204, 252, 64, 0, 0, 5, 196, 195, 245, 248, 64, 0, 128, 18, 196, 65
   \            0005C4C3
   \            F5F84000
   \            8012C441
   \   000061   4E445300     DB 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7, 65
   \            6C617241
   \            75677573
   \            74000741
   \   000071   75677573     DB 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7, 32
   \            74000741
   \            75677573
   \            74000720
   \   000081   4EBC0250     DB 78, 188, 2, 80, 0, 0, 0, 48, 117, 240, 0, 176, 4, 248, 127, 0, 0, 0
   \            00000030
   \            75F000B0
   \            04F87F00
   \            0000    
   \   000093   00FFFFFF     DB 0, 255, 255, 255, 255, 255, 255, 240, 240, 0, 0, 0, 170, 255, 120
   \            FFFFFFF0
   \            F0000000
   \            AAFF78  
   \   0000A2   804DFFCB     DB 128, 77, 255, 203, 72, 102, 84, 203, 72, 102, 84, 203, 72, 102, 84
   \            486654CB
   \            486654CB
   \            486654  
   \   0000B1   ACC5A737     DB 172, 197, 167, 55, 23, 183, 81, 56, 1, 1, 100, 100, 255, 2, 1, 255
   \            17B75138
   \            01016464
   \            FF0201FF
   \   0000C1   FF1701A4     DB 255, 23, 1, 164, 154, 56, 255, 40, 0, 30, 0, 3, 0, 4, 0, 8, 0, 80, 0
   \            9A38FF28
   \            001E0003
   \            00040008
   \            005000  
   \   0000D4   3F08F100     DB 63, 8, 241, 0, 241, 0, 255, 137, 255, 255, 25, 70, 110, 100, 90, 10
   \            F100FF89
   \            FFFF1946
   \            6E645A0A
   \   0000E4   070B3C0A     DB 7, 11, 60, 10, 24, 252, 10, 20, 1, 0, 0, 0, 85, 85
   \            18FC0A14
   \            01000000
   \            5555    
    170          /*0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x76, 0x40, 0x03, 0x62, 0x7B, 0x71, 0xAA, 0x35, 0xBA, 
    171          0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x34, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
    172          0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
    173          0x9A, 0x99, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4,
    174          0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
    175          0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0xF0, 0xF0, 0x18, 0xFC, 0x00, 0x00, 0x00, 0x64, 
    176          0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    177          0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    178          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    179          0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    180          0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 
    181          0x53, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0xD2, 0x82, 0xFF, 0x02, 0x01, 
    182          0xFE, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
    183          0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFE, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
    184          0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
    185          0x55, 0x55 */
    186          // channel 255, ed/gw 0201, std key, bunch 0, netid 0
    187          /* 0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
    188          0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x48, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
    189          0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
    190          0x66, 0x66, 0x4A, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4, 
    191          0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
    192          0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
    193          0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    194          0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    195          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    196          0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
    197          0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
    198          0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
    199          0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
    200          0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
    201          0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
    202          0x55, 0x55 */
    203          // New in code parameter block 09/15/15, defaults according to manufacturing
    204          // 1st Line : barrier through dFk[0]
    205          // 2nd Line : dFk[1] through vrefPolynom[0] (dFk[3] changed)
    206          // 3rd Line : vrefPolynom[1] through linearK[0][1] (linearK[0][0], [0][1] changed)
    207          // 4th Line : linearK[1][0] through linearK[2][1] (linearK[1][0], [2][0],[2][1] changed)
    208          // 5th Line : linearK[3][0] through linearK[4][1] (linearK[3][0], [3][1] changed)
    209          // 6th Line : linearK[5][0] through linearK[6][1] (all four values changed)
    210          // 7th Line : curKey[AES_SIZE]  
    211          // 8th Line : curIV[AES_SIZE] 
    212          // 9th Line : fetFailureCount through oscLowCurrentOnlyDelay (only oscLowCurrentLimitInmA stayed same)
    213          // 10th Line: tests[4] through shortCircuitLevel
    214          // 11th Line: reserved through 3rd byte of utcHigh (did not change the 3 times values)
    215          // 12th Line: 4th byte of utcHigh through gwAddr  (should oc change?)
    216          // 13th Line: repeaterChannel through defCyclesToStep10Channel
    217          // 14th Line: defCycles2SoftKick through ov_startup (changed ov_startup)
    218          // 15th Line: t_mod_off through vin_switch_off
    219          // 16th Line: post_barrier
    220          0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
    221          0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x75, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
    222          0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0xB8, 0x1E, 0xDD, 0x41, 0x00, 0xC0, 0x5A, 0xC5, 
    223          0xE1, 0x7A, 0xC8, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x40, 0x00, 0x80, 0x0E, 0xC4, 
    224          0x8F, 0xC2, 0xC7, 0x41, 0x00, 0x00, 0x6B, 0xC3, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
    225          0xCD, 0xCC, 0xFC, 0x40, 0x00, 0x00, 0x05, 0xC4, 0xC3, 0xF5, 0xF8, 0x40, 0x00, 0x80, 0x12, 0xC4, 
    226          0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    227          0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    228          0x20, 0x4E, 0xBC, 0x02, 0x50, 0x00, 0x00, 0x00, 0x30, 0x75, 0xF0, 0x00, 0xB0, 0x04, 0xF8, 0x7F, 
    229          0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
    230          0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
    231          0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
    232          0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
    233          0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0x46, 
    234          0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x14, 0x01, 0x00, 0x00, 0x00, 
    235          0x55, 0x55
    236          };
    237          
    238          //static INT32 counts1[5] = {0L,0L,0L,0L,0L};
    239          //static INT32 counts2[5] = {0L,0L,0L,0L,0L};
    240          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    241          SchedulerInterface *si = (SchedulerInterface *)0xF500;
   \                     si:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for si>`
   \   000002                REQUIRE __INIT_XDATA_I
    242          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    243          static BOOL  *flags;// = si->flags;
   \                     flags:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    244          static INT16 *ticks;// = si->ticks;
   \                     ticks:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    245          
    246          //float safe_vin;
    247          //UINT16 safe_vin_16;
    248          //UINT16 VinTurnOn_16, VinShutOff_16, VinDisableRadio_16;
    249          
    250          #define POWER   1
    251          #define CURRENT 2
    252          #define EXT_GND 3
    253          #define REF     4
    254          
    255          #define TINT    7
    256          #define TEXT    6
    257          
    258          #define Iin2    8
    259          
    260          /*
    261          const BYTE  adcChannels[ N_CHANNELS ] = {  
    262            // Vout  0                                         Pin   1                                        Iout  2      
    263              ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN1,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
    264            // Gnd ext 3                                       Ref 4
    265              ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN4,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN6,    
    266            // Vin  5                                          Text  6                          
    267              ADC_REF_P0_7   
    268          | ADC_12_BIT | ADC_AIN0,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN5,    
    269            // Tin 7
    270              ADC_REF_P0_7   | ADC_12_BIT | ADC_TEMP_SENS
    271              //ADC_REF_1_25_V | ADC_12_BIT | ADC_TEMP_SENS
    272          };
    273          */
    274          
    275          //#define MidString - defined in projects
    276          
    277          #ifdef MidString
    278            #define REFERENCE       ADC_REF_AVDD
    279            #define REFERENCE_PIN   ADC_AIN7
    280          #else
    281            #define REFERENCE       ADC_REF_P0_7
    282            #define REFERENCE_PIN   ADC_AIN6
    283          #endif
    284          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    285          const BYTE  adcChannels[ N_CHANNELS ] = {  
   \                     adcChannels:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for adcChannels>`
   \   000009                REQUIRE __INIT_XDATA_I
    286            // Vout  0                                         Pin   1                                        Iout  2      
    287              REFERENCE | ADC_12_BIT | ADC_AIN1,      REFERENCE | ADC_12_BIT | ADC_AIN2,    REFERENCE | ADC_12_BIT | ADC_AIN3,    
    288            // Gnd ext 3                                       Ref 4
    289              REFERENCE | ADC_12_BIT | ADC_GND,       REFERENCE | ADC_12_BIT | REFERENCE_PIN,    
    290            // Vin  5                                          Text  6                          
    291              REFERENCE | ADC_12_BIT | ADC_AIN0,      REFERENCE | ADC_12_BIT | ADC_AIN5,    
    292            // Tin 7                                           Iin2 8
    293              REFERENCE | ADC_12_BIT | ADC_AIN4,       REFERENCE | ADC_12_BIT | ADC_AIN6
    294          };
    295          /*
    296          #else
    297          const BYTE  adcChannels[ N_CHANNELS ] = {  
    298            // Vout  0                                        Pin   1                                        Iout  2      
    299              ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN1,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
    300            // Gnd ext 3                                      Ref 4
    301              ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN4,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN6,    
    302            // Vin  5                                         Text  6                          
    303              ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN0,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN5,    
    304            // Tin 7                                          Iin2 8 
    305              ADC_REF_P0_7 | ADC_12_BIT | ADC_TEMP_SENS, ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN7,
    306            // int Gnd. 9                                     int Ref 10
    307              ADC_REF_P0_7 | ADC_12_BIT | ADC_GND,       ADC_REF_P0_7 | ADC_12_BIT | ADC_REF
    308          };
    309          #endif
    310          */
    311          
    312                                             // Vout Pin Iout           Vin Text  Iout+ Iin2  //  IntGnd  IntRef

   \                                 In  segment XDATA_I, align 1, keep-with-next
    313          const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 6,    5};   //,    0xFF }; //,   0xFF   };
   \                     indices:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for indices>`
   \   000009                REQUIRE __INIT_XDATA_I
    314          //const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 0xFF,  5};   //,    0xFF }; //,   0xFF   };

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    315          INT16  lastOff = 0, lastRssi = 0; //, delta = 0;
   \                     lastOff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     lastRssi:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    316          extern INT32 delta;
    317          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    318          const char theKey[ 2*AES_SIZE ] = { 'A', 'N', 'D', 'S',  0,  'l', 'a', 'r', 'A', 'u', 'g', 'u', 's', 't',  0,   7 ,
   \                     theKey:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for theKey>`
   \   000020                REQUIRE __INIT_XDATA_I
    319                                              'A', 'u', 'g', 'u', 's', 't',  0,   7,  'A', 'u', 'g', 'u', 's', 't',  0,   7 };
    320          /******************************************************************************/
    321          /*
    322          void atomicChange( BYTE idx, INT16 val ){
    323              INT_GLOBAL_ENABLE( INT_OFF ); 
    324                  ticks[ idx ] = val;
    325              INT_GLOBAL_ENABLE( INT_ON ); 
    326          }
    327          */
    328          #define atomicChange( idx, val ) ticks[idx]=val
    329          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    330          BYTE nextKey[ AES_SIZE ];
   \                     nextKey:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    331          BYTE nextIV [ AES_SIZE ];
   \                     nextIV:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z
    332          
    333          void savePB();
    334          
    335          // 12/27/2016 static const float DEF_CURRENT_MULTYPLIER = 3.93; //7.93; //5.536;
    336          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    337          static float k_oc2timer = 0.0;
   \                     k_oc2timer:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    338          BYTE oc2timer(BYTE oc){ 
   \                     oc2timer:
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    339          UINT16 val;
    340          #ifdef MidString
    341            if( oc > ocShortCircuitLimit ) oc = ocShortCircuitLimit;  // Short Circuit protection.
   \   000007   90....       MOV     DPTR,#ocShortCircuitLimit
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   C3           CLR     C
   \   00000C   95..         SUBB    A,?V0 + 0
   \   00000E   5003         JNC     ??oc2timer_0
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    342          #endif
    343            // 12/27/2016 if( k_oc2timer < 1.0 ) k_oc2timer = DEF_CURRENT_MULTYPLIER / (page.linearK[2][0]-4.0);
    344            // 04/06/2017 if( k_oc2timer < 1.0 ) k_oc2timer =  7.6 / (page.linearK[2][0]);
    345            if( k_oc2timer < 1.0 ) 
   \                     ??oc2timer_0:
   \   000013   90....       MOV     DPTR,#k_oc2timer
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   90....       MOV     DPTR,#__Constant_3f800000
   \   00001E   78..         MOV     R0,#?V0 + 8
   \   000020   12....       LCALL   ?L_MOV_X
   \   000023   78..         MOV     R0,#?V0 + 4
   \   000025   79..         MOV     R1,#?V0 + 8
   \   000027   12....       LCALL   ?FLT_LT
   \   00002A   5023         JNC     ??oc2timer_1
    346              k_oc2timer =  8.33 / (page.linearK[2][0]);
   \   00002C   75..AE       MOV     ?V0 + 4,#-0x52
   \   00002F   75..47       MOV     ?V0 + 5,#0x47
   \   000032   75..05       MOV     ?V0 + 6,#0x5
   \   000035   75..41       MOV     ?V0 + 7,#0x41
   \   000038   90....       MOV     DPTR,#(page + 56)
   \   00003B   78..         MOV     R0,#?V0 + 8
   \   00003D   12....       LCALL   ?L_MOV_X
   \   000040   78..         MOV     R0,#?V0 + 4
   \   000042   79..         MOV     R1,#?V0 + 8
   \   000044   12....       LCALL   ?FLT_DIV
   \   000047   90....       MOV     DPTR,#k_oc2timer
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?L_MOV_TO_X
    347          
    348            //  if( test4Zero((BYTE*)&k_oc2timer, 4) ) k_oc2timer = DEF_CURRENT_MULTYPLIER / page.linearK[2][0];
    349          
    350            // 12/27/2016 added line
    351            if ( oc > 240 ) oc = 240;
   \                     ??oc2timer_1:
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   C3           CLR     C
   \   000052   94F1         SUBB    A,#-0xf
   \   000054   4003         JC      ??oc2timer_2
   \   000056   75..F0       MOV     ?V0 + 0,#-0x10
    352            
    353            // 12/27/2016 val = (UINT16)( oc * k_oc2timer + 0.5 );
    354            val = (UINT16)( oc * k_oc2timer ); 
   \                     ??oc2timer_2:
   \   000059   75..00       MOV     ?V0 + 1,#0x0
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   75..00       MOV     ?V0 + 3,#0x0
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?UL_TO_FLT
   \   000067   90....       MOV     DPTR,#k_oc2timer
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?L_MOV_X
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   79..         MOV     R1,#?V0 + 4
   \   000073   12....       LCALL   ?FLT_MUL
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?FLT_TO_L
   \   00007B   A8..         MOV     R0,?V0 + 0
    355            if( val > 255 ) val = 255;
   \   00007D   C3           CLR     C
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   9401         SUBB    A,#0x1
   \   000082   4002         JC      ??oc2timer_3
   \   000084   78FF         MOV     R0,#-0x1
    356            return (BYTE) val; 
   \                     ??oc2timer_3:
   \   000086   E8           MOV     A,R0
   \   000087   F9           MOV     R1,A
   \   000088                REQUIRE ?Subroutine109
   \   000088                ; // Fall through to label ?Subroutine109
    357          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    358          INT16 abs( INT16 a ) { return ( a > 0 ) ? a : -a; }
   \                     abs:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C3           CLR     C
   \   000001   EA           MOV     A,R2
   \   000002   9401         SUBB    A,#0x1
   \   000004   12....       LCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_190:
   \   000007   4005         JC      ??abs_0
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   EB           MOV     A,R3
   \   00000C   8006         SJMP    ??abs_1
   \                     ??abs_0:
   \   00000E   C3           CLR     C
   \   00000F   E4           CLR     A
   \   000010   9A           SUBB    A,R2
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   9B           SUBB    A,R3
   \                     ??abs_1:
   \   000014   F9           MOV     R1,A
   \   000015   E8           MOV     A,R0
   \   000016   FA           MOV     R2,A
   \   000017   E9           MOV     A,R1
   \   000018   FB           MOV     R3,A
   \   000019   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EB           MOV     A,R3
   \                     ??Subroutine63_0:
   \   000001   12....       LCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_363:
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   9400         SUBB    A,#0x0
   \   000002   80..         SJMP    ?Subroutine114

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000002   65D0         XRL     A,PSW
   \   000004   33           RLC     A
   \   000005   22           RET
    359          //void bootOtherImage()
    360          //  {void (*f)( void ) = ( void (*)( void ) ) page.imageAddr;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}
    361          
    362          /******************************************************************************/
    363          inline float sqr( float x ){ return x*x; }
    364          /******************************************************************************/
    365          //inline void setupFrequency(){
    366              // Configure the radio frequency to use
    367          //    FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC
    368          //}

   \                                 In  segment XDATA_I, align 1, keep-with-next
    369          const INT32 defFreq = 0x646AAA;
   \                     defFreq:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for defFreq>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    370          const BYTE the_frequency[3] = { 0x64, 0x6A, 0xAA };
   \                     the_frequency:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for the_frequency>`
   \   000003                REQUIRE __INIT_XDATA_I
    371          // def_freq puts the frequency values into the FrequencyControl High/Medium/Low Bytes

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    372          void def_freq(void){ mymemcpy( (BYTE *)0xDF09, (BYTE *)the_frequency, 3 ); }
   \                     def_freq:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function mymemcpy
   \   000000   7903         MOV     R1,#0x3
   \   000002   7C..         MOV     R4,#(the_frequency & 0xff)
   \   000004   7D..         MOV     R5,#((the_frequency >> 8) & 0xff)
   \   000006   7A09         MOV     R2,#0x9
   \   000008   7BDF         MOV     R3,#-0x21
   \   00000A   12....       LCALL   mymemcpy
   \   00000D   22           RET
    373          /*
    374          void switchDataRate( BOOL tenKbod ){
    375            if( page.is500Always )    _datarate    = DATA_RATE_1_CC2511;
    376            else  if( tenKbod )       _datarate    = DATA_RATE_3_CC2511;
    377            else                      _datarate    = DATA_RATE_4_CC2511;
    378          }
    379          */
    380          /*
    381          void setupRadioDR(BYTE dr, BYTE channel, BOOL useFEC ){
    382              INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
    383                  RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
    384                  S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
    385                  //switchDataRate( page.use12kbod );
    386                  //if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
    387                  //else
    388                  radioConfigure( dr ); 
    389                  CHANNR = channel;      
    390                  if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
    391                  else                           PA_TABLE0 = page.radioPower;
    392                  if( useFEC  ) MDMCFG1 |= 0x80; else MDMCFG1 &= 0x7F;
    393                  ADDR = page.edAddr;
    394                  //SYNC0 = 0xF0;    SYNC1 = 0xF0;
    395                  SYNC0 = page.syncword & 0xFF;    SYNC1 = ( page.syncword >> 8 ) & 0xFF;
    396                  HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
    397              INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
    398          }
    399          extern BOOL transfer;
    400          void setupRadio( BYTE channel ){ 
    401              //switchDataRate( page.use12kbod ); 
    402              if( page.is500Always )     _datarate    = DATA_RATE_1_CC2511;
    403              else  if( page.use12kbod ) _datarate    = DATA_RATE_3_CC2511;
    404              else                       _datarate    = DATA_RATE_4_CC2511;
    405              setupRadioDR( _datarate, channel, page.useFEC || page.is500Always ); 
    406          }
    407          void setupRepeater( BOOL flag ){
    408            DMAARM = 0x83; // stop receive and transmit
    409            if( flag && (!page.is500Always) ){  
    410                 setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel, TRUE );  
    411                 ADDR = page.gwAddr;  
    412            }else setupRadio( curChannel );                    
    413            // global interrups are enabled inside setup radio
    414          }
    415          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    416          void setupRadioDR(BYTE dr, BYTE channel ){
   \                     setupRadioDR:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8005         SJMP    ??setupRadioDR_0
    417              //INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
    418                  while( *((BYTE *)0xF53A) == RADIO_MODE_TX) tickWait(1);            
   \                     ??setupRadioDR_1:
   \   00000B                ; Setup parameters for call to function tickWait
   \   00000B   7901         MOV     R1,#0x1
   \   00000D   12....       LCALL   tickWait
   \                     ??setupRadioDR_0:
   \   000010   90F53A       MOV     DPTR,#-0xac6
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6410         XRL     A,#0x10
   \   000016   60F3         JZ      ??setupRadioDR_1
    419                  RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \   000018   12....       LCALL   ?Subroutine22
    420                  S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
   \                     ??CrossCallReturnLabel_57:
   \   00001B   539BFC       ANL     0x9b,#0xfc
   \   00001E   E59B         MOV     A,0x9b
   \   000020   53E9EF       ANL     0xe9,#0xef
   \   000023   759110       MOV     0x91,#0x10
    421                  if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
   \   000026   7432         MOV     A,#0x32
   \   000028   6E           XRL     A,R6
   \   000029   700C         JNZ     ??setupRadioDR_2
   \   00002B   90....       MOV     DPTR,#(page + 219)
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000031   5004         JNC     ??setupRadioDR_2
   \   000033                ; Setup parameters for call to function radioConfigure
   \   000033   7919         MOV     R1,#0x19
   \   000035   8002         SJMP    ??setupRadioDR_3
    422                  else                                                  radioConfigure( dr ); 
   \                     ??setupRadioDR_2:
   \   000037                ; Setup parameters for call to function radioConfigure
   \   000037   EE           MOV     A,R6
   \   000038   F9           MOV     R1,A
   \                     ??setupRadioDR_3:
   \   000039   12....       LCALL   radioConfigure
    423                  CHANNR = channel;      
   \   00003C   EF           MOV     A,R7
   \   00003D   90DF06       MOV     DPTR,#-0x20fa
   \   000040   F0           MOVX    @DPTR,A
    424                  if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
   \   000041   7432         MOV     A,#0x32
   \   000043   6E           XRL     A,R6
   \   000044   7005         JNZ     ??setupRadioDR_4
   \   000046   90....       MOV     DPTR,#(page + 193)
   \   000049   8003         SJMP    ??setupRadioDR_5
    425                  else                           PA_TABLE0 = page.radioPower;
   \                     ??setupRadioDR_4:
   \   00004B   90....       MOV     DPTR,#(page + 189)
   \                     ??setupRadioDR_5:
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   90DF2E       MOV     DPTR,#-0x20d2
   \   000052   12....       LCALL   ?Subroutine79
    426                  ADDR = page.edAddr;
   \                     ??CrossCallReturnLabel_238:
   \   000055   F0           MOVX    @DPTR,A
    427                  SYNC0 = page.syncword & 0xFF;    SYNC1 = ( page.syncword >> 8 ) & 0xFF;
   \   000056   90....       MOV     DPTR,#(page + 154)
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   90DF01       MOV     DPTR,#-0x20ff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   90....       MOV     DPTR,#(page + 155)
   \   000061   E0           MOVX    A,@DPTR
   \   000062   90DF00       MOV     DPTR,#-0x2100
   \   000065   F0           MOVX    @DPTR,A
    428                  //RFST = STROBE_CAL; 
    429                  HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
   \   000066   439A01       ORL     0x9a,#0x1
    430              //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
    431          }
   \   000069   02....       LJMP    ?Subroutine119
   \   00006C                REQUIRE RFIM
   \   00006C                REQUIRE IEN2
   \   00006C                REQUIRE S1CON
   \   00006C                REQUIRE _A_IEN0
   \   00006C                REQUIRE _A_IEN1
   \   00006C                REQUIRE RFST
   \   00006C                REQUIRE RFIF

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   75E104       MOV     0xe1,#0x4
   \   000003   90....       MOV     DPTR,#si
   \   000006   E0           MOVX    A,@DPTR
   \   000007   243A         ADD     A,#0x3a
   \   000009   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_268:
   \   00000C   74F0         MOV     A,#-0x10
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_310:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(page + 190)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   90DF05       MOV     DPTR,#-0x20fb
   \   000008   22           RET
    432          extern BOOL transfer;

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    433          void setupRadio( BYTE channel ){ setupRadioDR( page.is500Always ? DATA_RATE_1_CC2511 : DATA_RATE_3_CC2511, channel ); }
   \                     setupRadio:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   \   000006   90....       MOV     DPTR,#(page + 194)
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   5004         JNC     ??setupRadio_0
   \   00000E   7932         MOV     R1,#0x32
   \   000010   8002         SJMP    ??setupRadio_1
   \                     ??setupRadio_0:
   \   000012   790C         MOV     R1,#0xc
   \                     ??setupRadio_1:
   \   000014                ; Setup parameters for call to function setupRadioDR
   \   000014   12....       LCALL   setupRadioDR
   \   000017   02....       LJMP    ??Subroutine113_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   F0           MOVX    @DPTR,A
   \                     ??Subroutine113_0:
   \   000001   D083         POP     DPH
   \   000003   D082         POP     DPL
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    434          void setupRepeater( BOOL flag ){
   \                     setupRepeater:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    435            DMAARM = 0x83; // stop receive and transmit
   \   000004   75D683       MOV     0xd6,#-0x7d
    436            if( flag && (!page.is500Always) ){  
   \   000007   E9           MOV     A,R1
   \   000008   601C         JZ      ??setupRepeater_0
   \   00000A   90....       MOV     DPTR,#(page + 194)
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000010   4014         JC      ??setupRepeater_0
    437                 //P1_1 = 1;
    438                 setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel );  
   \   000012                ; Setup parameters for call to function setupRadioDR
   \   000012   90....       MOV     DPTR,#(page + 192)
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   7932         MOV     R1,#0x32
   \   000019   12....       LCALL   setupRadioDR
    439                 ADDR = page.gwAddr;  
   \   00001C   90....       MOV     DPTR,#(page + 191)
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90DF05       MOV     DPTR,#-0x20fb
   \   000023   F0           MOVX    @DPTR,A
   \   000024   8003         SJMP    ??CrossCallReturnLabel_140
    440            }else{
    441                 //P1_1 = 0;
    442                 setupRadio( curChannel );                    
   \                     ??setupRepeater_0:
   \   000026                ; Setup parameters for call to function setupRadio
   \   000026   12....       LCALL   ?Subroutine52
    443            }
    444          }
   \                     ??CrossCallReturnLabel_140:
   \   000029   02....       LJMP    ??Subroutine113_0
   \   00002C                REQUIRE DMAARM

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   90....       MOV     DPTR,#curChannel
   \                     ??Subroutine52_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   setupRadio
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    445          void softKick(void){
   \                     softKick:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    446              //if( transfer ) return;
    447              //INT_GLOBAL_ENABLE( INT_OFF );
    448                  //halPowerClkMgmtSetMainClkSrc(CRYSTAL);  // it is never needed to set crystall again
    449                  DMAARM = 0x83; RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \   000004   75D683       MOV     0xd6,#-0x7d
   \   000007   12....       LCALL   ?Subroutine22
    450                  //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC //setupFrequency();       //
    451                  zerofill( (BYTE *)&delta, 4 ); //delta = 0;     
   \                     ??CrossCallReturnLabel_58:
   \   00000A                ; Setup parameters for call to function zerofill
   \   00000A   7904         MOV     R1,#0x4
   \   00000C   7A..         MOV     R2,#(delta & 0xff)
   \   00000E   7B..         MOV     R3,#((delta >> 8) & 0xff)
   \   000010   12....       LCALL   zerofill
    452                  FSCTRL0 = 0;   def_freq();
   \   000013   E4           CLR     A
   \   000014   90DF08       MOV     DPTR,#-0x20f8
   \   000017   F0           MOVX    @DPTR,A
   \   000018                ; Setup parameters for call to function def_freq
   \   000018   12....       LCALL   def_freq
    453                  //dmaRadioSetup();
    454                  //MCSM0 = 0x14; // calibraton on
    455                  loadKey( page.curKey );
   \   00001B                ; Setup parameters for call to function load
   \   00001B   12....       LCALL   ?Subroutine80
    456                  setupRadio( curChannel = ( page.is500Always ? curChannel : page.channel ) );        // global interrups are enabled inside setup radio
   \                     ??CrossCallReturnLabel_240:
   \   00001E   90....       MOV     DPTR,#(page + 194)
   \   000021   E0           MOVX    A,@DPTR
   \   000022   A2E6         MOV     C,0xE0 /* A   */.6
   \   000024   5005         JNC     ??softKick_0
   \   000026   90....       MOV     DPTR,#curChannel
   \   000029   8003         SJMP    ??softKick_1
   \                     ??softKick_0:
   \   00002B   90....       MOV     DPTR,#(page + 164)
   \                     ??softKick_1:
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   E9           MOV     A,R1
   \   000031   90....       MOV     DPTR,#curChannel
   \   000034   F0           MOVX    @DPTR,A
   \   000035                ; Setup parameters for call to function setupRadio
   \   000035   12....       LCALL   setupRadio
    457                  zerofill( (BYTE *)&utcLast, 6 ); //utcLast = 0; msLast = 0;
   \   000038                ; Setup parameters for call to function zerofill
   \   000038   7906         MOV     R1,#0x6
   \   00003A   7A..         MOV     R2,#(utcLast & 0xff)
   \   00003C   7B..         MOV     R3,#((utcLast >> 8) & 0xff)
   \   00003E   12....       LCALL   zerofill
    458                  cmdCount = 0;
   \   000041   90....       MOV     DPTR,#cmdCount
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    459                  //if( enable2SendData ){ computeADCs( TRUE, FALSE );  } // adjust quartz to temperature only if buffer is already full
    460                  computeADCs( TRUE, FALSE );  // adjust quartz to temperature only if buffer is already full
   \   000048                ; Setup parameters for call to function computeADCs
   \   000048   FA           MOV     R2,A
   \   000049   7901         MOV     R1,#0x1
   \   00004B   12....       LCALL   computeADCs
    461                  ticks[ ReceiveData ] = 1;
   \   00004E   12....       LCALL   ?Subroutine0
    462                  ticks[ Hop ] = 0; cyclesToHop = 0;
   \                     ??CrossCallReturnLabel_388:
   \   000051   12....       LCALL   ??Subroutine4_0
   \                     ??CrossCallReturnLabel_14:
   \   000054   90....       MOV     DPTR,#cyclesToHop
   \   000057   02....       LJMP    ?Subroutine113
   \   00005A                REQUIRE DMAARM
   \   00005A                REQUIRE RFST
    463              //INT_GLOBAL_ENABLE( INT_ON );
    464          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   7A..         MOV     R2,#((page + 96) & 0xff)
   \   000002   7B..         MOV     R3,#(((page + 96) >> 8) & 0xff)
   \                     ??Subroutine80_0:
   \   000004   7904         MOV     R1,#0x4
   \                     ??Subroutine80_1:
   \   000006   12....       LCALL   load
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009   12....       LCALL   wait_aes
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#curChannel
   \   000003   F0           MOVX    @DPTR,A
   \                     ??Subroutine4_0:
   \   000004   90....       MOV     DPTR,#ticks
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2410         ADD     A,#0x10
   \                     ??Subroutine4_1:
   \   00000A   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_265:
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   12....       LCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_375:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_313:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   80..         SJMP    ?Subroutine116

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_274:
   \   000003   7401         MOV     A,#0x1
   \   000005   02....       LJMP    ?Subroutine117

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    465          void restoreRadio(){
   \                     restoreRadio:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    466              //ticks[ ReceiveData ] = 1;
    467              //HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
    468              //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
    469              //DMAARM = 0x83; RFST = STROBE_IDLE; 
    470              ticks[ ReceiveData ] = 1;
   \   000004   12....       LCALL   ?Subroutine0
    471          }
   \                     ??CrossCallReturnLabel_389:
   \   000007   02....       LJMP    ??Subroutine113_0
    472          /******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    473          void init(void){
   \                     init:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    474          BYTE pin;
    475              P0DIR = 0;    // all port 0 pins are input
   \   000005   75FD00       MOV     0xfd,#0x0
    476              P0INP = 0xFF; // all port 0 pins are tristate
   \   000008   758FFF       MOV     0x8f,#-0x1
    477              ADC_ENABLE_CHANNELS( 0xFF );
   \   00000B   E5F2         MOV     A,0xf2
   \   00000D   75F2FF       MOV     0xf2,#-0x1
    478              for( pin = 0; pin < 8; pin++ ){ IO_ADC_PORT0_PIN( pin, IO_ADC_EN); }
   \   000010   7A00         MOV     R2,#0x0
   \                     ??init_0:
   \   000012   75..01       MOV     ?V0 + 0,#0x1
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   EA           MOV     A,R2
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?S_SHL
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   45F2         ORL     A,0xf2
   \   000022   F5F2         MOV     0xf2,A
   \   000024   0A           INC     R2
   \   000025   EA           MOV     A,R2
   \   000026   C3           CLR     C
   \   000027   9408         SUBB    A,#0x8
   \   000029   40E7         JC      ??init_0
    479          
    480              // 2 top pins are secial function - timer 3 channels
    481              P1SEL = 0xC0;                          
   \   00002B   75F4C0       MOV     0xf4,#-0x40
    482              // pins 7(oc) 6(ov) 4(on/off), 3(mpp), 1(LED), 0(mpp cycle) are for output
    483              P1DIR = 0xDB;   // 1101 1011
   \   00002E   75FEDB       MOV     0xfe,#-0x25
    484          
    485              T3CTL   = 0x50; // was 0x70, prescaler 1/4, normal operation, mode - free running
   \   000031   75CB50       MOV     0xcb,#0x50
    486              T3CCTL0 = 0x24; // clear output on compare up, set on 0, enabled
   \   000034   75CC24       MOV     0xcc,#0x24
    487              T3CCTL1 = 0x24; // clear output on compare up, set on 0, enabled
   \   000037   75CE24       MOV     0xce,#0x24
    488              PERCFG  = 0x20; // Timer3 has alternate 2 location - P1_6 & P1_7
   \   00003A   75F120       MOV     0xf1,#0x20
    489          
    490              P2SEL   = 0x20; // Timer3 has priority over USART1
   \   00003D   75F520       MOV     0xf5,#0x20
    491              // pull down commented out for version 8
    492              //P2DIR   = 0x0F; P2_1 = 0; P2_2 = 0;
    493              
    494              //P1_3 = 1; //P1 |= 8;  // MPP ON
    495              zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
   \   000040                ; Setup parameters for call to function zerofill
   \   000040   7912         MOV     R1,#0x12
   \   000042   7A..         MOV     R2,#(adcsTemp & 0xff)
   \   000044   7B..         MOV     R3,#((adcsTemp >> 8) & 0xff)
   \   000046   12....       LCALL   zerofill
    496              //     LED down,  MPP off, Module Off 
    497              //P1 &= ~ ( 2 | 8 | 0x10 ); 
    498              
    499              P0SEL = 0;
   \   000049   75F300       MOV     0xf3,#0x0
    500              // Choose the crystal oscillator as the system clock
    501           //   P1_1 = 0;
    502           //   halPowerClkMgmtSetMainClkSrc(CRYSTAL);
    503              // Select frequency and data rate from LCD menu, then configure the radio
    504              
    505              // Configure interrupt for every time a packet is sent
    506              
    507              FSCTRL0 = 0;
   \   00004C   E4           CLR     A
   \   00004D   90DF08       MOV     DPTR,#-0x20f8
   \   000050   F0           MOVX    @DPTR,A
    508                  
    509              setup_hopper( page.channel );
   \   000051                ; Setup parameters for call to function setup_hopper
   \   000051   90....       MOV     DPTR,#(page + 164)
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   setup_hopper
    510              dmaRadioSetup();
   \   000059                ; Setup parameters for call to function dmaRadioSetup
   \   000059   12....       LCALL   dmaRadioSetup
    511          
    512              //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC setupFrequency();
    513              def_freq();
   \   00005C                ; Setup parameters for call to function def_freq
   \   00005C   12....       LCALL   def_freq
    514              setupRadio( curChannel ); //page.is500Always? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
   \   00005F                ; Setup parameters for call to function setupRadio
   \   00005F   12....       LCALL   ?Subroutine52
    515          
    516              //calibrateParking();
    517          
    518              invVref0 = 1.0 / page.vrefPolynom[0];
   \                     ??CrossCallReturnLabel_141:
   \   000062   75..00       MOV     ?V0 + 0,#0x0
   \   000065   75..00       MOV     ?V0 + 1,#0x0
   \   000068   75..80       MOV     ?V0 + 2,#-0x80
   \   00006B   75..3F       MOV     ?V0 + 3,#0x3f
   \   00006E   90....       MOV     DPTR,#(page + 28)
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?L_MOV_X
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   79..         MOV     R1,#?V0 + 4
   \   00007A   12....       LCALL   ?FLT_DIV
   \   00007D   90....       MOV     DPTR,#invVref0
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?L_MOV_TO_X
    519              //__________________________________________________________________________
    520             // Over Voltage     Over Current
    521          
    522              T3CTL |= 0x14;
   \   000085   43CB14       ORL     0xcb,#0x14
   \   000088   E5CB         MOV     A,0xcb
    523              
    524              HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
   \   00008A   D2B9         SETB    0xb8.1
    525              HAL_INT_ENABLE(INUM_ADC, INT_ON);    // enable ADC interrupt
   \   00008C   D2A9         SETB    0xa8.1
    526              HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
   \   00008E   439A01       ORL     0x9a,#0x1
    527          }
   \   000091   02....       LJMP    ??Subroutine120_1
   \   000094                REQUIRE P0INP
   \   000094                REQUIRE IEN2
   \   000094                REQUIRE _A_IEN0
   \   000094                REQUIRE _A_IEN1
   \   000094                REQUIRE T3CTL
   \   000094                REQUIRE T3CCTL0
   \   000094                REQUIRE T3CCTL1
   \   000094                REQUIRE PERCFG
   \   000094                REQUIRE ADCCFG
   \   000094                REQUIRE P0SEL
   \   000094                REQUIRE P1SEL
   \   000094                REQUIRE P2SEL
   \   000094                REQUIRE P0DIR
   \   000094                REQUIRE P1DIR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   78..         MOV     R0,#?V0 + 4
   \   000002   79..         MOV     R1,#?V0 + 0
   \   000004   12....       LCALL   ?FLT_MUL
   \                     ??Subroutine120_0:
   \   000007   AA..         MOV     R2,?V0 + 4
   \   000009   AB..         MOV     R3,?V0 + 5
   \   00000B   AC..         MOV     R4,?V0 + 6
   \   00000D   AD..         MOV     R5,?V0 + 7
   \                     ??Subroutine120_1:
   \   00000F   7F08         MOV     R7,#0x8
   \   000011   02....       LJMP    ?FUNC_LEAVE_XDATA
    528          /******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    529          void ov_startup(void)
   \                     ov_startup:
    530          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    531            // ensure FETs are good/Module can turn on before beginning ov_startup sequence
    532            // and turning module on.
    533            if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
   \   000004   90FFFD       MOV     DPTR,#-0x3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   90....       MOV     DPTR,#ModuleStatusCanTurnOn
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6A           XRL     A,R2
   \   00000E   7023         JNZ     ??ov_startup_0
    534            {
    535              if( page.ov_startup )
   \   000010   90....       MOV     DPTR,#(page + 223)
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   601A         JZ      ??CrossCallReturnLabel_17
    536              {
    537                T3CC0 = (page.ov_startup < page.ov) ? page.ov_startup : page.ov; 
   \   000017   90....       MOV     DPTR,#(page + 187)
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FB           MOV     R3,A
   \   00001C   EA           MOV     A,R2
   \   00001D   C3           CLR     C
   \   00001E   9B           SUBB    A,R3
   \   00001F   5003         JNC     ??ov_startup_1
   \   000021   EA           MOV     A,R2
   \   000022   8001         SJMP    ??ov_startup_2
   \                     ??ov_startup_1:
   \   000024   EB           MOV     A,R3
   \                     ??ov_startup_2:
   \   000025   FC           MOV     R4,A
   \   000026   8CCD         MOV     0xcd,R4
    538                atomicChange( OvStartup, TICKS_IN_SEC );
   \   000028   90....       MOV     DPTR,#ticks
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   241E         ADD     A,#0x1e
   \   00002E   12....       LCALL   ??Subroutine5_0
    539                //        #ifdef MidString                                                                            
    540                //        compute98();                                                                                
    541                //        #endif
    542              }
    543              P1_4 = 1;
   \                     ??CrossCallReturnLabel_17:
   \   000031   D294         SETB    0x90.4
    544            }
    545          }
   \                     ??ov_startup_0:
   \   000033   02....       LJMP    ??Subroutine113_0
   \   000036                REQUIRE _A_P1
   \   000036                REQUIRE T3CC0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2416         ADD     A,#0x16
   \                     ??Subroutine5_0:
   \   000006   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_266:
   \   000009   74D0         MOV     A,#-0x30
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   7407         MOV     A,#0x7
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    546          /*
    547          void init_board(void){
    548              if( (!page.mpp) && page.module ){
    549                  P1_3 = 1;  atomicChange( BypassMode, TICKS_IN_SEC ); // switching mpp on and switching it off (bypass mode) only after delay
    550              }else{
    551                  if( page.mpp )    P1_3 = 1;  else P1_3 = 0;
    552                  //if( page.module ) P1_4 = 1;  else P1_4 = 0;
    553              }
    554              if( page.module ) ov_startup();
    555          }
    556          */
    557          /******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    558          float *_coeff, invRef = 0;
   \                     _coeff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     invRef:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    559          float mult( float t, INT16 i ){ return (t)*(float)i; }
   \                     mult:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   \   00000D   740F         MOV     A,#0xf
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_61:
   \   000015   12....       LCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_248:
   \   000018   12....       LCALL   ?L_TO_FLT
   \   00001B   02....       LJMP    ?Subroutine120

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    560          float lin_coeff( float f ){ return _coeff[0]*f + _coeff[1]; }
   \                     lin_coeff:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   90....       MOV     DPTR,#_coeff
   \   000010   12....       LCALL   ??Subroutine46_1
   \                     ??CrossCallReturnLabel_119:
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_MOV_X
   \   000018   78..         MOV     R0,#?V0 + 4
   \   00001A   79..         MOV     R1,#?V0 + 0
   \   00001C   12....       LCALL   ?FLT_MUL
   \   00001F   12....       LCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_115:
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_MOV_X
   \   000027   78..         MOV     R0,#?V0 + 4
   \   000029   79..         MOV     R1,#?V0 + 0
   \   00002B   12....       LCALL   ?FLT_ADD
   \   00002E   02....       LJMP    ??Subroutine120_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV     DPTR,#_coeff
   \   000003   12....       LCALL   ??Subroutine90_0
   \                     ??CrossCallReturnLabel_373:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   90....       MOV     DPTR,#ticks
   \                     ??Subroutine90_0:
   \   000003   12....       LCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_311:
   \   000006                REQUIRE ?Subroutine116
   \   000006                ; // Fall through to label ?Subroutine116

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX    @DPTR,A
   \                     ??Subroutine46_0:
   \   000001   90....       MOV     DPTR,#ticks
   \                     ??Subroutine46_1:
   \   000004   12....       LCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_294:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_312:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_314:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    561          float lin_coeff_t( float f ){    return (_coeff[1] - f )*_coeff[0]; }
   \                     lin_coeff_t:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   12....       LCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_116:
   \   000010   78..         MOV     R0,#?V0 + 4
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V0 + 4
   \   000017   79..         MOV     R1,#?V0 + 0
   \   000019   12....       LCALL   ?FLT_SUB
   \   00001C   90....       MOV     DPTR,#_coeff
   \   00001F   12....       LCALL   ??Subroutine46_1
   \                     ??CrossCallReturnLabel_120:
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_MOV_X
   \   000027   02....       LJMP    ?Subroutine120

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    562          float lin( BYTE idx ){
   \                     lin:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    563          float t  = ((float)adcs[ idx ]) * page.vrefPolynom[0] * invRef; // invRef = 1.0 / (float)adcs[ REF ];
    564              return lin_coeff_t( t ); //( coeff[1] - t ) * coeff[0];  
   \   000005                ; Setup parameters for call to function lin_coeff_t
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   75..00       MOV     ?V0 + 1,#0x0
   \   00000A   7402         MOV     A,#0x2
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   12....       LCALL   ?S_SHL
   \   000011   E5..         MOV     A,?V0 + 0
   \   000013   24..         ADD     A,#(adcs & 0xff)
   \   000015   F582         MOV     DPL,A
   \   000017   E5..         MOV     A,?V0 + 1
   \   000019   34..         ADDC    A,#((adcs >> 8) & 0xff)
   \   00001B   F583         MOV     DPH,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?L_MOV_X
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_TO_FLT
   \   000027   90....       MOV     DPTR,#(page + 28)
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   12....       LCALL   ?L_MOV_X
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   79..         MOV     R1,#?V0 + 4
   \   000033   12....       LCALL   ?FLT_MUL
   \   000036   90....       MOV     DPTR,#invRef
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?L_MOV_X
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   79..         MOV     R1,#?V0 + 4
   \   000042   12....       LCALL   ?FLT_MUL
   \   000045   AA..         MOV     R2,?V0 + 0
   \   000047   AB..         MOV     R3,?V0 + 1
   \   000049   AC..         MOV     R4,?V0 + 2
   \   00004B   AD..         MOV     R5,?V0 + 3
   \   00004D   12....       LCALL   lin_coeff_t
   \   000050   80..         SJMP    ??Subroutine120_1
    565          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    566          float cube_coeff( float *t ){ 
   \                     cube_coeff:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    567          //  return ( ( ( _coeff[0]*t + _coeff[1] )*t + _coeff[2] )*t + _coeff[3] ); 
    568          float acc = _coeff[0]; 
   \   000005   90....       MOV     DPTR,#_coeff
   \   000008   12....       LCALL   ??Subroutine46_1
   \                     ??CrossCallReturnLabel_121:
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?L_MOV_X
    569          BYTE i;
    570              for( i = 1; i < 4; i++ ) acc = acc*(*t) + _coeff[i];
   \   000010   7D01         MOV     R5,#0x1
   \                     ??cube_coeff_0:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   79..         MOV     R1,#?V0 + 4
   \   00001F   12....       LCALL   ?FLT_MUL
   \   000022   8D..         MOV     ?V0 + 4,R5
   \   000024   75..00       MOV     ?V0 + 5,#0x0
   \   000027   7402         MOV     A,#0x2
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?S_SHL
   \   00002E   90....       MOV     DPTR,#_coeff
   \   000031   E0           MOVX    A,@DPTR
   \   000032   25..         ADD     A,?V0 + 4
   \   000034   FC           MOV     R4,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   35..         ADDC    A,?V0 + 5
   \   000039   8C82         MOV     DPL,R4
   \   00003B   F583         MOV     DPH,A
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?L_MOV_X
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   79..         MOV     R1,#?V0 + 4
   \   000046   12....       LCALL   ?FLT_ADD
   \   000049   0D           INC     R5
   \   00004A   ED           MOV     A,R5
   \   00004B   C3           CLR     C
   \   00004C   9404         SUBB    A,#0x4
   \   00004E   40C2         JC      ??cube_coeff_0
    571              return acc;
   \   000050                REQUIRE ?Subroutine124
   \   000050                ; // Fall through to label ?Subroutine124
    572          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   AC..         MOV     R4,?V0 + 2
   \   000006   AD..         MOV     R5,?V0 + 3
   \   000008   80..         SJMP    ??Subroutine120_1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    573          float checkVref;
   \                     checkVref:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    574          float processCheck( INT16 val ){ return lin_coeff( ((float)val) * checkVref );  }
   \                     processCheck:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005                ; Setup parameters for call to function lin_coeff
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   EB           MOV     A,R3
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   12....       LCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_249:
   \   00000D   12....       LCALL   ?L_TO_FLT
   \   000010   90....       MOV     DPTR,#checkVref
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_MOV_X
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   79..         MOV     R1,#?V0 + 4
   \   00001C   12....       LCALL   ?FLT_MUL
   \   00001F   AA..         MOV     R2,?V0 + 0
   \   000021   AB..         MOV     R3,?V0 + 1
   \   000023   AC..         MOV     R4,?V0 + 2
   \   000025   AD..         MOV     R5,?V0 + 3
   \   000027   12....       LCALL   lin_coeff
   \   00002A   80..         SJMP    ??Subroutine120_1
    575          /******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    576          UINT16  last[ N_CHANNELS ]; //Vout, lastPin, lastIout, lastGnd, lastRef, lastVin, lastTex, lastTin;
   \                     last:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    577          UINT16  checkVoutOnT  = 0, checkPD = 0;
   \                     checkVoutOnT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     checkPD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    578          BOOL  isSteppedDown = FALSE;
   \                     isSteppedDown:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    579          void read_page(void){
   \                     read_page:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    580              mymemcpy( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+4 ); 
   \   000004                ; Setup parameters for call to function mymemcpy
   \   000004   79F2         MOV     R1,#-0xe
   \   000006   7C00         MOV     R4,#0x0
   \   000008   7D5C         MOV     R5,#0x5c
   \   00000A   7A..         MOV     R2,#(page & 0xff)
   \   00000C   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   00000E   12....       LCALL   mymemcpy
    581              //if( page.barrier == 0xAAAA ){
    582              if( page.barrier == 0xAAAA  && page.post_barrier == 0x5555 ){
   \   000011   90....       MOV     DPTR,#page
   \   000014   E0           MOVX    A,@DPTR
   \   000015   64AA         XRL     A,#0xaa
   \   000017   7004         JNZ     ??read_page_0
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   64AA         XRL     A,#0xaa
   \                     ??read_page_0:
   \   00001D   700E         JNZ     ??read_page_1
   \   00001F   90....       MOV     DPTR,#(page + 240)
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6455         XRL     A,#0x55
   \   000025   7004         JNZ     ??read_page_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6455         XRL     A,#0x55
   \                     ??read_page_2:
   \   00002B   6020         JZ      ??read_page_3
    583                  /* page F compatibility - not needed anymore
    584                  zerofill( (BYTE *)&page.syncword, 8 );
    585                  page.syncword = 0xF0F0; 
    586                  page.vin_disable_radio = 6;
    587                  page.vin_limit         = 0; 
    588                  page.vin_turn_on       = 120;
    589                  page.vin_switch_off    = 100;
    590                  */
    591                  //BYTE *ptr = nextSlot();
    592                  //if( ptr && ptr > (BYTE *)(PAGEADDR+PAGESIZE+4) ){ ptr -= 4;  mymemcpy( (BYTE *)&energy, ptr, 4 );  }
    593                  //zerofill( (BYTE *)&deltaEnergy, 4 );
    594              }else{
    595                  //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
    596                  mymemcpy((BYTE *)&page, (BYTE *)default_pb, PAGESIZE );
   \                     ??read_page_1:
   \   00002D                ; Setup parameters for call to function mymemcpy
   \   00002D   79F2         MOV     R1,#-0xe
   \   00002F   7C..         MOV     R4,#(default_pb & 0xff)
   \   000031   7D..         MOV     R5,#((default_pb >> 8) & 0xff)
   \   000033   7A..         MOV     R2,#(page & 0xff)
   \   000035   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   000037   12....       LCALL   mymemcpy
    597                  // partial PB restoration goes here
    598                  //void (*f)( void ) = ( void (*)( void ) )0x603F;  (*f)();  // to 8k image
    599                  switchTo255(); ch255 = FALSE;
   \   00003A                ; Setup parameters for call to function switchTo255
   \   00003A   12....       LCALL   ?Subroutine82
    600                  page.ov         = *((BYTE *)0x3DC);
   \                     ??CrossCallReturnLabel_250:
   \   00003D   9003DC       MOV     DPTR,#0x3dc
   \   000040   E0           MOVX    A,@DPTR
   \   000041   90....       MOV     DPTR,#(page + 187)
   \   000044   F0           MOVX    @DPTR,A
    601                  page.oc         = *((BYTE *)0x3DD);
   \   000045   9003DD       MOV     DPTR,#0x3dd
   \   000048   E0           MOVX    A,@DPTR
   \   000049   90....       MOV     DPTR,#(page + 188)
   \   00004C   F0           MOVX    @DPTR,A
    602                  //page.ov_startup = 100;//*((BYTE *)0x3DE);
    603                  //page.myBunch = 0;   page.netId  = 0;
    604                   /*
    605                  page.channel = 255; page.pureOffset = -130;
    606                  page.edAddr    = 2; page.gwAddr     = 1; 
    607                  page.vin_limit = 0; 
    608                  mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 );
    609                  //page.myBunch = 0;   page.netId  = 0;
    610                  mymemcpy( (BYTE *)&page, (BYTE *)0x3D4, 12 );    // netid, bunch, mac
    611                  //zerofill( (BYTE *)&energy, 8 );
    612                  */
    613              }
    614              ch255 = FALSE;
   \                     ??read_page_3:
   \   00004D   E4           CLR     A
   \   00004E   90....       MOV     DPTR,#ch255
   \   000051   80..         SJMP    ?Subroutine113
    615          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   switchTo255
   \   000003   E4           CLR     A
   \   000004   90....       MOV     DPTR,#ch255
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    616          //float polynomial[] = { 0, 0, 0, -200 }; // -0.000693, 0.0556, 0.613, -220.0};

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    617          void switchTo255(){
   \                     switchTo255:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    618              curChannel = page.channel = 255;   
   \   000004   74FF         MOV     A,#-0x1
   \   000006   90....       MOV     DPTR,#(page + 164)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#curChannel
   \   00000D   12....       LCALL   ?Subroutine77
    619              page.use12kbod  = TRUE;   page.hoppingAllowed = FALSE;
   \                     ??CrossCallReturnLabel_232:
   \   000010   C2E4         CLR     0xE0 /* A   */.4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   D2E2         SETB    0xE0 /* A   */.2
   \   000015   F0           MOVX    @DPTR,A
    620              page.useFEC     = FALSE;  page.is500Always = FALSE; 
   \   000016   90....       MOV     DPTR,#(page + 219)
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C2E4         CLR     0xE0 /* A   */.4
   \   00001C   12....       LCALL   ?Subroutine77
    621              page.isRelay    = FALSE;  page.searchCommunication = FALSE;
   \                     ??CrossCallReturnLabel_233:
   \   00001F   541F         ANL     A,#0x1f
   \   000021   F0           MOVX    @DPTR,A
    622              page.vin_disable_radio = 0;
   \   000022   E4           CLR     A
   \   000023   90....       MOV     DPTR,#(page + 156)
   \   000026   F0           MOVX    @DPTR,A
    623              //page.production = 0;
    624              //page.fuseComm   = 0;    page.fuseOVOC = 0;
    625              mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 ); 
   \   000027                ; Setup parameters for call to function mymemcpy
   \   000027   7920         MOV     R1,#0x20
   \   000029   7C..         MOV     R4,#(theKey & 0xff)
   \   00002B   7D..         MOV     R5,#((theKey >> 8) & 0xff)
   \   00002D   7A..         MOV     R2,#((page + 96) & 0xff)
   \   00002F   7B..         MOV     R3,#(((page + 96) >> 8) & 0xff)
   \   000031   12....       LCALL   mymemcpy
    626              //mymemcpy( (BYTE *)page.dFk,    (BYTE *)polynomial, 16 );
    627              page.syncword = 0xF0F0; page.edAddr = 2; page.gwAddr = 1;
   \   000034   90....       MOV     DPTR,#(page + 154)
   \   000037   74F0         MOV     A,#-0x10
   \   000039   12....       LCALL   ?Subroutine68
    628              mymemcpy( (BYTE *)&page, (BYTE *)0x3D0, 12 );    // barrier, netid (0), bunch (0), group, mac, 
   \                     ??CrossCallReturnLabel_216:
   \   00003C                ; Setup parameters for call to function mymemcpy
   \   00003C   790C         MOV     R1,#0xc
   \   00003E   7CD0         MOV     R4,#-0x30
   \   000040   7D03         MOV     R5,#0x3
   \   000042   7A..         MOV     R2,#(page & 0xff)
   \   000044   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   000046   12....       LCALL   mymemcpy
    629              ch255 = TRUE;   softKick();
   \   000049   7401         MOV     A,#0x1
   \   00004B   90....       MOV     DPTR,#ch255
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function softKick
   \   00004F   12....       LCALL   softKick
    630              //page.myBunch    =  0;     page.netId = 0;  
    631          }
   \   000052   80..         SJMP    ??Subroutine113_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(page + 194)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7402         MOV     A,#0x2
   \   000005   90....       MOV     DPTR,#(page + 190)
   \   000008   F0           MOVX    @DPTR,A
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#(page + 191)
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET
    632          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    633          static UINT16 dVOut = 0,
   \                     dVOut:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    634            vOutMin = 0,
   \                     vOutMin:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    635            vOutMax = 0;
   \                     vOutMax:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    636          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    637          void kickOsc()
   \                     kickOsc:
    638          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    639            P1_3 = 0;
   \   000004   C293         CLR     0x90.3
    640            oscWhatToWaitFor = SetOscOVStartupDelay;
   \   000006   7415         MOV     A,#0x15
   \   000008   90....       MOV     DPTR,#oscWhatToWaitFor
   \   00000B   F0           MOVX    @DPTR,A
    641            ticks[OscEvent] = page.oscOVStartupDelay;
   \   00000C   90....       MOV     DPTR,#(page + 138)
   \   00000F   12....       LCALL   ??Subroutine1_0
    642            T3CC0 = page.ov_startup;
   \                     ??CrossCallReturnLabel_328:
   \   000012   90....       MOV     DPTR,#(page + 223)
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5CD         MOV     0xcd,A
    643          }
   \   000018   80..         SJMP    ??Subroutine113_0
   \   00001A                REQUIRE _A_P1
   \   00001A                REQUIRE T3CC0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \                     ??Subroutine110_0:
   \   000004   EA           MOV     A,R2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   EB           MOV     A,R3
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#(page + 142)
   \                     ??Subroutine1_0:
   \   000003   12....       LCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_398:
   \   000006   240E         ADD     A,#0xe
   \                     ??Subroutine1_1:
   \   000008   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_264:
   \   00000B   02....       LJMP    ??Subroutine110_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   02....       LJMP    ?Subroutine118
    644          
    645          #ifdef MidString

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    646          INT16 iOutIin1Diff; // Used in compute ADCs for FET failure
   \                     iOutIin1Diff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    647          INT16 iOutIin2Diff; // Global to save time with computeADCs
   \                     iOutIin2Diff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    648          #endif
    649          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    650          void checkVin(void){
   \                     checkVin:
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 0
    651          INT16  t;
    652          UINT16 safe_vin_16; //, dp; // dp is needed for power dissipation protection
    653          static BYTE oscCondition = 0;
    654          
    655          #ifdef MidString
    656              static UINT16 currentFETTickCount = 0;
    657          
    658              if (checkForFETFailure)
   \   000005   90....       MOV     DPTR,#checkForFETFailure
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7003         JNZ     $+5
   \   00000B   02....       LJMP    ??checkVin_0
    659                {
    660          	iOutIin1Diff = (INT16)adcs16[2] - (INT16)adcs16[6];
   \   00000E   12....       LCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_167:
   \   000011   90....       MOV     DPTR,#(adcs16 + 12)
   \   000014   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_113:
   \   000017   90....       MOV     DPTR,#iOutIin1Diff
   \   00001A   12....       LCALL   ??Subroutine110_0
    661          	iOutIin2Diff = (INT16)adcs16[2] - (INT16)adcs16[5];
   \                     ??CrossCallReturnLabel_315:
   \   00001D   90....       MOV     DPTR,#(adcs16 + 10)
   \   000020   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_114:
   \   000023   90....       MOV     DPTR,#iOutIin2Diff
   \   000026   12....       LCALL   ??Subroutine110_0
    662          	if ( ((INT16)adcs16[2] > page.fetCurrentThreshold) &&
    663          	     ( (iOutIin1Diff < page.fetDeltaCurrent) ||
    664          	       (iOutIin2Diff < page.fetDeltaCurrent) )  )
   \                     ??CrossCallReturnLabel_316:
   \   000029   90....       MOV     DPTR,#(page + 130)
   \   00002C   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_351:
   \   00002F   5058         JNC     ??checkVin_1
   \   000031   90....       MOV     DPTR,#(page + 132)
   \   000034   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_168:
   \   000037   90....       MOV     DPTR,#iOutIin1Diff
   \   00003A   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_352:
   \   00003D   4008         JC      ??checkVin_2
   \   00003F   90....       MOV     DPTR,#iOutIin2Diff
   \   000042   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_353:
   \   000045   5042         JNC     ??checkVin_1
    665          	  {
    666          	    currentFETTickCount += 120;
   \                     ??checkVin_2:
   \   000047   90....       MOV     DPTR,#??currentFETTickCount
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   2478         ADD     A,#0x78
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   3400         ADDC    A,#0x0
   \   000052   F0           MOVX    @DPTR,A
    667          	    netValue = MainNetValueFETFailing; // indicate FET failure being observed
   \   000053   90....       MOV     DPTR,#netValue
   \   000056   740A         MOV     A,#0xa
   \   000058   12....       LCALL   ?Subroutine117
    668          	    if (currentFETTickCount >= (INT16)page.fetFailureCount)
   \                     ??CrossCallReturnLabel_378:
   \   00005B   90....       MOV     DPTR,#(page + 128)
   \   00005E   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_169:
   \   000061   7583..       MOV     DPH,#((??currentFETTickCount >> 8) & 0xff)
   \   000064   7582..       MOV     DPL,#(??currentFETTickCount & 0xff)
   \   000067   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_276:
   \   00006A   402D         JC      ??checkVin_0
    669          	      {
    670          		P1_4 = 0; // turn the module off 
   \   00006C   C294         CLR     0x90.4
    671          		fetFailure = TRUE; // set guard to keep module from being turned on
   \   00006E   7401         MOV     A,#0x1
   \   000070   90....       MOV     DPTR,#fetFailure
   \   000073   F0           MOVX    @DPTR,A
    672          		checkForFETFailure = FALSE; // No need to check further until power cycle or Module On
   \   000074   E4           CLR     A
   \   000075   90....       MOV     DPTR,#checkForFETFailure
   \   000078   12....       LCALL   ?Subroutine71
    673          		netValue = MainNetValueFETFailed; // indicate FET failure condition
    674          		*ModuleOffRememberedPtr = ModuleStatusOffFetFailure; // Remember module is off
   \                     ??CrossCallReturnLabel_376:
   \   00007B   90....       MOV     DPTR,#ModuleStatusOffFetFailure
   \   00007E   12....       LCALL   ??Subroutine57_0
    675          		currentFETTickCount = 0; // Reset to 0
   \                     ??CrossCallReturnLabel_159:
   \   000081   90....       MOV     DPTR,#??currentFETTickCount
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   800F         SJMP    ??checkVin_3
    676          	      }
    677          	  }
    678          	else
    679          	  {
    680          	    currentFETTickCount = 0; // Ensure count is back to default
   \                     ??checkVin_1:
   \   000089   90....       MOV     DPTR,#??currentFETTickCount
   \   00008C   E4           CLR     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
    681          	    netValue = MainNetValueStandard; // "default" netValue for main image
   \   000090   90....       MOV     DPTR,#netValue
   \   000093   7432         MOV     A,#0x32
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E4           CLR     A
   \                     ??checkVin_3:
   \   000098   F0           MOVX    @DPTR,A
    682          	  }
    683                }
    684          #endif
    685          
    686          if( ( ticks[ OvStartup ] == 0 ) &&
    687              ( page.oscLowCurrentLimitInmA != 0 ) &&
    688              ( page.oscLowCurrentLimitInmA != -1 ) &&
    689              ( oscWhatToWaitFor == SetOscLowCurrentOnlyDelay ) &&
    690              ( ((INT16)adcs16[2]) < page.oscLowCurrentLimitInmA) )
   \                     ??checkVin_0:
   \   000099   90....       MOV     DPTR,#ticks
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   241E         ADD     A,#0x1e
   \   00009F   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_89:
   \   0000A2   7002         JNZ     ??checkVin_4
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \                     ??checkVin_4:
   \   0000A6   7045         JNZ     ??checkVin_5
   \   0000A8   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_156:
   \   0000AB   7001         JNZ     ??checkVin_6
   \   0000AD   E9           MOV     A,R1
   \                     ??checkVin_6:
   \   0000AE   603D         JZ      ??checkVin_5
   \   0000B0   74FF         MOV     A,#-0x1
   \   0000B2   68           XRL     A,R0
   \   0000B3   7003         JNZ     ??checkVin_7
   \   0000B5   74FF         MOV     A,#-0x1
   \   0000B7   69           XRL     A,R1
   \                     ??checkVin_7:
   \   0000B8   6033         JZ      ??checkVin_5
   \   0000BA   90....       MOV     DPTR,#oscWhatToWaitFor
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6417         XRL     A,#0x17
   \   0000C0   702B         JNZ     ??checkVin_5
   \   0000C2   90....       MOV     DPTR,#(adcs16 + 4)
   \   0000C5   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_354:
   \   0000C8   502B         JNC     ??checkVin_8
    691            {
    692              if( dVOut > page.oscDeltaV )
   \   0000CA   90....       MOV     DPTR,#dVOut
   \   0000CD   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_170:
   \   0000D0   7583..       MOV     DPH,#(((page + 136) >> 8) & 0xff)
   \   0000D3   7582..       MOV     DPL,#((page + 136) & 0xff)
   \   0000D6   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_277:
   \   0000D9   501D         JNC     ??CrossCallReturnLabel_329
    693                oscCondition++;
   \   0000DB   90....       MOV     DPTR,#??oscCondition
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   04           INC     A
   \   0000E0   F0           MOVX    @DPTR,A
    694              else
    695                oscCondition = 0;
    696          
    697              if( oscCondition > 1 )
   \   0000E1   C3           CLR     C
   \   0000E2   9402         SUBB    A,#0x2
   \   0000E4   4017         JC      ??checkVin_9
    698                {
    699          	oscCondition = 0;
   \   0000E6   E4           CLR     A
   \   0000E7   F0           MOVX    @DPTR,A
    700          	kickOsc();
   \   0000E8                ; Setup parameters for call to function kickOsc
   \   0000E8   12....       LCALL   kickOsc
   \   0000EB   8010         SJMP    ??checkVin_9
    701                }
    702            }
    703           else if(oscWhatToWaitFor == SetOscLowCurrentOnlyDelay)
   \                     ??checkVin_5:
   \   0000ED   90....       MOV     DPTR,#oscWhatToWaitFor
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   6417         XRL     A,#0x17
   \   0000F3   7008         JNZ     ??checkVin_9
    704             {
    705               ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
   \                     ??checkVin_8:
   \   0000F5   12....       LCALL   ?Subroutine1
    706               oscCondition = 0;
   \                     ??CrossCallReturnLabel_329:
   \   0000F8   E4           CLR     A
   \   0000F9   90....       MOV     DPTR,#??oscCondition
   \   0000FC   F0           MOVX    @DPTR,A
    707             }
    708          
    709          #ifdef MidString
    710          UINT16 switchTo255Lim = 30000, switchFrom255Lim = 28500, shortCircuitProtectionOff = 8000, shortCircuitProtectionOn = 6000; 
   \                     ??checkVin_9:
   \   0000FD   7E30         MOV     R6,#0x30
   \   0000FF   7F75         MOV     R7,#0x75
   \   000101   75..54       MOV     ?V0 + 4,#0x54
   \   000104   75..6F       MOV     ?V0 + 5,#0x6f
   \   000107   75..40       MOV     ?V0 + 6,#0x40
   \   00010A   75..1F       MOV     ?V0 + 7,#0x1f
   \   00010D   75..70       MOV     ?V0 + 8,#0x70
   \   000110   75..17       MOV     ?V0 + 9,#0x17
    711              if( ((UINT16)page.linearK[0][0]) > 16 ) // MS1000
   \   000113   90....       MOV     DPTR,#(page + 40)
   \   000116   78..         MOV     R0,#?V0 + 0
   \   000118   12....       LCALL   ?L_MOV_X
   \   00011B   78..         MOV     R0,#?V0 + 0
   \   00011D   12....       LCALL   ?FLT_TO_L
   \   000120   C3           CLR     C
   \   000121   E5..         MOV     A,?V0 + 0
   \   000123   9411         SUBB    A,#0x11
   \   000125   E5..         MOV     A,?V0 + 1
   \   000127   9400         SUBB    A,#0x0
   \   000129   4016         JC      ??checkVin_10
    712              { switchTo255Lim = 60000; switchFrom255Lim = 57000; shortCircuitProtectionOff = 16000; shortCircuitProtectionOn = 12000;  }
   \   00012B   7E60         MOV     R6,#0x60
   \   00012D   7FEA         MOV     R7,#-0x16
   \   00012F   75..A8       MOV     ?V0 + 4,#-0x58
   \   000132   75..DE       MOV     ?V0 + 5,#-0x22
   \   000135   75..80       MOV     ?V0 + 6,#-0x80
   \   000138   75..3E       MOV     ?V0 + 7,#0x3e
   \   00013B   75..E0       MOV     ?V0 + 8,#-0x20
   \   00013E   75..2E       MOV     ?V0 + 9,#0x2e
    713          #endif
    714              checkVref = page.vrefPolynom[0] / ((float)last[4]);
   \                     ??checkVin_10:
   \   000141   90....       MOV     DPTR,#(page + 28)
   \   000144   78..         MOV     R0,#?V0 + 12
   \   000146   12....       LCALL   ?L_MOV_X
   \   000149   90....       MOV     DPTR,#(last + 8)
   \   00014C   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   00014F   12....       LCALL   ?UL_TO_FLT
   \   000152   78..         MOV     R0,#?V0 + 12
   \   000154   79..         MOV     R1,#?V0 + 0
   \   000156   12....       LCALL   ?FLT_DIV
   \   000159   90....       MOV     DPTR,#checkVref
   \   00015C   78..         MOV     R0,#?V0 + 12
   \   00015E   12....       LCALL   ?L_MOV_TO_X
    715              _coeff = page.linearK[3];
   \   000161   90....       MOV     DPTR,#_coeff
   \   000164   74..         MOV     A,#((page + 64) & 0xff)
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   74..         MOV     A,#(((page + 64) >> 8) & 0xff)
   \   00016A   F0           MOVX    @DPTR,A
    716              //safe_vin_16 = (UINT16) processCheck( last[5] );
    717              safe_vin_16  = convU( lin_coeff( ((float) last[5])*checkVref ) );
   \   00016B                ; Setup parameters for call to function convU
   \   00016B                ; Setup parameters for call to function lin_coeff
   \   00016B   90....       MOV     DPTR,#(last + 10)
   \   00016E   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_9:
   \   000171   12....       LCALL   ?UL_TO_FLT
   \   000174   90....       MOV     DPTR,#checkVref
   \   000177   78..         MOV     R0,#?V0 + 12
   \   000179   12....       LCALL   ?L_MOV_X
   \   00017C   78..         MOV     R0,#?V0 + 0
   \   00017E   79..         MOV     R1,#?V0 + 12
   \   000180   12....       LCALL   ?FLT_MUL
   \   000183   AA..         MOV     R2,?V0 + 0
   \   000185   AB..         MOV     R3,?V0 + 1
   \   000187   AC..         MOV     R4,?V0 + 2
   \   000189   AD..         MOV     R5,?V0 + 3
   \   00018B   12....       LCALL   lin_coeff
   \   00018E   12....       LCALL   convU
    718          
    719              #ifndef MidString
    720              if( P1_3 == 0 ){
    721                  if( P1_4  && (safe_vin_16 < (100*(UINT16)page.vin_switch_off) ) ){
    722                      ticks[ TurnOn ] = 3 * TICKS_IN_SEC;     P1_4 = 0; 
    723                  }else if( (P1_4 == 0) && turnOnFlag && ( safe_vin_16 > (100*(UINT16)page.vin_turn_on) ) ){
    724                      turnOnFlag = 0; ticks[ BypassMode ] = TICKS_IN_SEC;  
    725                      P1_3 = 1; ov_startup();
    726                  } 
    727              }
    728              #endif
    729              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000191   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_2:
   \   000194   7005         JNZ     ??checkVin_11
   \   000196   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_21:
   \   000199   600E         JZ      ??checkVin_12
   \                     ??checkVin_11:
   \   00019B   90....       MOV     DPTR,#flags
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   240B         ADD     A,#0xb
   \   0001A1   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_101:
   \   0001A4   7401         MOV     A,#0x1
   \   0001A6   02....       LJMP    ??checkVin_13
    730              
    731              txDisabled = 0;
   \                     ??checkVin_12:
   \   0001A9   E4           CLR     A
   \   0001AA   90....       MOV     DPTR,#txDisabled
   \   0001AD   F0           MOVX    @DPTR,A
    732              if( page.vin_disable_radio ) txDisabled = ( safe_vin_16 < (1000*(UINT16)page.vin_disable_radio) ); 
   \   0001AE   90....       MOV     DPTR,#(page + 156)
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   6022         JZ      ??checkVin_14
   \   0001B4   F8           MOV     R0,A
   \   0001B5   75F0E8       MOV     B,#-0x18
   \   0001B8   A4           MUL     AB
   \   0001B9   C8           XCH     A,R0
   \   0001BA   ACF0         MOV     R4,B
   \   0001BC   75F003       MOV     B,#0x3
   \   0001BF   A4           MUL     AB
   \   0001C0   2C           ADD     A,R4
   \   0001C1   FC           MOV     R4,A
   \   0001C2   E4           CLR     A
   \   0001C3   2C           ADD     A,R4
   \   0001C4   F9           MOV     R1,A
   \   0001C5   EA           MOV     A,R2
   \   0001C6   98           SUBB    A,R0
   \   0001C7   EB           MOV     A,R3
   \   0001C8   99           SUBB    A,R1
   \   0001C9   5004         JNC     ??checkVin_15
   \   0001CB   7C01         MOV     R4,#0x1
   \   0001CD   8002         SJMP    ??checkVin_16
   \                     ??checkVin_15:
   \   0001CF   7C00         MOV     R4,#0x0
   \                     ??checkVin_16:
   \   0001D1   EC           MOV     A,R4
   \   0001D2   90....       MOV     DPTR,#txDisabled
   \   0001D5   F0           MOVX    @DPTR,A
    733              
    734              #ifndef MidString    
    735              if( page.vin_limit ){
    736              register BOOL flag = ( safe_vin_16 < (page.vin_limit*100) );
    737                  if( !ch255 && flag ){
    738                    /*
    739                      curChannel = page.channel = 255;   
    740                      page.use12kbod  = TRUE;   page.hoppingAllowed = FALSE;
    741                      page.useFEC     = FALSE;  page.is500Always = FALSE; 
    742                      page.isRelay    = FALSE;  page.searchCommunication = FALSE;
    743                      page.myBunch    =  0;   page.netId = 0;  page.vin_disable_radio = 0;
    744                      page.production = 0;
    745                      //page.fuseComm   = 0;    page.fuseOVOC = 0;
    746                      mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 ); 
    747                      page.syncword = 0xF0F0; page.edAddr = 2; page.gwAddr = 1;
    748                      ch255 = TRUE;   softKick();
    749                    */
    750                    switchTo255();
    751                  }else if( ch255 && !flag ){
    752                  BYTE curV255 = page.vin_limit;  
    753                      read_page(); 
    754                      page.vin_limit = curV255;
    755                      curChannel = page.channel;
    756                      softKick();
    757                  }
    758              }else if( ch255 ){
    759                  BYTE curV255 = page.vin_limit;  
    760                  read_page();
    761                  page.vin_limit = curV255;
    762                  curChannel = page.channel;
    763                  softKick();
    764              }
    765              #endif
    766              
    767              #ifdef MidString    
    768              if( !ch255 && (safe_vin_16 > switchTo255Lim ) )        switchTo255(); // was 30000 for MS600, 60000 for MS1000 
   \                     ??checkVin_14:
   \   0001D6   90....       MOV     DPTR,#ch255
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   C3           CLR     C
   \   0001DB   700B         JNZ     ??checkVin_17
   \   0001DD   EE           MOV     A,R6
   \   0001DE   9A           SUBB    A,R2
   \   0001DF   EF           MOV     A,R7
   \   0001E0   9B           SUBB    A,R3
   \   0001E1   5023         JNC     ??checkVin_18
   \   0001E3                ; Setup parameters for call to function switchTo255
   \   0001E3   12....       LCALL   switchTo255
   \   0001E6   801E         SJMP    ??checkVin_18
    769              else if( ch255 && ( safe_vin_16 < switchFrom255Lim ) ){                 // was 28500 for MS600, 57000 for MS1000
   \                     ??checkVin_17:
   \   0001E8   EA           MOV     A,R2
   \   0001E9   95..         SUBB    A,?V0 + 4
   \   0001EB   EB           MOV     A,R3
   \   0001EC   95..         SUBB    A,?V0 + 5
   \   0001EE   5016         JNC     ??checkVin_18
    770                  read_page();   
   \   0001F0                ; Setup parameters for call to function read_page
   \   0001F0   12....       LCALL   read_page
    771                  if( page.is500Always ) curChannel = page.starting500Channel; 
   \   0001F3   90....       MOV     DPTR,#(page + 194)
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001F9   5008         JNC     ??checkVin_19
   \   0001FB   90....       MOV     DPTR,#(page + 218)
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   90....       MOV     DPTR,#curChannel
   \   000202   F0           MOVX    @DPTR,A
    772                  softKick();  
   \                     ??checkVin_19:
   \   000203                ; Setup parameters for call to function softKick
   \   000203   12....       LCALL   softKick
    773              }
    774              #endif
    775              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??checkVin_18:
   \   000206   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_3:
   \   000209   7090         JNZ     ??checkVin_11
   \   00020B   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_22:
   \   00020E   708B         JNZ     ??checkVin_11
    776              
    777              // temperature protection
    778              _coeff = page.linearK[4];
   \   000210   90....       MOV     DPTR,#_coeff
   \   000213   74..         MOV     A,#((page + 72) & 0xff)
   \   000215   F0           MOVX    @DPTR,A
   \   000216   A3           INC     DPTR
   \   000217   74..         MOV     A,#(((page + 72) >> 8) & 0xff)
   \   000219   F0           MOVX    @DPTR,A
    779              t =  (INT16) lin_coeff_t( ((float)last[6]) * checkVref );
   \   00021A                ; Setup parameters for call to function lin_coeff_t
   \   00021A   90....       MOV     DPTR,#(last + 12)
   \   00021D   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_10:
   \   000220   12....       LCALL   ?UL_TO_FLT
   \   000223   90....       MOV     DPTR,#checkVref
   \   000226   78..         MOV     R0,#?V0 + 12
   \   000228   12....       LCALL   ?L_MOV_X
   \   00022B   78..         MOV     R0,#?V0 + 0
   \   00022D   79..         MOV     R1,#?V0 + 12
   \   00022F   12....       LCALL   ?FLT_MUL
   \   000232   AA..         MOV     R2,?V0 + 0
   \   000234   AB..         MOV     R3,?V0 + 1
   \   000236   AC..         MOV     R4,?V0 + 2
   \   000238   AD..         MOV     R5,?V0 + 3
   \   00023A   12....       LCALL   lin_coeff_t
   \   00023D   8A..         MOV     ?V0 + 0,R2
   \   00023F   8B..         MOV     ?V0 + 1,R3
   \   000241   8C..         MOV     ?V0 + 2,R4
   \   000243   8D..         MOV     ?V0 + 3,R5
   \   000245   78..         MOV     R0,#?V0 + 0
   \   000247   12....       LCALL   ?FLT_TO_L
   \   00024A   AA..         MOV     R2,?V0 + 0
   \   00024C   AB..         MOV     R3,?V0 + 1
    780              // removed UINT16, removed whole T_Superhot
    781              if( page.t_mod_off && (t > ((INT16)page.t_mod_off)) ){ isSteppedDown = TRUE;  P1_4 = 0;  }   // Critical Temperature protection
   \   00024E   90....       MOV     DPTR,#(page + 224)
   \   000251   E0           MOVX    A,@DPTR
   \   000252   6010         JZ      ??checkVin_20
   \   000254   12....       LCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_359:
   \   000257   500B         JNC     ??checkVin_20
   \   000259   7401         MOV     A,#0x1
   \   00025B   90....       MOV     DPTR,#isSteppedDown
   \   00025E   F0           MOVX    @DPTR,A
   \   00025F   C294         CLR     0x90.4
   \   000261   02....       LJMP    ??CrossCallReturnLabel_301
    782              else 
    783              if( page.fallback_time && page.fallback_time!=0xFF ){                                   // Temperature protection
   \                     ??checkVin_20:
   \   000264   90....       MOV     DPTR,#(page + 227)
   \   000267   E0           MOVX    A,@DPTR
   \   000268   F5..         MOV     ?V0 + 0,A
   \   00026A   7003         JNZ     $+5
   \   00026C   02....       LJMP    ??CrossCallReturnLabel_301
   \   00026F   74FF         MOV     A,#-0x1
   \   000271   65..         XRL     A,?V0 + 0
   \   000273   7003         JNZ     $+5
   \   000275   02....       LJMP    ??CrossCallReturnLabel_301
    784                  if( checkVoutOnT )  checkVoutOnT--; 
   \   000278   90....       MOV     DPTR,#checkVoutOnT
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   7002         JNZ     ??checkVin_21
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \                     ??checkVin_21:
   \   000280   6009         JZ      ??checkVin_22
   \   000282   90....       MOV     DPTR,#checkVoutOnT
   \   000285   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_126:
   \   000288   F0           MOVX    @DPTR,A
   \   000289   8078         SJMP    ??CrossCallReturnLabel_301
    785                  else{ 
    786                      checkVoutOnT = 8*(UINT16)page.fallback_time;
   \                     ??checkVin_22:
   \   00028B   75..00       MOV     ?V0 + 1,#0x0
   \   00028E   7403         MOV     A,#0x3
   \   000290   78..         MOV     R0,#?V0 + 0
   \   000292   12....       LCALL   ?S_SHL
   \   000295   90....       MOV     DPTR,#checkVoutOnT
   \   000298   E5..         MOV     A,?V0 + 0
   \   00029A   F0           MOVX    @DPTR,A
   \   00029B   A3           INC     DPTR
   \   00029C   E5..         MOV     A,?V0 + 1
   \   00029E   F0           MOVX    @DPTR,A
    787                      if( isSteppedDown ){
   \   00029F   90....       MOV     DPTR,#isSteppedDown
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   602F         JZ      ??checkVin_23
    788                          if( t < ((INT16)page.ton_fallback) ) {
   \   0002A5   90....       MOV     DPTR,#(page + 226)
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   F8           MOV     R0,A
   \   0002AA   C3           CLR     C
   \   0002AB   EA           MOV     A,R2
   \   0002AC   98           SUBB    A,R0
   \   0002AD   12....       LCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_191:
   \   0002B0   5014         JNC     ??checkVin_24
    789                              if( !P1_4 ) ov_startup();   // module on, starting OV seq
   \   0002B2   A294         MOV     C,0x90.4
   \   0002B4   4003         JC      ??checkVin_25
   \   0002B6                ; Setup parameters for call to function ov_startup
   \   0002B6   12....       LCALL   ov_startup
    790                              T3CC1 = oc2timer( theOC = setOC ); isSteppedDown = FALSE;
   \                     ??checkVin_25:
   \   0002B9   90....       MOV     DPTR,#setOC
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   12....       LCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_225:
   \   0002C0   E4           CLR     A
   \   0002C1   90....       MOV     DPTR,#isSteppedDown
   \   0002C4   80C2         SJMP    ??CrossCallReturnLabel_126
    791                          }else if( P1_4 && /*( t > t_prev ) &&*/ theOC ) T3CC1 = oc2timer( --theOC );  
   \                     ??checkVin_24:
   \   0002C6   A294         MOV     C,0x90.4
   \   0002C8   5039         JNC     ??CrossCallReturnLabel_301
   \   0002CA   90....       MOV     DPTR,#theOC
   \   0002CD   E0           MOVX    A,@DPTR
   \   0002CE   6033         JZ      ??CrossCallReturnLabel_301
   \   0002D0   14           DEC     A
   \   0002D1   F0           MOVX    @DPTR,A
   \   0002D2                ; Setup parameters for call to function oc2timer
   \   0002D2   802C         SJMP    ??checkVin_26
    792                      }else  if( P1_4 && ( t > ((INT16)page.toff_fallback) ) ) {  
   \                     ??checkVin_23:
   \   0002D4   A294         MOV     C,0x90.4
   \   0002D6   502B         JNC     ??CrossCallReturnLabel_301
   \   0002D8   90....       MOV     DPTR,#(page + 225)
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   12....       LCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_360:
   \   0002DF   5022         JNC     ??CrossCallReturnLabel_301
    793                          if( theOC > page.oc_protection ) theOC = page.oc_protection; else theOC--;
   \   0002E1   90....       MOV     DPTR,#(page + 230)
   \   0002E4   E0           MOVX    A,@DPTR
   \   0002E5   FB           MOV     R3,A
   \   0002E6   90....       MOV     DPTR,#theOC
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   FA           MOV     R2,A
   \   0002EB   EB           MOV     A,R3
   \   0002EC   C3           CLR     C
   \   0002ED   9A           SUBB    A,R2
   \   0002EE   5003         JNC     ??checkVin_27
   \   0002F0   EB           MOV     A,R3
   \   0002F1   8002         SJMP    ??checkVin_28
   \                     ??checkVin_27:
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   14           DEC     A
   \                     ??checkVin_28:
   \   0002F5   F0           MOVX    @DPTR,A
    794                          isSteppedDown = TRUE;   T3CC1 = oc2timer( theOC );  
   \   0002F6   7401         MOV     A,#0x1
   \   0002F8   90....       MOV     DPTR,#isSteppedDown
   \   0002FB   F0           MOVX    @DPTR,A
   \   0002FC                ; Setup parameters for call to function oc2timer
   \   0002FC   90....       MOV     DPTR,#theOC
   \   0002FF   E0           MOVX    A,@DPTR
   \                     ??checkVin_26:
   \   000300   12....       LCALL   ?Subroutine103
    795                      }
    796          //            #ifdef MidString
    797          //            compute98();
    798          //            #endif
    799                  }
    800              } 
    801              #ifdef MidString
    802              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_301:
   \   000303   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_4:
   \   000306   6003         JZ      $+5
   \   000308   02....       LJMP    ??checkVin_11
   \   00030B   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_23:
   \   00030E   6003         JZ      $+5
   \   000310   02....       LJMP    ??checkVin_11
    803              if( page.shortCircuitLevel && P1_4 ){ // module on and shortCircuitLevel is not 0
   \   000313   90....       MOV     DPTR,#(page + 159)
   \   000316   E0           MOVX    A,@DPTR
   \   000317   6065         JZ      ??checkVin_29
   \   000319   A294         MOV     C,0x90.4
   \   00031B   5061         JNC     ??checkVin_29
    804                  UINT16 vout; 
    805                  _coeff = page.linearK[0]; vout = convU( lin_coeff( ((float) last[0])*checkVref ) );
   \   00031D   90....       MOV     DPTR,#_coeff
   \   000320   74..         MOV     A,#((page + 40) & 0xff)
   \   000322   F0           MOVX    @DPTR,A
   \   000323   A3           INC     DPTR
   \   000324   74..         MOV     A,#(((page + 40) >> 8) & 0xff)
   \   000326   F0           MOVX    @DPTR,A
   \   000327                ; Setup parameters for call to function convU
   \   000327                ; Setup parameters for call to function lin_coeff
   \   000327   90....       MOV     DPTR,#last
   \   00032A   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_11:
   \   00032D   12....       LCALL   ?UL_TO_FLT
   \   000330   90....       MOV     DPTR,#checkVref
   \   000333   78..         MOV     R0,#?V0 + 12
   \   000335   12....       LCALL   ?L_MOV_X
   \   000338   78..         MOV     R0,#?V0 + 0
   \   00033A   79..         MOV     R1,#?V0 + 12
   \   00033C   12....       LCALL   ?FLT_MUL
   \   00033F   AA..         MOV     R2,?V0 + 0
   \   000341   AB..         MOV     R3,?V0 + 1
   \   000343   AC..         MOV     R4,?V0 + 2
   \   000345   AD..         MOV     R5,?V0 + 3
   \   000347   12....       LCALL   lin_coeff
   \   00034A   12....       LCALL   convU
   \   00034D   8A..         MOV     ?V0 + 0,R2
   \   00034F   8B..         MOV     ?V0 + 1,R3
   \   000351   A8..         MOV     R0,?V0 + 0
   \   000353   A9..         MOV     R1,?V0 + 1
    806                  if( ocShortCircuitLimit < 255 ){ // Short Circuit Protection is currently ON
   \   000355   90....       MOV     DPTR,#ocShortCircuitLimit
   \   000358   E0           MOVX    A,@DPTR
   \   000359   64FF         XRL     A,#0xff
   \   00035B   C3           CLR     C
   \   00035C   600F         JZ      ??checkVin_30
    807                    if( vout > shortCircuitProtectionOff ) // was 8000 - 160V on Midstring 600V, 16000 (320 V) on MS1000 turning Short Circuit Protection OFF
   \   00035E   E5..         MOV     A,?V0 + 6
   \   000360   98           SUBB    A,R0
   \   000361   E5..         MOV     A,?V0 + 7
   \   000363   99           SUBB    A,R1
   \   000364   501E         JNC     ??checkVin_31
    808                        { ocShortCircuitLimit = 255;  T3CC1 = oc2timer( theOC );  }  
   \   000366   74FF         MOV     A,#-0x1
   \                     ??checkVin_32:
   \   000368   12....       LCALL   ?Subroutine33
   \                     ??CrossCallReturnLabel_80:
   \   00036B   8017         SJMP    ??checkVin_31
    809                  }else{                           // Short Circuit Protection is currently OFF
    810                    if( vout < shortCircuitProtectionOn ) // was 6000 - 120V on Midstring 600V, was 1200 for MS1000, turning Short Circuit Protection ON
   \                     ??checkVin_30:
   \   00036D   E8           MOV     A,R0
   \   00036E   95..         SUBB    A,?V0 + 8
   \   000370   E9           MOV     A,R1
   \   000371   95..         SUBB    A,?V0 + 9
   \   000373   500F         JNC     ??checkVin_31
    811                        { ocShortCircuitLimit = page.shortCircuitLevel;  T3CC1 = oc2timer( theOC );  }  
   \   000375   90....       MOV     DPTR,#(page + 159)
   \   000378   E0           MOVX    A,@DPTR
   \   000379   90....       MOV     DPTR,#ocShortCircuitLimit
   \   00037C   80EA         SJMP    ??checkVin_32
    812                  }
    813              }else ocShortCircuitLimit = 255;  // if module OFF -> no Short Circuit Protection, turning it OFF
   \                     ??checkVin_29:
   \   00037E   74FF         MOV     A,#-0x1
   \   000380   90....       MOV     DPTR,#ocShortCircuitLimit
   \                     ??checkVin_13:
   \   000383   F0           MOVX    @DPTR,A
   \                     ??checkVin_31:
   \   000384   7F10         MOV     R7,#0x10
   \   000386   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   000389                REQUIRE _A_P1
   \   000389                REQUIRE T3CC1
    814              #endif    
    815              
    816              /* temporary commented for version 7a !!!
    817              // noise amplifier reset - MidString only
    818              #ifdef MidString
    819              static INT8 noiseAmplCnt = 0;
    820              if( page.mpp && ( P1_3 || (noiseAmplCnt > -1) ) ) {
    821                  UINT16 vout; INT16 cur; BOOL noiseAmplResetRequired;
    822                  _coeff = page.linearK[0]; vout = convU( lin_coeff( ((float) last[0])*checkVref ) );
    823                  _coeff = page.linearK[2]; cur  = convS( lin_coeff( ((float) last[2])*checkVref ) );
    824                  
    825                  noiseAmplResetRequired  = page.k_oc_cur  && (page.k_oc_cur  != 0xFF) && ( cur  > Cur98  );
    826                  noiseAmplResetRequired |= page.k_ov_volt && (page.k_ov_volt != 0xFF) && ( vout > Vout98 );
    827                  
    828                  if( noiseAmplResetRequired ){
    829                    // reset error amplifier once a second, for one mpp period
    830                    if( noiseAmplCnt <= 0 ){ P1_3 = 0; noiseAmplCnt = 0; }
    831                    if( noiseAmplCnt == 1 ){ P1_3 = page.mpp;  }
    832                  }else{ P1_3 = page.mpp; } // mpp on
    833              }
    834              noiseAmplCnt = (noiseAmplCnt+1)%8;
    835              #endif
    836              */
    837          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   90....       MOV     DPTR,#theOC
   \                     ??Subroutine72_0:
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function oc2timer
   \   000004                ; Setup parameters for call to function oc2timer
   \   000004                ; Setup parameters for call to function oc2timer
   \   000004   12....       LCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_302:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   C3           CLR     C
   \   000001   9A           SUBB    A,R2
   \   000002   E4           CLR     A
   \   000003   9B           SUBB    A,R3
   \   000004   02....       LJMP    ?Subroutine114

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   90....       MOV     DPTR,#(page + 134)
   \                     ??Subroutine56_0:
   \   000003   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_291:
   \   000006   E8           MOV     A,R0
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ??Subroutine94_0
   \                     ??CrossCallReturnLabel_369:
   \   000003   E8           MOV     A,R0
   \   000004   C3           CLR     C
   \   000005   9A           SUBB    A,R2
   \   000006   FA           MOV     R2,A
   \   000007   E9           MOV     A,R1
   \   000008   9B           SUBB    A,R3
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function oc2timer
   \   000001                ; Setup parameters for call to function oc2timer
   \                     ??Subroutine33_0:
   \   000001   90....       MOV     DPTR,#theOC
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_303:
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   F9           MOV     R1,A
   \                     ??Subroutine103_0:
   \   000001   12....       LCALL   oc2timer
   \   000004   E9           MOV     A,R1
   \   000005   F5CF         MOV     0xcf,A
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   75..00       MOV     ?V0 + 2,#0x0
   \   00000A   75..00       MOV     ?V0 + 3,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_296:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24FF         ADD     A,#-0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34FF         ADDC    A,#-0x1
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ??Subroutine86_0
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_279:
   \   000003                REQUIRE ?Subroutine114
   \   000003                ; // Fall through to label ?Subroutine114

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   90....       MOV     DPTR,#ModuleStatusCanTurnOn
   \                     ??Subroutine57_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   90FFFD       MOV     DPTR,#-0x3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#(flags + 1)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \                     ??Subroutine2_0:
   \   000005   90....       MOV     DPTR,#flags
   \   000008   12....       LCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_293:
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   90....       MOV     DPTR,#(adcs16 + 4)
   \                     ??Subroutine60_0:
   \   000003   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_292:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_308:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV     DPTR,#si
   \   000003   E0           MOVX    A,@DPTR
   \   000004   245B         ADD     A,#0x5b
   \                     ??Subroutine43_0:
   \   000006   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_271:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#netValue
   \   000004   7446         MOV     A,#0x46
   \   000006                REQUIRE ?Subroutine117
   \   000006                ; // Fall through to label ?Subroutine117

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   90....       MOV     DPTR,#lastCycle
   \                     ??Subroutine94_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   02....       LJMP    ?Subroutine115

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   90....       MOV     DPTR,#si
   \   000003   E0           MOVX    A,@DPTR
   \   000004   243A         ADD     A,#0x3a
   \                     ??Subroutine86_0:
   \   000006   12....       LCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_309:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??oscCondition:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??currentFETTickCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    838          //#ifdef MidString
    839          //void compute98(){ // computed from values taken from ITF midstrings on Sep. 25
    840          //    Cur98  = convS( (((float)page.k_oc_cur)  * ( 4670 + 38.6*((float)theOC) ))  * 0.005 );
    841          //    Vout98 = convU( (((float)page.k_ov_volt) * ( 68.2*((float)T3CC0) + 10680 )) * 0.005 );
    842          //}
    843          //#endif

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    844          BOOL checkItOut( BOOL *flag_ptr ){
   \                     checkItOut:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    845            if( *flag_ptr ){ *flag_ptr = FALSE; return TRUE; }
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6006         JZ      ??checkItOut_0
   \   00000B   E4           CLR     A
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   7901         MOV     R1,#0x1
   \   00000F   8002         SJMP    ??checkItOut_1
    846            return FALSE;
   \                     ??checkItOut_0:
   \   000011   7900         MOV     R1,#0x0
   \                     ??checkItOut_1:
   \   000013   02....       LJMP    ??Subroutine113_0
    847          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    848          UINT16 *ptr2RunningTick = NULL;
   \                     ptr2RunningTick:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    849          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    850          UINT16 computeTI(UINT16 _pt)
   \                     computeTI:
    851          //    { return ( ( _pt <= (*ptr2RunningTick) ) ? ((*ptr2RunningTick) - _pt) : ((*ptr2RunningTick) + (65535 - _pt)) ); } 
    852                { return ( ( (_pt&0xFF) <= *((BYTE *)0xF538) ) ? (*((BYTE *)0xF538) - (0xFF&_pt)) : (*((BYTE *)0xF538) + (255 - (0xFF&_pt))) ); } 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   74FF         MOV     A,#-0x1
   \   000006   5A           ANL     A,R2
   \   000007   F8           MOV     R0,A
   \   000008   90F538       MOV     DPTR,#-0xac8
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C3           CLR     C
   \   00000D   9A           SUBB    A,R2
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   4006         JC      ??computeTI_0
   \   000011   C3           CLR     C
   \   000012   98           SUBB    A,R0
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   800D         SJMP    ??computeTI_1
   \                     ??computeTI_0:
   \   000017   FA           MOV     R2,A
   \   000018   74FF         MOV     A,#-0x1
   \   00001A   2A           ADD     A,R2
   \   00001B   1A           DEC     R2
   \   00001C   E4           CLR     A
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FB           MOV     R3,A
   \   000020   EA           MOV     A,R2
   \   000021   98           SUBB    A,R0
   \   000022   FA           MOV     R2,A
   \   000023   EB           MOV     A,R3
   \                     ??computeTI_1:
   \   000024   9400         SUBB    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   02....       LJMP    ??Subroutine113_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    853          void tickWait(BYTE wait){ 
   \                     tickWait:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    854              ticks[ TickWait ] = ( (INT16)wait ) + 1; //(reset of watchdog should be only in one place)
   \   000005   90....       MOV     DPTR,#ticks
   \   000008   E0           MOVX    A,@DPTR
   \   000009   241C         ADD     A,#0x1c
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FB           MOV     R3,A
   \   000011   89..         MOV     ?V0 + 0,R1
   \   000013   7401         MOV     A,#0x1
   \   000015   25..         ADD     A,?V0 + 0
   \   000017   F8           MOV     R0,A
   \   000018   E4           CLR     A
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F9           MOV     R1,A
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_198:
   \   000023   8005         SJMP    ??tickWait_0
    855              while( ticks[ TickWait ] > 0 ){ P1_2 ^= 1; };//{ WDCTL = 0xA8;  WDCTL = 0x58; *((BYTE *)0xFFFF) = 0x10; } 
   \                     ??tickWait_1:
   \   000025   639004       XRL     0x90,#0x4
   \   000028   E590         MOV     A,0x90
   \                     ??tickWait_0:
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   C3           CLR     C
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   9401         SUBB    A,#0x1
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   9400         SUBB    A,#0x0
   \   000036   C3           CLR     C
   \   000037   65D0         XRL     A,PSW
   \   000039   33           RLC     A
   \   00003A   50E9         JNC     ??tickWait_1
    856              ticks[ TickWait ] = 0;
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   80..         SJMP    ?Subroutine121
   \   000045                REQUIRE _A_P1
    857          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   F0           MOVX    @DPTR,A
   \                     ??Subroutine121_0:
   \   000001   7F02         MOV     R7,#0x2
   \   000003   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F9           MOV     R1,A
   \   000001   90....       MOV     DPTR,#base_ptr
   \                     ??Subroutine67_0:
   \   000004   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_348:
   \   000007   22           RET
    858          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    859          void checkMore(){
   \                     checkMore:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    860          BYTE i; UINT16 j; BOOL go8k = FALSE;
    861              P1_4 = 0;   P1DIR = 0xDB;    // module off
   \   000005   C294         CLR     0x90.4
   \   000007   75FEDB       MOV     0xfe,#-0x25
    862              for( i = 0; (i<15); i++ ){ // the self check
   \   00000A   7E00         MOV     R6,#0x0
    863                  BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
   \                     ??checkMore_0:
   \   00000C   8E..         MOV     ?V0 + 0,R6
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   740A         MOV     A,#0xa
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?S_SHL
   \   000018   12....       LCALL   ?Subroutine83
    864                  BOOL flag = TRUE; 
    865                  *((BYTE *)0xFFFF) = 0x10;
    866                  for( j = 0; flag && (j < 0x400); j++ ) flag = ( (*ptr++)==0xFF );
   \                     ??CrossCallReturnLabel_252:
   \   00001B   E8           MOV     A,R0
   \   00001C   FA           MOV     R2,A
   \   00001D   E9           MOV     A,R1
   \   00001E   FB           MOV     R3,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A882         MOV     R0,DPL
   \   000026   A983         MOV     R1,DPH
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   64FF         XRL     A,#0xff
   \   00002F   7004         JNZ     ??checkMore_1
   \   000031   7A01         MOV     R2,#0x1
   \   000033   8002         SJMP    ??checkMore_2
   \                     ??checkMore_1:
   \   000035   7A00         MOV     R2,#0x0
   \                     ??checkMore_2:
   \   000037   12....       LCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_254:
   \   00003A   6006         JZ      ??checkMore_3
   \   00003C   C3           CLR     C
   \   00003D   ED           MOV     A,R5
   \   00003E   9404         SUBB    A,#0x4
   \   000040   40D9         JC      ??CrossCallReturnLabel_252
    867                  go8k |= flag;
    868              }
   \                     ??checkMore_3:
   \   000042   0E           INC     R6
   \   000043   EE           MOV     A,R6
   \   000044   C3           CLR     C
   \   000045   940F         SUBB    A,#0xf
   \   000047   40C3         JC      ??checkMore_0
    869              //if( go8k ) {void (*f)( void ) = ( void (*)( void ) )0x603F; (*f)();} // commented jump to 8k image, Feb 12 2014, 16:35
    870          }
   \   000049   80..         SJMP    ??Subroutine121_0
   \   00004B                REQUIRE _A_P1
   \   00004B                REQUIRE P1DIR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   EA           MOV     A,R2
   \   000001   FB           MOV     R3,A
   \   000002   EC           MOV     A,R4
   \   000003   2401         ADD     A,#0x1
   \   000005   0C           INC     R4
   \   000006   ED           MOV     A,R5
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   EB           MOV     A,R3
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   2400         ADD     A,#0x0
   \   000002   F8           MOV     R0,A
   \   000003   7408         MOV     A,#0x8
   \   000005   35..         ADDC    A,?V0 + 1
   \   000007   F9           MOV     R1,A
   \   000008   7410         MOV     A,#0x10
   \   00000A   90FFFF       MOV     DPTR,#-0x1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7D00         MOV     R5,#0x0
   \   000012   22           RET
    871          
    872          //void reset(void){ WDCTL = 0x8 | 0x3; while( TRUE ) halWait( 10 ); }
    873          //BOOL dec( UINT16 *cntPtr ) { return ((*cntPtr) && (--(*cntPtr) == 0 ))?TRUE:FALSE; }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    874          BOOL dec( UINT16 *cntPtr ){ --(*cntPtr); return (*((BYTE *)cntPtr)==0)?TRUE:FALSE; }
   \                     `dec`:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_127:
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7004         JNZ     ??dec_0
   \   000013   7901         MOV     R1,#0x1
   \   000015   8002         SJMP    ??dec_1
   \                     ??dec_0:
   \   000017   7900         MOV     R1,#0x0
   \                     ??dec_1:
   \   000019   02....       LJMP    ??Subroutine113_0
    875          /******************************************************************************
    876          * @fn  main
    877          * @brief
    878          *      Main function. Triggers setup menus and main loops for both receiver
    879          *      and transmitter. This function supports both CC1110 and CC2510.
    880          * Parameters:
    881          * @param  void
    882          * @return void
    883          ******************************************************************************/

   \                                 In  segment XDATA_I, align 1, keep-with-next
    884          BYTE sleepCounter = 5, saved_channel;
   \                     sleepCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for sleepCounter>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     saved_channel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    885          //void goSleep( void ){ if( sleepCounter && (--sleepCounter==0) && si->radioMode == RADIO_MODE_UNDEF ) PCON |= 1; }
    886          //static BYTE fakeBuf[ 2 ] = { 4, 0xFE };

   \                                 In  segment XDATA_I, align 1, keep-with-next
    887          static BOOL   wasAHardResetOrPowerOn = TRUE;//, need_wiggle = FALSE, was_wiggling = FALSE;
   \                     wasAHardResetOrPowerOn:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for wasAHardResetOrPowerOn>`
   \   000001                REQUIRE __INIT_XDATA_I
    888          //void readNextValueScheduled(void);
    889          /*
    890          void switch2parking( BYTE j ){
    891               CHANNR = parking_channels[j]; 
    892               //FSCAL3 = fscal_parking[j][0];         FSCAL2 = fscal_parking[j][1];          FSCAL1 = fscal_parking[j][2];
    893               mymemcpy( FSCAL3_ADDR, fscal_parking[j], 3 );
    894               tickWait( 0 );
    895          }
    896          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    897          UINT16 milliSeconds = 0;
   \                     milliSeconds:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    898          BYTE   seconds = 0, minutes = 0;
   \                     seconds:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     minutes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    899          BYTE was_repeater = 0;
   \                     was_repeater:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    900          void main_loop(void){
   \                     main_loop:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    901          BYTE idx, cwCnt = 1; 
    902          static BYTE xored = 1;
    903              //while( cwCnt -- ){
    904                  //*((BYTE *)0xFFFF) = 0x20;
    905                  for( idx = 0; idx < N_Of_Flags; idx ++ ){
   \   000005   75..00       MOV     ?V0 + 0,#0x0
    906                      if( flags[ idx ] ){
   \                     ??main_loop_0:
   \   000008   A8..         MOV     R0,?V0 + 0
   \   00000A   90....       MOV     DPTR,#flags
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   28           ADD     A,R0
   \   00000F   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_90:
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??main_loop_1
    907                          flags[ idx ] = FALSE;
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    908                          switch( idx ){
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for main_loop>_0`:
   \   00001E   00           DB        0
   \   00001F   05           DB        5
   \   000020   01           DB        1
   \   000021   ....         DW        ??main_loop_2
   \   000023   02           DB        2
   \   000024   ....         DW        ??main_loop_3
   \   000026   03           DB        3
   \   000027   ....         DW        ??main_loop_4
   \   000029   09           DB        9
   \   00002A   ....         DW        ??main_loop_5
   \   00002C   0B           DB        11
   \   00002D   ....         DW        ??main_loop_6
   \   00002F   ....         DW        ??main_loop_7
    909                              case DataSent:
    910                                  rc();
    911                                  //P1_1 = 0;
    912                                  //P1_1 ^= 1;
    913                                  //while( real_cw_mode ) tickWait( 1 ); 
    914                                  //if( checkItOut(&cleanTxBuffer ) ) radioPktBufferTx[0] = 0; //cleanTxBuffer = FALSE; 
    915                                  //if( was_wiggling ) was_wiggling = FALSE; CHANNR = saved_channel;  MCSM0 = 0x14; }
    916                                  /*
    917                                  if( page.wiggle_dchan && need_wiggle ){
    918                                     setupTxBuffer( fakeBuf );
    919                                     INT_GLOBAL_ENABLE( INT_OFF ); 
    920                                        was_wiggling = TRUE; 
    921                                        saved_channel = CHANNR; MCSM0 = 0x04; // no calibration
    922                                        CHANNR ^= page.wiggle_dchan;
    923                                        si->radioMode = RADIO_MODE_TX;        
    924                                        atomicChange( CheckFlag, TICKS_IN_MS );
    925                                        DMAARM = DMAARM_CHANNEL1;        // Arm DMA channel 1
    926                                        //RFST   = STROBE_TX;            // Switch radio to TX
    927                                        need_wiggle = FALSE; 
    928                                     INT_GLOBAL_ENABLE( INT_ON ); 
    929                                  }else{
    930                                    // switching transmission off
    931                                    if( was_wiggling ) { CHANNR = saved_channel;   MCSM0 = 0x14; }
    932                                    if(      page.isRelay && (!page.is500Always) ) setupRepeater( TRUE ); 
    933                                    else if( page.stay_in_rx )                     receive();
    934                                  }
    935                                  */
    936                                  //if(  page.isRelay && (!page.is500Always) ) setupRepeater( got_gw ); 
    937                                  //else                                       setupRepeater( FALSE ); 
    938                                  ////was_repeater = 0;
    939                                  //receive();
    940                                  //P1_4 = 1;  // debug line !!!
    941                                  if( was_listening )                           { setupRepeater( FALSE );   receive(); }
   \                     ??main_loop_3:
   \   000031   90....       MOV     DPTR,#was_listening
   \   000034   E0           MOVX    A,@DPTR
   \   000035   600B         JZ      ??main_loop_8
   \   000037                ; Setup parameters for call to function setupRepeater
   \   000037   7900         MOV     R1,#0x0
   \                     ??main_loop_9:
   \   000039   12....       LCALL   setupRepeater
   \   00003C                ; Setup parameters for call to function receive
   \   00003C   12....       LCALL   receive
   \   00003F   02....       LJMP    ??main_loop_7
    942                                  else if( page.isRelay && (!page.is500Always) ){ setupRepeater( got_gw );  receive(); }
   \                     ??main_loop_8:
   \   000042   90....       MOV     DPTR,#(page + 194)
   \   000045   E0           MOVX    A,@DPTR
   \   000046   5460         ANL     A,#0x60
   \   000048   6420         XRL     A,#0x20
   \   00004A   6003         JZ      $+5
   \   00004C   02....       LJMP    ??main_loop_7
   \   00004F                ; Setup parameters for call to function setupRepeater
   \   00004F   90....       MOV     DPTR,#got_gw
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   80E3         SJMP    ??main_loop_9
    943                              break;
    944                              
    945                              case PrepareJoin:       prepareJoinRequest( );                  break;
   \                     ??main_loop_4:
   \   000056                ; Setup parameters for call to function prepareJoinRequest
   \   000056   12....       LCALL   prepareJoinRequest
   \   000059   02....       LJMP    ??main_loop_7
    946                              /*
    947                              case PrepareData:       prepareData();     // here most of the time is spent
    948                                                      processingTime = computeTI( pt ); //( pt <= si->runningTick ) ? (si->runningTick - pt) : (si->runningTick + (65535-pt));
    949                              break;
    950                              */
    951                              case PackageReceived:   /*P1_4 = 1;*/ parseGWPackage(); /*P1_4 = 0;*/  break; // P1_4  is a debug added on Feb 22 2014, should be removed
   \                     ??main_loop_2:
   \   00005C                ; Setup parameters for call to function parseGWPackage
   \   00005C   12....       LCALL   parseGWPackage
   \   00005F   02....       LJMP    ??main_loop_7
    952                              case AltCheckVin:     // was 8
    953                                //if( ( ticks[SendData] > 14*TICKS_IN_MS ) || ( ticks[SendData] == 0 ) ) computeADCs( FALSE, TRUE ); //checkVin();
    954                                if( ( PKTSTATUS & 0x4 ) && ( ( MARCSTATE > 0xC ) && ( MARCSTATE < 0x10 ) ) ) flags[AltCheckVin] = TRUE; // receving a packet
   \                     ??main_loop_6:
   \   000062   90DF3C       MOV     DPTR,#-0x20c4
   \   000065   E0           MOVX    A,@DPTR
   \   000066   A2E2         MOV     C,0xE0 /* A   */.2
   \   000068   5014         JNC     ??main_loop_10
   \   00006A   90DF3B       MOV     DPTR,#-0x20c5
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   C3           CLR     C
   \   00006F   940D         SUBB    A,#0xd
   \   000071   400B         JC      ??main_loop_10
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C3           CLR     C
   \   000075   9410         SUBB    A,#0x10
   \   000077   5005         JNC     ??main_loop_10
   \                     ??main_loop_11:
   \   000079   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_39:
   \   00007C   802D         SJMP    ??main_loop_12
    955                                else if( flags[PackageReceived] || flags[DataSent] )                         flags[AltCheckVin] = TRUE; // receving a packet
   \                     ??main_loop_10:
   \   00007E   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_5:
   \   000081   70F6         JNZ     ??main_loop_11
   \   000083   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_24:
   \   000086   70F1         JNZ     ??main_loop_11
    956                                else if( ( ( ticks[SendData]      > 14*TICKS_IN_MS ) || ( ticks[SendData] == 0 ) ) &&
    957                                    ( ( ticks[DelayedPrepareData] > 14*TICKS_IN_MS ) || ( ticks[DelayedPrepareData] == 0 ) ) ) 
   \   000088   12....       LCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_70:
   \   00008B   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_51:
   \   00008E   5006         JNC     ??main_loop_13
   \   000090   E8           MOV     A,R0
   \   000091   7001         JNZ     ??main_loop_14
   \   000093   E9           MOV     A,R1
   \                     ??main_loop_14:
   \   000094   70E3         JNZ     ??main_loop_11
   \                     ??main_loop_13:
   \   000096   12....       LCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_95:
   \   000099   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_52:
   \   00009C   5006         JNC     ??main_loop_15
   \   00009E   E8           MOV     A,R0
   \   00009F   7001         JNZ     ??main_loop_16
   \   0000A1   E9           MOV     A,R1
   \                     ??main_loop_16:
   \   0000A2   70D5         JNZ     ??main_loop_11
    958                                      computeADCs( FALSE, TRUE ); //checkVin();
   \                     ??main_loop_15:
   \   0000A4                ; Setup parameters for call to function computeADCs
   \   0000A4   7A01         MOV     R2,#0x1
   \   0000A6   7900         MOV     R1,#0x0
   \   0000A8   12....       LCALL   computeADCs
    959                                else                                                       flags[AltCheckVin] = TRUE;
    960                                if( (((INT16)adcs16[ 2 ]) < page.cur_noise ) ){ T3CC1 = theOC = 0; atomicChange( OcRamp, TICKS_IN_SEC ); }
   \                     ??main_loop_12:
   \   0000AB   90....       MOV     DPTR,#(page + 232)
   \   0000AE   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_171:
   \   0000B1   7583..       MOV     DPH,#(((adcs16 + 4) >> 8) & 0xff)
   \   0000B4   7582..       MOV     DPL,#((adcs16 + 4) & 0xff)
   \   0000B7   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_355:
   \   0000BA   4003         JC      $+5
   \   0000BC   02....       LJMP    ??main_loop_7
   \   0000BF   E4           CLR     A
   \   0000C0   90....       MOV     DPTR,#theOC
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   75CF00       MOV     0xcf,#0x0
   \   0000C7   90....       MOV     DPTR,#ticks
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   2418         ADD     A,#0x18
   \   0000CD   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_102:
   \   0000D0   74D0         MOV     A,#-0x30
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   7407         MOV     A,#0x7
   \   0000D6   02....       LJMP    ??main_loop_17
    961                              break;
    962                              case Cycle:
    963                                      //if( bunchCount ) bunchCount--;
    964                                      /*
    965                                      if( enable2SendData && ( curBunch != 255 ) ){ 
    966                                          if( (curBunch == maxBunch) && zeroPackageWasNotReceived ){ 
    967                                              BYTE k;
    968                                              //computeADCs( page.is500Always, TRUE ); 
    969                                              for( k = 0; k <= maxBunch; k++ ){ ms += lastCycle; if( ms > 1000 ){ utc++; ms-= 1000; } }
    970                                              lastRssi = 0; 
    971                                              prepareData();
    972                                              curBunch = 0; 
    973                                          } else curBunch++; 
    974                                          zeroPackageWasNotReceived = TRUE;
    975                                      }
    976                                      */
    977                                      if( dec( &cycles2SoftKick )  ){ softKick();  cycles2SoftKick  = page.defCycles2SoftKick;  }//cyclesDefaults[4]; } // page.defCycles2SoftKick;  }
   \                     ??main_loop_5:
   \   0000D9                ; Setup parameters for call to function dec
   \   0000D9   7A..         MOV     R2,#(cycles2SoftKick & 0xff)
   \   0000DB   7B..         MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
   \   0000DD   12....       LCALL   `dec`
   \   0000E0   E9           MOV     A,R1
   \   0000E1   6006         JZ      ??CrossCallReturnLabel_83
   \   0000E3                ; Setup parameters for call to function softKick
   \   0000E3   12....       LCALL   softKick
   \   0000E6   12....       LCALL   ?Subroutine34
    978                                      if( cycles2HardKick < 10 ){ switchTo255(); ch255 = FALSE; }
   \                     ??CrossCallReturnLabel_83:
   \   0000E9   90....       MOV     DPTR,#cycles2HardKick
   \   0000EC   C3           CLR     C
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   940A         SUBB    A,#0xa
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   9400         SUBB    A,#0x0
   \   0000F4   5003         JNC     ??CrossCallReturnLabel_251
   \   0000F6                ; Setup parameters for call to function switchTo255
   \   0000F6   12....       LCALL   ?Subroutine82
    979                                      //if( dec( &cycles2HardKick ) /* && page.production */){
    980                                      //    reset();  // a reset
    981                                      //}
    982                                      if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
   \                     ??CrossCallReturnLabel_251:
   \   0000F9   12....       LCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_37:
   \   0000FC   4007         JC      ??main_loop_18
   \   0000FE   E4           CLR     A
   \   0000FF   90....       MOV     DPTR,#wasAHardResetOrPowerOn
   \   000102   F0           MOVX    @DPTR,A
   \   000103   8009         SJMP    ??main_loop_19
    983                                      /**/
    984                                      if( (!wasAHardResetOrPowerOn) && page.searchCommunication ){
   \                     ??main_loop_18:
   \   000105   90....       MOV     DPTR,#wasAHardResetOrPowerOn
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6003         JZ      $+5
   \   00010B   02....       LJMP    ??main_loop_7
   \                     ??main_loop_19:
   \   00010E   90....       MOV     DPTR,#(page + 194)
   \   000111   E0           MOVX    A,@DPTR
   \   000112   A2E7         MOV     C,0xE0 /* A   */.7
   \   000114   4003         JC      $+5
   \   000116   02....       LJMP    ??main_loop_7
    985                                          if( page.is500Always ){
   \   000119   A2E6         MOV     C,0xE0 /* A   */.6
   \   00011B   504F         JNC     ??main_loop_20
    986                                              if( dec( &cyclesTo10 ) ) { 
   \   00011D                ; Setup parameters for call to function dec
   \   00011D   7A..         MOV     R2,#(cyclesTo10 & 0xff)
   \   00011F   7B..         MOV     R3,#((cyclesTo10 >> 8) & 0xff)
   \   000121   12....       LCALL   `dec`
   \   000124   E9           MOV     A,R1
   \   000125   6018         JZ      ??main_loop_21
    987                                                  cyclesTo500 = page.defCyclesTo500;  cycles2Step10Channel = page.defCyclesToStep10Channel;
   \   000127   12....       LCALL   ?Subroutine8
    988                                                  //cyclesTo500 = cyclesDefaults[0];  cycles2Step10Channel = cyclesDefaults[3];
    989                                                  page.is500Always = FALSE; //cycles2Step10Channel = page.defCyclesToStep10Channel;
   \                     ??CrossCallReturnLabel_29:
   \   00012A   90....       MOV     DPTR,#(page + 194)
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   C2E6         CLR     0xE0 /* A   */.6
   \   000130   F0           MOVX    @DPTR,A
    990                                                  setupRadio( curChannel = page.channel );
   \   000131   90....       MOV     DPTR,#(page + 164)
   \   000134   E0           MOVX    A,@DPTR
   \   000135   90....       MOV     DPTR,#curChannel
   \                     ??main_loop_22:
   \   000138   F0           MOVX    @DPTR,A
   \   000139                ; Setup parameters for call to function setupRadio
   \                     ??main_loop_23:
   \   000139   F9           MOV     R1,A
   \   00013A   12....       LCALL   setupRadio
   \   00013D   8073         SJMP    ??main_loop_7
    991                                              }else if( dec( &cyclesToStep500Channel ) ) { 
   \                     ??main_loop_21:
   \   00013F                ; Setup parameters for call to function dec
   \   00013F   7A..         MOV     R2,#(cyclesToStep500Channel & 0xff)
   \   000141   7B..         MOV     R3,#((cyclesToStep500Channel >> 8) & 0xff)
   \   000143   12....       LCALL   `dec`
   \   000146   E9           MOV     A,R1
   \   000147   6069         JZ      ??main_loop_7
    992                                                  cyclesToStep500Channel = page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
   \   000149   12....       LCALL   ?Subroutine35
    993                                                  page.starting500Channel = curChannel = (curChannel + page.repStep) % 250;
   \                     ??CrossCallReturnLabel_85:
   \   00014C   90....       MOV     DPTR,#curChannel
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F8           MOV     R0,A
   \   000151   90....       MOV     DPTR,#(page + 222)
   \   000154   E0           MOVX    A,@DPTR
   \   000155   28           ADD     A,R0
   \   000156   F8           MOV     R0,A
   \   000157   E4           CLR     A
   \   000158   3400         ADDC    A,#0x0
   \   00015A   F9           MOV     R1,A
   \   00015B   7AFA         MOV     R2,#-0x6
   \   00015D   7B00         MOV     R3,#0x0
   \   00015F   12....       LCALL   ?S_DIV_MOD
   \   000162   EA           MOV     A,R2
   \   000163   90....       MOV     DPTR,#curChannel
   \   000166   F0           MOVX    @DPTR,A
   \   000167   90....       MOV     DPTR,#(page + 218)
   \   00016A   80CC         SJMP    ??main_loop_22
    994                                                  setupRadio( curChannel );
    995                                              }
    996                                          }else{
    997                                              if( dec( &cyclesTo500 ) ) { 
   \                     ??main_loop_20:
   \   00016C                ; Setup parameters for call to function dec
   \   00016C   7A..         MOV     R2,#(cyclesTo500 & 0xff)
   \   00016E   7B..         MOV     R3,#((cyclesTo500 >> 8) & 0xff)
   \   000170   12....       LCALL   `dec`
   \   000173   E9           MOV     A,R1
   \   000174   6027         JZ      ??main_loop_24
    998                                                  cyclesTo10 = page.defCyclesTo10;    cycles2Step10Channel = 0;
   \   000176   12....       LCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_87:
   \   000179   90....       MOV     DPTR,#cycles2Step10Channel
   \   00017C   E4           CLR     A
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   A3           INC     DPTR
   \   00017F   12....       LCALL   ?Subroutine77
    999                                                  //cyclesTo10 = cyclesDefaults[1];    cycles2Step10Channel = 0;
   1000                                                  page.is500Always = TRUE; cyclesToStep500Channel = page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
   \                     ??CrossCallReturnLabel_234:
   \   000182   D2E6         SETB    0xE0 /* A   */.6
   \   000184   12....       LCALL   ?Subroutine20
   1001                                                  if( page.starting500Channel == 0xFF ) page.starting500Channel = page.channel;
   \                     ??CrossCallReturnLabel_53:
   \   000187   64FF         XRL     A,#0xff
   \   000189   7008         JNZ     ??main_loop_25
   \   00018B   90....       MOV     DPTR,#(page + 164)
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   90....       MOV     DPTR,#(page + 218)
   \   000192   F0           MOVX    @DPTR,A
   1002                                                  curChannel = page.starting500Channel;
   \                     ??main_loop_25:
   \   000193   E0           MOVX    A,@DPTR
   \   000194   12....       LCALL   ?Subroutine4
   1003                                                  ticks[ Hop ] = 0;
   1004                                                  setupRadio( curChannel );
   \                     ??CrossCallReturnLabel_12:
   \   000197                ; Setup parameters for call to function setupRadio
   \   000197   90....       MOV     DPTR,#curChannel
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   809C         SJMP    ??main_loop_23
   1005                                              }else if( dec( &cycles2Step10Channel ) ){
   \                     ??main_loop_24:
   \   00019D                ; Setup parameters for call to function dec
   \   00019D   7A..         MOV     R2,#(cycles2Step10Channel & 0xff)
   \   00019F   7B..         MOV     R3,#((cycles2Step10Channel >> 8) & 0xff)
   \   0001A1   12....       LCALL   `dec`
   \   0001A4   E9           MOV     A,R1
   \   0001A5   600B         JZ      ??main_loop_7
   1006                                                  //hop(); 
   1007                                                  CHANNR = curChannel; hop(); curChannel = CHANNR; 
   \   0001A7   12....       LCALL   ?Subroutine41
   1008                                                  cycles2Step10Channel = page.defCyclesToStep10Channel;// cyclesDefaults[3];//page.defCyclesToStep10Channel;
   \                     ??CrossCallReturnLabel_97:
   \   0001AA   12....       LCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_163:
   \   0001AD   E8           MOV     A,R0
   \   0001AE   F0           MOVX    @DPTR,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E9           MOV     A,R1
   \                     ??main_loop_17:
   \   0001B1   F0           MOVX    @DPTR,A
   1009                                              }
   1010                                          }
   1011                                      }
   1012                                      /**/
   1013                              break;
   1014                          } // switch
   1015                          if( flags[ PackageReceived ] || flags[DataSent] ) break;
   \                     ??main_loop_7:
   \   0001B2   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_6:
   \   0001B5   7011         JNZ     ??main_loop_26
   \   0001B7   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_25:
   \   0001BA   700C         JNZ     ??main_loop_26
   1016                      } // if( flags )
   1017                  }// after the whole for cycle
   \                     ??main_loop_1:
   \   0001BC   05..         INC     ?V0 + 0
   \   0001BE   E5..         MOV     A,?V0 + 0
   \   0001C0   C3           CLR     C
   \   0001C1   9410         SUBB    A,#0x10
   \   0001C3   5003         JNC     $+5
   \   0001C5   02....       LJMP    ??main_loop_0
   1018              //} // while
   1019            //  *((BYTE *)0xFFFF) = 0x20;
   1020              for( idx = 0; idx < N_Of_Ticks; idx++ ){
   \                     ??main_loop_26:
   \   0001C8   75..00       MOV     ?V0 + 0,#0x0
   1021                  //INT_GLOBAL_ENABLE( INT_OFF ); 
   1022                  if( ticks[ idx ] < 0 ){
   \                     ??main_loop_27:
   \   0001CB   E5..         MOV     A,?V0 + 0
   \   0001CD   C3           CLR     C
   \   0001CE   33           RLC     A
   \   0001CF   F8           MOV     R0,A
   \   0001D0   E4           CLR     A
   \   0001D1   33           RLC     A
   \   0001D2   F9           MOV     R1,A
   \   0001D3   90....       MOV     DPTR,#ticks
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   28           ADD     A,R0
   \   0001D8   F8           MOV     R0,A
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   39           ADDC    A,R1
   \   0001DC   12....       LCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_92:
   \   0001DF   4003         JC      $+5
   \   0001E1   02....       LJMP    ??main_loop_28
   1023                      ticks[ idx ] = 0;
   \   0001E4   8882         MOV     DPL,R0
   \   0001E6   8983         MOV     DPH,R1
   \   0001E8   E4           CLR     A
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   12....       LCALL   ?Subroutine73
   1024                      //INT_GLOBAL_ENABLE( INT_ON ); 
   1025                      switch( idx ){
   \                     ??CrossCallReturnLabel_392:
   \   0001EE   241E         ADD     A,#0x1e
   \   0001F0   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_144:
   \   0001F3   90....       MOV     DPTR,#(page + 187)
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   FC           MOV     R4,A
   \   0001F8   E5..         MOV     A,?V0 + 0
   \   0001FA   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for main_loop>_1`:
   \   0001FD   02           DB        2
   \   0001FE   0D           DB        13
   \   0001FF   ....         DW        ??main_loop_28
   \   000201   ....         DW        ??main_loop_29
   \   000203   ....         DW        ??main_loop_30
   \   000205   ....         DW        ??main_loop_31
   \   000207   ....         DW        ??main_loop_32
   \   000209   ....         DW        ??main_loop_33
   \   00020B   ....         DW        ??main_loop_34
   \   00020D   ....         DW        ??main_loop_35
   \   00020F   ....         DW        ??main_loop_36
   \   000211   ....         DW        ??main_loop_37
   \   000213   ....         DW        ??main_loop_38
   \   000215   ....         DW        ??main_loop_39
   \   000217   ....         DW        ??main_loop_40
   \   000219   ....         DW        ??main_loop_28
   \   00021B   ....         DW        ??main_loop_41
   1026                          //case Reset: reset();
   1027                          case FeedTheDog:    
   1028                              WDCTL = 0xA8;  WDCTL = 0x58;  ticks[ FeedTheDog ] = _dogFeeding;          
   \                     ??main_loop_29:
   \   00021D   75C9A8       MOV     0xc9,#-0x58
   \   000220   75C958       MOV     0xc9,#0x58
   \   000223   12....       LCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_72:
   \   000226   F0           MOVX    @DPTR,A
   \   000227   A3           INC     DPTR
   \   000228   E4           CLR     A
   \   000229   02....       LJMP    ??CrossCallReturnLabel_197
   1029                          break;
   1030                          case SendData:
   1031                              if( !bunchCount ) break;
   \                     ??main_loop_30:
   \   00022C   90....       MOV     DPTR,#bunchCount
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   7003         JNZ     $+5
   \   000232   02....       LJMP    ??main_loop_28
   1032                              if( bunchCount ) bunchCount--;
   \   000235   14           DEC     A
   \   000236   F0           MOVX    @DPTR,A
   1033                              *((BYTE *)0xF538) = 0;
   \   000237   E4           CLR     A
   \   000238   90F538       MOV     DPTR,#-0xac8
   \   00023B   F0           MOVX    @DPTR,A
   1034                              was_repeater = ( ADDR == page.gwAddr );
   \   00023C   90DF05       MOV     DPTR,#-0x20fb
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   FA           MOV     R2,A
   \   000241   90....       MOV     DPTR,#(page + 191)
   \   000244   E0           MOVX    A,@DPTR
   \   000245   6A           XRL     A,R2
   \   000246   7004         JNZ     ??main_loop_42
   \   000248   7A01         MOV     R2,#0x1
   \   00024A   8002         SJMP    ??main_loop_43
   \                     ??main_loop_42:
   \   00024C   7A00         MOV     R2,#0x0
   \                     ??main_loop_43:
   \   00024E   EA           MOV     A,R2
   \   00024F   90....       MOV     DPTR,#was_repeater
   \   000252   F0           MOVX    @DPTR,A
   1035                              if( packagePrepared ){
   \   000253   90....       MOV     DPTR,#packagePrepared
   \   000256   E0           MOVX    A,@DPTR
   \   000257   7003         JNZ     $+5
   \   000259   02....       LJMP    ??main_loop_28
   1036                                  if( !was_repeater )  was_listening = (si->radioMode == RADIO_MODE_RX);
   \   00025C   90....       MOV     DPTR,#was_repeater
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   7012         JNZ     ??main_loop_44
   \   000262   12....       LCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_76:
   \   000265   6420         XRL     A,#0x20
   \   000267   7004         JNZ     ??main_loop_45
   \   000269   7A01         MOV     R2,#0x1
   \   00026B   8002         SJMP    ??main_loop_46
   \                     ??main_loop_45:
   \   00026D   7A00         MOV     R2,#0x0
   \                     ??main_loop_46:
   \   00026F   EA           MOV     A,R2
   \   000270   90....       MOV     DPTR,#was_listening
   \   000273   F0           MOVX    @DPTR,A
   1037                                  //if( reportScaling ){         reportScaling--; if( !reportScaling ) base_ptr = NULL; }
   1038                                  if( isCalibrationPackage && reportScaling ){ isCalibrationPackage--; reportScaling--; if( !reportScaling ) base_ptr = NULL; }
   \                     ??main_loop_44:
   \   000274   90....       MOV     DPTR,#isCalibrationPackage
   \   000277   E0           MOVX    A,@DPTR
   \   000278   601C         JZ      ??main_loop_47
   \   00027A   90....       MOV     DPTR,#reportScaling
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   6016         JZ      ??main_loop_47
   \   000280   90....       MOV     DPTR,#isCalibrationPackage
   \   000283   E0           MOVX    A,@DPTR
   \   000284   14           DEC     A
   \   000285   F0           MOVX    @DPTR,A
   \   000286   90....       MOV     DPTR,#reportScaling
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   14           DEC     A
   \   00028B   F0           MOVX    @DPTR,A
   \   00028C   7010         JNZ     ??main_loop_48
   \   00028E   90....       MOV     DPTR,#base_ptr
   \   000291   E4           CLR     A
   \   000292   F0           MOVX    @DPTR,A
   \   000293   A3           INC     DPTR
   \   000294   8007         SJMP    ??main_loop_49
   1039                                  else if( reportFlashCheck )  reportFlashCheck--;
   \                     ??main_loop_47:
   \   000296   90....       MOV     DPTR,#reportFlashCheck
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   6002         JZ      ??main_loop_48
   \   00029C   14           DEC     A
   \                     ??main_loop_49:
   \   00029D   F0           MOVX    @DPTR,A
   1040                                  //P1_4 = 0;
   1041                                  //P1_1 = 0;
   1042                                  sendData( radioPktBufferTx, FALSE );  //cleanTxBuffer = TRUE; 
   \                     ??main_loop_48:
   \   00029E                ; Setup parameters for call to function sendData
   \   00029E   7900         MOV     R1,#0x0
   \   0002A0   7A..         MOV     R2,#(radioPktBufferTx & 0xff)
   \   0002A2   7B..         MOV     R3,#((radioPktBufferTx >> 8) & 0xff)
   \   0002A4   12....       LCALL   sendData
   1043                                  //P1_1 = 1;
   1044                                  if( page.gbunch && ( ( page.gbunch <= 7 ) || ( page.rbunch <= 7 ) ) ){
   \   0002A7   90....       MOV     DPTR,#(page + 158)
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   FA           MOV     R2,A
   \   0002AC   7003         JNZ     $+5
   \   0002AE   02....       LJMP    ??main_loop_28
   \   0002B1   90....       MOV     DPTR,#(page + 157)
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   FB           MOV     R3,A
   \   0002B6   EA           MOV     A,R2
   \   0002B7   C3           CLR     C
   \   0002B8   9408         SUBB    A,#0x8
   \   0002BA   4009         JC      ??main_loop_50
   \   0002BC   EB           MOV     A,R3
   \   0002BD   C3           CLR     C
   \   0002BE   9408         SUBB    A,#0x8
   \   0002C0   4003         JC      $+5
   \   0002C2   02....       LJMP    ??main_loop_28
   1045                                      BYTE b; 
   1046                                      if( page.rbunch && ( page.rbunch < page.gbunch ) ) b = page.rbunch; else b = page.gbunch;
   \                     ??main_loop_50:
   \   0002C5   EB           MOV     A,R3
   \   0002C6   6008         JZ      ??main_loop_51
   \   0002C8   C3           CLR     C
   \   0002C9   9A           SUBB    A,R2
   \   0002CA   5004         JNC     ??main_loop_51
   \   0002CC   8B..         MOV     ?V0 + 2,R3
   \   0002CE   8002         SJMP    ??main_loop_52
   \                     ??main_loop_51:
   \   0002D0   8A..         MOV     ?V0 + 2,R2
   1047                                      if( page.use12kbod ){ if( b <= 18 ) atomicChange( SendData, lastCycle*b - 1 -*((BYTE *)0xF538)-xored); } // was 3
   \                     ??main_loop_52:
   \   0002D2   90....       MOV     DPTR,#ticks
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   2406         ADD     A,#0x6
   \   0002D8   12....       LCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_65:
   \   0002DB   5013         JNC     ??main_loop_53
   \   0002DD   E5..         MOV     A,?V0 + 2
   \   0002DF   C3           CLR     C
   \   0002E0   9413         SUBB    A,#0x13
   \   0002E2   502E         JNC     ??main_loop_54
   \   0002E4   12....       LCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_33:
   \   0002E7   74FF         MOV     A,#-0x1
   \   0002E9   2A           ADD     A,R2
   \   0002EA   1A           DEC     R2
   \   0002EB   74FF         MOV     A,#-0x1
   \   0002ED   3B           ADDC    A,R3
   \   0002EE   8011         SJMP    ??main_loop_55
   1048                                      else{                 if( b == 1 )  atomicChange( SendData, lastCycle   - 1 -*((BYTE *)0xF538)-xored); } // was 3
   \                     ??main_loop_53:
   \   0002F0   7401         MOV     A,#0x1
   \   0002F2   65..         XRL     A,?V0 + 2
   \   0002F4   701C         JNZ     ??main_loop_54
   \   0002F6   90....       MOV     DPTR,#lastCycle
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   24FF         ADD     A,#-0x1
   \   0002FC   FA           MOV     R2,A
   \   0002FD   A3           INC     DPTR
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   34FF         ADDC    A,#-0x1
   \                     ??main_loop_55:
   \   000301   FB           MOV     R3,A
   \   000302   90F538       MOV     DPTR,#-0xac8
   \   000305   E0           MOVX    A,@DPTR
   \   000306   FE           MOV     R6,A
   \   000307   EA           MOV     A,R2
   \   000308   C3           CLR     C
   \   000309   9E           SUBB    A,R6
   \   00030A   FA           MOV     R2,A
   \   00030B   EB           MOV     A,R3
   \   00030C   9400         SUBB    A,#0x0
   \   00030E   12....       LCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_196:
   \   000311   F0           MOVX    @DPTR,A
   1049                                      xored ^= 1;
   \                     ??main_loop_54:
   \   000312   90....       MOV     DPTR,#??xored
   \   000315   E0           MOVX    A,@DPTR
   \   000316   6401         XRL     A,#0x1
   \   000318   02....       LJMP    ??CrossCallReturnLabel_197
   1050                                  }
   1051                              }//else flags[ DataSent ] = 1;
   1052                          break;
   1053                          case BypassMode:        P1_3 = 0;                                                   break;
   \                     ??main_loop_32:
   \   00031B   C293         CLR     0x90.3
   \   00031D   02....       LJMP    ??main_loop_28
   1054                          case TurnOn:            
   1055          #ifdef MIDSTRING 
   1056          		  if (fetFailure == FALSE)
   \                     ??main_loop_37:
   \   000320   90....       MOV     DPTR,#fetFailure
   \   000323   E0           MOVX    A,@DPTR
   \   000324   6003         JZ      $+5
   \   000326   02....       LJMP    ??main_loop_28
   1057          		    {
   1058          		      turnOnFlag = TRUE;
   \   000329   7401         MOV     A,#0x1
   \   00032B   90....       MOV     DPTR,#turnOnFlag
   \   00032E   02....       LJMP    ??CrossCallReturnLabel_197
   1059          		    }
   1060          #else
   1061                              if( page.ov == T3CC0 ) P1_4 = 1; else turnOnFlag = TRUE;                                          
   1062          #endif
   1063                          break;                
   1064                          case Init:              //init_board();                                               
   1065                              if( (!page.mpp) && page.module ){
   \                     ??main_loop_33:
   \   000331   90....       MOV     DPTR,#(page + 185)
   \   000334   E0           MOVX    A,@DPTR
   \   000335   700E         JNZ     ??main_loop_56
   \   000337   90....       MOV     DPTR,#(page + 186)
   \   00033A   E0           MOVX    A,@DPTR
   \   00033B   6008         JZ      ??main_loop_56
   1066                                  P1_3 = 1;  /*P1 |= 0x18;*/ atomicChange( BypassMode, TICKS_IN_SEC ); // switching mpp on and switching it off (bypass mode) only after delay
   \   00033D   D293         SETB    0x90.3
   \   00033F   12....       LCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_31:
   \   000342   F0           MOVX    @DPTR,A
   \   000343   8008         SJMP    ??main_loop_57
   1067                              }else P1_3 = page.mpp;
   \                     ??main_loop_56:
   \   000345   90....       MOV     DPTR,#(page + 185)
   \   000348   E0           MOVX    A,@DPTR
   \   000349   A2E0         MOV     C,0xE0 /* A   */.0
   \   00034B   9293         MOV     0x90.3,C
   1068                              if( page.module ) ov_startup();
   \                     ??main_loop_57:
   \   00034D   90....       MOV     DPTR,#(page + 186)
   \   000350   E0           MOVX    A,@DPTR
   \   000351   7003         JNZ     $+5
   \   000353   02....       LJMP    ??main_loop_28
   \   000356                ; Setup parameters for call to function ov_startup
   \   000356   12....       LCALL   ov_startup
   \   000359   02....       LJMP    ??main_loop_28
   1069                          break;
   1070                          /*
   1071                          case CheckFlag:         if( si->radioMode == RADIO_MODE_TX ){
   1072                              INT_GLOBAL_ENABLE( INT_OFF ); 
   1073                                  si->radioMode = RADIO_MODE_UNDEF; 
   1074                                  RFIF &= ~IRQ_DONE; S1CON &= ~0x03;  RFIM = IRQ_DONE; 
   1075                                  RFST = STROBE_IDLE;
   1076                                  DMAARM = 0x80 | DMAARM_CHANNEL1;
   1077                                  flags[ DataSent ] = TRUE;
   1078                              INT_GLOBAL_ENABLE( INT_ON ); 
   1079                          } break;
   1080                          */
   1081          	    case OscEvent:
   1082          	      if( ( ticks[ OvStartup ] == 0 )
   1083          		  && ( page.oscLowCurrentLimitInmA != 0 )
   1084          		  && ( page.oscLowCurrentLimitInmA != 0xFFFF ) )
   \                     ??main_loop_34:
   \   00035C   90....       MOV     DPTR,#ticks
   \   00035F   E0           MOVX    A,@DPTR
   \   000360   240E         ADD     A,#0xe
   \   000362   FA           MOV     R2,A
   \   000363   A3           INC     DPTR
   \   000364   E0           MOVX    A,@DPTR
   \   000365   3400         ADDC    A,#0x0
   \   000367   FB           MOV     R3,A
   \   000368   8882         MOV     DPL,R0
   \   00036A   8983         MOV     DPH,R1
   \   00036C   E0           MOVX    A,@DPTR
   \   00036D   7002         JNZ     ??main_loop_58
   \   00036F   A3           INC     DPTR
   \   000370   E0           MOVX    A,@DPTR
   \                     ??main_loop_58:
   \   000371   7066         JNZ     ??main_loop_59
   \   000373   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_157:
   \   000376   7001         JNZ     ??main_loop_60
   \   000378   E9           MOV     A,R1
   \                     ??main_loop_60:
   \   000379   605E         JZ      ??main_loop_59
   \   00037B   74FF         MOV     A,#-0x1
   \   00037D   68           XRL     A,R0
   \   00037E   7003         JNZ     ??main_loop_61
   \   000380   74FF         MOV     A,#-0x1
   \   000382   69           XRL     A,R1
   \                     ??main_loop_61:
   \   000383   6054         JZ      ??main_loop_59
   1085          		switch( oscWhatToWaitFor )
   \   000385   90....       MOV     DPTR,#oscWhatToWaitFor
   \   000388   E0           MOVX    A,@DPTR
   \   000389   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for main_loop>_2`:
   \   00038C   15           DB        21
   \   00038D   02           DB        2
   \   00038E   ....         DW        ??main_loop_59
   \   000390   ....         DW        ??main_loop_62
   \   000392   ....         DW        ??main_loop_63
   \   000394   ....         DW        ??main_loop_64
   1086          		  {
   1087          		  case SetOscLowCurrentOnlyDelay:
   1088          		    kickOsc();
   \                     ??main_loop_64:
   \   000396                ; Setup parameters for call to function kickOsc
   \   000396   12....       LCALL   kickOsc
   \   000399   02....       LJMP    ??main_loop_28
   1089          		    break;
   1090          		  case SetOscAfterStartupDelay:
   1091          		    oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
   \                     ??main_loop_63:
   \   00039C   7417         MOV     A,#0x17
   \   00039E   90....       MOV     DPTR,#oscWhatToWaitFor
   \   0003A1   F0           MOVX    @DPTR,A
   1092          		    ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
   \   0003A2   90....       MOV     DPTR,#(page + 142)
   \   0003A5   12....       LCALL   ?Subroutine30
   1093          		    P1_3 = page.mpp;
   \                     ??CrossCallReturnLabel_74:
   \   0003A8   90....       MOV     DPTR,#(page + 185)
   \   0003AB   E0           MOVX    A,@DPTR
   \   0003AC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003AE   9293         MOV     0x90.3,C
   \   0003B0   02....       LJMP    ??main_loop_28
   1094          		    break;
   1095          		  case SetOscOVStartupDelay:
   1096          		    if( T3CC0 < page.ov )
   \                     ??main_loop_62:
   \   0003B3   E5CD         MOV     A,0xcd
   \   0003B5   C3           CLR     C
   \   0003B6   9C           SUBB    A,R4
   \   0003B7   5015         JNC     ??main_loop_65
   1097          		      {
   1098          			T3CC0 = T3CC0+1;
   \   0003B9   05CD         INC     0xcd
   \   0003BB   E5CD         MOV     A,0xcd
   1099          			ticks[OscEvent] = page.oscOVStartupDelay;
   \   0003BD   90....       MOV     DPTR,#(page + 138)
   \                     ??main_loop_66:
   \   0003C0   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_172:
   \   0003C3   8A82         MOV     DPL,R2
   \   0003C5   8B83         MOV     DPH,R3
   \   0003C7   E8           MOV     A,R0
   \   0003C8   F0           MOVX    @DPTR,A
   \   0003C9   A3           INC     DPTR
   \   0003CA   E9           MOV     A,R1
   \   0003CB   02....       LJMP    ??CrossCallReturnLabel_197
   1100          		      }
   1101          		    else
   1102          		      {
   1103          			oscWhatToWaitFor = SetOscAfterStartupDelay;
   \                     ??main_loop_65:
   \   0003CE   7416         MOV     A,#0x16
   \   0003D0   90....       MOV     DPTR,#oscWhatToWaitFor
   \   0003D3   F0           MOVX    @DPTR,A
   1104          			ticks[OscEvent]= page.oscAfterStartupDelay;
   \   0003D4   90....       MOV     DPTR,#(page + 140)
   \   0003D7   80E7         SJMP    ??main_loop_66
   1105          		      }
   1106          		    break;
   1107          		  default:
   1108          		    oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
   \                     ??main_loop_59:
   \   0003D9   7417         MOV     A,#0x17
   \   0003DB   90....       MOV     DPTR,#oscWhatToWaitFor
   \   0003DE   F0           MOVX    @DPTR,A
   1109          		    ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
   \   0003DF   90....       MOV     DPTR,#(page + 142)
   \   0003E2   80DC         SJMP    ??main_loop_66
   1110          		    break;
   1111          		  }
   1112          	      else
   1113          		{
   1114          		  oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
   1115          		  ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
   1116          		}
   1117          	      break;
   1118          
   1119                          case Hop: if( page.hoppingAllowed && !page.is500Always ){
   \                     ??main_loop_35:
   \   0003E4   90....       MOV     DPTR,#(page + 194)
   \   0003E7   E0           MOVX    A,@DPTR
   \   0003E8   5450         ANL     A,#0x50
   \   0003EA   6410         XRL     A,#0x10
   \   0003EC   703E         JNZ     ??main_loop_31
   1120                              if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( Hop, 1 ); break; }
   \   0003EE   12....       LCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_59:
   \   0003F1   7008         JNZ     ??main_loop_67
   \   0003F3   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_99:
   \   0003F6   7401         MOV     A,#0x1
   \   0003F8   02....       LJMP    ??CrossCallReturnLabel_72
   1121                              if( cyclesToHop-- ){ 
   \                     ??main_loop_67:
   \   0003FB   90....       MOV     DPTR,#cyclesToHop
   \   0003FE   E0           MOVX    A,@DPTR
   \   0003FF   FA           MOV     R2,A
   \   000400   74FF         MOV     A,#-0x1
   \   000402   2A           ADD     A,R2
   \   000403   F0           MOVX    @DPTR,A
   \   000404   EA           MOV     A,R2
   \   000405   6012         JZ      ??main_loop_68
   1122                                  CHANNR = curChannel; hop(); curChannel = CHANNR; 
   \   000407   12....       LCALL   ?Subroutine41
   1123                                  atomicChange( Hop, lastCycle /*- 4*TICKS_IN_MS */); //- _slot );  
   \                     ??CrossCallReturnLabel_98:
   \   00040A   90....       MOV     DPTR,#lastCycle
   \   00040D   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_131:
   \   000410   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_100:
   \   000413   EA           MOV     A,R2
   \   000414   F0           MOVX    @DPTR,A
   \   000415   A3           INC     DPTR
   \   000416   EB           MOV     A,R3
   \   000417   800B         SJMP    ??main_loop_69
   1124                                  //setupRepeater( FALSE );     receive();
   1125                              } else   { curChannel = page.channel; CHANNR = curChannel; }
   \                     ??main_loop_68:
   \   000419   90....       MOV     DPTR,#(page + 164)
   \   00041C   E0           MOVX    A,@DPTR
   \   00041D   90....       MOV     DPTR,#curChannel
   \   000420   F0           MOVX    @DPTR,A
   \   000421   90DF06       MOV     DPTR,#-0x20fa
   \                     ??main_loop_69:
   \   000424   F0           MOVX    @DPTR,A
   1126                              ticks[ ReceiveData ] = 0;
   \   000425   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_44:
   \   000428   E4           CLR     A
   \   000429   F0           MOVX    @DPTR,A
   \   00042A   A3           INC     DPTR
   \   00042B   F0           MOVX    @DPTR,A
   1127                          } // go through
   1128                          case ReceiveData:  setupRepeater( FALSE );  was_listening=TRUE;   receive();   break;
   \                     ??main_loop_31:
   \   00042C                ; Setup parameters for call to function setupRepeater
   \   00042C   7900         MOV     R1,#0x0
   \   00042E   12....       LCALL   setupRepeater
   \   000431   7401         MOV     A,#0x1
   \   000433   90....       MOV     DPTR,#was_listening
   \   000436   F0           MOVX    @DPTR,A
   \   000437                ; Setup parameters for call to function receive
   \   000437   12....       LCALL   receive
   \   00043A   02....       LJMP    ??main_loop_28
   1129          //                case Ms:   atomicChange( Ms, TICKS_IN_MS );  
   1130          //                   milliSeconds++; 
   1131          //                   if( milliSeconds >= 1000 ){
   1132                          case Ms:   atomicChange( Ms, TICKS_IN_SEC );  
   \                     ??main_loop_38:
   \   00043D   12....       LCALL   ?Subroutine5
   1133                                  cycles2HardKick--;
   \                     ??CrossCallReturnLabel_18:
   \   000440   90....       MOV     DPTR,#cycles2HardKick
   \   000443   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_128:
   \   000446   02....       LJMP    ??CrossCallReturnLabel_197
   1134          //                        milliSeconds = 0; seconds++;
   1135          //                        if( seconds >= 60 ){
   1136          //                            seconds = 0;  minutes++;
   1137          //                            if( ( minutes > 0 ) && ( 0 == (minutes % 15 ) ) ) alignMPP = TRUE;
   1138          //                            if( minutes >= 60 ) minutes = 0;
   1139          //                        }
   1140          //                   }
   1141                          break;
   1142                          case Cycle: // kicking and search logic
   1143                              atomicChange( Cycle, lastCycle );
   \                     ??main_loop_36:
   \   000449   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_129:
   \   00044C   12....       LCALL   ??Subroutine1_1
   1144                              atomicChange( ReceiveData, lastCycle - _slot - 5*TICKS_IN_MS );    // was 25
   \                     ??CrossCallReturnLabel_330:
   \   00044F   90....       MOV     DPTR,#_slot
   \   000452   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_173:
   \   000455   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   000458   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   00045B   E0           MOVX    A,@DPTR
   \   00045C   C3           CLR     C
   \   00045D   98           SUBB    A,R0
   \   00045E   F8           MOV     R0,A
   \   00045F   A3           INC     DPTR
   \   000460   E0           MOVX    A,@DPTR
   \   000461   99           SUBB    A,R1
   \   000462   F9           MOV     R1,A
   \   000463   74F6         MOV     A,#-0xa
   \   000465   28           ADD     A,R0
   \   000466   F8           MOV     R0,A
   \   000467   74FF         MOV     A,#-0x1
   \   000469   39           ADDC    A,R1
   \   00046A   F9           MOV     R1,A
   \   00046B   90....       MOV     DPTR,#ticks
   \   00046E   12....       LCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_138:
   \   000471   A3           INC     DPTR
   \   000472   A3           INC     DPTR
   \   000473   A3           INC     DPTR
   \   000474   A3           INC     DPTR
   \   000475   A3           INC     DPTR
   \   000476   12....       LCALL   ??Subroutine67_0
   1145                              flags[ Cycle ] = TRUE;
   \                     ??CrossCallReturnLabel_199:
   \   000479   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_42:
   \   00047C   F0           MOVX    @DPTR,A
   1146                              if(got_gw) got_gw--;
   \   00047D   90....       MOV     DPTR,#got_gw
   \   000480   E0           MOVX    A,@DPTR
   \   000481   6002         JZ      ??main_loop_70
   \   000483   14           DEC     A
   \   000484   F0           MOVX    @DPTR,A
   1147                              if( isOnTestStand ) isOnTestStand--;
   \                     ??main_loop_70:
   \   000485   90....       MOV     DPTR,#isOnTestStand
   \   000488   E0           MOVX    A,@DPTR
   \   000489   7003         JNZ     $+5
   \   00048B   02....       LJMP    ??main_loop_28
   \   00048E   14           DEC     A
   \   00048F   02....       LJMP    ??CrossCallReturnLabel_197
   1148                          break;
   1149                          case OvStartup:
   1150                                if( T3CC0 < page.ov ){ 
   \                     ??main_loop_41:
   \   000492   E5CD         MOV     A,0xcd
   \   000494   C3           CLR     C
   \   000495   9C           SUBB    A,R4
   \   000496   4003         JC      $+5
   \   000498   02....       LJMP    ??main_loop_28
   1151                                    BYTE cnt = page.ov_step, a = T3CC0;
   \   00049B   90....       MOV     DPTR,#(page + 234)
   \   00049E   E0           MOVX    A,@DPTR
   \   00049F   FB           MOV     R3,A
   \   0004A0   E5CD         MOV     A,0xcd
   \   0004A2   FA           MOV     R2,A
   1152                                    if( cnt == 0 ) cnt = 1;
   \   0004A3   EB           MOV     A,R3
   \   0004A4   7005         JNZ     ??main_loop_71
   \   0004A6   7B01         MOV     R3,#0x1
   \   0004A8   8001         SJMP    ??main_loop_71
   1153                                    while( cnt-- && (a < page.ov) ) a++;
   \                     ??main_loop_72:
   \   0004AA   0A           INC     R2
   \                     ??main_loop_71:
   \   0004AB   EB           MOV     A,R3
   \   0004AC   1B           DEC     R3
   \   0004AD   6005         JZ      ??main_loop_73
   \   0004AF   EA           MOV     A,R2
   \   0004B0   C3           CLR     C
   \   0004B1   9C           SUBB    A,R4
   \   0004B2   40F6         JC      ??main_loop_72
   1154                                    T3CC0 = a;
   \                     ??main_loop_73:
   \   0004B4   8ACD         MOV     0xcd,R2
   1155                                    atomicChange( OvStartup, TICKS_IN_SEC ); 
   \   0004B6   8882         MOV     DPL,R0
   \   0004B8   8983         MOV     DPH,R1
   \                     ??main_loop_74:
   \   0004BA   74D0         MOV     A,#-0x30
   \   0004BC   F0           MOVX    @DPTR,A
   \   0004BD   A3           INC     DPTR
   \   0004BE   7407         MOV     A,#0x7
   \   0004C0   02....       LJMP    ??CrossCallReturnLabel_197
   1156                                } 
   1157          //                      #ifdef MidString
   1158          //                      compute98();
   1159          //                      #endif
   1160                          break;
   1161                          case OcRamp:
   1162                                #ifdef MidString
   1163                                if( (((INT16)adcs16[ 2 ]) > page.cur_noise ) ){
   \                     ??main_loop_39:
   \   0004C3   90....       MOV     DPTR,#ticks
   \   0004C6   E0           MOVX    A,@DPTR
   \   0004C7   2418         ADD     A,#0x18
   \   0004C9   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_145:
   \   0004CC   E8           MOV     A,R0
   \   0004CD   FE           MOV     R6,A
   \   0004CE   E9           MOV     A,R1
   \   0004CF   FF           MOV     R7,A
   \   0004D0   12....       LCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_174:
   \   0004D3   7583..       MOV     DPH,#(((page + 232) >> 8) & 0xff)
   \   0004D6   7582..       MOV     DPL,#((page + 232) & 0xff)
   \   0004D9   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_356:
   \   0004DC   5039         JNC     ??main_loop_75
   1164                                      if( theOC < setOC ){ 
   \   0004DE   90....       MOV     DPTR,#theOC
   \   0004E1   E0           MOVX    A,@DPTR
   \   0004E2   C0E0         PUSH    A
   \   0004E4   90....       MOV     DPTR,#setOC
   \   0004E7   E0           MOVX    A,@DPTR
   \   0004E8   FA           MOV     R2,A
   \   0004E9   D0E0         POP     A
   \   0004EB   C3           CLR     C
   \   0004EC   9A           SUBB    A,R2
   \   0004ED   4003         JC      $+5
   \   0004EF   02....       LJMP    ??main_loop_28
   1165                                          BYTE cnt = page.oc_step, a = theOC;
   \   0004F2   90....       MOV     DPTR,#(page + 231)
   \   0004F5   E0           MOVX    A,@DPTR
   \   0004F6   FC           MOV     R4,A
   \   0004F7   90....       MOV     DPTR,#theOC
   \   0004FA   E0           MOVX    A,@DPTR
   \   0004FB   FB           MOV     R3,A
   1166                                          if( cnt == 0 ) cnt = 10;
   \   0004FC   EC           MOV     A,R4
   \   0004FD   7005         JNZ     ??main_loop_76
   \   0004FF   7C0A         MOV     R4,#0xa
   \   000501   8001         SJMP    ??main_loop_76
   1167                                          while( cnt-- && ( a < setOC ) ) a++;  
   \                     ??main_loop_77:
   \   000503   0B           INC     R3
   \                     ??main_loop_76:
   \   000504   EC           MOV     A,R4
   \   000505   1C           DEC     R4
   \   000506   6005         JZ      ??main_loop_78
   \   000508   EB           MOV     A,R3
   \   000509   C3           CLR     C
   \   00050A   9A           SUBB    A,R2
   \   00050B   40F6         JC      ??main_loop_77
   1168                                          T3CC1 = oc2timer( theOC = a );
   \                     ??main_loop_78:
   \   00050D   EB           MOV     A,R3
   \   00050E   12....       LCALL   ??Subroutine72_0
   1169                                          atomicChange( OcRamp, TICKS_IN_SEC ); 
   \                     ??CrossCallReturnLabel_227:
   \   000511   8E82         MOV     DPL,R6
   \   000513   8F83         MOV     DPH,R7
   \   000515   80A3         SJMP    ??main_loop_74
   1170                                      }
   1171                                }else{ T3CC1 = theOC = 0; atomicChange( OcRamp, TICKS_IN_SEC ); }
   \                     ??main_loop_75:
   \   000517   E4           CLR     A
   \   000518   90....       MOV     DPTR,#theOC
   \   00051B   F0           MOVX    @DPTR,A
   \   00051C   75CF00       MOV     0xcf,#0x0
   \   00051F   80F0         SJMP    ??CrossCallReturnLabel_227
   1172          //                      compute98();
   1173                                #endif
   1174                          break;
   1175                          case DelayedPrepareData: { // here most of the time is spent
   1176                              *((BYTE *)0xF538) = 0; 
   \                     ??main_loop_40:
   \   000521   E4           CLR     A
   \   000522   90F538       MOV     DPTR,#-0xac8
   \   000525   F0           MOVX    @DPTR,A
   1177                              //ticks2Prepare = (*ptr2RunningTick)&0xFF; 
   1178                              prepareData(); 
   \   000526                ; Setup parameters for call to function prepareData
   \   000526   12....       LCALL   prepareData
   1179                              //ticks2Prepare = computeTI(ticks2Prepare); 
   1180                              if( page.gbunch ){
   \   000529   90....       MOV     DPTR,#(page + 158)
   \   00052C   E0           MOVX    A,@DPTR
   \   00052D   F5..         MOV     ?V0 + 2,A
   \   00052F   6046         JZ      ??main_loop_28
   1181                                if(page.use12kbod && ( page.gbunch <= 18 ) )
   \   000531   90....       MOV     DPTR,#ticks
   \   000534   E0           MOVX    A,@DPTR
   \   000535   241A         ADD     A,#0x1a
   \   000537   12....       LCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_66:
   \   00053A   5016         JNC     ??main_loop_79
   \   00053C   E5..         MOV     A,?V0 + 2
   \   00053E   C3           CLR     C
   \   00053F   9413         SUBB    A,#0x13
   \   000541   5034         JNC     ??main_loop_28
   1182                                //  { atomicChange( DelayedPrepareData, page.gbunch * lastCycle - ticks2Prepare - 1 ); } // was 3
   1183                                    { atomicChange( DelayedPrepareData, page.gbunch * lastCycle - *((BYTE *)0xF538) - 1 -xored); } // was 3
   \   000543   12....       LCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_34:
   \   000546   90F538       MOV     DPTR,#-0xac8
   \   000549   E0           MOVX    A,@DPTR
   \   00054A   FE           MOV     R6,A
   \   00054B   EA           MOV     A,R2
   \   00054C   C3           CLR     C
   \   00054D   9E           SUBB    A,R6
   \   00054E   FA           MOV     R2,A
   \   00054F   EB           MOV     A,R3
   \   000550   8017         SJMP    ??main_loop_80
   1184                                else if( !page.use12kbod && ( page.gbunch == 1 ) )
   \                     ??main_loop_79:
   \   000552   7401         MOV     A,#0x1
   \   000554   65..         XRL     A,?V0 + 2
   \   000556   701F         JNZ     ??main_loop_28
   1185                                //  { atomicChange( DelayedPrepareData, lastCycle - ticks2Prepare - 1 ); } // was 3
   1186                                    { atomicChange( DelayedPrepareData, lastCycle - *((BYTE *)0xF538) - 1 -xored); } // was 3                        
   \   000558   90F538       MOV     DPTR,#-0xac8
   \   00055B   E0           MOVX    A,@DPTR
   \   00055C   FA           MOV     R2,A
   \   00055D   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   000560   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   000563   E0           MOVX    A,@DPTR
   \   000564   C3           CLR     C
   \   000565   9A           SUBB    A,R2
   \   000566   FA           MOV     R2,A
   \   000567   A3           INC     DPTR
   \   000568   E0           MOVX    A,@DPTR
   \                     ??main_loop_80:
   \   000569   9400         SUBB    A,#0x0
   \   00056B   FB           MOV     R3,A
   \   00056C   74FF         MOV     A,#-0x1
   \   00056E   2A           ADD     A,R2
   \   00056F   1A           DEC     R2
   \   000570   74FF         MOV     A,#-0x1
   \   000572   3B           ADDC    A,R3
   \   000573   12....       LCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_197:
   \   000576   F0           MOVX    @DPTR,A
   1187                              }
   1188                          }break;  
   1189                          //case StartOtherImage:   bootOtherImage();
   1190                      } // switch
   1191                  } //else { INT_GLOBAL_ENABLE( INT_ON ); }
   1192              }// for idx
   \                     ??main_loop_28:
   \   000577   05..         INC     ?V0 + 0
   \   000579   E5..         MOV     A,?V0 + 0
   \   00057B   C3           CLR     C
   \   00057C   9410         SUBB    A,#0x10
   \   00057E   5003         JNC     $+5
   \   000580   02....       LJMP    ??main_loop_27
   1193          }
   \   000583                REQUIRE ?Subroutine122
   \   000583                REQUIRE _A_P1
   \   000583                REQUIRE WDCTL
   \   000583                REQUIRE T3CC0
   \   000583                REQUIRE T3CC1
   \   000583                ; // Fall through to label ?Subroutine122

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   FB           MOV     R3,A
   \   000001   EA           MOV     A,R2
   \   000002   C3           CLR     C
   \   000003   9C           SUBB    A,R4
   \   000004   FA           MOV     R2,A
   \   000005   EB           MOV     A,R3
   \   000006   9400         SUBB    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2410         ADD     A,#0x10
   \   000006   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_270:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   90....       MOV     DPTR,#curChannel
   \   000003   E0           MOVX    A,@DPTR
   \   000004   90DF06       MOV     DPTR,#-0x20fa
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function hop
   \   000008                ; Setup parameters for call to function hop
   \   000008   12....       LCALL   hop
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   90....       MOV     DPTR,#curChannel
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   C3           CLR     C
   \                     ??Subroutine39_0:
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   12....       LCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_362:
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#??xored
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FC           MOV     R4,A
   \   00000B   90....       MOV     DPTR,#(page + 194)
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   A2E2         MOV     C,0xE0 /* A   */.2
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_286:
   \   000003   C3           CLR     C
   \   000004   E8           MOV     A,R0
   \   000005   941D         SUBB    A,#0x1d
   \   000007   E9           MOV     A,R1
   \   000008   12....       LCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_361:
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   E0           MOVX    A,@DPTR
   \   000004   240B         ADD     A,#0xb
   \                     ??Subroutine14_0:
   \   000006   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_267:
   \   000009   7401         MOV     A,#0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_367:
   \   000003   EA           MOV     A,R2
   \   000004   85..F0       MOV     B,?V0 + 2
   \   000007   A4           MUL     AB
   \   000008   FA           MOV     R2,A
   \   000009   AEF0         MOV     R6,B
   \   00000B   85..F0       MOV     B,?V0 + 2
   \   00000E   EB           MOV     A,R3
   \   00000F   A4           MUL     AB
   \   000010   2E           ADD     A,R6
   \   000011   FB           MOV     R3,A
   \   000012   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   90....       MOV     DPTR,#lastCycle
   \   000003   12....       LCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_399:
   \   000006   2412         ADD     A,#0x12
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV     DPTR,#(page + 208)
   \   000003   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_289:
   \   000006   90....       MOV     DPTR,#cycles2SoftKick
   \   000009   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_346:
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_372:
   \   000003   747D         MOV     A,#0x7d
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_275:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ?Subroutine118
   \   000001                ; // Fall through to label ?Subroutine118

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   90....       MOV     DPTR,#(page + 206)
   \   000003   12....       LCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_307:
   \   000006   90....       MOV     DPTR,#cycles2Step10Channel
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \                     ??Subroutine50_0:
   \   000004   12....       LCALL   ??Subroutine94_0
   \                     ??CrossCallReturnLabel_370:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   241A         ADD     A,#0x1a
   \   000006   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_269:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_350:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   90....       MOV     DPTR,#(page + 204)
   \   000003   12....       LCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_305:
   \   000006   90....       MOV     DPTR,#cyclesToStep500Channel
   \   000009                REQUIRE ?Subroutine112
   \   000009                ; // Fall through to label ?Subroutine112

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_288:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_345:
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   12....       LCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_273:
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#cyclesFromStart
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2401         ADD     A,#0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   90....       MOV     DPTR,#cyclesFromStart
   \   00000F   C3           CLR     C
   \   000010   E0           MOVX    A,@DPTR
   \   000011   9433         SUBB    A,#0x33
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   9400         SUBB    A,#0x0
   \   000017   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_259:
   \   000003   6410         XRL     A,#0x10
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_260:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   90....       MOV     DPTR,#(page + 202)
   \   000003   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_290:
   \   000006   90....       MOV     DPTR,#cyclesTo10
   \   000009   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_347:
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_371:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_349:
   \   000004   90....       MOV     DPTR,#(page + 218)
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   12....       LCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_272:
   \   000006   A3           INC     DPTR
   \   000007   74D0         MOV     A,#-0x30
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7407         MOV     A,#0x7
   \   00000D   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_374:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#(page + 200)
   \   000003   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_285:
   \   000006   90....       MOV     DPTR,#cyclesTo500
   \   000009   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_343:
   \   00000C   12....       LCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_283:
   \   00000F   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_344:
   \   000012   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??xored:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for xored>`
   \   000001                REQUIRE __INIT_XDATA_I
   1194          #define BARRIER  0xAA
   1195          void quartz();

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1196          void longTickWait( BYTE q ){ while( q-- ) tickWait( 50*TICKS_IN_MS ); }
   \                     longTickWait:
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV     A,R1
   \   000004   FE           MOV     R6,A
   \   000005   8005         SJMP    ??longTickWait_0
   \                     ??longTickWait_1:
   \   000007                ; Setup parameters for call to function tickWait
   \   000007   7964         MOV     R1,#0x64
   \   000009   12....       LCALL   tickWait
   \                     ??longTickWait_0:
   \   00000C   EE           MOV     A,R6
   \   00000D   1E           DEC     R6
   \   00000E   70F7         JNZ     ??longTickWait_1
   \   000010   D0E0         POP     A
   \   000012   FE           MOV     R6,A
   \   000013   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1197          void main(void){
   \                     main:
   \   000000                ; Auto size: 0
   1198          UINT16 i, j;
   1199              *((BYTE *)0xF53B) = 0xAA;
   \   000000   74AA         MOV     A,#-0x56
   \   000002   90F53B       MOV     DPTR,#-0xac5
   \   000005   F0           MOVX    @DPTR,A
   1200              *((BYTE *)0xFFFF) = 0x10; // was 0x80 on Dec 19th
   \   000006   7410         MOV     A,#0x10
   \   000008   90FFFF       MOV     DPTR,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   1201              if( PARTNUM != 0x81 ) reset(); //{ WDCTL = 0x8 | 0x3; while( TRUE ) halWait( 10 ); } //a reset  
   \   00000C   90DF36       MOV     DPTR,#-0x20ca
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6481         XRL     A,#0x81
   \   000012   6003         JZ      ??main_0
   \   000014                ; Setup parameters for call to function reset
   \   000014   12....       LCALL   reset
   1202              if( *((BYTE *)0xFFFE) == 0x5A ) goto MainLoopLabel;
   \                     ??main_0:
   \   000017   90FFFE       MOV     DPTR,#-0x2
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   645A         XRL     A,#0x5a
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??main_1
   1203              *((BYTE *)0xFFFE) = 0x5A; 
   \   000022   745A         MOV     A,#0x5a
   \   000024   F0           MOVX    @DPTR,A
   1204          //    WDCTL = 0xA8; WDCTL = 0x58;
   1205          /*    T1CTL &= 0xFC;
   1206              SET_WORD(T1CNTH, T1CNTL, 0);
   1207              SET_WORD(T1CC0H, T1CC0L, 600 - 1);
   1208              T1CTL |= 0x04  | 0x02;
   1209              T1CCTL0 = 0x44;
   1210          */    
   1211              HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
   \   000025   D2B9         SETB    0xb8.1
   1212          
   1213              //            15
   1214              for( i = 0; i<15; i++ ){ // was 15 the self check !!!! check line 663 if loop limit changed !!!
   \   000027   7E00         MOV     R6,#0x0
   \   000029   7F00         MOV     R7,#0x0
   1215                  BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
   \                     ??main_2:
   \   00002B   8E..         MOV     ?V0 + 0,R6
   \   00002D   8F..         MOV     ?V0 + 1,R7
   \   00002F   740A         MOV     A,#0xa
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?S_SHL
   \   000036   12....       LCALL   ?Subroutine83
   1216                  BOOL flag = TRUE; 
   1217                  *((BYTE *)0xFFFF) = 0x10;
   1218                  for( j = 0; flag && (j < 0x400); j++ )
   1219                     flag = ( (*ptr++)==0xFF );
   \                     ??CrossCallReturnLabel_253:
   \   000039   E8           MOV     A,R0
   \   00003A   FA           MOV     R2,A
   \   00003B   E9           MOV     A,R1
   \   00003C   FB           MOV     R3,A
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   A3           INC     DPTR
   \   000042   A882         MOV     R0,DPL
   \   000044   A983         MOV     R1,DPH
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   64FF         XRL     A,#0xff
   \   00004D   7004         JNZ     ??main_3
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   8002         SJMP    ??main_4
   \                     ??main_3:
   \   000053   7A00         MOV     R2,#0x0
   \                     ??main_4:
   \   000055   12....       LCALL   ?Subroutine84
   \                     ??CrossCallReturnLabel_255:
   \   000058   6009         JZ      ??main_5
   \   00005A   C3           CLR     C
   \   00005B   ED           MOV     A,R5
   \   00005C   9404         SUBB    A,#0x4
   \   00005E   40D9         JC      ??CrossCallReturnLabel_253
   1220                  //if( flag ){void (*f)( void ) = ( void (*)( void ) )0x603F; (*f)();}
   1221                  if( flag ) checkMore();
   \   000060                ; Setup parameters for call to function checkMore
   \   000060   12....       LCALL   checkMore
   1222              }
   \                     ??main_5:
   \   000063   EE           MOV     A,R6
   \   000064   2401         ADD     A,#0x1
   \   000066   0E           INC     R6
   \   000067   EF           MOV     A,R7
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FF           MOV     R7,A
   \   00006B   C3           CLR     C
   \   00006C   EE           MOV     A,R6
   \   00006D   940F         SUBB    A,#0xf
   \   00006F   EF           MOV     A,R7
   \   000070   9400         SUBB    A,#0x0
   \   000072   40B7         JC      ??main_2
   1223              
   1224              si->armAdcs       = &armAdcs;
   \   000074   90....       MOV     DPTR,#si
   \   000077   E0           MOVX    A,@DPTR
   \   000078   2430         ADD     A,#0x30
   \   00007A   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_103:
   \   00007D   74..         MOV     A,#(armAdcs & 0xff)
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74..         MOV     A,#((armAdcs >> 8) & 0xff)
   \   000083   12....       LCALL   ??Subroutine70_0
   1225              si->readNextValue = &readNextValue;
   \                     ??CrossCallReturnLabel_220:
   \   000086   2432         ADD     A,#0x32
   \   000088   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_104:
   \   00008B   74..         MOV     A,#(readNextValue & 0xff)
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74..         MOV     A,#((readNextValue >> 8) & 0xff)
   \   000091   12....       LCALL   ??Subroutine70_0
   1226              si->flashCallback = &flashCallback;
   \                     ??CrossCallReturnLabel_221:
   \   000094   2434         ADD     A,#0x34
   \   000096   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_105:
   \   000099   74..         MOV     A,#(flashCallback & 0xff)
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   74..         MOV     A,#((flashCallback >> 8) & 0xff)
   \   00009F   12....       LCALL   ??Subroutine70_0
   1227              //si->rfCallback    = &rfCallback;
   1228              si->adcEnabled    = TRUE;
   \                     ??CrossCallReturnLabel_222:
   \   0000A2   2437         ADD     A,#0x37
   \   0000A4   12....       LCALL   ??Subroutine14_0
   1229              // added in order to setup correct MPP frequecy
   1230              si->mppCycle      = _mppCycle;
   \                     ??CrossCallReturnLabel_40:
   \   0000A7   12....       LCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_106:
   \   0000AA   7478         MOV     A,#0x78
   \   0000AC   12....       LCALL   ?Subroutine70
   1231              si->firstAdcReading = _firstAdcMeasurement;
   \                     ??CrossCallReturnLabel_218:
   \   0000AF   245D         ADD     A,#0x5d
   \   0000B1   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_107:
   \   0000B4   7428         MOV     A,#0x28
   \   0000B6   12....       LCALL   ?Subroutine70
   1232              flags = si->flags;
   \                     ??CrossCallReturnLabel_219:
   \   0000B9   2420         ADD     A,#0x20
   \   0000BB   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_146:
   \   0000BE   90....       MOV     DPTR,#flags
   \   0000C1   12....       LCALL   ??Subroutine67_0
   1233              ticks = si->ticks;
   \                     ??CrossCallReturnLabel_200:
   \   0000C4   90....       MOV     DPTR,#si
   \   0000C7   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_175:
   \   0000CA   90....       MOV     DPTR,#ticks
   \   0000CD   12....       LCALL   ??Subroutine67_0
   1234              ptr2RunningTick = & (si->runningTick);
   \                     ??CrossCallReturnLabel_201:
   \   0000D0   90....       MOV     DPTR,#si
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   2438         ADD     A,#0x38
   \   0000D6   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_147:
   \   0000D9   90....       MOV     DPTR,#ptr2RunningTick
   \   0000DC   12....       LCALL   ??Subroutine67_0
   1235              
   1236              //unnecessary if da_boot is right
   1237              //SET_WORD(T1CC0H, T1CC0L, 600 - 1); // 300 - 1    
   1238              
   1239              oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
   \                     ??CrossCallReturnLabel_202:
   \   0000DF   7417         MOV     A,#0x17
   \   0000E1   90....       MOV     DPTR,#oscWhatToWaitFor
   \   0000E4   F0           MOVX    @DPTR,A
   1240              ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
   \   0000E5   12....       LCALL   ?Subroutine1
   1241          
   1242              resetReason = (SLEEP & 0x18)>>3;
   \                     ??CrossCallReturnLabel_331:
   \   0000E8   7418         MOV     A,#0x18
   \   0000EA   55BE         ANL     A,0xbe
   \   0000EC   C3           CLR     C
   \   0000ED   13           RRC     A
   \   0000EE   13           RRC     A
   \   0000EF   13           RRC     A
   \   0000F0   90....       MOV     DPTR,#resetReason
   \   0000F3   F0           MOVX    @DPTR,A
   1243              zerofill( (BYTE *)&page, 240 );
   \   0000F4                ; Setup parameters for call to function zerofill
   \   0000F4   79F0         MOV     R1,#-0x10
   \   0000F6   7A..         MOV     R2,#(page & 0xff)
   \   0000F8   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   0000FA   12....       LCALL   zerofill
   1244              read_page(); 
   \   0000FD                ; Setup parameters for call to function read_page
   \   0000FD   12....       LCALL   read_page
   1245          
   1246              if (page.fetFailureCount != 0)
   \   000100   90....       MOV     DPTR,#(page + 128)
   \   000103   E0           MOVX    A,@DPTR
   \   000104   7002         JNZ     ??main_6
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \                     ??main_6:
   \   000108   6004         JZ      ??main_7
   1247                checkForFETFailure = TRUE;
   \   00010A   7401         MOV     A,#0x1
   \   00010C   8001         SJMP    ??main_8
   1248              else
   1249                checkForFETFailure = FALSE;
   \                     ??main_7:
   \   00010E   E4           CLR     A
   \                     ??main_8:
   \   00010F   90....       MOV     DPTR,#checkForFETFailure
   \   000112   12....       LCALL   ?Subroutine75
   1250          
   1251              mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); //(BYTE *)&cyclesDefaults[4], 4 );//(BYTE *)&page.defCycles2SoftKick, 4 );
   \                     ??CrossCallReturnLabel_228:
   \   000115   12....       LCALL   ?Subroutine66
   1252              curChannel = page.is500Always ? page.starting500Channel : page.channel; 
   \                     ??CrossCallReturnLabel_341:
   \   000118   5005         JNC     ??main_9
   \   00011A   90....       MOV     DPTR,#(page + 218)
   \   00011D   8003         SJMP    ??main_10
   \                     ??main_9:
   \   00011F   90....       MOV     DPTR,#(page + 164)
   \                     ??main_10:
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FA           MOV     R2,A
   \   000124   EA           MOV     A,R2
   \   000125   90....       MOV     DPTR,#curChannel
   \   000128   F0           MOVX    @DPTR,A
   1253              search_stat = page.searchCommunication; 
   \   000129   12....       LCALL   ?Subroutine54
   1254              //init();
   1255          
   1256              switch( resetReason ){
   \                     ??CrossCallReturnLabel_152:
   \   00012C   90....       MOV     DPTR,#resetReason
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for main>_0`:
   \   000133   00           DB        0
   \   000134   03           DB        3
   \   000135   ....         DW        ??CrossCallReturnLabel_19
   \   000137   ....         DW        ??main_11
   \   000139   ....         DW        ??main_11
   \   00013B   ....         DW        ??main_12
   \   00013D   ....         DW        ??main_11
   1257                  case 2:  // Watchdog Reset  
   1258                    #ifdef MidString
   1259                      /*
   1260                      P1_3 = 0; P1_4 = 0; 
   1261                      longTickWait( 20 );
   1262                      P1_3 = 1; 
   1263                      atomicChange( Init, ((INT16) TICKS_IN_SEC) * 3 );
   1264                      */
   1265          	  if (*ModuleOffRememberedPtr == ModuleStatusOffFetFailure)
   \                     ??main_12:
   \   00013F   90FFFD       MOV     DPTR,#-0x3
   \   000142   E0           MOVX    A,@DPTR
   \   000143   FA           MOV     R2,A
   \   000144   90....       MOV     DPTR,#ModuleStatusOffFetFailure
   \   000147   E0           MOVX    A,@DPTR
   \   000148   6A           XRL     A,R2
   \   000149   700E         JNZ     ??main_13
   1266          	    {
   1267          	      fetFailure = TRUE;
   \   00014B   7401         MOV     A,#0x1
   \   00014D   90....       MOV     DPTR,#fetFailure
   \   000150   12....       LCALL   ?Subroutine71
   1268          	      netValue = MainNetValueFETFailed;
   1269          	      checkForFETFailure = FALSE;
   \                     ??CrossCallReturnLabel_377:
   \   000153   90....       MOV     DPTR,#checkForFETFailure
   \   000156   F0           MOVX    @DPTR,A
   \   000157   8007         SJMP    ??main_14
   1270          	      P1_4 = 0;
   1271          	    }
   1272          	  else if (*ModuleOffRememberedPtr == ModuleStatusOff)
   \                     ??main_13:
   \   000159   90....       MOV     DPTR,#ModuleStatusOff
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   6A           XRL     A,R2
   \   00015E   7004         JNZ     ??main_15
   1273          	    {
   1274          	      P1_4 = 0;
   \                     ??main_14:
   \   000160   C294         CLR     0x90.4
   \   000162   8003         SJMP    ??CrossCallReturnLabel_160
   1275          	    }
   1276          	  else
   1277          	    {
   1278          	      *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \                     ??main_15:
   \   000164   12....       LCALL   ?Subroutine57
   1279          	    }
   1280          	  if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
   \                     ??CrossCallReturnLabel_160:
   \   000167   90FFFD       MOV     DPTR,#-0x3
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   FA           MOV     R2,A
   \   00016C   90....       MOV     DPTR,#ModuleStatusCanTurnOn
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   6A           XRL     A,R2
   \   000171   700C         JNZ     ??main_16
   1281          	    {
   1282          	      if(page.module)
   \   000173   90....       MOV     DPTR,#(page + 186)
   \   000176   E0           MOVX    A,@DPTR
   \   000177   6004         JZ      ??main_17
   1283          		P1_4 = 1;
   \   000179   D294         SETB    0x90.4
   \   00017B   8002         SJMP    ??main_16
   1284          	      else
   1285          		P1_4 = 0;
   \                     ??main_17:
   \   00017D   C294         CLR     0x90.4
   1286          	    }
   1287          	  if( page.mpp )    P1_3 = 1; else P1_3 = 0;
   \                     ??main_16:
   \   00017F   90....       MOV     DPTR,#(page + 185)
   \   000182   E0           MOVX    A,@DPTR
   \   000183   6004         JZ      ??main_18
   \   000185   D293         SETB    0x90.3
   \   000187   8002         SJMP    ??main_19
   \                     ??main_18:
   \   000189   C293         CLR     0x90.3
   1288                    #else
   1289                      // SPT: MPP On, Module On
   1290                      P1_3 = 1; P1_4 = 1; 
   1291                    #endif
   1292                    T3CC0 = page.ov; T3CC1 = oc2timer( setOC = theOC = page.oc ); 
   \                     ??main_19:
   \   00018B   90....       MOV     DPTR,#(page + 187)
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F5CD         MOV     0xcd,A
   \   000191   90....       MOV     DPTR,#(page + 188)
   \   000194   E0           MOVX    A,@DPTR
   \   000195   F9           MOV     R1,A
   \   000196   90....       MOV     DPTR,#theOC
   \   000199   F0           MOVX    @DPTR,A
   \   00019A   90....       MOV     DPTR,#setOC
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E                ; Setup parameters for call to function oc2timer
   \   00019E   12....       LCALL   ??Subroutine103_0
   \                     ??CrossCallReturnLabel_304:
   \   0001A1   8045         SJMP    ??CrossCallReturnLabel_19
   1293                    //wasAHardResetOrPowerOn = FALSE; 
   1294                  break; 
   1295                  case 1: case 3: 
   1296                  case 0:             // Power On Reset      
   1297                      //P1 &= ~ ( 8 | 0x10 );  // Mpp Off, Module Off
   1298          	  *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \                     ??main_11:
   \   0001A3   12....       LCALL   ?Subroutine57
   1299          
   1300                      if( page.ov_startup ) T3CC0 = page.ov_startup; else T3CC0 = page.ov;    
   \                     ??CrossCallReturnLabel_161:
   \   0001A6   90....       MOV     DPTR,#(page + 223)
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   FA           MOV     R2,A
   \   0001AB   6004         JZ      ??main_20
   \   0001AD   8ACD         MOV     0xcd,R2
   \   0001AF   8006         SJMP    ??main_21
   \                     ??main_20:
   \   0001B1   90....       MOV     DPTR,#(page + 187)
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   F5CD         MOV     0xcd,A
   1301                      P1_3 = 0; P1_4 = 0; 
   \                     ??main_21:
   \   0001B7   C293         CLR     0x90.3
   \   0001B9   C294         CLR     0x90.4
   1302                      //{ BYTE i = 8;  while( i-- ){ WDCTL = 0xA8; WDCTL = 0x58; *((BYTE *)0xFFFF) = 0x10; halWait(125); } }
   1303                      //longTickWait( 5 ); // to fill ADC buffer with data should be done later
   1304                      #ifdef MidString
   1305                          P1_3 = page.mpp; 
   \   0001BB   90....       MOV     DPTR,#(page + 185)
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001C1   9293         MOV     0x90.3,C
   1306                          T3CC1 = theOC = 0; setOC = page.oc;  
   \   0001C3   E4           CLR     A
   \   0001C4   90....       MOV     DPTR,#theOC
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   75CF00       MOV     0xcf,#0x0
   \   0001CB   90....       MOV     DPTR,#(page + 188)
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   90....       MOV     DPTR,#setOC
   \   0001D2   12....       LCALL   ?Subroutine73
   1307                      #else    
   1308                          P1_3 = 1; 
   1309                          T3CC1 = oc2timer( setOC = theOC = page.oc );    
   1310                      #endif
   1311                      atomicChange( Init, ((INT16) TICKS_IN_SEC) * 3 );
   \                     ??CrossCallReturnLabel_393:
   \   0001D5   240C         ADD     A,#0xc
   \   0001D7   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_108:
   \   0001DA   7470         MOV     A,#0x70
   \   0001DC   F0           MOVX    @DPTR,A
   \   0001DD   A3           INC     DPTR
   \   0001DE   7417         MOV     A,#0x17
   \   0001E0   12....       LCALL   ?Subroutine73
   1312                      atomicChange( OcRamp, TICKS_IN_SEC );
   \                     ??CrossCallReturnLabel_394:
   \   0001E3   2418         ADD     A,#0x18
   \   0001E5   12....       LCALL   ??Subroutine5_0
   1313                  break; 
   1314              }
   1315              zerofill( (BYTE *)adcBuf, 2*N_CHANNELS*BUFFER_SIZE );
   \                     ??CrossCallReturnLabel_19:
   \   0001E8                ; Setup parameters for call to function zerofill
   \   0001E8   7990         MOV     R1,#-0x70
   \   0001EA   7A..         MOV     R2,#(adcBuf & 0xff)
   \   0001EC   7B..         MOV     R3,#((adcBuf >> 8) & 0xff)
   \   0001EE   12....       LCALL   zerofill
   1316              init();             // turn the crystall on, exit from third state
   \   0001F1                ; Setup parameters for call to function init
   \   0001F1   12....       LCALL   init
   1317              //longTickWait( 12 ); // to fill ADC buffer with data should be done later
   1318              //ticks[ MppCycle ]    = _mppCycle;   // 60 ms
   1319              //ticks[ Ms       ]    = TICKS_IN_MS;
   1320              ticks[ Ms       ]    = TICKS_IN_SEC;     
   \   0001F4   12....       LCALL   ?Subroutine5
   1321              ticks[ ReceiveData ] = TICKS_IN_MS;    
   \                     ??CrossCallReturnLabel_20:
   \   0001F7   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_45:
   \   0001FA   7402         MOV     A,#0x2
   \   0001FC   12....       LCALL   ?Subroutine117
   1322              ticks[ FeedTheDog ]  = _dogFeeding; 
   \                     ??CrossCallReturnLabel_379:
   \   0001FF   12....       LCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_73:
   \   000202   12....       LCALL   ?Subroutine117
   1323              ticks[ Cycle ]       = lastCycle;
   \                     ??CrossCallReturnLabel_380:
   \   000205   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_130:
   \   000208   12....       LCALL   ??Subroutine1_1
   1324          
   1325              // set of the timer registers
   1326              //SET_WORD(T1CC0H, T1CC0L, 600 - 1);
   1327              //        prescaler = 8      modulo mode            ie
   1328              //T1CTL   = 0x04  | 0x02;    T1CCTL0 = 0x44;
   1329              // check of the timer registers
   1330              //if( ((T1CTL&0xF)!=(0x04|0x02)) || (T1CCTL0!=0x44) || (T1CC0H!=0x2) || (T1CC0L!=0x57) ) reset();
   1331                 
   1332              //ticks[ OvStartup ]   = TICKS_IN_SEC;
   1333              
   1334              loadKey( page.curKey ); 
   \                     ??CrossCallReturnLabel_332:
   \   00020B                ; Setup parameters for call to function load
   \   00020B   12....       LCALL   ?Subroutine80
   1335              RNDL = page.myMac[4]; RNDL = page.myMac[5]; //ADCCON1 |= 1; 
   \                     ??CrossCallReturnLabel_241:
   \   00020E   12....       LCALL   ?Subroutine26
   1336           
   1337          //    #ifdef MidString
   1338          //    compute98();
   1339          //    #endif
   1340          //    { BYTE counter = 127;
   1341          //      SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
   1342          //      while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
   1343          //      asm("NOP");
   1344          //      //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
   1345          //      CLKCON = 0x89;  
   1346          //      SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
   1347          //    }
   1348              //P1_1 = 0; // to fill ADC buffer with data
   1349              T1CTL &= 0xFC;
   \                     ??CrossCallReturnLabel_67:
   \   000211   53E4FC       ANL     0xe4,#0xfc
   \   000214   E5E4         MOV     A,0xe4
   1350              SET_WORD(T1CNTH, T1CNTL, 0);
   \   000216   75E300       MOV     0xe3,#0x0
   \   000219   75E200       MOV     0xe2,#0x0
   1351              SET_WORD(T1CC0H, T1CC0L, 750 - 1);
   \   00021C   75DB02       MOV     0xdb,#0x2
   \   00021F   75DAED       MOV     0xda,#-0x13
   1352              T1CTL |= 0x04  | 0x02;
   \   000222   43E406       ORL     0xe4,#0x6
   \   000225   E5E4         MOV     A,0xe4
   1353              T1CCTL0 = 0x44;
   \   000227   75E544       MOV     0xe5,#0x44
   1354              longTickWait( 10 ); //20 ); was 20
   \   00022A                ; Setup parameters for call to function longTickWait
   \   00022A   790A         MOV     R1,#0xa
   \   00022C   12....       LCALL   longTickWait
   1355              if( mymemcmp( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ) ) reset(); // (BYTE *)&cyclesDefaults[4]
   \   00022F                ; Setup parameters for call to function mymemcmp
   \   00022F   7904         MOV     R1,#0x4
   \   000231   7C..         MOV     R4,#((page + 208) & 0xff)
   \   000233   7D..         MOV     R5,#(((page + 208) >> 8) & 0xff)
   \   000235   7A..         MOV     R2,#(cycles2SoftKick & 0xff)
   \   000237   7B..         MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
   \   000239   12....       LCALL   mymemcmp
   \   00023C   E9           MOV     A,R1
   \   00023D   6003         JZ      ??main_22
   \   00023F                ; Setup parameters for call to function reset
   \   00023F   12....       LCALL   reset
   1356          //    search_stat = page.searchCommunication = 0;
   1357          //    softKick();
   1358              P1_1 = 0; // was 1
   \                     ??main_22:
   \   000242   C291         CLR     0x90.1
   1359          MainLoopLabel:
   1360            /* We are not turning the quartz on *
   1361              { BYTE counter = 127;
   1362                SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
   1363                while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
   1364                asm("NOP");
   1365                //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
   1366                CLKCON = 0x89;  
   1367                SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
   1368              }
   1369            **/
   1370              quartz();
   \                     ??main_1:
   \   000244                ; Setup parameters for call to function quartz
   \   000244   12....       LCALL   quartz
   1371              softKick();
   \   000247                ; Setup parameters for call to function softKick
   \   000247   12....       LCALL   softKick
   \   00024A   8011         SJMP    ??main_23
   1372              for (;;){ 
   1373                  if( *((BYTE *)0xF53B) != 0xAA ) reset(); 
   1374                  if( PARTNUM != 0x81 ) reset();
   1375                  WDCTL = 8;
   1376                  main_loop(); 
   1377                  if( flags[ PackageReceived ] || flags[DataSent] ) continue;
   1378                  if( lastCycle > (840*TICKS_IN_MS) ) lastCycle = 840*TICKS_IN_MS;
   1379                  if( lastCycle == 0 )                lastCycle = 840*TICKS_IN_MS;
   1380                  if( ticks[ Cycle ] > lastCycle )    ticks[ Cycle ] = lastCycle;
   1381                  if( ticks[ Cycle ] == 0        )    ticks[ Cycle ] = lastCycle;
   1382                  if( cycles2SoftKick > page.defCycles2SoftKick /*8*/ )           cycles2SoftKick = page.defCycles2SoftKick; //8;
   1383                  if( cycles2SoftKick == 0 )          cycles2SoftKick = page.defCycles2SoftKick; //8;
   1384                  if( (cycles2HardKick&0xFF) == 0 )   reset();  // a reset        
   1385          
   1386          //        if( ticks[ MppCycle ] > _mppCycle )    ticks[ MppCycle ] = _mppCycle;
   1387          //        if( ticks[ MppCycle ] == 0        )    ticks[ MppCycle ] = _mppCycle;
   1388                  //if( ticks[ Ms       ] > TICKS_IN_MS )  ticks[ Ms ]       = TICKS_IN_MS;
   1389                  //if( ticks[ Ms ]       == 0          )  ticks[ Ms ]       = TICKS_IN_MS;
   1390                  if( ticks[ Ms       ] > TICKS_IN_SEC )  ticks[ Ms ]       = TICKS_IN_SEC;
   1391                  if( ticks[ Ms ]       == 0           )  ticks[ Ms ]       = TICKS_IN_SEC;
   \                     ??main_24:
   \   00024C   EA           MOV     A,R2
   \   00024D   7001         JNZ     ??main_25
   \   00024F   EB           MOV     A,R3
   \                     ??main_25:
   \   000250   700B         JNZ     ??main_23
   \                     ??main_26:
   \   000252   8882         MOV     DPL,R0
   \   000254   8983         MOV     DPH,R1
   \   000256   74D0         MOV     A,#-0x30
   \   000258   F0           MOVX    @DPTR,A
   \   000259   A3           INC     DPTR
   \   00025A   7407         MOV     A,#0x7
   \   00025C   F0           MOVX    @DPTR,A
   \                     ??main_23:
   \   00025D   90F53B       MOV     DPTR,#-0xac5
   \   000260   E0           MOVX    A,@DPTR
   \   000261   64AA         XRL     A,#0xaa
   \   000263   6003         JZ      ??main_27
   \   000265                ; Setup parameters for call to function reset
   \   000265   12....       LCALL   reset
   \                     ??main_27:
   \   000268   90DF36       MOV     DPTR,#-0x20ca
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   6481         XRL     A,#0x81
   \   00026E   6003         JZ      ??main_28
   \   000270                ; Setup parameters for call to function reset
   \   000270   12....       LCALL   reset
   \                     ??main_28:
   \   000273   75C908       MOV     0xc9,#0x8
   \   000276                ; Setup parameters for call to function main_loop
   \   000276   12....       LCALL   main_loop
   \   000279   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_7:
   \   00027C   70DF         JNZ     ??main_23
   \   00027E   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_26:
   \   000281   70DA         JNZ     ??main_23
   \   000283   90....       MOV     DPTR,#lastCycle
   \   000286   C3           CLR     C
   \   000287   E0           MOVX    A,@DPTR
   \   000288   9491         SUBB    A,#-0x6f
   \   00028A   A3           INC     DPTR
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   9406         SUBB    A,#0x6
   \   00028E   500A         JNC     ??main_29
   \   000290   90....       MOV     DPTR,#lastCycle
   \   000293   E0           MOVX    A,@DPTR
   \   000294   7002         JNZ     ??main_30
   \   000296   A3           INC     DPTR
   \   000297   E0           MOVX    A,@DPTR
   \                     ??main_30:
   \   000298   700A         JNZ     ??main_31
   \                     ??main_29:
   \   00029A   90....       MOV     DPTR,#lastCycle
   \   00029D   7490         MOV     A,#-0x70
   \   00029F   F0           MOVX    @DPTR,A
   \   0002A0   A3           INC     DPTR
   \   0002A1   7406         MOV     A,#0x6
   \   0002A3   F0           MOVX    @DPTR,A
   \                     ??main_31:
   \   0002A4   90....       MOV     DPTR,#ticks
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   2412         ADD     A,#0x12
   \   0002AA   12....       LCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_364:
   \   0002AD   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   0002B0   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   0002B3   C3           CLR     C
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   9A           SUBB    A,R2
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   9B           SUBB    A,R3
   \   0002B9   5003         JNC     ??CrossCallReturnLabel_336
   \   0002BB   12....       LCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_336:
   \   0002BE   8882         MOV     DPL,R0
   \   0002C0   8983         MOV     DPH,R1
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   7002         JNZ     ??main_32
   \   0002C5   A3           INC     DPTR
   \   0002C6   E0           MOVX    A,@DPTR
   \                     ??main_32:
   \   0002C7   7003         JNZ     ??CrossCallReturnLabel_337
   \   0002C9   12....       LCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_337:
   \   0002CC   90....       MOV     DPTR,#(page + 208)
   \   0002CF   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_132:
   \   0002D2   90....       MOV     DPTR,#cycles2SoftKick
   \   0002D5   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_176:
   \   0002D8   C3           CLR     C
   \   0002D9   EA           MOV     A,R2
   \   0002DA   98           SUBB    A,R0
   \   0002DB   EB           MOV     A,R3
   \   0002DC   99           SUBB    A,R1
   \   0002DD   5006         JNC     ??CrossCallReturnLabel_317
   \   0002DF   90....       MOV     DPTR,#cycles2SoftKick
   \   0002E2   12....       LCALL   ??Subroutine110_0
   \                     ??CrossCallReturnLabel_317:
   \   0002E5   90....       MOV     DPTR,#cycles2SoftKick
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   7002         JNZ     ??main_33
   \   0002EB   A3           INC     DPTR
   \   0002EC   E0           MOVX    A,@DPTR
   \                     ??main_33:
   \   0002ED   7003         JNZ     ??CrossCallReturnLabel_84
   \   0002EF   12....       LCALL   ?Subroutine34
   \                     ??CrossCallReturnLabel_84:
   \   0002F2   90....       MOV     DPTR,#cycles2HardKick
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   7003         JNZ     ??main_34
   \   0002F8                ; Setup parameters for call to function reset
   \   0002F8   12....       LCALL   reset
   \                     ??main_34:
   \   0002FB   90....       MOV     DPTR,#ticks
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   2416         ADD     A,#0x16
   \   000301   12....       LCALL   ?Subroutine37
   \                     ??CrossCallReturnLabel_365:
   \   000304   C3           CLR     C
   \   000305   EA           MOV     A,R2
   \   000306   94D1         SUBB    A,#-0x2f
   \   000308   EB           MOV     A,R3
   \   000309   9407         SUBB    A,#0x7
   \   00030B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00030D   65D0         XRL     A,PSW
   \   00030F   33           RLC     A
   \   000310   5003         JNC     $+5
   \   000312   02....       LJMP    ??main_24
   \   000315   02....       LJMP    ??main_26
   \   000318                REQUIRE _A_P1
   \   000318                REQUIRE IEN2
   \   000318                REQUIRE _A_IEN0
   \   000318                REQUIRE _A_IEN1
   \   000318                REQUIRE RNDL
   \   000318                REQUIRE SLEEP
   \   000318                REQUIRE WDCTL
   \   000318                REQUIRE T3CC0
   \   000318                REQUIRE T3CC1
   \   000318                REQUIRE T1CC0L
   \   000318                REQUIRE T1CC0H
   \   000318                REQUIRE T1CNTL
   \   000318                REQUIRE T1CNTH
   \   000318                REQUIRE T1CTL
   \   000318                REQUIRE T1CCTL0
   1392                  // goSleep(); 
   1393                  //P1_1 ^= 1;
   1394              }
   1395          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??Subroutine86_0
   \                     ??CrossCallReturnLabel_262:
   \   000003                REQUIRE ?Subroutine115
   \   000003                ; // Fall through to label ?Subroutine115

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_368:
   \   000003   02....       LJMP    ?Subroutine110

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   mymemcpy
   \   000003                REQUIRE ?Subroutine111
   \   000003                ; // Fall through to label ?Subroutine111

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   90....       MOV     DPTR,#(page + 194)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   A2E6         MOV     C,0xE0 /* A   */.6
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function mymemcpy
   \   000001                ; Setup parameters for call to function mymemcpy
   \   000001   7904         MOV     R1,#0x4
   \   000003   7C..         MOV     R4,#((page + 208) & 0xff)
   \   000005   7D..         MOV     R5,#(((page + 208) >> 8) & 0xff)
   \   000007   7A..         MOV     R2,#(cycles2SoftKick & 0xff)
   \   000009   7B..         MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \                     ??Subroutine70_0:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   90....       MOV     DPTR,#si
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#(page + 10)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5BC         MOV     0xbc,A
   \   000006   90....       MOV     DPTR,#(page + 11)
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F5BC         MOV     0xbc,A
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   90....       MOV     DPTR,#(page + 194)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   A2E7         MOV     C,0xE0 /* A   */.7
   \   000006   E4           CLR     A
   \   000007   92E0         MOV     0xE0 /* A   */.0,C
   \   000009   90....       MOV     DPTR,#search_stat
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
   1396          /*==== PRIVATE FUNCTIONS =====================================================*/
   1397          /******************************************************************************
   1398          * Work with watchdogs and LED's
   1399          ******************************************************************************/
   1400          //void feedTheDog(void){ WDCTL = 0xA8;  WDCTL = 0x58; }
   1401          /******************************************************************************
   1402          * initiate reading of adc channels
   1403          ******************************************************************************/
   1404          //#pragma optimize=s 9

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1405          void armAdcs(void){  
   \                     armAdcs:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1406              adcCount = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#adcCount
   \   000008   12....       LCALL   ?Subroutine32
   1407              si->inCurCycle++; 
   \                     ??CrossCallReturnLabel_78:
   \   00000B   04           INC     A
   \   00000C   12....       LCALL   ?Subroutine32
   1408              if( si->inCurCycle < 4 ) ticks[ AdcMeasurement ] = _adcMeasurement;  // 5ms
   \                     ??CrossCallReturnLabel_79:
   \   00000F   C3           CLR     C
   \   000010   9404         SUBB    A,#0x4
   \   000012   500A         JNC     ??CrossCallReturnLabel_381
   \   000014   12....       LCALL   ??Subroutine46_0
   \                     ??CrossCallReturnLabel_122:
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?Subroutine117
   1409              ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
   \                     ??CrossCallReturnLabel_381:
   \   00001E   90....       MOV     DPTR,#adcCount
   \   000021   E0           MOVX    A,@DPTR
   \   000022   24..         ADD     A,#(adcChannels & 0xff)
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   34..         ADDC    A,#((adcChannels >> 8) & 0xff)
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5B6         MOV     0xb6,A
   1410          }
   \   00002E   02....       LJMP    ??Subroutine113_0
   \   000031                REQUIRE ADCCON3

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#si
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2436         ADD     A,#0x36
   \   000007   12....       LCALL   ??Subroutine86_0
   \                     ??CrossCallReturnLabel_261:
   \   00000A   22           RET
   1411          /******************************************************************************
   1412          * Read ADC's once into buffer
   1413          ******************************************************************************/
   1414          
   1415          //void readNextValue(void){ flags[ IncreaseSleepCnt ] = TRUE;  flags[ ReadNextValue ] = TRUE; } 
   1416          #pragma optimize=s 9

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1417          void readNextValue(void){ //Scheduled(void){  // 
   \                     readNextValue:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1418          INT16 value;
   1419          static int theShift = 50;
   1420          static UINT16 rawVout;
   1421          
   1422              ADC_GET_VALUE( value ); value >>= 2; value += theShift;  // 200 >> 2 = 50
   \   000005   E5BB         MOV     A,0xbb
   \   000007   F5..         MOV     ?V0 + 1,A
   \   000009   E5BA         MOV     A,0xba
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   7402         MOV     A,#0x2
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?SS_SHR
   \   000014   90....       MOV     DPTR,#??theShift
   \   000017   E0           MOVX    A,@DPTR
   \   000018   25..         ADD     A,?V0 + 0
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   35..         ADDC    A,?V0 + 1
   \   000020   F5..         MOV     ?V0 + 1,A
   1423              
   1424              if (adcCount == 0)
   \   000022   90....       MOV     DPTR,#adcCount
   \   000025   E0           MOVX    A,@DPTR
   \   000026   700A         JNZ     ??readNextValue_0
   1425                rawVout = (UINT16)value;
   \   000028   90....       MOV     DPTR,#??rawVout
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E5..         MOV     A,?V0 + 1
   \   000031   F0           MOVX    @DPTR,A
   1426              
   1427              //while( value < 0 ){ value++; theShift++; } // adaptive
   1428              adcsTemp[ adcCount++ ] += (UINT16)value; 
   \                     ??readNextValue_0:
   \   000032   90....       MOV     DPTR,#adcCount
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   7401         MOV     A,#0x1
   \   000039   2A           ADD     A,R2
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   EA           MOV     A,R2
   \   00003C   C3           CLR     C
   \   00003D   33           RLC     A
   \   00003E   F8           MOV     R0,A
   \   00003F   E4           CLR     A
   \   000040   33           RLC     A
   \   000041   F9           MOV     R1,A
   \   000042   E8           MOV     A,R0
   \   000043   24..         ADD     A,#(adcsTemp & 0xff)
   \   000045   F582         MOV     DPL,A
   \   000047   E9           MOV     A,R1
   \   000048   34..         ADDC    A,#((adcsTemp >> 8) & 0xff)
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   25..         ADD     A,?V0 + 0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   35..         ADDC    A,?V0 + 1
   \   000054   F0           MOVX    @DPTR,A
   1429          
   1430              if( adcCount < N_CHANNELS ){
   \   000055   90....       MOV     DPTR,#adcCount
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C3           CLR     C
   \   00005A   9409         SUBB    A,#0x9
   \   00005C   5010         JNC     ??readNextValue_1
   1431                  ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   24..         ADD     A,#(adcChannels & 0xff)
   \   000061   F582         MOV     DPL,A
   \   000063   E4           CLR     A
   \   000064   34..         ADDC    A,#((adcChannels >> 8) & 0xff)
   \   000066   F583         MOV     DPH,A
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F5B6         MOV     0xb6,A
   \   00006B   02....       LJMP    ??readNextValue_2
   1432              }else{
   1433                if( tempAdcsCount == 0 )
   \                     ??readNextValue_1:
   \   00006E   90....       MOV     DPTR,#tempAdcsCount
   \   000071   E0           MOVX    A,@DPTR
   \   000072   90....       MOV     DPTR,#??rawVout
   \   000075   700F         JNZ     ??readNextValue_3
   1434          	vOutMin = vOutMax = rawVout;
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   90....       MOV     DPTR,#vOutMax
   \   00007F   E8           MOV     A,R0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E9           MOV     A,R1
   \   000083   F0           MOVX    @DPTR,A
   \   000084   8039         SJMP    ??readNextValue_4
   1435                else
   1436          	{
   1437          	  if( rawVout > vOutMax )
   \                     ??readNextValue_3:
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F8           MOV     R0,A
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   7583..       MOV     DPH,#((vOutMax >> 8) & 0xff)
   \   00008E   7582..       MOV     DPL,#(vOutMax & 0xff)
   \   000091   C3           CLR     C
   \   000092   E0           MOVX    A,@DPTR
   \   000093   98           SUBB    A,R0
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   99           SUBB    A,R1
   \   000097   5008         JNC     ??readNextValue_5
   1438          	    vOutMax = rawVout;
   \   000099   90....       MOV     DPTR,#vOutMax
   \   00009C   E8           MOV     A,R0
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E9           MOV     A,R1
   \   0000A0   F0           MOVX    @DPTR,A
   1439          	  if( rawVout < vOutMin )
   \                     ??readNextValue_5:
   \   0000A1   90....       MOV     DPTR,#vOutMin
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   7583..       MOV     DPH,#((??rawVout >> 8) & 0xff)
   \   0000AC   7582..       MOV     DPL,#(??rawVout & 0xff)
   \   0000AF   C3           CLR     C
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   98           SUBB    A,R0
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   99           SUBB    A,R1
   \   0000B5   5010         JNC     ??readNextValue_6
   1440          	    vOutMin = rawVout;
   \   0000B7   90....       MOV     DPTR,#??rawVout
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F8           MOV     R0,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \                     ??readNextValue_4:
   \   0000BF   90....       MOV     DPTR,#vOutMin
   \   0000C2   E8           MOV     A,R0
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E9           MOV     A,R1
   \   0000C6   F0           MOVX    @DPTR,A
   1441          	}
   1442          
   1443                  if( ++tempAdcsCount >= 8 ){
   \                     ??readNextValue_6:
   \   0000C7   90....       MOV     DPTR,#tempAdcsCount
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   04           INC     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   C3           CLR     C
   \   0000CE   9408         SUBB    A,#0x8
   \   0000D0   5003         JNC     $+5
   \   0000D2   02....       LJMP    ??readNextValue_7
   1444                  BYTE idx; INT16 grnd = adcsTemp[ 3 ];
   \   0000D5   90....       MOV     DPTR,#(adcsTemp + 6)
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FE           MOV     R6,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FF           MOV     R7,A
   1445                      //mymemcpy( (BYTE *)ptr, (BYTE *)adcsTemp, 8*sizeof( INT16 ) );
   1446                      for( idx = 0; idx < N_CHANNELS; idx++ ){
   \   0000DD   7C..         MOV     R4,#(adcsTemp & 0xff)
   \   0000DF   7D..         MOV     R5,#((adcsTemp >> 8) & 0xff)
   \   0000E1   7A..         MOV     R2,#(last & 0xff)
   \   0000E3   7B..         MOV     R3,#((last >> 8) & 0xff)
   \   0000E5   90....       MOV     DPTR,#bufferCount
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C3           CLR     C
   \   0000EA   33           RLC     A
   \   0000EB   F8           MOV     R0,A
   \   0000EC   E4           CLR     A
   \   0000ED   33           RLC     A
   \   0000EE   F9           MOV     R1,A
   \   0000EF   E8           MOV     A,R0
   \   0000F0   24..         ADD     A,#(adcBuf & 0xff)
   \   0000F2   F8           MOV     R0,A
   \   0000F3   E9           MOV     A,R1
   \   0000F4   34..         ADDC    A,#((adcBuf >> 8) & 0xff)
   \   0000F6   F9           MOV     R1,A
   \   0000F7   75..09       MOV     ?V0 + 2,#0x9
   1447                          adcBuf[ idx ][ bufferCount ] = adcsTemp[ idx ];
   \                     ??readNextValue_8:
   \   0000FA   8C82         MOV     DPL,R4
   \   0000FC   8D83         MOV     DPH,R5
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F5..         MOV     ?V0 + 0,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F5..         MOV     ?V0 + 1,A
   \   000105   8882         MOV     DPL,R0
   \   000107   8983         MOV     DPH,R1
   \   000109   E5..         MOV     A,?V0 + 0
   \   00010B   F0           MOVX    @DPTR,A
   \   00010C   A3           INC     DPTR
   \   00010D   E5..         MOV     A,?V0 + 1
   \   00010F   F0           MOVX    @DPTR,A
   1448                          //last[idx]                    = adcsTemp[ idx ] - grnd;// + ( page.thirty_three_mv ? 649 : 0 );
   1449                          if( adcsTemp[ idx ] < grnd ) last[idx] = 0; else last[idx] = adcsTemp[ idx ] - grnd;
   \   000110   C3           CLR     C
   \   000111   E5..         MOV     A,?V0 + 0
   \   000113   9E           SUBB    A,R6
   \   000114   E5..         MOV     A,?V0 + 1
   \   000116   9F           SUBB    A,R7
   \   000117   5009         JNC     ??readNextValue_9
   \   000119   8A82         MOV     DPL,R2
   \   00011B   8B83         MOV     DPH,R3
   \   00011D   E4           CLR     A
   \   00011E   F0           MOVX    @DPTR,A
   \   00011F   A3           INC     DPTR
   \   000120   8015         SJMP    ??readNextValue_10
   \                     ??readNextValue_9:
   \   000122   E5..         MOV     A,?V0 + 0
   \   000124   C3           CLR     C
   \   000125   9E           SUBB    A,R6
   \   000126   F5..         MOV     ?V0 + 0,A
   \   000128   E5..         MOV     A,?V0 + 1
   \   00012A   9F           SUBB    A,R7
   \   00012B   F5..         MOV     ?V0 + 1,A
   \   00012D   8A82         MOV     DPL,R2
   \   00012F   8B83         MOV     DPH,R3
   \   000131   E5..         MOV     A,?V0 + 0
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A3           INC     DPTR
   \   000135   E5..         MOV     A,?V0 + 1
   \                     ??readNextValue_10:
   \   000137   F0           MOVX    @DPTR,A
   1450                          //if( ( idx < 5  ) && ( idx > 0  ) ){ counts1[ idx ] += adcsTemp[ idx ]; /* counts2[ idx ] += adcsTemp[ idx ]; */ }
   1451                      }
   \   000138   E8           MOV     A,R0
   \   000139   2410         ADD     A,#0x10
   \   00013B   F8           MOV     R0,A
   \   00013C   E9           MOV     A,R1
   \   00013D   3400         ADDC    A,#0x0
   \   00013F   F9           MOV     R1,A
   \   000140   EA           MOV     A,R2
   \   000141   2402         ADD     A,#0x2
   \   000143   0A           INC     R2
   \   000144   0A           INC     R2
   \   000145   EB           MOV     A,R3
   \   000146   3400         ADDC    A,#0x0
   \   000148   FB           MOV     R3,A
   \   000149   EC           MOV     A,R4
   \   00014A   2402         ADD     A,#0x2
   \   00014C   0C           INC     R4
   \   00014D   0C           INC     R4
   \   00014E   ED           MOV     A,R5
   \   00014F   3400         ADDC    A,#0x0
   \   000151   FD           MOV     R5,A
   \   000152   15..         DEC     ?V0 + 2
   \   000154   E5..         MOV     A,?V0 + 2
   \   000156   70A2         JNZ     ??readNextValue_8
   1452                      //lastRef        = adcsTemp[ 4 ] - adcsTemp[ 3 ];
   1453                      /*
   1454                      lastVout       = adcsTemp[ 0 ] - lastGnd;
   1455                      lastIout       = adcsTemp[ 2 ] - lastGnd;
   1456                      lastRef        = adcsTemp[ 4 ] - lastGnd;
   1457                      lastTex        = adcsTemp[ 6 ] - lastGnd;
   1458                      lastVin        = adcsTemp[ 5 ] - lastGnd;
   1459                      */
   1460                      flags[ AltCheckVin ] = TRUE;
   \   000158   90....       MOV     DPTR,#flags
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   240B         ADD     A,#0xb
   \   00015E   F8           MOV     R0,A
   \   00015F   A3           INC     DPTR
   \   000160   E0           MOVX    A,@DPTR
   \   000161   3400         ADDC    A,#0x0
   \   000163   F9           MOV     R1,A
   \   000164   8882         MOV     DPL,R0
   \   000166   8983         MOV     DPH,R1
   \   000168   7401         MOV     A,#0x1
   \   00016A   F0           MOVX    @DPTR,A
   1461          	    dVOut = vOutMax - vOutMin;
   \   00016B   90....       MOV     DPTR,#vOutMin
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F8           MOV     R0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F9           MOV     R1,A
   \   000173   7583..       MOV     DPH,#((vOutMax >> 8) & 0xff)
   \   000176   7582..       MOV     DPL,#(vOutMax & 0xff)
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   C3           CLR     C
   \   00017B   98           SUBB    A,R0
   \   00017C   F8           MOV     R0,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   99           SUBB    A,R1
   \   000180   F9           MOV     R1,A
   \   000181   90....       MOV     DPTR,#dVOut
   \   000184   E8           MOV     A,R0
   \   000185   F0           MOVX    @DPTR,A
   \   000186   A3           INC     DPTR
   \   000187   E9           MOV     A,R1
   \   000188   F0           MOVX    @DPTR,A
   1462                      zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );    tempAdcsCount = 0;
   \   000189                ; Setup parameters for call to function zerofill
   \   000189   7912         MOV     R1,#0x12
   \   00018B   7A..         MOV     R2,#(adcsTemp & 0xff)
   \   00018D   7B..         MOV     R3,#((adcsTemp >> 8) & 0xff)
   \   00018F   12....       LCALL   zerofill
   \   000192   E4           CLR     A
   \   000193   90....       MOV     DPTR,#tempAdcsCount
   \   000196   F0           MOVX    @DPTR,A
   1463                      if( ++bufferCount == BUFFER_SIZE ){ enable2SendData = TRUE; bufferCount = 0; }
   \   000197   90....       MOV     DPTR,#bufferCount
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   04           INC     A
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   6408         XRL     A,#0x8
   \   00019F   700B         JNZ     ??readNextValue_7
   \   0001A1   7401         MOV     A,#0x1
   \   0001A3   90....       MOV     DPTR,#enable2SendData
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   E4           CLR     A
   \   0001A8   90....       MOV     DPTR,#bufferCount
   \   0001AB   F0           MOVX    @DPTR,A
   1464                  }
   1465                  adcCount = 0;
   \                     ??readNextValue_7:
   \   0001AC   E4           CLR     A
   \   0001AD   90....       MOV     DPTR,#adcCount
   \   0001B0   F0           MOVX    @DPTR,A
   1466              }
   1467          }
   \                     ??readNextValue_2:
   \   0001B1   02....       LJMP    ?Subroutine122
   \   0001B4                REQUIRE ADCCON3
   \   0001B4                REQUIRE ADCL
   \   0001B4                REQUIRE ADCH

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??theShift:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for theShift>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??rawVout:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1468          //________________________________________________________________________________

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1469          void prepareTxBuffer(){
   \                     prepareTxBuffer:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1470               loadIV( page.curIV );  
   \   000005                ; Setup parameters for call to function load
   \   000005   7A..         MOV     R2,#((page + 112) & 0xff)
   \   000007   7B..         MOV     R3,#(((page + 112) >> 8) & 0xff)
   \   000009   7906         MOV     R1,#0x6
   \   00000B   12....       LCALL   ??Subroutine80_1
   1471               encode( 32, (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2) );
   \                     ??CrossCallReturnLabel_245:
   \   00000E                ; Setup parameters for call to function code
   \   00000E   75....       MOV     ?V0 + 0,#((radioPktBufferTx + 2) & 0xff)
   \   000011   75....       MOV     ?V0 + 1,#(((radioPktBufferTx + 2) >> 8) & 0xff)
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C..         MOV     R4,#(radioPktBuffer & 0xff)
   \   00001B   7D..         MOV     R5,#((radioPktBuffer >> 8) & 0xff)
   \   00001D   7A20         MOV     R2,#0x20
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   `code`
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   1472               //loadIV( page.curIV );  
   1473               //encode( 16, (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2) );
   1474               //loadIV( page.curIV );  
   1475               //encode( 16, (char *)(radioPktBuffer+16), (char *)(radioPktBufferTx+18) );
   1476          
   1477               // for SDAG debug 
   1478               //mymemcpy( (char *)(radioPktBufferTx+2), (char *)radioPktBuffer, PACKET_LENGTH_ED-2 );
   1479               
   1480               radioPktBufferTx[0] = PACKET_LENGTH_ED;               // Length byte
   \   000029   7422         MOV     A,#0x22
   \   00002B   90....       MOV     DPTR,#radioPktBufferTx
   \   00002E   F0           MOVX    @DPTR,A
   1481               radioPktBufferTx[1] = page.gwAddr;                    // GW address
   \   00002F   90....       MOV     DPTR,#(page + 191)
   \   000032   E0           MOVX    A,@DPTR
   \   000033   90....       MOV     DPTR,#(radioPktBufferTx + 1)
   \   000036   F0           MOVX    @DPTR,A
   1482               packagePrepared = TRUE; 
   \   000037   7401         MOV     A,#0x1
   \   000039   90....       MOV     DPTR,#packagePrepared
   \   00003C   02....       LJMP    ?Subroutine121
   1483          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1484          void copyMac( BYTE *ptr) { mymemcpy( ptr, page.myMac, 6); }
   \                     copyMac:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function mymemcpy
   \   000000   7906         MOV     R1,#0x6
   \   000002   7C..         MOV     R4,#((page + 6) & 0xff)
   \   000004   7D..         MOV     R5,#(((page + 6) >> 8) & 0xff)
   \   000006   12....       LCALL   mymemcpy
   \   000009   22           RET
   1485          //#define copyMac( ptr ) mymemcpy( (BYTE *)ptr, page.myMac, 6); 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1486          BYTE ndev = 0;
   \                     ndev:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1487          INT16 prevRssi = 0;
   \                     prevRssi:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1488          BYTE coefficients_buffer[ 24 ];
   \                     coefficients_buffer:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
   1489          void prepareCoeff(void);
   1490          /******************************************************************************
   1491          * Prepare data - average the round robin buffer into 10 values
   1492          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1493          void prepareData(void){  
   \                     prepareData:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   1494            UINT16 reportStatus = netValue;
   \   000005   90....       MOV     DPTR,#netValue
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
   1495          
   1496            isCalibrationPackage = FALSE;
   \   00000D   E4           CLR     A
   \   00000E   90....       MOV     DPTR,#isCalibrationPackage
   \   000011   F0           MOVX    @DPTR,A
   1497            //if(      reportScaling    ) prepareScaling();
   1498            //if(      reportScaling    ){ prepareScaling();   isCalibrationPackage = TRUE;  }
   1499            if(      reportScaling    ){ if( base_ptr==coefficients_buffer ) prepareCoeff(); else prepareScaling();   isCalibrationPackage = TRUE;  }
   \   000012   90....       MOV     DPTR,#reportScaling
   \   000015   E0           MOVX    A,@DPTR
   \   000016   601E         JZ      ??prepareData_0
   \   000018   90....       MOV     DPTR,#base_ptr
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   64..         XRL     A,#(coefficients_buffer & 0xff)
   \   00001E   7004         JNZ     ??prepareData_1
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   64..         XRL     A,#((coefficients_buffer >> 8) & 0xff)
   \                     ??prepareData_1:
   \   000024   7005         JNZ     ??prepareData_2
   \   000026                ; Setup parameters for call to function prepareCoeff
   \   000026   12....       LCALL   prepareCoeff
   \   000029   8003         SJMP    ??prepareData_3
   \                     ??prepareData_2:
   \   00002B                ; Setup parameters for call to function prepareScaling
   \   00002B   12....       LCALL   prepareScaling
   \                     ??prepareData_3:
   \   00002E   7401         MOV     A,#0x1
   \   000030   90....       MOV     DPTR,#isCalibrationPackage
   \   000033   02....       LJMP    ??prepareData_4
   1500            //else if( reportFlashCheck ) prepareFlashCheck();
   1501            else if( enable2SendData  ){
   \                     ??prepareData_0:
   \   000036   90....       MOV     DPTR,#enable2SendData
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??prepareData_5
   1502                BYTE *ptr  = radioPktBuffer;
   1503                //float e = energy + deltaEnergy;
   1504                // UINT16 value = 50; 
   1505                computeADCs( FALSE /*page.is500Always*/, FALSE ); 
   \   00003F                ; Setup parameters for call to function computeADCs
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7900         MOV     R1,#0x0
   \   000043   12....       LCALL   computeADCs
   1506                // Insert the 6 byte timestamp into a static packet buffer
   1507                // if( page.reportUTC ) mymemcpy( ptr, (BYTE *)&utc, 4 ); 
   1508                //else                 mymemcpy( ptr, (BYTE *)&e,   4 );     // 
   1509                mymemcpy( ptr, (BYTE *)&utc, 4 ); 
   \   000046                ; Setup parameters for call to function mymemcpy
   \   000046   7904         MOV     R1,#0x4
   \   000048   7C..         MOV     R4,#(utc & 0xff)
   \   00004A   7D..         MOV     R5,#((utc >> 8) & 0xff)
   \   00004C   7A..         MOV     R2,#(radioPktBuffer & 0xff)
   \   00004E   7B..         MOV     R3,#((radioPktBuffer >> 8) & 0xff)
   \   000050   12....       LCALL   mymemcpy
   1510                ptr +=4;
   1511                *ptr++ = (BYTE)curChannel;  *ptr++ = ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );    
   \   000053   90....       MOV     DPTR,#curChannel
   \   000056   E0           MOVX    A,@DPTR
   \   000057   90....       MOV     DPTR,#(radioPktBuffer + 4)
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   7418         MOV     A,#0x18
   \   00005D   5590         ANL     A,0x90
   \   00005F   C3           CLR     C
   \   000060   33           RLC     A
   \   000061   C0E0         PUSH    A
   \   000063   90....       MOV     DPTR,#(page + 2)
   \   000066   E0           MOVX    A,@DPTR
   \   000067   540F         ANL     A,#0xf
   \   000069   FA           MOV     R2,A
   \   00006A   D0E0         POP     A
   \   00006C   4A           ORL     A,R2
   \   00006D   33           RLC     A
   \   00006E   33           RLC     A
   \   00006F   54FC         ANL     A,#0xfc
   \   000071   12....       LCALL   ?Subroutine78
   1512                //*ptr++ = (BYTE) adcs16[10];  *ptr++ = (BYTE)(0x3) | ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );    
   1513                copyMac( ptr );  
   1514                ptr += 6;                  // mac   
   1515                // 12 bytes gone
   1516                mymemcpy( ptr, (BYTE *)adcs16, 16 ); 
   \                     ??CrossCallReturnLabel_236:
   \   000074                ; Setup parameters for call to function mymemcpy
   \   000074   7910         MOV     R1,#0x10
   \   000076   7C..         MOV     R4,#(adcs16 & 0xff)
   \   000078   7D..         MOV     R5,#((adcs16 >> 8) & 0xff)
   \   00007A   7A..         MOV     R2,#((radioPktBuffer + 12) & 0xff)
   \   00007C   7B..         MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
   \   00007E   12....       LCALL   ?Subroutine66
   1517                if( page.is500Always )             reportStatus += 2 + ((UINT16)CHANNR)*100;
   \                     ??CrossCallReturnLabel_342:
   \   000081   500C         JNC     ??prepareData_6
   \   000083   90DF06       MOV     DPTR,#-0x20fa
   \   000086   12....       LCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_188:
   \   000089   7402         MOV     A,#0x2
   \   00008B   28           ADD     A,R0
   \   00008C   08           INC     R0
   \   00008D   800D         SJMP    ??prepareData_7
   1518                else if( page.isRelay  )           reportStatus += 1 + page.repeaterChannel*100;
   \                     ??prepareData_6:
   \   00008F   A2E5         MOV     C,0xE0 /* A   */.5
   \   000091   5013         JNC     ??prepareData_8
   \   000093   90....       MOV     DPTR,#(page + 192)
   \   000096   12....       LCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_189:
   \   000099   7401         MOV     A,#0x1
   \   00009B   28           ADD     A,R0
   \                     ??prepareData_7:
   \   00009C   08           INC     R0
   \   00009D   E4           CLR     A
   \   00009E   39           ADDC    A,R1
   \   00009F   F9           MOV     R1,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   28           ADD     A,R0
   \   0000A2   FE           MOV     R6,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   39           ADDC    A,R1
   \   0000A5   FF           MOV     R7,A
   1519                if( page.searchCommunication )     reportStatus += 4;
   \                     ??prepareData_8:
   \   0000A6   90....       MOV     DPTR,#(page + 194)
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   A2E7         MOV     C,0xE0 /* A   */.7
   \   0000AC   5008         JNC     ??prepareData_9
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2404         ADD     A,#0x4
   \   0000B1   FE           MOV     R6,A
   \   0000B2   EF           MOV     A,R7
   \   0000B3   3400         ADDC    A,#0x0
   \   0000B5   FF           MOV     R7,A
   1520                if( page.use250kbod )              reportStatus += 8;
   \                     ??prepareData_9:
   \   0000B6   90....       MOV     DPTR,#(page + 219)
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000BC   5008         JNC     ??prepareData_10
   \   0000BE   EE           MOV     A,R6
   \   0000BF   2408         ADD     A,#0x8
   \   0000C1   FE           MOV     R6,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   3400         ADDC    A,#0x0
   \   0000C5   FF           MOV     R7,A
   1521                if( isOnTestStand )                reportStatus += 16;
   \                     ??prepareData_10:
   \   0000C6   90....       MOV     DPTR,#isOnTestStand
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   6008         JZ      ??prepareData_11
   \   0000CC   EE           MOV     A,R6
   \   0000CD   2410         ADD     A,#0x10
   \   0000CF   FE           MOV     R6,A
   \   0000D0   EF           MOV     A,R7
   \   0000D1   3400         ADDC    A,#0x0
   \   0000D3   FF           MOV     R7,A
   1522                *((INT16 *)(ptr+14)) = reportStatus;
   \                     ??prepareData_11:
   \   0000D4   90....       MOV     DPTR,#(radioPktBuffer + 26)
   \   0000D7   EE           MOV     A,R6
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   EF           MOV     A,R7
   \   0000DB   F0           MOVX    @DPTR,A
   1523                /*
   1524                if(      mdm_rate1[0] == 0x0E )   *((INT16 *)(ptr+2)) = 3000;
   1525                else if( mdm_rate1[0] == 0x1E )   *((INT16 *)(ptr+2)) = 1000;
   1526                else                              *((INT16 *)(ptr+2)) = 2000;
   1527                */
   1528                //*((INT16 *)(ptr+12)) = cmdCount;//_slot;
   1529                //*((INT16 *)(ptr+12)) = decodeDelay; // temperatureProtectionDelay;
   1530                ptr += 16;
   1531                //*ptr++ = (BYTE) theRealOffset;    //   lastOff;       // 28
   1532                *ptr++ = lastRssi ? ((BYTE) theRealOffset) : 0x3F; //0x7F;
   \   0000DC   90....       MOV     DPTR,#lastRssi
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   7002         JNZ     ??prepareData_12
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \                     ??prepareData_12:
   \   0000E4   6007         JZ      ??prepareData_13
   \   0000E6   90....       MOV     DPTR,#theRealOffset
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FA           MOV     R2,A
   \   0000EB   8002         SJMP    ??prepareData_14
   \                     ??prepareData_13:
   \   0000ED   7A3F         MOV     R2,#0x3f
   \                     ??prepareData_14:
   \   0000EF   EA           MOV     A,R2
   \   0000F0   90....       MOV     DPTR,#(radioPktBuffer + 28)
   \   0000F3   F0           MOVX    @DPTR,A
   1533                if( !lastRssi ) lastRssi = prevRssi; else prevRssi = lastRssi;
   \   0000F4   90....       MOV     DPTR,#lastRssi
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   7002         JNZ     ??prepareData_15
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \                     ??prepareData_15:
   \   0000FC   700B         JNZ     ??prepareData_16
   \   0000FE   90....       MOV     DPTR,#prevRssi
   \   000101   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_177:
   \   000104   90....       MOV     DPTR,#lastRssi
   \   000107   8009         SJMP    ??prepareData_17
   \                     ??prepareData_16:
   \   000109   90....       MOV     DPTR,#lastRssi
   \   00010C   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_178:
   \   00010F   90....       MOV     DPTR,#prevRssi
   \                     ??prepareData_17:
   \   000112   12....       LCALL   ??Subroutine67_0
   1534                *ptr++ = (BYTE) ( lastRssi );    // 29
   \                     ??CrossCallReturnLabel_203:
   \   000115   90....       MOV     DPTR,#lastRssi
   \   000118   E0           MOVX    A,@DPTR
   \   000119   90....       MOV     DPTR,#(radioPktBuffer + 29)
   \   00011C   F0           MOVX    @DPTR,A
   1535                //*ptr++ = T3CC1;  // recalculated OC value for the test of the OC controlling algorithm
   1536                if( P1_4 ){
   \   00011D   A294         MOV     C,0x90.4
   \   00011F   5024         JNC     ??prepareData_18
   1537                    *ptr++ = (BYTE)   T3CC0;          
   \   000121   E5CD         MOV     A,0xcd
   \   000123   90....       MOV     DPTR,#(radioPktBuffer + 30)
   \   000126   F0           MOVX    @DPTR,A
   1538                    *ptr   = (BYTE)   theOC; // timer2oc( T3CC1 ); //T3CC1;         // 30 & 31
   \   000127   90....       MOV     DPTR,#theOC
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   90....       MOV     DPTR,#(radioPktBuffer + 31)
   \   00012E   F0           MOVX    @DPTR,A
   1539                    #ifdef MidString
   1540                      if( *ptr > ocShortCircuitLimit ) *ptr = ocShortCircuitLimit;
   \   00012F   90....       MOV     DPTR,#ocShortCircuitLimit
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C0E0         PUSH    A
   \   000135   90....       MOV     DPTR,#(radioPktBuffer + 31)
   \   000138   E0           MOVX    A,@DPTR
   \   000139   FA           MOV     R2,A
   \   00013A   D0E0         POP     A
   \   00013C   C3           CLR     C
   \   00013D   9A           SUBB    A,R2
   \   00013E   5015         JNC     ??prepareData_19
   \   000140   90....       MOV     DPTR,#ocShortCircuitLimit
   \   000143   800B         SJMP    ??prepareData_20
   1541                    #endif
   1542                }else{
   1543                    *ptr++ = page.ov;
   \                     ??prepareData_18:
   \   000145   90....       MOV     DPTR,#(page + 187)
   \   000148   E0           MOVX    A,@DPTR
   \   000149   90....       MOV     DPTR,#(radioPktBuffer + 30)
   \   00014C   F0           MOVX    @DPTR,A
   1544                    *ptr   = (BYTE)   setOC;   
   \   00014D   90....       MOV     DPTR,#setOC
   \                     ??prepareData_20:
   \   000150   E0           MOVX    A,@DPTR
   \   000151   90....       MOV     DPTR,#(radioPktBuffer + 31)
   \   000154   F0           MOVX    @DPTR,A
   1545                }
   1546                lastRssi = 0;
   \                     ??prepareData_19:
   \   000155   90....       MOV     DPTR,#lastRssi
   \   000158   E4           CLR     A
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   A3           INC     DPTR
   \                     ??prepareData_4:
   \   00015B   F0           MOVX    @DPTR,A
   1547            }else return;
   1548            prepareTxBuffer();        
   \   00015C                ; Setup parameters for call to function prepareTxBuffer
   \   00015C   12....       LCALL   prepareTxBuffer
   1549          }
   \                     ??prepareData_5:
   \   00015F   80..         SJMP    ?Subroutine119
   \   000161                REQUIRE _A_P1
   \   000161                REQUIRE T3CC0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F064       MOV     B,#0x64
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   90....       MOV     DPTR,#(radioPktBuffer + 5)
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function copyMac
   \   000004                ; Setup parameters for call to function copyMac
   \   000004   7A..         MOV     R2,#((radioPktBuffer + 6) & 0xff)
   \   000006   7B..         MOV     R3,#(((radioPktBuffer + 6) >> 8) & 0xff)
   \   000008   12....       LCALL   copyMac
   \   00000B   22           RET
   1550          /******************************************************************************
   1551          * Prepare scaling coeff to send
   1552          ******************************************************************************/
   1553          /*
   1554          void prepareSpecial( BYTE tag, BYTE *p ){
   1555          BYTE *ptr = radioPktBuffer;
   1556              //tag |= ( ((UINT16)page.netId) << 10 );
   1557              // *((UINT16 *)(ptr+4)) = tag;
   1558              *(ptr+5) = 3 | (page.netId << 2);
   1559              *(ptr+4) = tag;
   1560              //mymemcpy( ptr+4, (BYTE *)&tag, 2 );
   1561              copyMac( ptr+6 ); 
   1562              mymemcpy( ptr,    p,   4 ); 
   1563              mymemcpy( ptr+12, p+4, 20 );
   1564          }
   1565          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1566          void prepareSpecial( BYTE tag, BYTE *p ){
   \                     prepareSpecial:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1567          BYTE *ptr = radioPktBuffer;
   1568              mymemcpy( ptr,    p,   4 ); ptr+=4;
   \   00000B                ; Setup parameters for call to function mymemcpy
   \   00000B   7904         MOV     R1,#0x4
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   7A..         MOV     R2,#(radioPktBuffer & 0xff)
   \   000013   7B..         MOV     R3,#((radioPktBuffer >> 8) & 0xff)
   \   000015   12....       LCALL   mymemcpy
   1569              *ptr++ = tag;
   \   000018   E5..         MOV     A,?V0 + 0
   \   00001A   90....       MOV     DPTR,#(radioPktBuffer + 4)
   \   00001D   F0           MOVX    @DPTR,A
   1570              *ptr++ = 3 | (page.netId << 2);
   \   00001E   90....       MOV     DPTR,#(page + 2)
   \   000021   E0           MOVX    A,@DPTR
   \   000022   33           RLC     A
   \   000023   33           RLC     A
   \   000024   54FC         ANL     A,#0xfc
   \   000026   4403         ORL     A,#0x3
   \   000028   12....       LCALL   ?Subroutine78
   1571              copyMac( ptr ); 
   1572              mymemcpy( ptr+6, p+4, 20 );
   \                     ??CrossCallReturnLabel_237:
   \   00002B                ; Setup parameters for call to function mymemcpy
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   EE           MOV     A,R6
   \   00002E   2404         ADD     A,#0x4
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   3400         ADDC    A,#0x0
   \   000034   FD           MOV     R5,A
   \   000035   7A..         MOV     R2,#((radioPktBuffer + 12) & 0xff)
   \   000037   7B..         MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
   \   000039   12....       LCALL   mymemcpy
   1573          }
   \   00003C                REQUIRE ?Subroutine119
   \   00003C                ; // Fall through to label ?Subroutine119

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1574          void prepareCoeff(void){
   \                     prepareCoeff:
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   1575              BYTE idx;
   1576              UINT16 *ptrU16 = (UINT16 *)coefficients_buffer;
   \   000005   7E..         MOV     R6,#(coefficients_buffer & 0xff)
   \   000007   7F..         MOV     R7,#((coefficients_buffer >> 8) & 0xff)
   1577              INT16  *ptrI16 = (INT16 *)&(coefficients_buffer[12]);
   1578              for( idx = 0;  idx < 7;  idx++) if( idx != 4 ) *ptrU16 ++ = convU( 1E3 * page.linearK[ idx ][0] );  
   \   000009   75..00       MOV     ?V0 + 0,#0x0
   \   00000C   8006         SJMP    ??prepareCoeff_0
   \                     ??prepareCoeff_1:
   \   00000E   7404         MOV     A,#0x4
   \   000010   65..         XRL     A,?V0 + 0
   \   000012   6048         JZ      ??prepareCoeff_2
   \                     ??prepareCoeff_0:
   \   000014                ; Setup parameters for call to function convU
   \   000014   85....       MOV     ?V0 + 2,?V0 + 0
   \   000017   75..00       MOV     ?V0 + 3,#0x0
   \   00001A   7403         MOV     A,#0x3
   \   00001C   78..         MOV     R0,#?V0 + 2
   \   00001E   12....       LCALL   ?S_SHL
   \   000021   E5..         MOV     A,?V0 + 2
   \   000023   24..         ADD     A,#((page + 40) & 0xff)
   \   000025   F582         MOV     DPL,A
   \   000027   E5..         MOV     A,?V0 + 3
   \   000029   34..         ADDC    A,#(((page + 40) >> 8) & 0xff)
   \   00002B   F583         MOV     DPH,A
   \   00002D   78..         MOV     R0,#?V0 + 4
   \   00002F   12....       LCALL   ?L_MOV_X
   \   000032   90....       MOV     DPTR,#__Constant_447a0000
   \   000035   78..         MOV     R0,#?V0 + 8
   \   000037   12....       LCALL   ?L_MOV_X
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   79..         MOV     R1,#?V0 + 8
   \   00003E   12....       LCALL   ?FLT_MUL
   \   000041   AA..         MOV     R2,?V0 + 4
   \   000043   AB..         MOV     R3,?V0 + 5
   \   000045   AC..         MOV     R4,?V0 + 6
   \   000047   AD..         MOV     R5,?V0 + 7
   \   000049   12....       LCALL   convU
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   12....       LCALL   ??Subroutine110_0
   \                     ??CrossCallReturnLabel_318:
   \   000053   EE           MOV     A,R6
   \   000054   2402         ADD     A,#0x2
   \   000056   EF           MOV     A,R7
   \   000057   3400         ADDC    A,#0x0
   \   000059   0E           INC     R6
   \   00005A   0E           INC     R6
   \   00005B   FF           MOV     R7,A
   \                     ??prepareCoeff_2:
   \   00005C   05..         INC     ?V0 + 0
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   C3           CLR     C
   \   000061   9407         SUBB    A,#0x7
   \   000063   40A9         JC      ??prepareCoeff_1
   1579              *ptrI16++ = convS( page.linearK[0][1] );
   \   000065                ; Setup parameters for call to function convS
   \   000065   90....       MOV     DPTR,#(page + 44)
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?L_MOV_X
   \   00006D   AA..         MOV     R2,?V0 + 0
   \   00006F   AB..         MOV     R3,?V0 + 1
   \   000071   AC..         MOV     R4,?V0 + 2
   \   000073   AD..         MOV     R5,?V0 + 3
   \   000075   12....       LCALL   convS
   \   000078   90....       MOV     DPTR,#(coefficients_buffer + 12)
   \   00007B   12....       LCALL   ??Subroutine110_0
   1580              *ptrI16++ = convS( page.linearK[2][1] );
   \                     ??CrossCallReturnLabel_319:
   \   00007E                ; Setup parameters for call to function convS
   \   00007E   90....       MOV     DPTR,#(page + 60)
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?L_MOV_X
   \   000086   AA..         MOV     R2,?V0 + 0
   \   000088   AB..         MOV     R3,?V0 + 1
   \   00008A   AC..         MOV     R4,?V0 + 2
   \   00008C   AD..         MOV     R5,?V0 + 3
   \   00008E   12....       LCALL   convS
   \   000091   90....       MOV     DPTR,#(coefficients_buffer + 14)
   \   000094   12....       LCALL   ??Subroutine110_0
   1581              *ptrI16++ = convS( page.linearK[5][1] );
   \                     ??CrossCallReturnLabel_320:
   \   000097                ; Setup parameters for call to function convS
   \   000097   90....       MOV     DPTR,#(page + 84)
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?L_MOV_X
   \   00009F   AA..         MOV     R2,?V0 + 0
   \   0000A1   AB..         MOV     R3,?V0 + 1
   \   0000A3   AC..         MOV     R4,?V0 + 2
   \   0000A5   AD..         MOV     R5,?V0 + 3
   \   0000A7   12....       LCALL   convS
   \   0000AA   90....       MOV     DPTR,#(coefficients_buffer + 16)
   \   0000AD   12....       LCALL   ??Subroutine110_0
   1582              *ptrI16++ = convS( page.linearK[6][1] );
   \                     ??CrossCallReturnLabel_321:
   \   0000B0                ; Setup parameters for call to function convS
   \   0000B0   90....       MOV     DPTR,#(page + 92)
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?L_MOV_X
   \   0000B8   AA..         MOV     R2,?V0 + 0
   \   0000BA   AB..         MOV     R3,?V0 + 1
   \   0000BC   AC..         MOV     R4,?V0 + 2
   \   0000BE   AD..         MOV     R5,?V0 + 3
   \   0000C0   12....       LCALL   convS
   \   0000C3   90....       MOV     DPTR,#(coefficients_buffer + 18)
   \   0000C6   12....       LCALL   ??Subroutine110_0
   1583              *ptrI16++ = convS( page.dFk[3] );    
   \                     ??CrossCallReturnLabel_322:
   \   0000C9                ; Setup parameters for call to function convS
   \   0000C9   90....       MOV     DPTR,#(page + 24)
   \   0000CC   78..         MOV     R0,#?V0 + 0
   \   0000CE   12....       LCALL   ?L_MOV_X
   \   0000D1   AA..         MOV     R2,?V0 + 0
   \   0000D3   AB..         MOV     R3,?V0 + 1
   \   0000D5   AC..         MOV     R4,?V0 + 2
   \   0000D7   AD..         MOV     R5,?V0 + 3
   \   0000D9   12....       LCALL   convS
   \   0000DC   90....       MOV     DPTR,#(coefficients_buffer + 20)
   \   0000DF   12....       LCALL   ??Subroutine110_0
   1584              coefficients_buffer[ 22 ] = (BYTE) T3CC0; 
   \                     ??CrossCallReturnLabel_323:
   \   0000E2   E5CD         MOV     A,0xcd
   \   0000E4   90....       MOV     DPTR,#(coefficients_buffer + 22)
   \   0000E7   F0           MOVX    @DPTR,A
   1585              coefficients_buffer[ 23 ] = (BYTE) theOC;
   \   0000E8   90....       MOV     DPTR,#theOC
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   90....       MOV     DPTR,#(coefficients_buffer + 23)
   \   0000EF   F0           MOVX    @DPTR,A
   1586              prepareSpecial( 0xEC, coefficients_buffer ); 
   \   0000F0                ; Setup parameters for call to function prepareSpecial
   \   0000F0   7A..         MOV     R2,#(coefficients_buffer & 0xff)
   \   0000F2   7B..         MOV     R3,#((coefficients_buffer >> 8) & 0xff)
   \   0000F4   79EC         MOV     R1,#-0x14
   \   0000F6   12....       LCALL   prepareSpecial
   1587          }
   \   0000F9   02....       LJMP    ?Subroutine109
   \   0000FC                REQUIRE T3CC0
   1588          /*
   1589          void prepareFlashCheck(void){
   1590          static BYTE arr[ 24 ];
   1591          BYTE k = (reportFlashCheck-1) / calibrationRepeat ;
   1592          BYTE *flashPtr = (BYTE *)( page.imageAddr & 0xFF00 ) + ( k ) * 0xC00; //24 * 8 * 16;
   1593          BYTE bytes, bits, cnt;
   1594              for( bytes = 0; bytes < 24; bytes++ ){
   1595                  arr[ bytes ] = 0xFF;
   1596                  for( bits = 0; bits < 8; bits++ ){
   1597                      cnt = 16; do { if( flashPtr[--cnt] != 0xFF ){ arr[ bytes ] ^= ( 1 << bits );  break; } }while( cnt );
   1598                      flashPtr += 16;
   1599                  }
   1600              }
   1601              prepareSpecial( 0xFB + (  k ), arr );
   1602          }
   1603          */
   1604          /*
   1605          void prepareScaling(void){ 
   1606          BYTE k = (reportScaling-1) / calibrationRepeat;
   1607              page.prepAddr = (UINT16)(&prepareScaling);
   1608              prepareSpecial( 0xED + k, (from_flash ? (BYTE *)PAGEADDR : (BYTE *)&page) + k * 24 ); 
   1609          }
   1610          */
   1611          //________________________________________________________________________________

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1612          void prepareScaling(void){ 
   \                     prepareScaling:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   1613          BYTE k = (reportScaling-1) / calibrationRepeat;
   \   000005   90....       MOV     DPTR,#reportScaling
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   28           ADD     A,R0
   \   00000D   18           DEC     R0
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   3400         ADDC    A,#0x0
   \   000012   F9           MOV     R1,A
   \   000013   90....       MOV     DPTR,#calibrationRepeat
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FA           MOV     R2,A
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ?S_DIV_MOD
   \   00001D   E8           MOV     A,R0
   \   00001E   FC           MOV     R4,A
   1614              page.prepAddr = (UINT16)(&prepareScaling);
   \   00001F   90....       MOV     DPTR,#(page + 220)
   \   000022   74..         MOV     A,#(prepareScaling & 0xff)
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#((prepareScaling >> 8) & 0xff)
   \   000028   F0           MOVX    @DPTR,A
   1615              prepareSpecial( 0xED + k, base_ptr + k * 24 ); 
   \   000029                ; Setup parameters for call to function prepareSpecial
   \   000029   EC           MOV     A,R4
   \   00002A   75F018       MOV     B,#0x18
   \   00002D   A4           MUL     AB
   \   00002E   F8           MOV     R0,A
   \   00002F   A9F0         MOV     R1,B
   \   000031   90....       MOV     DPTR,#base_ptr
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   FA           MOV     R2,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   39           ADDC    A,R1
   \   00003A   FB           MOV     R3,A
   \   00003B   74ED         MOV     A,#-0x13
   \   00003D   2C           ADD     A,R4
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   prepareSpecial
   1616          }
   \   000042   02....       LJMP    ?Subroutine119
   1617          /*
   1618          void prepareScaling(void){
   1619          BYTE *ptr = radioPktBuffer;
   1620          UINT16 tag = 1000 + reportScaling;
   1621          //BYTE flg;
   1622              mymemcpy( ptr+4, (BYTE *)&tag, 2 );
   1623              copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6);  // mac   
   1624              switch( reportScaling ){
   1625                  case 7:
   1626                      mymemcpy( ptr, (BYTE *)&page.defCycles2SoftKick, 4 );
   1627                      ptr+=12;
   1628                      page.prepAddr = (UINT16)(&prepareScaling);
   1629                      mymemcpy( ptr, (BYTE *)&page.defCycles2HardKick, 12 );
   1630                  break;
   1631                  case 6:
   1632                      mymemcpy( ptr, (BYTE *)&page.defCyclesToStep10Channel, 4 );                                                     // 4
   1633                      ptr += 12;                                                                                                // 12  
   1634                      // edAddr, gwAddr, repeaterChannel, repeaterPower, flags, showState, Critical500, Critical10, 
   1635                      // version, cyclesTo500, cyclesTo10, cyclesToStep500,  
   1636                      mymemcpy( ptr, (BYTE *)&page.edAddr, 20 );  
   1637          
   1638                      //ptr += 12; // 4*sizeof(UINT16);
   1639                      //mymemcpy( ptr, (BYTE *)(&page.version),   2);       ptr += 2;                                              // 22
   1640                      //mymemcpy( ptr, (BYTE *)(&page.defCyclesTo500), 8);  ptr += 8;                                              // 30
   1641                  break;
   1642                  case 5:
   1643                      // *ptr++ = page.mpp;     *ptr++ = page.module;      *ptr++ = page.ov;       *ptr++ = page.oc;               // 4
   1644                      mymemcpy( ptr, (BYTE *)&page.mpp, 4 );                                                                      // 4
   1645                      
   1646                      ptr += 12;                                                                                                 // 12
   1647                      *ptr++ = page.channel; *ptr++ = page.radioPower;  *ptr++ = page.azimuth;  *ptr++ = page.positionInString; // 16
   1648                      *ptr++ = page.netId;   *ptr++ = page.myBunch;                                                             // 18
   1649                      mymemcpy( ptr, (BYTE *)(&page.installDate), 4 );  ptr += 4;                                                 // 22
   1650          
   1651                      mymemcpy( ptr, (BYTE *)(&page.groupId),   2);     ptr += 2;                                                 // 24
   1652                      mymemcpy( ptr, (BYTE *)(&page.elevation), 8);
   1653                  break;
   1654                  case 4: 
   1655                      mymemcpy( ptr, (BYTE * )page.dFk, 4 );    ptr += 12; 
   1656                      mymemcpy( ptr, ((BYTE *)page.dFk)+4, 12); ptr += 12;
   1657                      mymemcpy( ptr, (BYTE * )page.vrefPolynom, 8); 
   1658                  break;
   1659                  case 3:
   1660                      mymemcpy( ptr, ((BYTE * )page.vrefPolynom)+8, 4); ptr += 12;
   1661                      mymemcpy( ptr, (BYTE * )page.linearK,     20); 
   1662                  break;
   1663                  case 2:
   1664                      mymemcpy( ptr, ((BYTE * )page.linearK)+20, 4); ptr+=12;
   1665                      mymemcpy( ptr, ((BYTE * )page.linearK)+24, 20); 
   1666                  break;
   1667                  case 1:
   1668                      mymemcpy( ptr, ((BYTE * )page.linearK)+44, 4);       ptr+= 12;
   1669                      // VinTurnOn, VinShutOff, VinDisableRadio, tkCurrent, tkPower
   1670                      mymemcpy( ptr, ((BYTE * )&page.VinTurnOn), 20); 
   1671                  break;
   1672              }        
   1673          }
   1674          */
   1675          /******************************************************************************
   1676          * Prepare request to join network
   1677          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1678          void prepareJoinRequest(void){  
   \                     prepareJoinRequest:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1679          BYTE *ptr  = radioPktBuffer;
   1680              //mymemset( ptr, 0xFF, 4); ptr+=4; 
   1681              *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF;
   \   000004   74FF         MOV     A,#-0x1
   \   000006   90....       MOV     DPTR,#radioPktBuffer
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#(radioPktBuffer + 1)
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   90....       MOV     DPTR,#(radioPktBuffer + 2)
   \   000011   F0           MOVX    @DPTR,A
   \   000012   90....       MOV     DPTR,#(radioPktBuffer + 3)
   \   000015   F0           MOVX    @DPTR,A
   1682              //mymemcpy( ptr, (BYTE *)&utc, 4 );     mymemcpy( ptr+4, (BYTE *)&ms, 2 ); 
   1683              mymemcpy( ptr, (BYTE *)&utc, 6 ); 
   \   000016                ; Setup parameters for call to function mymemcpy
   \   000016   7906         MOV     R1,#0x6
   \   000018   7C..         MOV     R4,#(utc & 0xff)
   \   00001A   7D..         MOV     R5,#((utc >> 8) & 0xff)
   \   00001C   7A..         MOV     R2,#((radioPktBuffer + 4) & 0xff)
   \   00001E   7B..         MOV     R3,#(((radioPktBuffer + 4) >> 8) & 0xff)
   \   000020   12....       LCALL   mymemcpy
   1684              copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6 );
   \   000023                ; Setup parameters for call to function copyMac
   \   000023   7A..         MOV     R2,#((radioPktBuffer + 10) & 0xff)
   \   000025   7B..         MOV     R3,#(((radioPktBuffer + 10) >> 8) & 0xff)
   \   000027   12....       LCALL   copyMac
   1685              prepareTxBuffer();      
   \   00002A                ; Setup parameters for call to function prepareTxBuffer
   \   00002A   12....       LCALL   prepareTxBuffer
   1686              radioPktBufferTx[0] = PACKET_LENGTH_GW_2;
   \   00002D   7412         MOV     A,#0x12
   \   00002F   90....       MOV     DPTR,#radioPktBufferTx
   \   000032   02....       LJMP    ?Subroutine113
   1687          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1688          void quartz(void){
   \                     quartz:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   1689          BYTE counter = 127;
   \   000005   7E7F         MOV     R6,#0x7f
   1690          static BOOL q = 0;
   1691                if( q ) return; else q = 1;
   \   000007   90....       MOV     DPTR,#??q
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   7024         JNZ     ??quartz_0
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   1692                if( rcgen ) return;
   \   000010   90....       MOV     DPTR,#rcgen
   \   000013   E0           MOVX    A,@DPTR
   \   000014   701B         JNZ     ??quartz_0
   1693                SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
   \   000016   53BEFB       ANL     0xbe,#0xfb
   \   000019   8005         SJMP    ??quartz_1
   1694                while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
   \                     ??quartz_2:
   \   00001B                ; Setup parameters for call to function halWait
   \   00001B   7902         MOV     R1,#0x2
   \   00001D   12....       LCALL   halWait
   \                     ??quartz_1:
   \   000020   E5BE         MOV     A,0xbe
   \   000022   A2E6         MOV     C,0xE0 /* A   */.6
   \   000024   4004         JC      ??quartz_3
   \   000026   EE           MOV     A,R6
   \   000027   1E           DEC     R6
   \   000028   70F1         JNZ     ??quartz_2
   1695                asm("NOP");
   \                     ??quartz_3:
   \   00002A   00           NOP
   1696                //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
   1697                CLKCON = 0x89;  
   \   00002B   75C689       MOV     0xc6,#-0x77
   1698                SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
   \   00002E   43BE04       ORL     0xbe,#0x4
   1699          }
   \                     ??quartz_0:
   \   000031   02....       LJMP    ?Subroutine119
   \   000034                REQUIRE SLEEP
   \   000034                REQUIRE CLKCON

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??q:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1700          /******************************************************************************
   1701          * Send the previously prepared data package
   1702          ******************************************************************************/
   1703          extern DMA_DESC dmaConfig[3]; 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1704          void sendData(BYTE *buffer, BOOL isRepeater ){  
   \                     sendData:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1705              //if( page.fuseComm ) return;
   1706              if( ((buffer[0] != PACKET_LENGTH_ED) && (buffer[0] != PACKET_LENGTH_GW_2)) || txDisabled  )  return; 
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FC           MOV     R4,A
   \   00000A   7422         MOV     A,#0x22
   \   00000C   6C           XRL     A,R4
   \   00000D   6005         JZ      ??sendData_0
   \   00000F   7412         MOV     A,#0x12
   \   000011   6C           XRL     A,R4
   \   000012   703B         JNZ     ??sendData_1
   \                     ??sendData_0:
   \   000014   90....       MOV     DPTR,#txDisabled
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7035         JNZ     ??sendData_1
   1707              RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \   00001A   75E104       MOV     0xe1,#0x4
   \   00001D   90....       MOV     DPTR,#si
   \   000020   E0           MOVX    A,@DPTR
   \   000021   243A         ADD     A,#0x3a
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FD           MOV     R5,A
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   74F0         MOV     A,#-0x10
   \   00002F   F0           MOVX    @DPTR,A
   1708              //setupTxBuffer( buffer );
   1709              SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, buffer );
   \   000030   EB           MOV     A,R3
   \   000031   90....       MOV     DPTR,#(dmaConfig + 8)
   \   000034   F0           MOVX    @DPTR,A
   \   000035   EA           MOV     A,R2
   \   000036   90....       MOV     DPTR,#(dmaConfig + 9)
   \   000039   F0           MOVX    @DPTR,A
   1710              setupRepeater( isRepeater );
   \   00003A                ; Setup parameters for call to function setupRepeater
   \   00003A   12....       LCALL   setupRepeater
   1711              /*
   1712              if( page.is500Always || (page.isRelay && isRepeater) ){
   1713                                                                       atomicChange( CheckFlag, 5*TICKS_IN_MS );
   1714                                                                     //if( page.use250kbod ) need_wiggle = TRUE; 
   1715              }else if( page.use12kbod && page.useFEC )                atomicChange( CheckFlag, 2*_slot - TICKS_IN_MS );
   1716              else                                                     atomicChange( CheckFlag, _slot   - TICKS_IN_MS );
   1717              */
   1718              //quartz();
   1719              //INT_GLOBAL_ENABLE(INT_OFF);
   1720                  si->radioMode = RADIO_MODE_TX;        
   \   00003D   90....       MOV     DPTR,#si
   \   000040   E0           MOVX    A,@DPTR
   \   000041   243A         ADD     A,#0x3a
   \   000043   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_109:
   \   000046   7410         MOV     A,#0x10
   \   000048   F0           MOVX    @DPTR,A
   1721                  // Send the packet
   1722                  DMAARM = DMAARM_CHANNEL1;     // Arm DMA channel 1
   \   000049   75D602       MOV     0xd6,#0x2
   1723                  RFST   = STROBE_TX;            // Switch radio to TX
   \   00004C   75E103       MOV     0xe1,#0x3
   1724              //INT_GLOBAL_ENABLE(INT_ON); 
   1725          }
   \                     ??sendData_1:
   \   00004F   02....       LJMP    ??Subroutine113_0
   \   000052                REQUIRE DMAARM
   \   000052                REQUIRE RFST
   1726          /******************************************************************************
   1727          * @fn  25*.84
   1728          WPackage
   1729          * @brief       This function makes appropriate actions after receiving message from Gateway
   1730          * Parameters:
   1731          * @return void
   1732          ******************************************************************************/
   1733          #define NDEV_MASK   0x1F
   1734          #define JOIN_MASK   0x80
   1735          #define HOP_MASK    0x40
   1736          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1737          static UINT32 utcLocal = 0;
   \                     utcLocal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1738          static UINT16 msLocal  = 0;
   \                     msLocal:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1739          
   1740          extern INT16 perRssiOffset;

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1741          void parseGWPackage(void){
   \                     parseGWPackage:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   1742          static BYTE bunch, plen;
   1743          signed char o = FREQEST, sh = FSCTRL0;
   \   000005   90DF38       MOV     DPTR,#-0x20c8
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FF           MOV     R7,A
   \   00000A   90DF08       MOV     DPTR,#-0x20f8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   1744          INT16 shift, networkDelay;
   1745          BYTE tmp;
   1746          //UINT16 temperatureProtectionDelay;
   1747          BOOL goodForCommands = FALSE;
   1748          //BOOL newProtocol;
   1749              //if( page.fuseComm ) return;
   1750              rc(); was_listening =  FALSE;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#was_listening
   \   000014   F0           MOVX    @DPTR,A
   1751              ticks2ProcessCmd = 0;    
   \   000015   90....       MOV     DPTR,#ticks2ProcessCmd
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
   1752              plen = radioPktBufferRx[0];
   \   00001B   90....       MOV     DPTR,#radioPktBufferRx
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#??plen
   \   000022   12....       LCALL   ?Subroutine77
   1753              /*
   1754              if( ( ( plen != PACKET_LENGTH ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
   1755                  atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
   1756                  return;
   1757              }
   1758              */
   1759              if( ( 0 == ( radioPktBufferRx[ plen + 2 ] & 0x80 ) ) || ( ( plen != PACKET_LENGTH_GW ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
   \                     ??CrossCallReturnLabel_235:
   \   000025   5460         ANL     A,#0x60
   \   000027   FA           MOV     R2,A
   \   000028   90....       MOV     DPTR,#??plen
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   24..         ADD     A,#((radioPktBufferRx + 2) & 0xff)
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   34..         ADDC    A,#(((radioPktBufferRx + 2) >> 8) & 0xff)
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   A2E7         MOV     C,0xE0 /* A   */.7
   \   000038   500D         JNC     ??parseGWPackage_0
   \   00003A   90....       MOV     DPTR,#??plen
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6422         XRL     A,#0x22
   \   000040   601C         JZ      ??parseGWPackage_1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6412         XRL     A,#0x12
   \   000045   6017         JZ      ??parseGWPackage_1
   1760                  //atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
   1761                  if( page.isRelay && (!page.is500Always) ) setupRepeater( got_gw );  else setupRepeater( FALSE ); 
   \                     ??parseGWPackage_0:
   \   000047   7420         MOV     A,#0x20
   \   000049   6A           XRL     A,R2
   \   00004A   7007         JNZ     ??parseGWPackage_2
   \                     ??parseGWPackage_3:
   \   00004C                ; Setup parameters for call to function setupRepeater
   \   00004C   90....       MOV     DPTR,#got_gw
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   8002         SJMP    ??parseGWPackage_4
   \                     ??parseGWPackage_2:
   \   000053                ; Setup parameters for call to function setupRepeater
   \   000053   7900         MOV     R1,#0x0
   \                     ??parseGWPackage_4:
   \   000055   12....       LCALL   setupRepeater
   1762                  receive();
   \   000058                ; Setup parameters for call to function receive
   \   000058   12....       LCALL   receive
   1763                  return;
   \   00005B   02....       LJMP    ??parseGWPackage_5
   1764              }
   1765              
   1766              if( page.isRelay && (!page.is500Always) && ( radioPktBufferRx[1] == page.gwAddr ) && (ADDR == page.gwAddr) ){ 
   \                     ??parseGWPackage_1:
   \   00005E   90....       MOV     DPTR,#(radioPktBufferRx + 1)
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FB           MOV     R3,A
   \   000063   7420         MOV     A,#0x20
   \   000065   6A           XRL     A,R2
   \   000066   701B         JNZ     ??parseGWPackage_6
   \   000068   90....       MOV     DPTR,#(page + 191)
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FC           MOV     R4,A
   \   00006D   6B           XRL     A,R3
   \   00006E   7013         JNZ     ??parseGWPackage_6
   \   000070   90DF05       MOV     DPTR,#-0x20fb
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6C           XRL     A,R4
   \   000075   700C         JNZ     ??parseGWPackage_6
   1767                  sendData( radioPktBufferRx, FALSE );  return;
   \   000077                ; Setup parameters for call to function sendData
   \   000077   7900         MOV     R1,#0x0
   \   000079   7A..         MOV     R2,#(radioPktBufferRx & 0xff)
   \   00007B   7B..         MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
   \   00007D   12....       LCALL   sendData
   \   000080   02....       LJMP    ??parseGWPackage_5
   1768              }else if( radioPktBufferRx[1] == page.edAddr ){
   \                     ??parseGWPackage_6:
   \   000083   90....       MOV     DPTR,#(page + 190)
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6B           XRL     A,R3
   \   000088   6003         JZ      $+5
   \   00008A   02....       LJMP    ??parseGWPackage_7
   1769                  goodForCommands = ( 0 != (PKTSTATUS&0x80) ); 
   \   00008D   90DF3C       MOV     DPTR,#-0x20c4
   \   000090   E0           MOVX    A,@DPTR
   \   000091   A2E7         MOV     C,0xE0 /* A   */.7
   \   000093   5004         JNC     ??parseGWPackage_8
   \   000095   D2F0         SETB    B.0
   \   000097   8002         SJMP    ??parseGWPackage_9
   \                     ??parseGWPackage_8:
   \   000099   C2F0         CLR     B.0
   \                     ??parseGWPackage_9:
   \   00009B   A2F0         MOV     C,B.0
   \   00009D   E4           CLR     A
   \   00009E   92E0         MOV     0xE0 /* A   */.0,C
   \   0000A0   FE           MOV     R6,A
   1770                  //P1_1 ^= 1;
   1771                  //decodeDelay = *((BYTE *)0xF538);
   1772                  if( (!page.is500Always) && page.isRelay ) sendData( radioPktBufferRx, TRUE );  
   \   0000A1   7420         MOV     A,#0x20
   \   0000A3   6A           XRL     A,R2
   \   0000A4   7009         JNZ     ??parseGWPackage_10
   \   0000A6                ; Setup parameters for call to function sendData
   \   0000A6   7901         MOV     R1,#0x1
   \   0000A8   7A..         MOV     R2,#(radioPktBufferRx & 0xff)
   \   0000AA   7B..         MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
   \   0000AC   12....       LCALL   sendData
   1773                  decodeDelay = *((BYTE *)0xF538);
   \                     ??parseGWPackage_10:
   \   0000AF   90F538       MOV     DPTR,#-0xac8
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   90....       MOV     DPTR,#decodeDelay
   \   0000B6   12....       LCALL   ?Subroutine117
   1774                  loadIV( page.curIV );  decode( (plen-2), (char *)(radioPktBufferRx+2), (char *)radioPktBuffer );
   \                     ??CrossCallReturnLabel_382:
   \   0000B9                ; Setup parameters for call to function load
   \   0000B9   7A..         MOV     R2,#((page + 112) & 0xff)
   \   0000BB   7B..         MOV     R3,#(((page + 112) >> 8) & 0xff)
   \   0000BD   7906         MOV     R1,#0x6
   \   0000BF   12....       LCALL   ??Subroutine80_1
   \                     ??CrossCallReturnLabel_246:
   \   0000C2                ; Setup parameters for call to function code
   \   0000C2   75....       MOV     ?V0 + 2,#(radioPktBuffer & 0xff)
   \   0000C5   75....       MOV     ?V0 + 3,#((radioPktBuffer >> 8) & 0xff)
   \   0000C8   78..         MOV     R0,#?V0 + 2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   7C..         MOV     R4,#((radioPktBufferRx + 2) & 0xff)
   \   0000CF   7D..         MOV     R5,#(((radioPktBufferRx + 2) >> 8) & 0xff)
   \   0000D1   90....       MOV     DPTR,#??plen
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   24FE         ADD     A,#-0x2
   \   0000D7   FA           MOV     R2,A
   \   0000D8   7902         MOV     R1,#0x2
   \   0000DA   12....       LCALL   `code`
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   1775                  
   1776                  // for SDAG debug
   1777                  //mymemcpy( (BYTE *)radioPktBuffer, (BYTE *)(radioPktBufferRx+2), (plen-2));
   1778                  
   1779                  bunch = radioPktBuffer[0]; ndev = radioPktBuffer[1]; 
   \   0000E2   90....       MOV     DPTR,#radioPktBuffer
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   90....       MOV     DPTR,#??bunch
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA   90....       MOV     DPTR,#(radioPktBuffer + 1)
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   90....       MOV     DPTR,#ndev
   \   0000F1   F0           MOVX    @DPTR,A
   1780                  //mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 4 );   mymemcpy( (BYTE *)&msLocal, radioPktBuffer+6, 2);
   1781                  mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 6) ; //ndev& 0x20 ? 5 : 6 );
   \   0000F2                ; Setup parameters for call to function mymemcpy
   \   0000F2   7906         MOV     R1,#0x6
   \   0000F4   7C..         MOV     R4,#((radioPktBuffer + 2) & 0xff)
   \   0000F6   7D..         MOV     R5,#(((radioPktBuffer + 2) >> 8) & 0xff)
   \   0000F8   7A..         MOV     R2,#(utcLocal & 0xff)
   \   0000FA   7B..         MOV     R3,#((utcLocal >> 8) & 0xff)
   \   0000FC   12....       LCALL   mymemcpy
   1782                  if( 
   1783                      ((ndev & NDEV_MASK ) <= 16) && ( msLocal < 1000 ) &&
   1784                      //((utcLocal > utcLast) || ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4 )==0 && msLocal>msLast)) // ver G
   1785                      ((utcLocal > utcLast) || ( (mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal != msLast) ) ) //protects ONLY from replay attack
   1786                  ){
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   541F         ANL     A,#0x1f
   \   000102   C3           CLR     C
   \   000103   9411         SUBB    A,#0x11
   \   000105   4003         JC      $+5
   \   000107   02....       LJMP    ??parseGWPackage_7
   \   00010A   90....       MOV     DPTR,#msLocal
   \   00010D   C3           CLR     C
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   94E8         SUBB    A,#-0x18
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   9403         SUBB    A,#0x3
   \   000115   4003         JC      $+5
   \   000117   02....       LJMP    ??parseGWPackage_7
   \   00011A   90....       MOV     DPTR,#utcLocal
   \   00011D   78..         MOV     R0,#?V0 + 4
   \   00011F   12....       LCALL   ?L_MOV_X
   \   000122   7583..       MOV     DPH,#((utcLast >> 8) & 0xff)
   \   000125   7582..       MOV     DPL,#(utcLast & 0xff)
   \   000128   78..         MOV     R0,#?V0 + 4
   \   00012A   12....       LCALL   ?UL_GT_X
   \   00012D   4028         JC      ??parseGWPackage_11
   \   00012F                ; Setup parameters for call to function mymemcmp
   \   00012F   7904         MOV     R1,#0x4
   \   000131   7C..         MOV     R4,#(utcLast & 0xff)
   \   000133   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000135   7A..         MOV     R2,#(utcLocal & 0xff)
   \   000137   7B..         MOV     R3,#((utcLocal >> 8) & 0xff)
   \   000139   12....       LCALL   mymemcmp
   \   00013C   E9           MOV     A,R1
   \   00013D   6003         JZ      $+5
   \   00013F   02....       LJMP    ??parseGWPackage_7
   \   000142   90....       MOV     DPTR,#msLocal
   \   000145   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_179:
   \   000148   90....       MOV     DPTR,#msLast
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   68           XRL     A,R0
   \   00014D   7003         JNZ     ??parseGWPackage_12
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   69           XRL     A,R1
   \                     ??parseGWPackage_12:
   \   000152   7003         JNZ     $+5
   \   000154   02....       LJMP    ??parseGWPackage_7
   1787                      BYTE goodTime = ( (utcLocal > utcLast) || ( ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal > msLast) ) ); 
   \                     ??parseGWPackage_11:
   \   000157   90....       MOV     DPTR,#utcLocal
   \   00015A   78..         MOV     R0,#?V0 + 4
   \   00015C   12....       LCALL   ?L_MOV_X
   \   00015F   7583..       MOV     DPH,#((utcLast >> 8) & 0xff)
   \   000162   7582..       MOV     DPL,#(utcLast & 0xff)
   \   000165   78..         MOV     R0,#?V0 + 4
   \   000167   12....       LCALL   ?UL_GT_X
   \   00016A   4021         JC      ??parseGWPackage_13
   \   00016C                ; Setup parameters for call to function mymemcmp
   \   00016C   7904         MOV     R1,#0x4
   \   00016E   7C..         MOV     R4,#(utcLast & 0xff)
   \   000170   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000172   7A..         MOV     R2,#(utcLocal & 0xff)
   \   000174   7B..         MOV     R3,#((utcLocal >> 8) & 0xff)
   \   000176   12....       LCALL   mymemcmp
   \   000179   E9           MOV     A,R1
   \   00017A   7015         JNZ     ??parseGWPackage_14
   \   00017C   90....       MOV     DPTR,#msLocal
   \   00017F   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_180:
   \   000182   7583..       MOV     DPH,#((msLast >> 8) & 0xff)
   \   000185   7582..       MOV     DPL,#(msLast & 0xff)
   \   000188   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_278:
   \   00018B   5004         JNC     ??parseGWPackage_14
   \                     ??parseGWPackage_13:
   \   00018D   7A01         MOV     R2,#0x1
   \   00018F   8002         SJMP    ??parseGWPackage_15
   \                     ??parseGWPackage_14:
   \   000191   7A00         MOV     R2,#0x0
   \                     ??parseGWPackage_15:
   \   000193   8A..         MOV     ?V0 + 2,R2
   1788                      //P1_1 ^= 1;
   1789                      //newProtocol = radioPktBufferRx[ plen ] & 1;
   1790                      //temperatureProtectionDelay = computeTI( si->packetReceived );
   1791                      temperatureProtectionDelay = *((BYTE *)0xF538);
   \   000195   90F538       MOV     DPTR,#-0xac8
   \   000198   E0           MOVX    A,@DPTR
   \   000199   90....       MOV     DPTR,#temperatureProtectionDelay
   \   00019C   12....       LCALL   ?Subroutine117
   1792                      if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
   \                     ??CrossCallReturnLabel_383:
   \   00019F   12....       LCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_38:
   \   0001A2   4005         JC      ??parseGWPackage_16
   \   0001A4   E4           CLR     A
   \   0001A5   90....       MOV     DPTR,#wasAHardResetOrPowerOn
   \   0001A8   F0           MOVX    @DPTR,A
   1793          
   1794                      //lastRssi = convertRssiByte( (radioPktBufferRx[ plen + 1 ]) );
   1795                      tmp = radioPktBufferRx[ plen + 1 ];
   \                     ??parseGWPackage_16:
   \   0001A9   90....       MOV     DPTR,#??plen
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   24..         ADD     A,#((radioPktBufferRx + 1) & 0xff)
   \   0001AF   F582         MOV     DPL,A
   \   0001B1   E4           CLR     A
   \   0001B2   34..         ADDC    A,#(((radioPktBufferRx + 1) >> 8) & 0xff)
   \   0001B4   F583         MOV     DPH,A
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F5..         MOV     ?V0 + 4,A
   1796                      if(tmp < 128)   lastRssi = (tmp >> 1) - perRssiOffset;
   \   0001B9   C3           CLR     C
   \   0001BA   9480         SUBB    A,#-0x80
   \   0001BC   5010         JNC     ??parseGWPackage_17
   \   0001BE   E5..         MOV     A,?V0 + 4
   \   0001C0   C3           CLR     C
   \   0001C1   13           RRC     A
   \   0001C2   FA           MOV     R2,A
   \   0001C3   90....       MOV     DPTR,#perRssiOffset
   \   0001C6   12....       LCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_165:
   \   0001C9   F8           MOV     R0,A
   \   0001CA   E4           CLR     A
   \   0001CB   99           SUBB    A,R1
   \   0001CC   8017         SJMP    ??parseGWPackage_18
   1797                      else            lastRssi =(((UINT16)tmp - 256) >> 1) - perRssiOffset;
   \                     ??parseGWPackage_17:
   \   0001CE   E4           CLR     A
   \   0001CF   25..         ADD     A,?V0 + 4
   \   0001D1   F8           MOV     R0,A
   \   0001D2   74FF         MOV     A,#-0x1
   \   0001D4   13           RRC     A
   \   0001D5   E8           MOV     A,R0
   \   0001D6   13           RRC     A
   \   0001D7   F8           MOV     R0,A
   \   0001D8   90....       MOV     DPTR,#perRssiOffset
   \   0001DB   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_133:
   \   0001DE   E8           MOV     A,R0
   \   0001DF   C3           CLR     C
   \   0001E0   9A           SUBB    A,R2
   \   0001E1   F8           MOV     R0,A
   \   0001E2   747F         MOV     A,#0x7f
   \   0001E4   9B           SUBB    A,R3
   \                     ??parseGWPackage_18:
   \   0001E5   F9           MOV     R1,A
   \   0001E6   90....       MOV     DPTR,#lastRssi
   \   0001E9   12....       LCALL   ??Subroutine67_0
   1798          
   1799                      if( !page.is500Always ){
   \                     ??CrossCallReturnLabel_204:
   \   0001EC   90....       MOV     DPTR,#(page + 194)
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001F2   406D         JC      ??parseGWPackage_19
   1800                          //if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
   1801                          //else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
   1802                          if(       (o > 0) && (o >  1) ) o = 1;
   \   0001F4   EF           MOV     A,R7
   \   0001F5   C3           CLR     C
   \   0001F6   9401         SUBB    A,#0x1
   \   0001F8   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001FA   65D0         XRL     A,PSW
   \   0001FC   33           RLC     A
   \   0001FD   EF           MOV     A,R7
   \   0001FE   400E         JC      ??parseGWPackage_20
   \   000200   C3           CLR     C
   \   000201   9402         SUBB    A,#0x2
   \   000203   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000205   65D0         XRL     A,PSW
   \   000207   33           RLC     A
   \   000208   4017         JC      ??parseGWPackage_21
   \   00020A   7F01         MOV     R7,#0x1
   \   00020C   8013         SJMP    ??parseGWPackage_21
   1803                          else if(  (o < 0) && (o < -1) ) o = -1;
   \                     ??parseGWPackage_20:
   \   00020E   C3           CLR     C
   \   00020F   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_192:
   \   000212   500D         JNC     ??parseGWPackage_21
   \   000214   EF           MOV     A,R7
   \   000215   C3           CLR     C
   \   000216   94FF         SUBB    A,#-0x1
   \   000218   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00021A   65D0         XRL     A,PSW
   \   00021C   33           RLC     A
   \   00021D   5002         JNC     ??parseGWPackage_21
   \   00021F   7FFF         MOV     R7,#-0x1
   1804                          shift = (INT16)sh + (INT16)o;
   \                     ??parseGWPackage_21:
   \   000221   E5..         MOV     A,?V0 + 0
   \   000223   F8           MOV     R0,A
   \   000224   33           RLC     A
   \   000225   95E0         SUBB    A,0xE0 /* A   */
   \   000227   F9           MOV     R1,A
   \   000228   EF           MOV     A,R7
   \   000229   FA           MOV     R2,A
   \   00022A   33           RLC     A
   \   00022B   95E0         SUBB    A,0xE0 /* A   */
   \   00022D   FB           MOV     R3,A
   \   00022E   EA           MOV     A,R2
   \   00022F   28           ADD     A,R0
   \   000230   F5..         MOV     ?V0 + 0,A
   \   000232   EB           MOV     A,R3
   \   000233   39           ADDC    A,R1
   \   000234   F5..         MOV     ?V0 + 1,A
   1805                          if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
   \   000236                ; Setup parameters for call to function abs
   \   000236   AA..         MOV     R2,?V0 + 0
   \   000238   FB           MOV     R3,A
   \   000239   12....       LCALL   abs
   \   00023C   C3           CLR     C
   \   00023D   EA           MOV     A,R2
   \   00023E   9461         SUBB    A,#0x61
   \   000240   12....       LCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_193:
   \   000243   4016         JC      ??parseGWPackage_22
   \   000245                ; Setup parameters for call to function addDF
   \   000245   7402         MOV     A,#0x2
   \   000247   78..         MOV     R0,#?V0 + 0
   \   000249   12....       LCALL   ?S_SHL
   \   00024C   AA..         MOV     R2,?V0 + 0
   \   00024E   E5..         MOV     A,?V0 + 1
   \   000250   FB           MOV     R3,A
   \   000251   33           RLC     A
   \   000252   95E0         SUBB    A,0xE0 /* A   */
   \   000254   FC           MOV     R4,A
   \   000255   FD           MOV     R5,A
   \   000256   12....       LCALL   addDF
   \   000259   8006         SJMP    ??parseGWPackage_19
   \                     ??parseGWPackage_22:
   \   00025B   E5..         MOV     A,?V0 + 0
   \   00025D   90DF08       MOV     DPTR,#-0x20f8
   \   000260   F0           MOVX    @DPTR,A
   1806                      }
   1807          //            INT32 f = 0; ((BYTE *)(&f))[0] = FREQ0; ((BYTE *)(&f))[1] = FREQ1; ((BYTE *)(&f))[2] = FREQ2; decodeDelay = (INT16)( f-defFreq );
   1808          
   1809                      if( goodForCommands /*&& ( page.is500Always || ( 0!=(LQI & 0x7F) ) )*/ ){
   \                     ??parseGWPackage_19:
   \   000261   EE           MOV     A,R6
   \   000262   7003         JNZ     $+5
   \   000264   02....       LJMP    ??parseGWPackage_7
   1810                          if( isOnTestStand ){ isOnTestStand--; /* cmdCount--; */}
   \   000267   90....       MOV     DPTR,#isOnTestStand
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   6002         JZ      ??parseGWPackage_23
   \   00026D   14           DEC     A
   \   00026E   F0           MOVX    @DPTR,A
   1811                          if( alignMPP ){ alignMPP = FALSE; ticks[ MppCycle ] = _mppCycle; }
   \                     ??parseGWPackage_23:
   \   00026F   90....       MOV     DPTR,#alignMPP
   \   000272   E0           MOVX    A,@DPTR
   \   000273   6009         JZ      ??CrossCallReturnLabel_384
   \   000275   E4           CLR     A
   \   000276   12....       LCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_117:
   \   000279   7478         MOV     A,#0x78
   \   00027B   12....       LCALL   ?Subroutine117
   1812                          P1_1 ^= 1;
   \                     ??CrossCallReturnLabel_384:
   \   00027E   639002       XRL     0x90,#0x2
   \   000281   E590         MOV     A,0x90
   1813                          bunchCount = 18;
   \   000283   7412         MOV     A,#0x12
   \   000285   90....       MOV     DPTR,#bunchCount
   \   000288   12....       LCALL   ?Subroutine75
   1814                          mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); //&cyclesDefaults[4], 4 );//(BYTE *)&page.defCycles2SoftKick, 4 );
   \                     ??CrossCallReturnLabel_229:
   \   00028B   12....       LCALL   mymemcpy
   1815                          if( goodTime ) mymemcpy( (BYTE *)&utcLast, (BYTE *)&utcLocal, 6 );
   \   00028E   E5..         MOV     A,?V0 + 2
   \   000290   600D         JZ      ??parseGWPackage_24
   \   000292                ; Setup parameters for call to function mymemcpy
   \   000292   7906         MOV     R1,#0x6
   \   000294   7C..         MOV     R4,#(utcLocal & 0xff)
   \   000296   7D..         MOV     R5,#((utcLocal >> 8) & 0xff)
   \   000298   7A..         MOV     R2,#(utcLast & 0xff)
   \   00029A   7B..         MOV     R3,#((utcLast >> 8) & 0xff)
   \   00029C   12....       LCALL   mymemcpy
   1816                          lastCycle = _slot * ( (ndev & NDEV_MASK) + ((ndev & JOIN_MASK)?1:4) ) + _loop_delay;
   \                     ??parseGWPackage_24:
   \   00029F   90....       MOV     DPTR,#ndev
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   A2E7         MOV     C,0xE0 /* A   */.7
   \   0002A5   5004         JNC     ??parseGWPackage_25
   \   0002A7   7A01         MOV     R2,#0x1
   \   0002A9   8002         SJMP    ??parseGWPackage_26
   \                     ??parseGWPackage_25:
   \   0002AB   7A04         MOV     R2,#0x4
   \                     ??parseGWPackage_26:
   \   0002AD   90....       MOV     DPTR,#_slot
   \   0002B0   12....       LCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_62:
   \   0002B3   90....       MOV     DPTR,#ndev
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   F8           MOV     R0,A
   \   0002B8   741F         MOV     A,#0x1f
   \   0002BA   58           ANL     A,R0
   \   0002BB   F8           MOV     R0,A
   \   0002BC   EA           MOV     A,R2
   \   0002BD   28           ADD     A,R0
   \   0002BE   F8           MOV     R0,A
   \   0002BF   E4           CLR     A
   \   0002C0   3400         ADDC    A,#0x0
   \   0002C2   F9           MOV     R1,A
   \   0002C3   E8           MOV     A,R0
   \   0002C4   85..F0       MOV     B,?V0 + 0
   \   0002C7   A4           MUL     AB
   \   0002C8   C8           XCH     A,R0
   \   0002C9   AAF0         MOV     R2,B
   \   0002CB   85..F0       MOV     B,?V0 + 1
   \   0002CE   A4           MUL     AB
   \   0002CF   2A           ADD     A,R2
   \   0002D0   FA           MOV     R2,A
   \   0002D1   85..F0       MOV     B,?V0 + 0
   \   0002D4   E9           MOV     A,R1
   \   0002D5   A4           MUL     AB
   \   0002D6   2A           ADD     A,R2
   \   0002D7   F9           MOV     R1,A
   \   0002D8   90....       MOV     DPTR,#_loop_delay
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   28           ADD     A,R0
   \   0002DD   F8           MOV     R0,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   39           ADDC    A,R1
   \   0002E1   F9           MOV     R1,A
   \   0002E2   90....       MOV     DPTR,#lastCycle
   \   0002E5   E8           MOV     A,R0
   \   0002E6   F0           MOVX    @DPTR,A
   \   0002E7   A3           INC     DPTR
   \   0002E8   E9           MOV     A,R1
   \   0002E9   12....       LCALL   ?Subroutine46
   1817                          //if( ( (2+(ndev & NDEV_MASK)) % 3 ) == 0 ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  _mppCycle; cnt = 255; } }
   1818                          decodeDelay = ticks[ MppCycle ];
   \                     ??CrossCallReturnLabel_118:
   \   0002EC   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_181:
   \   0002EF   90....       MOV     DPTR,#decodeDelay
   \   0002F2   12....       LCALL   ??Subroutine67_0
   1819                          // if( page.synch_freq && ((2+(ndev & NDEV_MASK)%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  page.synch_phase; cnt = page.synch_freq; } }
   1820                          if( page.synch_freq && (((2+(ndev & NDEV_MASK))%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ *((INT16 *)0xF500) = page.synch_phase; cnt = page.synch_freq; } }
   \                     ??CrossCallReturnLabel_205:
   \   0002F5   90....       MOV     DPTR,#(page + 162)
   \   0002F8   E0           MOVX    A,@DPTR
   \   0002F9   602C         JZ      ??parseGWPackage_27
   \   0002FB   90....       MOV     DPTR,#ndev
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   541F         ANL     A,#0x1f
   \   000301   2402         ADD     A,#0x2
   \   000303   75F003       MOV     B,#0x3
   \   000306   12....       LCALL   ?SC_DIV_MOD
   \   000309   E5F0         MOV     A,B
   \   00030B   701A         JNZ     ??parseGWPackage_27
   \   00030D   90....       MOV     DPTR,#??cnt
   \   000310   E0           MOVX    A,@DPTR
   \   000311   14           DEC     A
   \   000312   F0           MOVX    @DPTR,A
   \   000313   7012         JNZ     ??parseGWPackage_27
   \   000315   90....       MOV     DPTR,#(page + 161)
   \   000318   E0           MOVX    A,@DPTR
   \   000319   90F500       MOV     DPTR,#-0xb00
   \   00031C   12....       LCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_385:
   \   00031F   90....       MOV     DPTR,#(page + 162)
   \   000322   E0           MOVX    A,@DPTR
   \   000323   90....       MOV     DPTR,#??cnt
   \   000326   F0           MOVX    @DPTR,A
   1821                          networkDelay = page.is500Always ? 0 : (2*TICKS_IN_MS);
   \                     ??parseGWPackage_27:
   \   000327   90....       MOV     DPTR,#(page + 194)
   \   00032A   E0           MOVX    A,@DPTR
   \   00032B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00032D   5004         JNC     ??parseGWPackage_28
   \   00032F   7A00         MOV     R2,#0x0
   \   000331   8002         SJMP    ??parseGWPackage_29
   \                     ??parseGWPackage_28:
   \   000333   7A04         MOV     R2,#0x4
   1822                          if( bunch == 0 ){ 
   \                     ??parseGWPackage_29:
   \   000335   90....       MOV     DPTR,#ticks
   \   000338   E0           MOVX    A,@DPTR
   \   000339   241A         ADD     A,#0x1a
   \   00033B   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_148:
   \   00033E   E8           MOV     A,R0
   \   00033F   FC           MOV     R4,A
   \   000340   E9           MOV     A,R1
   \   000341   FD           MOV     R5,A
   \   000342   90....       MOV     DPTR,#??bunch
   \   000345   E0           MOVX    A,@DPTR
   \   000346   7032         JNZ     ??parseGWPackage_30
   1823                              packagePrepared = FALSE;
   \   000348   E4           CLR     A
   \   000349   90....       MOV     DPTR,#packagePrepared
   \   00034C   F0           MOVX    @DPTR,A
   1824                              atomicChange( DelayedPrepareData, 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay ); // was 40, give more time 
   \   00034D   740A         MOV     A,#0xa
   \   00034F   C3           CLR     C
   \   000350   9A           SUBB    A,R2
   \   000351   FA           MOV     R2,A
   \   000352   E4           CLR     A
   \   000353   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_35:
   \   000356   F0           MOVX    @DPTR,A
   1825                              mymemcpy( (BYTE *)&utc, (BYTE *)&utcLocal, 6 ); 
   \   000357                ; Setup parameters for call to function mymemcpy
   \   000357   7906         MOV     R1,#0x6
   \   000359   7C..         MOV     R4,#(utcLocal & 0xff)
   \   00035B   7D..         MOV     R5,#((utcLocal >> 8) & 0xff)
   \   00035D   7A..         MOV     R2,#(utc & 0xff)
   \   00035F   7B..         MOV     R3,#((utc >> 8) & 0xff)
   \   000361   12....       LCALL   mymemcpy
   1826                              if( ticks[ DelayedPrepareData ] <= 0 ) ticks[ DelayedPrepareData ] = -1;
   \   000364   12....       LCALL   ?Subroutine40
   \                     ??CrossCallReturnLabel_96:
   \   000367   C3           CLR     C
   \   000368   E0           MOVX    A,@DPTR
   \   000369   9401         SUBB    A,#0x1
   \   00036B   12....       LCALL   ??Subroutine39_0
   \                     ??CrossCallReturnLabel_93:
   \   00036E   5073         JNC     ??parseGWPackage_31
   \   000370   8882         MOV     DPL,R0
   \   000372   8983         MOV     DPH,R1
   \   000374   74FF         MOV     A,#-0x1
   \   000376   F0           MOVX    @DPTR,A
   \   000377   A3           INC     DPTR
   \   000378   8068         SJMP    ??CrossCallReturnLabel_36
   1827                              //zeroPackageWasNotReceived = FALSE;
   1828                          } else {
   1829                              if( page.use12kbod ){
   \                     ??parseGWPackage_30:
   \   00037A   90....       MOV     DPTR,#(page + 158)
   \   00037D   E0           MOVX    A,@DPTR
   \   00037E   FE           MOV     R6,A
   \   00037F   90....       MOV     DPTR,#??bunch
   \   000382   E0           MOVX    A,@DPTR
   \   000383   F8           MOV     R0,A
   \   000384   EE           MOV     A,R6
   \   000385   C3           CLR     C
   \   000386   98           SUBB    A,R0
   \   000387   F8           MOV     R0,A
   \   000388   E4           CLR     A
   \   000389   9400         SUBB    A,#0x0
   \   00038B   F9           MOV     R1,A
   \   00038C   90....       MOV     DPTR,#(page + 194)
   \   00038F   E0           MOVX    A,@DPTR
   \   000390   A2E2         MOV     C,0xE0 /* A   */.2
   \   000392   EE           MOV     A,R6
   \   000393   502F         JNC     ??parseGWPackage_32
   1830                                  if( page.gbunch && (page.gbunch - bunch) <= 18 )
   \   000395   604C         JZ      ??parseGWPackage_31
   \   000397   C3           CLR     C
   \   000398   E8           MOV     A,R0
   \   000399   9413         SUBB    A,#0x13
   \   00039B   E9           MOV     A,R1
   \   00039C   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_194:
   \   00039F   5042         JNC     ??parseGWPackage_31
   1831                                      atomicChange( DelayedPrepareData, lastCycle*( page.gbunch - bunch ) + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
   \   0003A1   90....       MOV     DPTR,#lastCycle
   \   0003A4   12....       LCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_63:
   \   0003A7   E8           MOV     A,R0
   \   0003A8   85..F0       MOV     B,?V0 + 0
   \   0003AB   A4           MUL     AB
   \   0003AC   C8           XCH     A,R0
   \   0003AD   AEF0         MOV     R6,B
   \   0003AF   85..F0       MOV     B,?V0 + 1
   \   0003B2   A4           MUL     AB
   \   0003B3   2E           ADD     A,R6
   \   0003B4   FE           MOV     R6,A
   \   0003B5   85..F0       MOV     B,?V0 + 0
   \   0003B8   E9           MOV     A,R1
   \   0003B9   A4           MUL     AB
   \   0003BA   2E           ADD     A,R6
   \   0003BB   F9           MOV     R1,A
   \   0003BC   740A         MOV     A,#0xa
   \   0003BE   28           ADD     A,R0
   \   0003BF   F8           MOV     R0,A
   \   0003C0   E4           CLR     A
   \   0003C1   39           ADDC    A,R1
   \   0003C2   8015         SJMP    ??parseGWPackage_33
   1832                              }else{
   1833                                  if( page.gbunch && (page.gbunch - bunch) == 1 )
   \                     ??parseGWPackage_32:
   \   0003C4   601D         JZ      ??parseGWPackage_31
   \   0003C6   7401         MOV     A,#0x1
   \   0003C8   68           XRL     A,R0
   \   0003C9   7001         JNZ     ??parseGWPackage_34
   \   0003CB   E9           MOV     A,R1
   \                     ??parseGWPackage_34:
   \   0003CC   7015         JNZ     ??parseGWPackage_31
   1834                                      atomicChange( DelayedPrepareData, lastCycle + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
   \   0003CE   90....       MOV     DPTR,#lastCycle
   \   0003D1   E0           MOVX    A,@DPTR
   \   0003D2   240A         ADD     A,#0xa
   \   0003D4   F8           MOV     R0,A
   \   0003D5   A3           INC     DPTR
   \   0003D6   E0           MOVX    A,@DPTR
   \   0003D7   3400         ADDC    A,#0x0
   \                     ??parseGWPackage_33:
   \   0003D9   F9           MOV     R1,A
   \   0003DA   E8           MOV     A,R0
   \   0003DB   C3           CLR     C
   \   0003DC   9A           SUBB    A,R2
   \   0003DD   FA           MOV     R2,A
   \   0003DE   E9           MOV     A,R1
   \   0003DF   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_36:
   \   0003E2   F0           MOVX    @DPTR,A
   1835                              }
   1836                          }
   1837                          got_gw = 8;
   \                     ??parseGWPackage_31:
   \   0003E3   7408         MOV     A,#0x8
   \   0003E5   90....       MOV     DPTR,#got_gw
   \   0003E8   12....       LCALL   ?Subroutine73
   1838                          atomicChange( ReceiveData, lastCycle - _slot - 9*TICKS_IN_MS - temperatureProtectionDelay );  
   \                     ??CrossCallReturnLabel_395:
   \   0003EB   2408         ADD     A,#0x8
   \   0003ED   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_149:
   \   0003F0   90....       MOV     DPTR,#_slot
   \   0003F3   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_134:
   \   0003F6   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   0003F9   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   0003FC   E0           MOVX    A,@DPTR
   \   0003FD   C3           CLR     C
   \   0003FE   9A           SUBB    A,R2
   \   0003FF   FA           MOV     R2,A
   \   000400   A3           INC     DPTR
   \   000401   E0           MOVX    A,@DPTR
   \   000402   9B           SUBB    A,R3
   \   000403   FB           MOV     R3,A
   \   000404   74EE         MOV     A,#-0x12
   \   000406   2A           ADD     A,R2
   \   000407   FC           MOV     R4,A
   \   000408   74FF         MOV     A,#-0x1
   \   00040A   12....       LCALL   ?Subroutine10
   1839                          curBunch = bunch;
   \                     ??CrossCallReturnLabel_334:
   \   00040D   90....       MOV     DPTR,#??bunch
   \   000410   E0           MOVX    A,@DPTR
   \   000411   90....       MOV     DPTR,#curBunch
   \   000414   12....       LCALL   ?Subroutine74
   1840                          //if( bunch != 0xFF && maxBunch < curBunch ) maxBunch = curBunch;
   1841                          if( !page.is500Always ) {                
   \                     ??CrossCallReturnLabel_338:
   \   000417   402E         JC      ??parseGWPackage_35
   1842                              /*
   1843                              if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
   1844                              else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
   1845                              shift = (INT16)sh + (INT16)o;
   1846                              if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
   1847                              */
   1848                              if( ndev & HOP_MASK ){ 
   \   000419   90....       MOV     DPTR,#ticks
   \   00041C   E0           MOVX    A,@DPTR
   \   00041D   2410         ADD     A,#0x10
   \   00041F   FA           MOV     R2,A
   \   000420   A3           INC     DPTR
   \   000421   E0           MOVX    A,@DPTR
   \   000422   3400         ADDC    A,#0x0
   \   000424   FB           MOV     R3,A
   \   000425   90....       MOV     DPTR,#ndev
   \   000428   E0           MOVX    A,@DPTR
   \   000429   A2E6         MOV     C,0xE0 /* A   */.6
   \   00042B   500E         JNC     ??parseGWPackage_36
   1849                                  atomicChange( Hop, ticks[ ReceiveData ] - 0*TICKS_IN_MS /*- temperatureProtectionDelay*/ ); 
   \   00042D   8882         MOV     DPL,R0
   \   00042F   8983         MOV     DPH,R1
   \   000431   12....       LCALL   ?Subroutine30
   1850                                  cyclesToHop = 8;
   \                     ??CrossCallReturnLabel_75:
   \   000434   7408         MOV     A,#0x8
   \   000436   90....       MOV     DPTR,#cyclesToHop
   \   000439   800B         SJMP    ??parseGWPackage_37
   1851                              }else                { cyclesToHop = 0;    atomicChange( Hop, 0 ); }
   \                     ??parseGWPackage_36:
   \   00043B   E4           CLR     A
   \   00043C   90....       MOV     DPTR,#cyclesToHop
   \   00043F   F0           MOVX    @DPTR,A
   \   000440   8A82         MOV     DPL,R2
   \   000442   8B83         MOV     DPH,R3
   \   000444   F0           MOVX    @DPTR,A
   \   000445   A3           INC     DPTR
   \                     ??parseGWPackage_37:
   \   000446   F0           MOVX    @DPTR,A
   1852                          }
   1853              
   1854                          atomicChange( Cycle, lastCycle + 1 );
   \                     ??parseGWPackage_35:
   \   000447   90....       MOV     DPTR,#lastCycle
   \   00044A   E0           MOVX    A,@DPTR
   \   00044B   2401         ADD     A,#0x1
   \   00044D   FA           MOV     R2,A
   \   00044E   A3           INC     DPTR
   \   00044F   E0           MOVX    A,@DPTR
   \   000450   3400         ADDC    A,#0x0
   \   000452   FB           MOV     R3,A
   \   000453   90....       MOV     DPTR,#ticks
   \   000456   E0           MOVX    A,@DPTR
   \   000457   2412         ADD     A,#0x12
   \   000459   12....       LCALL   ??Subroutine1_1
   1855          
   1856                          if( page.is500Always ){
   \                     ??CrossCallReturnLabel_333:
   \   00045C   90....       MOV     DPTR,#(page + 194)
   \   00045F   E0           MOVX    A,@DPTR
   \   000460   A2E6         MOV     C,0xE0 /* A   */.6
   \   000462   90....       MOV     DPTR,#lastRssi
   \   000465   501C         JNC     ??parseGWPackage_38
   1857                                if( lastRssi > -95 ) //page.CriticalLevel500 ) 
   \   000467   C3           CLR     C
   \   000468   E0           MOVX    A,@DPTR
   \   000469   94A2         SUBB    A,#-0x5e
   \   00046B   12....       LCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_357:
   \   00046E   400E         JC      ??parseGWPackage_39
   1858                                    { cyclesToStep500Channel = page.defCyclesToStep500Channel; cyclesTo10 = page.defCyclesTo10; }
   \   000470   12....       LCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_86:
   \   000473   90....       MOV     DPTR,#(page + 202)
   \   000476   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_182:
   \   000479   90....       MOV     DPTR,#cyclesTo10
   \   00047C   801D         SJMP    ??CrossCallReturnLabel_164
   1859                                    //{ cyclesToStep500Channel = cyclesDefaults[2]; cyclesTo10 = cyclesDefaults[1]; }
   1860                                else flags[ Cycle ] = TRUE;
   \                     ??parseGWPackage_39:
   \   00047E   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_43:
   \   000481   801C         SJMP    ??parseGWPackage_40
   1861                          }else if( lastRssi > -102 ) //page.CriticalLevel10 )  
   \                     ??parseGWPackage_38:
   \   000483   C3           CLR     C
   \   000484   E0           MOVX    A,@DPTR
   \   000485   949B         SUBB    A,#-0x65
   \   000487   12....       LCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_358:
   \   00048A   40F2         JC      ??parseGWPackage_39
   1862                                    { cyclesTo500 = page.defCyclesTo500;                       cycles2Step10Channel = page.defCyclesToStep10Channel; }
   \   00048C   90....       MOV     DPTR,#(page + 200)
   \   00048F   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_183:
   \   000492   90....       MOV     DPTR,#cyclesTo500
   \   000495   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_206:
   \   000498   12....       LCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_164:
   \   00049B   E8           MOV     A,R0
   \   00049C   F0           MOVX    @DPTR,A
   \   00049D   A3           INC     DPTR
   \   00049E   E9           MOV     A,R1
   \                     ??parseGWPackage_40:
   \   00049F   F0           MOVX    @DPTR,A
   1863                                    //{ cyclesTo500 = cyclesDefaults[0];                       cycles2Step10Channel = cyclesDefaults[3]; }
   1864                                else flags[ Cycle ] = TRUE;
   1865                      
   1866                          BYTE b = bunch;
   \   0004A0   90....       MOV     DPTR,#??bunch
   \   0004A3   E0           MOVX    A,@DPTR
   \   0004A4   FC           MOV     R4,A
   1867                          if( b!=255 && page.rbunch ) b %= page.rbunch;
   \   0004A5   74FF         MOV     A,#-0x1
   \   0004A7   6C           XRL     A,R4
   \   0004A8   600C         JZ      ??parseGWPackage_41
   \   0004AA   90....       MOV     DPTR,#(page + 157)
   \   0004AD   E0           MOVX    A,@DPTR
   \   0004AE   6006         JZ      ??parseGWPackage_41
   \   0004B0   F5F0         MOV     B,A
   \   0004B2   EC           MOV     A,R4
   \   0004B3   84           DIV     AB
   \   0004B4   ACF0         MOV     R4,B
   1868                      
   1869                          networkDelay = _slot * page.netId + _gw_delay - temperatureProtectionDelay;
   \                     ??parseGWPackage_41:
   \   0004B6   90....       MOV     DPTR,#(page + 2)
   \   0004B9   E0           MOVX    A,@DPTR
   \   0004BA   FD           MOV     R5,A
   \   0004BB   90....       MOV     DPTR,#_slot
   \   0004BE   12....       LCALL   ??Subroutine56_0
   \                     ??CrossCallReturnLabel_158:
   \   0004C1   8DF0         MOV     B,R5
   \   0004C3   A4           MUL     AB
   \   0004C4   F8           MOV     R0,A
   \   0004C5   AAF0         MOV     R2,B
   \   0004C7   8DF0         MOV     B,R5
   \   0004C9   E9           MOV     A,R1
   \   0004CA   A4           MUL     AB
   \   0004CB   2A           ADD     A,R2
   \   0004CC   F9           MOV     R1,A
   \   0004CD   90....       MOV     DPTR,#_gw_delay
   \   0004D0   E0           MOVX    A,@DPTR
   \   0004D1   28           ADD     A,R0
   \   0004D2   FA           MOV     R2,A
   \   0004D3   A3           INC     DPTR
   \   0004D4   E0           MOVX    A,@DPTR
   \   0004D5   39           ADDC    A,R1
   \   0004D6   FB           MOV     R3,A
   \   0004D7   90....       MOV     DPTR,#temperatureProtectionDelay
   \   0004DA   12....       LCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_166:
   \   0004DD   FA           MOV     R2,A
   \   0004DE   EB           MOV     A,R3
   \   0004DF   99           SUBB    A,R1
   \   0004E0   FB           MOV     R3,A
   1870          
   1871                          if(    (b!=0xFF) && ( b == page.myBunch ) )
   \   0004E1   90....       MOV     DPTR,#ticks
   \   0004E4   E0           MOVX    A,@DPTR
   \   0004E5   2406         ADD     A,#0x6
   \   0004E7   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_150:
   \   0004EA   90....       MOV     DPTR,#(page + 3)
   \   0004ED   E0           MOVX    A,@DPTR
   \   0004EE   FE           MOV     R6,A
   \   0004EF   74FF         MOV     A,#-0x1
   \   0004F1   6C           XRL     A,R4
   \   0004F2   600F         JZ      ??parseGWPackage_42
   \   0004F4   EE           MOV     A,R6
   \   0004F5   6C           XRL     A,R4
   \   0004F6   700B         JNZ     ??parseGWPackage_42
   1872                              atomicChange( SendData, networkDelay );
   \                     ??parseGWPackage_43:
   \   0004F8   8882         MOV     DPL,R0
   \   0004FA   8983         MOV     DPH,R1
   \   0004FC   EA           MOV     A,R2
   \   0004FD   F0           MOVX    @DPTR,A
   \   0004FE   A3           INC     DPTR
   \   0004FF   EB           MOV     A,R3
   \   000500   02....       LJMP    ??parseGWPackage_44
   1873                          else if( page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)<=18 ) && ((ndev & NDEV_MASK ) > page.netId) )
   \                     ??parseGWPackage_42:
   \   000503   8C..         MOV     ?V0 + 0,R4
   \   000505   EE           MOV     A,R6
   \   000506   C3           CLR     C
   \   000507   95..         SUBB    A,?V0 + 0
   \   000509   F5..         MOV     ?V0 + 0,A
   \   00050B   E4           CLR     A
   \   00050C   9400         SUBB    A,#0x0
   \   00050E   F5..         MOV     ?V0 + 1,A
   \   000510   90....       MOV     DPTR,#ndev
   \   000513   E0           MOVX    A,@DPTR
   \   000514   541F         ANL     A,#0x1f
   \   000516   FF           MOV     R7,A
   \   000517   90....       MOV     DPTR,#(page + 158)
   \   00051A   E0           MOVX    A,@DPTR
   \   00051B   F5..         MOV     ?V0 + 2,A
   \   00051D   90....       MOV     DPTR,#(page + 194)
   \   000520   E0           MOVX    A,@DPTR
   \   000521   A2E2         MOV     C,0xE0 /* A   */.2
   \   000523   E5..         MOV     A,?V0 + 2
   \   000525   5044         JNC     ??parseGWPackage_45
   \   000527   6071         JZ      ??parseGWPackage_46
   \   000529   74FF         MOV     A,#-0x1
   \   00052B   6E           XRL     A,R6
   \   00052C   606C         JZ      ??parseGWPackage_46
   \   00052E   EC           MOV     A,R4
   \   00052F   C3           CLR     C
   \   000530   9E           SUBB    A,R6
   \   000531   4003         JC      $+5
   \   000533   02....       LJMP    ??parseGWPackage_47
   \   000536   C3           CLR     C
   \   000537   E5..         MOV     A,?V0 + 0
   \   000539   9413         SUBB    A,#0x13
   \   00053B   E5..         MOV     A,?V0 + 1
   \   00053D   12....       LCALL   ??Subroutine63_0
   \                     ??CrossCallReturnLabel_195:
   \   000540   4003         JC      $+5
   \   000542   02....       LJMP    ??parseGWPackage_47
   \   000545   ED           MOV     A,R5
   \   000546   C3           CLR     C
   \   000547   9F           SUBB    A,R7
   \   000548   4003         JC      $+5
   \   00054A   02....       LJMP    ??parseGWPackage_47
   1874                              atomicChange( SendData, (page.myBunch-b)*lastCycle + networkDelay );
   \   00054D   90....       MOV     DPTR,#lastCycle
   \   000550   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_154:
   \   000553   CC           XCH     A,R4
   \   000554   AEF0         MOV     R6,B
   \   000556   85..F0       MOV     B,?V0 + 1
   \   000559   A4           MUL     AB
   \   00055A   2E           ADD     A,R6
   \   00055B   FE           MOV     R6,A
   \   00055C   85..F0       MOV     B,?V0 + 0
   \   00055F   ED           MOV     A,R5
   \   000560   A4           MUL     AB
   \   000561   2E           ADD     A,R6
   \   000562   FD           MOV     R5,A
   \   000563   EA           MOV     A,R2
   \   000564   2C           ADD     A,R4
   \   000565   FA           MOV     R2,A
   \   000566   EB           MOV     A,R3
   \   000567   3D           ADDC    A,R5
   \                     ??parseGWPackage_48:
   \   000568   FB           MOV     R3,A
   \   000569   808D         SJMP    ??parseGWPackage_43
   1875                          else if( !page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)==1 ) && ((ndev & NDEV_MASK ) > page.netId) )
   \                     ??parseGWPackage_45:
   \   00056B   602D         JZ      ??parseGWPackage_46
   \   00056D   74FF         MOV     A,#-0x1
   \   00056F   6E           XRL     A,R6
   \   000570   6028         JZ      ??parseGWPackage_46
   \   000572   EC           MOV     A,R4
   \   000573   C3           CLR     C
   \   000574   9E           SUBB    A,R6
   \   000575   4003         JC      $+5
   \   000577   02....       LJMP    ??parseGWPackage_47
   \   00057A   7401         MOV     A,#0x1
   \   00057C   65..         XRL     A,?V0 + 0
   \   00057E   7002         JNZ     ??parseGWPackage_49
   \   000580   E5..         MOV     A,?V0 + 1
   \                     ??parseGWPackage_49:
   \   000582   6003         JZ      $+5
   \   000584   02....       LJMP    ??parseGWPackage_47
   \   000587   ED           MOV     A,R5
   \   000588   C3           CLR     C
   \   000589   9F           SUBB    A,R7
   \   00058A   4003         JC      $+5
   \   00058C   02....       LJMP    ??parseGWPackage_47
   1876                              atomicChange( SendData, lastCycle + networkDelay );
   \   00058F   90....       MOV     DPTR,#lastCycle
   \   000592   E0           MOVX    A,@DPTR
   \   000593   2A           ADD     A,R2
   \   000594   FA           MOV     R2,A
   \   000595   A3           INC     DPTR
   \   000596   E0           MOVX    A,@DPTR
   \   000597   3B           ADDC    A,R3
   \   000598   80CE         SJMP    ??parseGWPackage_48
   1877                          else if( (page.myBunch == 0xFF) && (page.netId == 0xFF) && ((ndev & JOIN_MASK) == 0) ) {
   \                     ??parseGWPackage_46:
   \   00059A   74FF         MOV     A,#-0x1
   \   00059C   6E           XRL     A,R6
   \   00059D   6003         JZ      $+5
   \   00059F   02....       LJMP    ??parseGWPackage_47
   \   0005A2   74FF         MOV     A,#-0x1
   \   0005A4   6D           XRL     A,R5
   \   0005A5   6003         JZ      $+5
   \   0005A7   02....       LJMP    ??parseGWPackage_47
   \   0005AA   90....       MOV     DPTR,#ndev
   \   0005AD   E0           MOVX    A,@DPTR
   \   0005AE   A2E7         MOV     C,0xE0 /* A   */.7
   \   0005B0   5003         JNC     $+5
   \   0005B2   02....       LJMP    ??parseGWPackage_47
   1878                              ticks[ DelayedPrepareData ] = 0; 
   \   0005B5   90....       MOV     DPTR,#ticks
   \   0005B8   E0           MOVX    A,@DPTR
   \   0005B9   241A         ADD     A,#0x1a
   \   0005BB   FA           MOV     R2,A
   \   0005BC   A3           INC     DPTR
   \   0005BD   E0           MOVX    A,@DPTR
   \   0005BE   3400         ADDC    A,#0x0
   \   0005C0   FB           MOV     R3,A
   \   0005C1   8A82         MOV     DPL,R2
   \   0005C3   8B83         MOV     DPH,R3
   \   0005C5   E4           CLR     A
   \   0005C6   F0           MOVX    @DPTR,A
   \   0005C7   A3           INC     DPTR
   \   0005C8   F0           MOVX    @DPTR,A
   1879                              if( joinRequestWasSend > 0 )  joinRequestWasSend --;    
   \   0005C9   90....       MOV     DPTR,#joinRequestWasSend
   \   0005CC   E0           MOVX    A,@DPTR
   \   0005CD   6003         JZ      ??parseGWPackage_50
   \   0005CF   14           DEC     A
   \   0005D0   806E         SJMP    ??parseGWPackage_44
   1880                              else {
   1881                                  ADCCON1 &= 0xF3; ADCCON1 |= 4;
   \                     ??parseGWPackage_50:
   \   0005D2   53B4F3       ANL     0xb4,#0xf3
   \   0005D5   E5B4         MOV     A,0xb4
   \   0005D7   43B404       ORL     0xb4,#0x4
   1882                                  joinRequestWasSend = page.network_cnst_1 + RNDH % page.network_cnst_2; 
   \   0005DA   E5BD         MOV     A,0xbd
   \   0005DC   C0E0         PUSH    A
   \   0005DE   90....       MOV     DPTR,#(page + 229)
   \   0005E1   E0           MOVX    A,@DPTR
   \   0005E2   F5F0         MOV     B,A
   \   0005E4   D0E0         POP     A
   \   0005E6   84           DIV     AB
   \   0005E7   90....       MOV     DPTR,#(page + 228)
   \   0005EA   AAF0         MOV     R2,B
   \   0005EC   E0           MOVX    A,@DPTR
   \   0005ED   2A           ADD     A,R2
   \   0005EE   90....       MOV     DPTR,#joinRequestWasSend
   \   0005F1   F0           MOVX    @DPTR,A
   1883                                  atomicChange( SendData, (ndev & NDEV_MASK) * _slot + (RNDL % 5) * _join_slot + _gw_delay - temperatureProtectionDelay );    // 12 * 
   \   0005F2   90....       MOV     DPTR,#ndev
   \   0005F5   E0           MOVX    A,@DPTR
   \   0005F6   FA           MOV     R2,A
   \   0005F7   741F         MOV     A,#0x1f
   \   0005F9   5A           ANL     A,R2
   \   0005FA   F5..         MOV     ?V0 + 0,A
   \   0005FC   90....       MOV     DPTR,#_slot
   \   0005FF   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_155:
   \   000602   FC           MOV     R4,A
   \   000603   AAF0         MOV     R2,B
   \   000605   85..F0       MOV     B,?V0 + 0
   \   000608   ED           MOV     A,R5
   \   000609   A4           MUL     AB
   \   00060A   2A           ADD     A,R2
   \   00060B   FD           MOV     R5,A
   \   00060C   E5BC         MOV     A,0xbc
   \   00060E   75F005       MOV     B,#0x5
   \   000611   84           DIV     AB
   \   000612   85F0..       MOV     ?V0 + 0,B
   \   000615   90....       MOV     DPTR,#_join_slot
   \   000618   12....       LCALL   ??Subroutine50_0
   \                     ??CrossCallReturnLabel_135:
   \   00061B   EA           MOV     A,R2
   \   00061C   A4           MUL     AB
   \   00061D   FA           MOV     R2,A
   \   00061E   AEF0         MOV     R6,B
   \   000620   85..F0       MOV     B,?V0 + 0
   \   000623   EB           MOV     A,R3
   \   000624   A4           MUL     AB
   \   000625   2E           ADD     A,R6
   \   000626   FB           MOV     R3,A
   \   000627   EA           MOV     A,R2
   \   000628   2C           ADD     A,R4
   \   000629   FA           MOV     R2,A
   \   00062A   EB           MOV     A,R3
   \   00062B   3D           ADDC    A,R5
   \   00062C   FB           MOV     R3,A
   \   00062D   90....       MOV     DPTR,#_gw_delay
   \   000630   E0           MOVX    A,@DPTR
   \   000631   2A           ADD     A,R2
   \   000632   FC           MOV     R4,A
   \   000633   A3           INC     DPTR
   \   000634   E0           MOVX    A,@DPTR
   \   000635   12....       LCALL   ?Subroutine10
   1884                                  flags[ PrepareJoin ] = TRUE; 
   \                     ??CrossCallReturnLabel_335:
   \   000638   90....       MOV     DPTR,#flags
   \   00063B   12....       LCALL   ?Subroutine51
   \                     ??CrossCallReturnLabel_139:
   \   00063E   7401         MOV     A,#0x1
   \                     ??parseGWPackage_44:
   \   000640   F0           MOVX    @DPTR,A
   1885                              }
   1886                          }            
   1887          
   1888                          if( ticks[ SendData ] ){
   \                     ??parseGWPackage_47:
   \   000641   8882         MOV     DPL,R0
   \   000643   8983         MOV     DPH,R1
   \   000645   E0           MOVX    A,@DPTR
   \   000646   7002         JNZ     ??parseGWPackage_51
   \   000648   A3           INC     DPTR
   \   000649   E0           MOVX    A,@DPTR
   \                     ??parseGWPackage_51:
   \   00064A   6034         JZ      ??parseGWPackage_52
   1889                          //signed char adjustment = 5*TICKS_IN_MS; // was 24;
   1890                          //    if( bunch == 0 )                adjustment -= 8*TICKS_IN_MS;  // was 41;
   1891                          signed char adjustment = -3*TICKS_IN_MS; 
   \   00064C   7AFA         MOV     R2,#-0x6
   1892                              if( plen == PACKET_LENGTH_GW_2) adjustment += 11*TICKS_IN_MS; // was 57; 
   \   00064E   90....       MOV     DPTR,#??plen
   \   000651   E0           MOVX    A,@DPTR
   \   000652   6412         XRL     A,#0x12
   \   000654   7002         JNZ     ??parseGWPackage_53
   \   000656   7A10         MOV     R2,#0x10
   1893                              if( page.is500Always ){
   \                     ??parseGWPackage_53:
   \   000658   90....       MOV     DPTR,#(page + 194)
   \   00065B   E0           MOVX    A,@DPTR
   \   00065C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00065E   5010         JNC     ??parseGWPackage_54
   1894                                  if( page.use250kbod )     adjustment -= 5*TICKS_IN_MS+3; 
   \   000660   90....       MOV     DPTR,#(page + 219)
   \   000663   E0           MOVX    A,@DPTR
   \   000664   A2E1         MOV     C,0xE0 /* A   */.1
   \   000666   5004         JNC     ??parseGWPackage_55
   \   000668   74F3         MOV     A,#-0xd
   \   00066A   8002         SJMP    ??parseGWPackage_56
   1895                                  else                      adjustment -= 5*TICKS_IN_MS; // was 22;
   \                     ??parseGWPackage_55:
   \   00066C   74F6         MOV     A,#-0xa
   \                     ??parseGWPackage_56:
   \   00066E   2A           ADD     A,R2
   \   00066F   FA           MOV     R2,A
   1896                              }//else if( page.isRelay )        adjustment -= TICKS_IN_MS/2; // 2; // commented 20 Feb 16:45 in order to make sure that repeater works when it is right after slave
   1897                              ticks[ SendData ] +=  adjustment;
   \                     ??parseGWPackage_54:
   \   000670   EA           MOV     A,R2
   \   000671   33           RLC     A
   \   000672   95E0         SUBB    A,0xE0 /* A   */
   \   000674   FB           MOV     R3,A
   \   000675   8882         MOV     DPL,R0
   \   000677   8983         MOV     DPH,R1
   \   000679   E0           MOVX    A,@DPTR
   \   00067A   2A           ADD     A,R2
   \   00067B   F0           MOVX    @DPTR,A
   \   00067C   A3           INC     DPTR
   \   00067D   E0           MOVX    A,@DPTR
   \   00067E   3B           ADDC    A,R3
   \   00067F   F0           MOVX    @DPTR,A
   1898                          }
   1899          
   1900                          if( (!page.is500Always) && page.isRelay ) tickWait( 2*TICKS_IN_MS+1 ); // was 12
   \                     ??parseGWPackage_52:
   \   000680   90....       MOV     DPTR,#(page + 194)
   \   000683   E0           MOVX    A,@DPTR
   \   000684   5460         ANL     A,#0x60
   \   000686   6420         XRL     A,#0x20
   \   000688   7005         JNZ     ??parseGWPackage_57
   \   00068A                ; Setup parameters for call to function tickWait
   \   00068A   7905         MOV     R1,#0x5
   \   00068C   12....       LCALL   tickWait
   1901                          parseCommands( plen-10 );
   \                     ??parseGWPackage_57:
   \   00068F                ; Setup parameters for call to function parseCommands
   \   00068F   90....       MOV     DPTR,#??plen
   \   000692   E0           MOVX    A,@DPTR
   \   000693   24F6         ADD     A,#-0xa
   \   000695   F9           MOV     R1,A
   \   000696   12....       LCALL   parseCommands
   1902                          if( page.treatLastByteAsChannel ){ if( !page.is500Always && (cyclesTo500 < 200) ){ curChannel = CHANNR = radioPktBufferRx[ plen ]; } }
   \   000699   90....       MOV     DPTR,#(page + 194)
   \   00069C   E0           MOVX    A,@DPTR
   \   00069D   5448         ANL     A,#0x48
   \   00069F   6408         XRL     A,#0x8
   \   0006A1   7023         JNZ     ??parseGWPackage_58
   \   0006A3   90....       MOV     DPTR,#cyclesTo500
   \   0006A6   C3           CLR     C
   \   0006A7   E0           MOVX    A,@DPTR
   \   0006A8   94C8         SUBB    A,#-0x38
   \   0006AA   A3           INC     DPTR
   \   0006AB   E0           MOVX    A,@DPTR
   \   0006AC   9400         SUBB    A,#0x0
   \   0006AE   5016         JNC     ??parseGWPackage_58
   \   0006B0   90....       MOV     DPTR,#??plen
   \   0006B3   E0           MOVX    A,@DPTR
   \   0006B4   24..         ADD     A,#(radioPktBufferRx & 0xff)
   \   0006B6   F582         MOV     DPL,A
   \   0006B8   E4           CLR     A
   \   0006B9   34..         ADDC    A,#((radioPktBufferRx >> 8) & 0xff)
   \   0006BB   F583         MOV     DPH,A
   \   0006BD   E0           MOVX    A,@DPTR
   \   0006BE   90DF06       MOV     DPTR,#-0x20fa
   \   0006C1   F0           MOVX    @DPTR,A
   \   0006C2   90....       MOV     DPTR,#curChannel
   \   0006C5   F0           MOVX    @DPTR,A
   1903                          
   1904                          //lastRssi = radioPktBufferRx[ plen ];
   1905                          //setByte( SET_CUR_CHANNEL, radioPktBuffer[7] );
   1906                          
   1907                          if( ticks[ SendData ] < 0 ) ticks[ SendData ] = 0;
   \                     ??parseGWPackage_58:
   \   0006C6   90....       MOV     DPTR,#ticks
   \   0006C9   E0           MOVX    A,@DPTR
   \   0006CA   2406         ADD     A,#0x6
   \   0006CC   F8           MOV     R0,A
   \   0006CD   A3           INC     DPTR
   \   0006CE   E0           MOVX    A,@DPTR
   \   0006CF   3400         ADDC    A,#0x0
   \   0006D1   12....       LCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_94:
   \   0006D4   5008         JNC     ??parseGWPackage_7
   \   0006D6   8882         MOV     DPL,R0
   \   0006D8   8983         MOV     DPH,R1
   \   0006DA   E4           CLR     A
   \   0006DB   F0           MOVX    @DPTR,A
   \   0006DC   A3           INC     DPTR
   \   0006DD   F0           MOVX    @DPTR,A
   1908                      }
   1909                  }//else ticks[ ReceiveData ] = 2;
   1910              }
   1911              setupRepeater( FALSE ); 
   \                     ??parseGWPackage_7:
   \   0006DE                ; Setup parameters for call to function setupRepeater
   \   0006DE   7900         MOV     R1,#0x0
   \   0006E0   12....       LCALL   setupRepeater
   1912              //if( !enable2SendData ){
   1913              //    flags[ PrepareData ] = 0; flags[ SendData ] = 0; 
   1914              //}else 
   1915          //    if( (!page.is500Always) && page.isRelay ) setupRepeater( got_gw ); 
   1916              if( (!page.is500Always) && page.isRelay ){ setupRepeater( got_gw ); receive(); }
   \   0006E3   90....       MOV     DPTR,#(page + 194)
   \   0006E6   E0           MOVX    A,@DPTR
   \   0006E7   5460         ANL     A,#0x60
   \   0006E9   6420         XRL     A,#0x20
   \   0006EB   7003         JNZ     $+5
   \   0006ED   02....       LJMP    ??parseGWPackage_3
   \                     ??parseGWPackage_5:
   \   0006F0   02....       LJMP    ??Subroutine120_1
   \   0006F3                REQUIRE _A_P1
   \   0006F3                REQUIRE ADCCON1
   \   0006F3                REQUIRE RNDL
   \   0006F3                REQUIRE RNDH
   1917          //    receive();  // uncomment to get G+ behaviour
   1918          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   94FF         SUBB    A,#-0x1
   \   000004   02....       LJMP    ?Subroutine114

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_282:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_306:
   \   000003   EA           MOV     A,R2
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   85..F0       MOV     B,?V0 + 0
   \   000009   A4           MUL     AB
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   9400         SUBB    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   90....       MOV     DPTR,#temperatureProtectionDelay
   \   000006   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_281:
   \   000009   F8           MOV     R0,A
   \   00000A   EB           MOV     A,R3
   \   00000B   99           SUBB    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   E8           MOV     A,R0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E9           MOV     A,R1
   \   000015   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   3B           ADDC    A,R3
   \   000001   FD           MOV     R5,A
   \   000002   90....       MOV     DPTR,#temperatureProtectionDelay
   \   000005   12....       LCALL   ??Subroutine94_0
   \                     ??CrossCallReturnLabel_366:
   \   000008   EC           MOV     A,R4
   \   000009   C3           CLR     C
   \   00000A   9A           SUBB    A,R2
   \   00000B   FA           MOV     R2,A
   \   00000C   ED           MOV     A,R5
   \   00000D   9B           SUBB    A,R3
   \   00000E   FB           MOV     R3,A
   \   00000F   02....       LJMP    ?Subroutine110

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   02....       LJMP    ?Subroutine111

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??bunch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??plen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??cnt:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for cnt>`
   \   000001                REQUIRE __INIT_XDATA_I
   1919          /******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1920          BYTE *nextSlot(){
   \                     nextSlot:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1921              BYTE *ptr = (BYTE *)(PAGEADDR + PAGESIZE); 
   \   000005   7AF2         MOV     R2,#-0xe
   \   000007   7B5C         MOV     R3,#0x5c
   \   000009   8009         SJMP    ??nextSlot_0
   1922              while( ptr && ( ptr <= (BYTE *)(PAGEADDR+0x3FF) ) ){ 
   1923                  BYTE i = 4; 
   1924                  do{ if( ptr[--i] != 0xFF ) break; }while(i);
   1925                  if( i ) ptr += 4; else return ptr; 
   \                     ??nextSlot_1:
   \   00000B   12....       LCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_256:
   \   00000E   EA           MOV     A,R2
   \   00000F   7001         JNZ     ??nextSlot_2
   \   000011   EB           MOV     A,R3
   \                     ??nextSlot_2:
   \   000012   6022         JZ      ??nextSlot_3
   \                     ??nextSlot_0:
   \   000014   C3           CLR     C
   \   000015   EB           MOV     A,R3
   \   000016   9460         SUBB    A,#0x60
   \   000018   501C         JNC     ??nextSlot_3
   \   00001A   7C04         MOV     R4,#0x4
   \                     ??nextSlot_4:
   \   00001C   1C           DEC     R4
   \   00001D   8C..         MOV     ?V0 + 0,R4
   \   00001F   EA           MOV     A,R2
   \   000020   25..         ADD     A,?V0 + 0
   \   000022   F582         MOV     DPL,A
   \   000024   EB           MOV     A,R3
   \   000025   3400         ADDC    A,#0x0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   64FF         XRL     A,#0xff
   \   00002C   7003         JNZ     ??nextSlot_5
   \   00002E   EC           MOV     A,R4
   \   00002F   70EB         JNZ     ??nextSlot_4
   \                     ??nextSlot_5:
   \   000031   EC           MOV     A,R4
   \   000032   70D7         JNZ     ??nextSlot_1
   \   000034   8004         SJMP    ??nextSlot_6
   1926              }
   1927              return NULL;
   \                     ??nextSlot_3:
   \   000036   7A00         MOV     R2,#0x0
   \   000038   7B00         MOV     R3,#0x0
   \                     ??nextSlot_6:
   \   00003A   02....       LJMP    ??Subroutine121_0
   1928          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET
   1929          /******************************************************************************
   1930          * @fn  receive
   1931          * @brief       This function switch radio into receiving radioMode
   1932          * Parameters:
   1933          * @return void
   1934          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1935          void receive(void){
   \                     receive:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1936              //if( page.fuseComm ) return;
   1937              if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( ReceiveData, 1 ); return; }
   \   000004   12....       LCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_60:
   \   000007   7005         JNZ     ??receive_0
   \   000009   12....       LCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_390:
   \   00000C   802B         SJMP    ??receive_1
   1938              RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \                     ??receive_0:
   \   00000E   75E104       MOV     0xe1,#0x4
   \   000011   74F0         MOV     A,#-0x10
   \   000013   12....       LCALL   ??Subroutine70_0
   1939              //INT_GLOBAL_ENABLE( INT_OFF );
   1940                  si->packetReceived = 0;
   \                     ??CrossCallReturnLabel_223:
   \   000016   245F         ADD     A,#0x5f
   \   000018   12....       LCALL   ??Subroutine4_1
   1941                  radioPktBufferRx[0] = 0;    radioPktBufferRx[1] = 0;
   \                     ??CrossCallReturnLabel_15:
   \   00001B   90....       MOV     DPTR,#radioPktBufferRx
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   90....       MOV     DPTR,#(radioPktBufferRx + 1)
   \   000022   12....       LCALL   ??Subroutine70_0
   1942                  //quartz();
   1943                  si->radioMode = RADIO_MODE_RX;
   \                     ??CrossCallReturnLabel_224:
   \   000025   243A         ADD     A,#0x3a
   \   000027   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_110:
   \   00002A   7420         MOV     A,#0x20
   \   00002C   F0           MOVX    @DPTR,A
   1944                  PKTLEN = PACKET_LENGTH_GW;  
   \   00002D   7422         MOV     A,#0x22
   \   00002F   90DF02       MOV     DPTR,#-0x20fe
   \   000032   F0           MOVX    @DPTR,A
   1945                  DMAARM = DMAARM_CHANNEL0;             // Arm DMA channel 0
   \   000033   75D601       MOV     0xd6,#0x1
   1946          //        P1_1 = 0;        
   1947                  RFST = STROBE_RX;                     // Switch radio to RX
   \   000036   75E102       MOV     0xe1,#0x2
   1948              //INT_GLOBAL_ENABLE( INT_ON );
   1949          }
   \                     ??receive_1:
   \   000039   02....       LJMP    ??Subroutine113_0
   \   00003C                REQUIRE DMAARM
   \   00003C                REQUIRE RFST
   1950          /******************************************************************************
   1951          * @fn  computeADCs
   1952          * @brief       This function makes all the regular computations
   1953          * Parameters:  
   1954          * @return void
   1955          ******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1956          float vref, t;
   \                     vref:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     t:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
   1957          //static float p1, c1, corrP, corrC;

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1958          float computeAdjustment( float *k ){ return 1.0 + t*(*k); } 
   \                     computeAdjustment:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   90....       MOV     DPTR,#t
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?L_MOV_X
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   78..         MOV     R0,#?V0 + 4
   \   000013   12....       LCALL   ?L_MOV_X
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   79..         MOV     R1,#?V0 + 4
   \   00001A   12....       LCALL   ?FLT_MUL
   \   00001D   90....       MOV     DPTR,#__Constant_3f800000
   \   000020   78..         MOV     R0,#?V0 + 4
   \   000022   12....       LCALL   ?L_MOV_X
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   79..         MOV     R1,#?V0 + 4
   \   000029   12....       LCALL   ?FLT_ADD
   \   00002C   02....       LJMP    ?Subroutine124

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1959          float multSaver( INT32 *p32, float *fptr ){ return ((float) *p32) * invRef * (*fptr); }
   \                     multSaver:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   12....       LCALL   ?L_MOV_X
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?L_TO_FLT
   \   000013   90....       MOV     DPTR,#invRef
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   79..         MOV     R1,#?V0 + 4
   \   00001F   12....       LCALL   ?FLT_MUL
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   78..         MOV     R0,#?V0 + 4
   \   000028   12....       LCALL   ?L_MOV_X
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   79..         MOV     R1,#?V0 + 4
   \   00002F   12....       LCALL   ?FLT_MUL
   \   000032   02....       LJMP    ?Subroutine124
   1960          
   1961          //#pragma optimize=s 9

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1962          void computeADCs(BOOL timeout, BOOL accumulateEnergy){
   \                     computeADCs:
   \   000000   74E1         MOV     A,#-0x1f
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 31
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 3,R2
   1963          BYTE i, counter;
   1964          // static is a way to reduce stack usage 
   1965          INT32  *accptr;
   1966          UINT16  *adcptr;
   1967          static INT32  acc, df;//, thirtyThree_mV; 
   1968          static float mV, rOff;
   1969          #ifndef MidString
   1970          static float tin;
   1971          #endif
   1972          static float temp[N_CHANNELS];
   1973          float *coeff;
   1974          signed char off = FSCTRL0;
   \   000009   90DF08       MOV     DPTR,#-0x20f8
   \   00000C   E0           MOVX    A,@DPTR
   1975          
   1976              lastOff  = (INT32)off; 
   \   00000D   F8           MOV     R0,A
   \   00000E   33           RLC     A
   \   00000F   95E0         SUBB    A,0xE0 /* A   */
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#lastOff
   \   000015   12....       LCALL   ??Subroutine67_0
   1977              accptr = adcs;
   \                     ??CrossCallReturnLabel_207:
   \   000018   7A..         MOV     R2,#(adcs & 0xff)
   \   00001A   7B..         MOV     R3,#((adcs >> 8) & 0xff)
   1978              adcptr = adcBuf[0]; // using the fact that one buffer is defined right after another
   \   00001C   75....       MOV     ?V0 + 0,#(adcBuf & 0xff)
   \   00001F   75....       MOV     ?V0 + 1,#((adcBuf >> 8) & 0xff)
   1979                                  // in general it is a VERY DANGEROUS ASSUMPTION, but with this C compiler it works
   1980              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000022   90....       MOV     DPTR,#flags
   \   000025   E0           MOVX    A,@DPTR
   \   000026   2401         ADD     A,#0x1
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 5,A
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   7014         JNZ     ??computeADCs_0
   \   000038   90....       MOV     DPTR,#flags
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2402         ADD     A,#0x2
   \   00003E   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_151:
   \   000041   88..         MOV     ?V0 + 6,R0
   \   000043   89..         MOV     ?V0 + 7,R1
   \   000045   8882         MOV     DPL,R0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6006         JZ      ??computeADCs_1
   \                     ??computeADCs_0:
   \   00004C   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_41:
   \   00004F   02....       LJMP    ??computeADCs_2
   1981              if( accumulateEnergy ){
   \                     ??computeADCs_1:
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   6054         JZ      ??computeADCs_3
   1982                  adcptr += (bufferCount - 1) & ( BUFFER_SIZE-1 );
   \   000056   90....       MOV     DPTR,#bufferCount
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   18           DEC     R0
   \   00005C   7407         MOV     A,#0x7
   \   00005E   58           ANL     A,R0
   \   00005F   C3           CLR     C
   \   000060   33           RLC     A
   \   000061   24..         ADD     A,#(adcBuf & 0xff)
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   E4           CLR     A
   \   000066   34..         ADDC    A,#((adcBuf >> 8) & 0xff)
   \   000068   F5..         MOV     ?V0 + 1,A
   1983                  for( i = 0; i < N_CHANNELS; i++, adcptr+=BUFFER_SIZE )
   \   00006A   7909         MOV     R1,#0x9
   1984                      *accptr++ = *adcptr; 
   \                     ??computeADCs_4:
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FC           MOV     R4,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FD           MOV     R5,A
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   EC           MOV     A,R4
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   ED           MOV     A,R5
   \   00007F   12....       LCALL   ?Subroutine117
   \                     ??CrossCallReturnLabel_386:
   \   000082   A3           INC     DPTR
   \   000083   F0           MOVX    @DPTR,A
   \   000084   12....       LCALL   ?Subroutine85
   \                     ??CrossCallReturnLabel_257:
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   2410         ADD     A,#0x10
   \   00008B   F5..         MOV     ?V0 + 0,A
   \   00008D   E5..         MOV     A,?V0 + 1
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F5..         MOV     ?V0 + 1,A
   \   000093   19           DEC     R1
   \   000094   E9           MOV     A,R1
   \   000095   70D5         JNZ     ??computeADCs_4
   1985                  adcs[ 3 ] += gnd_shift/8;
   \   000097   90....       MOV     DPTR,#gnd_shift
   \   00009A   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_184:
   \   00009D   7A08         MOV     R2,#0x8
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   12....       LCALL   ?S_DIV_MOD
   \   0000A4   88..         MOV     ?V0 + 8,R0
   \   0000A6   E9           MOV     A,R1
   \   0000A7   02....       LJMP    ??computeADCs_5
   1986              }else{
   1987                  for( i = 0; i < N_CHANNELS; i++ ){ // 128 averaging
   \                     ??computeADCs_3:
   \   0000AA   75..00       MOV     ?V0 + 8,#0x0
   1988                      counter = BUFFER_SIZE;
   \                     ??computeADCs_6:
   \   0000AD   7C08         MOV     R4,#0x8
   1989                      acc = 0; while( counter-- )  acc += *adcptr++;
   \   0000AF   90....       MOV     DPTR,#__Constant_0
   \   0000B2   78..         MOV     R0,#?V0 + 12
   \   0000B4   12....       LCALL   ?L_MOV_X
   \   0000B7   90....       MOV     DPTR,#??acc
   \   0000BA   78..         MOV     R0,#?V0 + 12
   \   0000BC   12....       LCALL   ?L_MOV_TO_X
   \   0000BF   8027         SJMP    ??computeADCs_7
   \                     ??computeADCs_8:
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F5..         MOV     ?V0 + 12,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F5..         MOV     ?V0 + 13,A
   \   0000CE   75..00       MOV     ?V0 + 14,#0x0
   \   0000D1   75..00       MOV     ?V0 + 15,#0x0
   \   0000D4   90....       MOV     DPTR,#??acc
   \   0000D7   78..         MOV     R0,#?V0 + 12
   \   0000D9   12....       LCALL   ?L_ADD_TO_X
   \   0000DC   E5..         MOV     A,?V0 + 0
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   F5..         MOV     ?V0 + 0,A
   \   0000E2   E5..         MOV     A,?V0 + 1
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   F5..         MOV     ?V0 + 1,A
   \                     ??computeADCs_7:
   \   0000E8   EC           MOV     A,R4
   \   0000E9   1C           DEC     R4
   \   0000EA   70D5         JNZ     ??computeADCs_8
   1990                      if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0000EC   85..82       MOV     DPL,?V0 + 4
   \   0000EF   85..83       MOV     DPH,?V0 + 5
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6003         JZ      $+5
   \   0000F5   02....       LJMP    ??computeADCs_0
   \   0000F8   85..82       MOV     DPL,?V0 + 6
   \   0000FB   8983         MOV     DPH,R1
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   6003         JZ      $+5
   \   000100   02....       LJMP    ??computeADCs_0
   1991                     *accptr++ = acc;
   \   000103   90....       MOV     DPTR,#??acc
   \   000106   78..         MOV     R0,#?V0 + 12
   \   000108   12....       LCALL   ?L_MOV_X
   \   00010B   8A82         MOV     DPL,R2
   \   00010D   8B83         MOV     DPH,R3
   \   00010F   78..         MOV     R0,#?V0 + 12
   \   000111   12....       LCALL   ?L_MOV_TO_X
   \   000114   12....       LCALL   ?Subroutine85
   1992                  }
   \                     ??CrossCallReturnLabel_258:
   \   000117   05..         INC     ?V0 + 8
   \   000119   E5..         MOV     A,?V0 + 8
   \   00011B   C3           CLR     C
   \   00011C   9409         SUBB    A,#0x9
   \   00011E   408D         JC      ??computeADCs_6
   1993                  adcs[ 3 ] += gnd_shift;
   \   000120   90....       MOV     DPTR,#gnd_shift
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F5..         MOV     ?V0 + 0,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   85....       MOV     ?V0 + 8,?V0 + 0
   \                     ??computeADCs_5:
   \   00012B   F5..         MOV     ?V0 + 9,A
   \   00012D   33           RLC     A
   \   00012E   95E0         SUBB    A,0xE0 /* A   */
   \   000130   F5..         MOV     ?V0 + 10,A
   \   000132   F5..         MOV     ?V0 + 11,A
   \   000134   90....       MOV     DPTR,#(adcs + 12)
   \   000137   78..         MOV     R0,#?V0 + 8
   \   000139   12....       LCALL   ?L_ADD_TO_X
   1994              }
   1995              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   00013C   85..82       MOV     DPL,?V0 + 4
   \   00013F   85..83       MOV     DPH,?V0 + 5
   \   000142   E0           MOVX    A,@DPTR
   \   000143   6003         JZ      $+5
   \   000145   02....       LJMP    ??computeADCs_0
   \   000148   85..82       MOV     DPL,?V0 + 6
   \   00014B   85..83       MOV     DPH,?V0 + 7
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   6003         JZ      $+5
   \   000151   02....       LJMP    ??computeADCs_0
   1996              /*
   1997              if( page.thirty_three_mv ){
   1998                  thirtyThree_mV = (INT32) ( 33 * ( adcs[ REF ] - adcs[ EXT_GND ] ) / ( page.vrefPolynom[0] - 33 ) );
   1999                  adcs[ EXT_GND ] -= thirtyThree_mV;
   2000              }
   2001              */
   2002              substractGround( adcs, 0, N_CHANNELS );
   \   000154                ; Setup parameters for call to function substractGround
   \   000154   7C09         MOV     R4,#0x9
   \   000156   7900         MOV     R1,#0x0
   \   000158   7A..         MOV     R2,#(adcs & 0xff)
   \   00015A   7B..         MOV     R3,#((adcs >> 8) & 0xff)
   \   00015C   12....       LCALL   substractGround
   2003              //if( page.thirty_three_mv ) adcs[ EXT_GND ] += thirtyThree_mV;
   2004              
   2005              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   00015F   12....       LCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_47:
   \   000162   7005         JNZ     ??computeADCs_9
   \   000164   12....       LCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_49:
   \   000167   6003         JZ      ??computeADCs_10
   \                     ??computeADCs_9:
   \   000169   02....       LJMP    ??computeADCs_0
   2006              if( adcs[ REF ] == 0 ) return; 
   \                     ??computeADCs_10:
   \   00016C   90....       MOV     DPTR,#(adcs + 16)
   \   00016F   78..         MOV     R0,#?V0 + 4
   \   000171   12....       LCALL   ?L_MOV_X
   \   000174   90....       MOV     DPTR,#__Constant_0
   \   000177   78..         MOV     R0,#?V0 + 4
   \   000179   12....       LCALL   ?L_EQ_X
   \   00017C   7003         JNZ     $+5
   \   00017E   02....       LJMP    ??computeADCs_2
   2007              invRef = 1.0 / (float)adcs[ REF ];
   \   000181   75..00       MOV     ?V0 + 8,#0x0
   \   000184   75..00       MOV     ?V0 + 9,#0x0
   \   000187   75..80       MOV     ?V0 + 10,#-0x80
   \   00018A   75..3F       MOV     ?V0 + 11,#0x3f
   \   00018D   78..         MOV     R0,#?V0 + 4
   \   00018F   12....       LCALL   ?L_TO_FLT
   \   000192   78..         MOV     R0,#?V0 + 8
   \   000194   79..         MOV     R1,#?V0 + 4
   \   000196   12....       LCALL   ?FLT_DIV
   \   000199   90....       MOV     DPTR,#invRef
   \   00019C   78..         MOV     R0,#?V0 + 8
   \   00019E   12....       LCALL   ?L_MOV_TO_X
   2008              // compute correct temperature, correct vref, coeffcient to convert sum of counts to physical values
   2009              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   70C1         JNZ     ??computeADCs_9
   \   0001A8   85..82       MOV     DPL,?V0 + 0
   \   0001AB   85..83       MOV     DPH,?V0 + 1
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   70B8         JNZ     ??computeADCs_9
   2010              _coeff = page.linearK[4];    t   = lin(  TEXT );
   \   0001B1   90....       MOV     DPTR,#_coeff
   \   0001B4   74..         MOV     A,#((page + 72) & 0xff)
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   A3           INC     DPTR
   \   0001B8   74..         MOV     A,#(((page + 72) >> 8) & 0xff)
   \   0001BA   F0           MOVX    @DPTR,A
   \   0001BB                ; Setup parameters for call to function lin
   \   0001BB   7906         MOV     R1,#0x6
   \   0001BD   12....       LCALL   lin
   \   0001C0   8A..         MOV     ?V0 + 4,R2
   \   0001C2   8B..         MOV     ?V0 + 5,R3
   \   0001C4   8C..         MOV     ?V0 + 6,R4
   \   0001C6   8D..         MOV     ?V0 + 7,R5
   \   0001C8   90....       MOV     DPTR,#t
   \   0001CB   78..         MOV     R0,#?V0 + 4
   \   0001CD   12....       LCALL   ?L_MOV_TO_X
   2011          #ifndef MidString
   2012              _coeff = page.linearK[5];    tin = -lin( TINT );
   2013          #endif
   2014              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0001D0   8E82         MOV     DPL,R6
   \   0001D2   8F83         MOV     DPH,R7
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   7092         JNZ     ??computeADCs_9
   \   0001D7   85..82       MOV     DPL,?V0 + 0
   \   0001DA   85..83       MOV     DPH,?V0 + 1
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   7089         JNZ     ??computeADCs_9
   2015              adcs16[ 4 ]  = (INT16)mult(t,   100);
   \   0001E0   90....       MOV     DPTR,#t
   \   0001E3   78..         MOV     R0,#?V0 + 4
   \   0001E5   12....       LCALL   ?L_MOV_X
   \   0001E8   90....       MOV     DPTR,#__Constant_42c80000
   \   0001EB   78..         MOV     R0,#?V0 + 8
   \   0001ED   12....       LCALL   ?L_MOV_X
   \   0001F0   78..         MOV     R0,#?V0 + 4
   \   0001F2   79..         MOV     R1,#?V0 + 8
   \   0001F4   12....       LCALL   ?FLT_MUL
   \   0001F7   78..         MOV     R0,#?V0 + 4
   \   0001F9   12....       LCALL   ?FLT_TO_L
   \   0001FC   90....       MOV     DPTR,#(adcs16 + 8)
   \   0001FF   E5..         MOV     A,?V0 + 4
   \   000201   F0           MOVX    @DPTR,A
   \   000202   A3           INC     DPTR
   \   000203   E5..         MOV     A,?V0 + 5
   \   000205   F0           MOVX    @DPTR,A
   2016          #ifndef MidString
   2017              adcs16[ 5 ] = ((INT16)mult(tin, 100));
   2018          #endif
   2019              
   2020              _coeff = page.dFk;
   \   000206   90....       MOV     DPTR,#_coeff
   \   000209   74..         MOV     A,#((page + 12) & 0xff)
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   A3           INC     DPTR
   \   00020D   74..         MOV     A,#(((page + 12) >> 8) & 0xff)
   \   00020F   12....       LCALL   ?Subroutine101
   2021              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_297:
   \   000212   E0           MOVX    A,@DPTR
   \   000213   6003         JZ      $+5
   \   000215   02....       LJMP    ??computeADCs_0
   \   000218   85..82       MOV     DPL,?V0 + 0
   \   00021B   85..83       MOV     DPH,?V0 + 1
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   6003         JZ      $+5
   \   000221   02....       LJMP    ??computeADCs_0
   2022              /*
   2023              if( abs( t - tin ) > 20.0 ){
   2024                       rOff = cube_coeff( 0.5*( tin+t ) );
   2025              }else    rOff = cube_coeff( t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
   2026              */
   2027              //if( abs( adcs16[ 4 ] - adcs16[ 5 ] ) > 2000 ) t = 0.5*( tin+t );
   2028              rOff = cube_coeff( &t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
   \   000224                ; Setup parameters for call to function cube_coeff
   \   000224   7A..         MOV     R2,#(t & 0xff)
   \   000226   7B..         MOV     R3,#((t >> 8) & 0xff)
   \   000228   12....       LCALL   cube_coeff
   \   00022B   8A..         MOV     ?V0 + 4,R2
   \   00022D   8B..         MOV     ?V0 + 5,R3
   \   00022F   8C..         MOV     ?V0 + 6,R4
   \   000231   8D..         MOV     ?V0 + 7,R5
   \   000233   90....       MOV     DPTR,#??rOff
   \   000236   78..         MOV     R0,#?V0 + 4
   \   000238   12....       LCALL   ?L_MOV_TO_X
   2029              
   2030              df = (INT32) rOff;
   \   00023B   90....       MOV     DPTR,#??rOff
   \   00023E   78..         MOV     R0,#?V0 + 4
   \   000240   12....       LCALL   ?L_MOV_X
   \   000243   78..         MOV     R0,#?V0 + 4
   \   000245   12....       LCALL   ?FLT_TO_L
   \   000248   90....       MOV     DPTR,#??df
   \   00024B   78..         MOV     R0,#?V0 + 4
   \   00024D   12....       LCALL   ?L_MOV_TO_X
   2031              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000250   8E82         MOV     DPL,R6
   \   000252   8F83         MOV     DPH,R7
   \   000254   E0           MOVX    A,@DPTR
   \   000255   6003         JZ      $+5
   \   000257   02....       LJMP    ??computeADCs_0
   \   00025A   85..82       MOV     DPL,?V0 + 0
   \   00025D   85..83       MOV     DPH,?V0 + 1
   \   000260   E0           MOVX    A,@DPTR
   \   000261   6003         JZ      $+5
   \   000263   02....       LJMP    ??computeADCs_0
   2032              theRealOffset = (INT8)( (delta + (lastOff<<2) - ( df )) >> 2 );
   \   000266   90....       MOV     DPTR,#delta
   \   000269   78..         MOV     R0,#?V0 + 4
   \   00026B   12....       LCALL   ?L_MOV_X
   \   00026E   90....       MOV     DPTR,#lastOff
   \   000271   12....       LCALL   ?Subroutine24
   \                     ??CrossCallReturnLabel_64:
   \   000274   7402         MOV     A,#0x2
   \   000276   78..         MOV     R0,#?V0 + 0
   \   000278   12....       LCALL   ?S_SHL
   \   00027B   E5..         MOV     A,?V0 + 0
   \   00027D   25..         ADD     A,?V0 + 4
   \   00027F   FA           MOV     R2,A
   \   000280   E5..         MOV     A,?V0 + 1
   \   000282   35..         ADDC    A,?V0 + 5
   \   000284   FB           MOV     R3,A
   \   000285   90....       MOV     DPTR,#??df
   \   000288   78..         MOV     R0,#?V0 + 4
   \   00028A   12....       LCALL   ?L_MOV_X
   \   00028D   EA           MOV     A,R2
   \   00028E   C3           CLR     C
   \   00028F   95..         SUBB    A,?V0 + 4
   \   000291   F5..         MOV     ?V0 + 0,A
   \   000293   EB           MOV     A,R3
   \   000294   95..         SUBB    A,?V0 + 5
   \   000296   F5..         MOV     ?V0 + 1,A
   \   000298   7402         MOV     A,#0x2
   \   00029A   78..         MOV     R0,#?V0 + 0
   \   00029C   12....       LCALL   ?SS_SHR
   \   00029F   E5..         MOV     A,?V0 + 0
   \   0002A1   90....       MOV     DPTR,#theRealOffset
   \   0002A4   F0           MOVX    @DPTR,A
   2033          
   2034              // adjust frequency by temperature
   2035              if( timeout && ( si->radioMode == RADIO_MODE_UNDEF ) ) addDF( df /*+ page.theDelta*/ - delta ); 
   \   0002A5   E5..         MOV     A,?V0 + 2
   \   0002A7   6022         JZ      ??computeADCs_11
   \   0002A9   12....       LCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_77:
   \   0002AC   64F0         XRL     A,#0xf0
   \   0002AE   701B         JNZ     ??computeADCs_11
   \   0002B0                ; Setup parameters for call to function addDF
   \   0002B0   90....       MOV     DPTR,#??df
   \   0002B3   78..         MOV     R0,#?V0 + 4
   \   0002B5   12....       LCALL   ?L_MOV_X
   \   0002B8   90....       MOV     DPTR,#delta
   \   0002BB   78..         MOV     R0,#?V0 + 4
   \   0002BD   12....       LCALL   ?L_SUB_X
   \   0002C0   AA..         MOV     R2,?V0 + 4
   \   0002C2   AB..         MOV     R3,?V0 + 5
   \   0002C4   AC..         MOV     R4,?V0 + 6
   \   0002C6   AD..         MOV     R5,?V0 + 7
   \   0002C8   12....       LCALL   addDF
   2036              //RFST = STROBE_CAL; 
   2037          
   2038              coeff = page.vrefPolynom;
   2039              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??computeADCs_11:
   \   0002CB   12....       LCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_48:
   \   0002CE   7005         JNZ     ??computeADCs_12
   \   0002D0   12....       LCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_50:
   \   0002D3   6003         JZ      ??computeADCs_13
   \                     ??computeADCs_12:
   \   0002D5   02....       LJMP    ??computeADCs_0
   2040              vref  = coeff[0] * ( 1.0 - coeff[1]*sqr( t - coeff[2] ) );
   \                     ??computeADCs_13:
   \   0002D8   90....       MOV     DPTR,#t
   \   0002DB   78..         MOV     R0,#?V0 + 8
   \   0002DD   12....       LCALL   ?L_MOV_X
   \   0002E0   90....       MOV     DPTR,#(page + 36)
   \   0002E3   78..         MOV     R0,#?V0 + 4
   \   0002E5   12....       LCALL   ?L_MOV_X
   \   0002E8   78..         MOV     R0,#?V0 + 8
   \   0002EA   79..         MOV     R1,#?V0 + 4
   \   0002EC   12....       LCALL   ?FLT_SUB
   \   0002EF   90....       MOV     DPTR,#(page + 28)
   \   0002F2   78..         MOV     R0,#?V0 + 12
   \   0002F4   12....       LCALL   ?L_MOV_X
   \   0002F7   75..00       MOV     ?V0 + 16,#0x0
   \   0002FA   75..00       MOV     ?V0 + 17,#0x0
   \   0002FD   75..80       MOV     ?V0 + 18,#-0x80
   \   000300   75..3F       MOV     ?V0 + 19,#0x3f
   \   000303   90....       MOV     DPTR,#(page + 32)
   \   000306   78..         MOV     R0,#?V0 + 20
   \   000308   12....       LCALL   ?L_MOV_X
   \   00030B   85....       MOV     ?V0 + 4,?V0 + 8
   \   00030E   85....       MOV     ?V0 + 5,?V0 + 9
   \   000311   85....       MOV     ?V0 + 6,?V0 + 10
   \   000314   85....       MOV     ?V0 + 7,?V0 + 11
   \   000317   78..         MOV     R0,#?V0 + 4
   \   000319   79..         MOV     R1,#?V0 + 8
   \   00031B   12....       LCALL   ?FLT_MUL
   \   00031E   78..         MOV     R0,#?V0 + 20
   \   000320   79..         MOV     R1,#?V0 + 4
   \   000322   12....       LCALL   ?FLT_MUL
   \   000325   78..         MOV     R0,#?V0 + 16
   \   000327   79..         MOV     R1,#?V0 + 20
   \   000329   12....       LCALL   ?FLT_SUB
   \   00032C   78..         MOV     R0,#?V0 + 12
   \   00032E   79..         MOV     R1,#?V0 + 16
   \   000330   12....       LCALL   ?FLT_MUL
   \   000333   90....       MOV     DPTR,#vref
   \   000336   78..         MOV     R0,#?V0 + 12
   \   000338   12....       LCALL   ?L_MOV_TO_X
   2041              t -= 25.0;
   \   00033B   90....       MOV     DPTR,#t
   \   00033E   78..         MOV     R0,#?V0 + 4
   \   000340   12....       LCALL   ?L_MOV_X
   \   000343   90....       MOV     DPTR,#__Constant_c1c80000
   \   000346   78..         MOV     R0,#?V0 + 8
   \   000348   12....       LCALL   ?L_MOV_X
   \   00034B   78..         MOV     R0,#?V0 + 4
   \   00034D   79..         MOV     R1,#?V0 + 8
   \   00034F   12....       LCALL   ?FLT_ADD
   \   000352   90....       MOV     DPTR,#t
   \   000355   78..         MOV     R0,#?V0 + 4
   \   000357   12....       LCALL   ?L_MOV_TO_X
   2042              invRef  *= vref; // / ((float)adcs[ REF ]);  
   \   00035A   90....       MOV     DPTR,#invRef
   \   00035D   78..         MOV     R0,#?V0 + 4
   \   00035F   12....       LCALL   ?L_MOV_X
   \   000362   90....       MOV     DPTR,#vref
   \   000365   78..         MOV     R0,#?V0 + 8
   \   000367   12....       LCALL   ?L_MOV_X
   \   00036A   78..         MOV     R0,#?V0 + 4
   \   00036C   79..         MOV     R1,#?V0 + 8
   \   00036E   12....       LCALL   ?FLT_MUL
   \   000371   90....       MOV     DPTR,#invRef
   \   000374   78..         MOV     R0,#?V0 + 4
   \   000376   12....       LCALL   ?L_MOV_TO_X
   2043              // scale everything to physical units
   2044              // Vout  0      Pin   1     Iout  2      Gnd ext 3        Ref 4      Vin  5       Text  6     Tin 7
   2045              for( i = 0; i<N_CHANNELS; i++) 
   \   000379   75..00       MOV     ?V0 + 8,#0x0
   2046                  /*if( indices[ i ] != 0xFF )*/ {
   2047                      mV = invRef * ((float)adcs[i]); //temp[i]; // adcs values (all but REF) should be scaled to fit into UINT16 - k should be accordingly set
   \                     ??computeADCs_14:
   \   00037C   85..82       MOV     DPL,?V0 + 8
   \   00037F   8582..       MOV     ?V0 + 6,DPL
   \   000382   85....       MOV     ?V0 + 10,?V0 + 6
   \   000385   75..00       MOV     ?V0 + 11,#0x0
   \   000388   7402         MOV     A,#0x2
   \   00038A   78..         MOV     R0,#?V0 + 10
   \   00038C   12....       LCALL   ?S_SHL
   \   00038F   85....       MOV     ?V0 + 4,?V0 + 10
   \   000392   85....       MOV     ?V0 + 5,?V0 + 11
   \   000395   90....       MOV     DPTR,#invRef
   \   000398   78..         MOV     R0,#?V0 + 12
   \   00039A   12....       LCALL   ?L_MOV_X
   \   00039D   E5..         MOV     A,?V0 + 4
   \   00039F   24..         ADD     A,#(adcs & 0xff)
   \   0003A1   F582         MOV     DPL,A
   \   0003A3   E5..         MOV     A,?V0 + 5
   \   0003A5   34..         ADDC    A,#((adcs >> 8) & 0xff)
   \   0003A7   F583         MOV     DPH,A
   \   0003A9   78..         MOV     R0,#?V0 + 16
   \   0003AB   12....       LCALL   ?L_MOV_X
   \   0003AE   78..         MOV     R0,#?V0 + 16
   \   0003B0   12....       LCALL   ?L_TO_FLT
   \   0003B3   78..         MOV     R0,#?V0 + 12
   \   0003B5   79..         MOV     R1,#?V0 + 16
   \   0003B7   12....       LCALL   ?FLT_MUL
   \   0003BA   90....       MOV     DPTR,#??mV
   \   0003BD   78..         MOV     R0,#?V0 + 12
   \   0003BF   12....       LCALL   ?L_MOV_TO_X
   2048                      if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0003C2   8E82         MOV     DPL,R6
   \   0003C4   8F83         MOV     DPH,R7
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   6003         JZ      $+5
   \   0003C9   02....       LJMP    ??computeADCs_0
   \   0003CC   85..82       MOV     DPL,?V0 + 0
   \   0003CF   85..83       MOV     DPH,?V0 + 1
   \   0003D2   E0           MOVX    A,@DPTR
   \   0003D3   6003         JZ      $+5
   \   0003D5   02....       LJMP    ??computeADCs_0
   2049          #ifdef MidString
   2050                      if( (i == 8) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
   \   0003D8   7408         MOV     A,#0x8
   \   0003DA   65..         XRL     A,?V0 + 8
   \   0003DC   600C         JZ      ??computeADCs_15
   2051                      if( (i == 7) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
   \   0003DE   7407         MOV     A,#0x7
   \   0003E0   65..         XRL     A,?V0 + 8
   \   0003E2   6006         JZ      ??computeADCs_15
   2052          #else
   2053                      if( i == 1 )  mV *= computeAdjustment( &page.tkPower );   // t - 25
   2054          #endif
   2055                      if( i == 2 )  mV *= computeAdjustment( &page.tkCurrent ); // t - 25
   \   0003E4   7402         MOV     A,#0x2
   \   0003E6   65..         XRL     A,?V0 + 8
   \   0003E8   7026         JNZ     ??computeADCs_16
   \                     ??computeADCs_15:
   \   0003EA   90....       MOV     DPTR,#??mV
   \   0003ED   78..         MOV     R0,#?V0 + 12
   \   0003EF   12....       LCALL   ?L_MOV_X
   \   0003F2                ; Setup parameters for call to function computeAdjustment
   \   0003F2   7A..         MOV     R2,#((page + 177) & 0xff)
   \   0003F4   7B..         MOV     R3,#(((page + 177) >> 8) & 0xff)
   \   0003F6   12....       LCALL   computeAdjustment
   \   0003F9   8A..         MOV     ?V0 + 16,R2
   \   0003FB   8B..         MOV     ?V0 + 17,R3
   \   0003FD   8C..         MOV     ?V0 + 18,R4
   \   0003FF   8D..         MOV     ?V0 + 19,R5
   \   000401   78..         MOV     R0,#?V0 + 12
   \   000403   79..         MOV     R1,#?V0 + 16
   \   000405   12....       LCALL   ?FLT_MUL
   \   000408   90....       MOV     DPTR,#??mV
   \   00040B   78..         MOV     R0,#?V0 + 12
   \   00040D   12....       LCALL   ?L_MOV_TO_X
   2056                      if( indices[ i ] == 0xFF ){ temp[i] = mV; continue; }
   \                     ??computeADCs_16:
   \   000410   E5..         MOV     A,?V0 + 4
   \   000412   24..         ADD     A,#(??temp & 0xff)
   \   000414   F8           MOV     R0,A
   \   000415   E5..         MOV     A,?V0 + 5
   \   000417   34..         ADDC    A,#((??temp >> 8) & 0xff)
   \   000419   F9           MOV     R1,A
   \   00041A   88..         MOV     ?V0 + 4,R0
   \   00041C   89..         MOV     ?V0 + 5,R1
   \   00041E   E5..         MOV     A,?V0 + 6
   \   000420   24..         ADD     A,#(indices & 0xff)
   \   000422   F582         MOV     DPL,A
   \   000424   E4           CLR     A
   \   000425   34..         ADDC    A,#((indices >> 8) & 0xff)
   \   000427   F583         MOV     DPH,A
   \   000429   E0           MOVX    A,@DPTR
   \   00042A   F5..         MOV     ?V0 + 6,A
   \   00042C   74FF         MOV     A,#-0x1
   \   00042E   65..         XRL     A,?V0 + 6
   \   000430   7014         JNZ     ??computeADCs_17
   \   000432   90....       MOV     DPTR,#??mV
   \   000435   78..         MOV     R0,#?V0 + 12
   \   000437   12....       LCALL   ?L_MOV_X
   \   00043A   85..82       MOV     DPL,?V0 + 4
   \   00043D   8983         MOV     DPH,R1
   \   00043F   78..         MOV     R0,#?V0 + 12
   \   000441   12....       LCALL   ?L_MOV_TO_X
   \   000444   8056         SJMP    ??computeADCs_18
   2057                      _coeff = page.linearK[  indices[i] ];
   \                     ??computeADCs_17:
   \   000446   75..00       MOV     ?V0 + 7,#0x0
   \   000449   7403         MOV     A,#0x3
   \   00044B   78..         MOV     R0,#?V0 + 6
   \   00044D   12....       LCALL   ?S_SHL
   \   000450   E5..         MOV     A,?V0 + 6
   \   000452   24..         ADD     A,#((page + 40) & 0xff)
   \   000454   F8           MOV     R0,A
   \   000455   E5..         MOV     A,?V0 + 7
   \   000457   34..         ADDC    A,#(((page + 40) >> 8) & 0xff)
   \   000459   F9           MOV     R1,A
   \   00045A   90....       MOV     DPTR,#_coeff
   \   00045D   12....       LCALL   ??Subroutine67_0
   2058                      temp[i] = lin_coeff( mV );
   \                     ??CrossCallReturnLabel_208:
   \   000460                ; Setup parameters for call to function lin_coeff
   \   000460   90....       MOV     DPTR,#??mV
   \   000463   78..         MOV     R0,#?V0 + 12
   \   000465   12....       LCALL   ?L_MOV_X
   \   000468   AA..         MOV     R2,?V0 + 12
   \   00046A   AB..         MOV     R3,?V0 + 13
   \   00046C   AC..         MOV     R4,?V0 + 14
   \   00046E   AD..         MOV     R5,?V0 + 15
   \   000470   12....       LCALL   lin_coeff
   \   000473   8A..         MOV     ?V0 + 12,R2
   \   000475   8B..         MOV     ?V0 + 13,R3
   \   000477   8C..         MOV     ?V0 + 14,R4
   \   000479   8D..         MOV     ?V0 + 15,R5
   \   00047B   85..82       MOV     DPL,?V0 + 4
   \   00047E   85..83       MOV     DPH,?V0 + 5
   \   000481   78..         MOV     R0,#?V0 + 12
   \   000483   12....       LCALL   ?L_MOV_TO_X
   2059                      if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000486   8E82         MOV     DPL,R6
   \   000488   8F83         MOV     DPH,R7
   \   00048A   E0           MOVX    A,@DPTR
   \   00048B   6003         JZ      $+5
   \   00048D   02....       LJMP    ??computeADCs_0
   \   000490   85..82       MOV     DPL,?V0 + 0
   \   000493   85..83       MOV     DPH,?V0 + 1
   \   000496   E0           MOVX    A,@DPTR
   \   000497   6003         JZ      $+5
   \   000499   02....       LJMP    ??computeADCs_0
   2060                  }
   \                     ??computeADCs_18:
   \   00049C   05..         INC     ?V0 + 8
   \   00049E   E5..         MOV     A,?V0 + 8
   \   0004A0   C3           CLR     C
   \   0004A1   9409         SUBB    A,#0x9
   \   0004A3   5003         JNC     $+5
   \   0004A5   02....       LJMP    ??computeADCs_14
   2061          
   2062              //temp[ 1 ] *= vref * invVref0;               // power correction
   2063              // crosstalk   Istr
   2064          
   2065              //temp[ 0 ] -= mult( temp[2]*0.0001,  page.shunt );                  // Vout
   2066              //                  Power           Vin
   2067              //temp[ 5 ] += mult( temp[1]/temp[5], page.shunt );      // Vin
   2068              
   2069              #ifdef MidString    
   2070                  adcs16[ 0 ] = convU( temp[ 0 ] ); // temp[ 0 ] ); 
   \   0004A8                ; Setup parameters for call to function convU
   \   0004A8   90....       MOV     DPTR,#??temp
   \   0004AB   78..         MOV     R0,#?V0 + 4
   \   0004AD   12....       LCALL   ?L_MOV_X
   \   0004B0   AA..         MOV     R2,?V0 + 4
   \   0004B2   AB..         MOV     R3,?V0 + 5
   \   0004B4   AC..         MOV     R4,?V0 + 6
   \   0004B6   AD..         MOV     R5,?V0 + 7
   \   0004B8   12....       LCALL   convU
   \   0004BB   90....       MOV     DPTR,#adcs16
   \   0004BE   12....       LCALL   ??Subroutine110_0
   2071                  adcs16[ 1 ] = convU( temp[ 1 ] ); // temp[ 1 ] ); 
   \                     ??CrossCallReturnLabel_324:
   \   0004C1                ; Setup parameters for call to function convU
   \   0004C1   90....       MOV     DPTR,#(??temp + 4)
   \   0004C4   78..         MOV     R0,#?V0 + 4
   \   0004C6   12....       LCALL   ?L_MOV_X
   \   0004C9   AA..         MOV     R2,?V0 + 4
   \   0004CB   AB..         MOV     R3,?V0 + 5
   \   0004CD   AC..         MOV     R4,?V0 + 6
   \   0004CF   AD..         MOV     R5,?V0 + 7
   \   0004D1   12....       LCALL   convU
   \   0004D4   90....       MOV     DPTR,#(adcs16 + 2)
   \   0004D7   12....       LCALL   ?Subroutine2
   2072                  if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_0:
   \   0004DA   7005         JNZ     ??computeADCs_19
   \   0004DC   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_27:
   \   0004DF   6003         JZ      ??computeADCs_20
   \                     ??computeADCs_19:
   \   0004E1   02....       LJMP    ??computeADCs_0
   2073                  adcs16[ 3 ] = convU( temp[ 5 ] ); // temp[ 5 ] );
   \                     ??computeADCs_20:
   \   0004E4                ; Setup parameters for call to function convU
   \   0004E4   90....       MOV     DPTR,#(??temp + 20)
   \   0004E7   78..         MOV     R0,#?V0 + 4
   \   0004E9   12....       LCALL   ?L_MOV_X
   \   0004EC   AA..         MOV     R2,?V0 + 4
   \   0004EE   AB..         MOV     R3,?V0 + 5
   \   0004F0   AC..         MOV     R4,?V0 + 6
   \   0004F2   AD..         MOV     R5,?V0 + 7
   \   0004F4   12....       LCALL   convU
   \   0004F7   90....       MOV     DPTR,#(adcs16 + 6)
   \   0004FA   12....       LCALL   ??Subroutine110_0
   2074                  adcs16[ 5 ] = convS( temp[ 8 ] ); // Iin2 
   \                     ??CrossCallReturnLabel_325:
   \   0004FD                ; Setup parameters for call to function convS
   \   0004FD   90....       MOV     DPTR,#(??temp + 32)
   \   000500   78..         MOV     R0,#?V0 + 4
   \   000502   12....       LCALL   ?L_MOV_X
   \   000505   AA..         MOV     R2,?V0 + 4
   \   000507   AB..         MOV     R3,?V0 + 5
   \   000509   AC..         MOV     R4,?V0 + 6
   \   00050B   AD..         MOV     R5,?V0 + 7
   \   00050D   12....       LCALL   convS
   \   000510   90....       MOV     DPTR,#(adcs16 + 10)
   \   000513   12....       LCALL   ??Subroutine110_0
   2075                  //adcs16[ 7 ] = (INT16)(adcs[7]+adcs[3]);  //temp.debug stuff
   2076                  adcs16[ 6 ] = convS( temp[ 7 ] );
   \                     ??CrossCallReturnLabel_326:
   \   000516                ; Setup parameters for call to function convS
   \   000516   90....       MOV     DPTR,#(??temp + 28)
   \   000519   78..         MOV     R0,#?V0 + 4
   \   00051B   12....       LCALL   ?L_MOV_X
   \   00051E   AA..         MOV     R2,?V0 + 4
   \   000520   AB..         MOV     R3,?V0 + 5
   \   000522   AC..         MOV     R4,?V0 + 6
   \   000524   AD..         MOV     R5,?V0 + 7
   \   000526   12....       LCALL   convS
   \   000529   90....       MOV     DPTR,#(adcs16 + 12)
   \   00052C   12....       LCALL   ??Subroutine110_0
   2077              #else
   2078                  adcs16[ 0 ] = convU( temp[ 0 ] - mult( temp[2]*0.0001,  page.shunt ) ); //temp[ 0 ] ); 
   2079                  adcs16[ 1 ] = convU( temp[ 1 ] *= vref * invVref0 );   //temp[ 1 ] ); 
   2080                  adcs16[ 3 ] = convU( temp[ 5 ] + mult( temp[1]/temp[5], page.shunt ) );// temp[ 5 ] );
   2081              #endif    
   2082              adcs16[ 2 ] = convS( temp[ 2 ] );
   \                     ??CrossCallReturnLabel_327:
   \   00052F                ; Setup parameters for call to function convS
   \   00052F   90....       MOV     DPTR,#(??temp + 8)
   \   000532   78..         MOV     R0,#?V0 + 4
   \   000534   12....       LCALL   ?L_MOV_X
   \   000537   AA..         MOV     R2,?V0 + 4
   \   000539   AB..         MOV     R3,?V0 + 5
   \   00053B   AC..         MOV     R4,?V0 + 6
   \   00053D   AD..         MOV     R5,?V0 + 7
   \   00053F   12....       LCALL   convS
   \   000542   90....       MOV     DPTR,#(adcs16 + 4)
   \   000545   12....       LCALL   ?Subroutine2
   2083              
   2084              //adcs16[ 6 ] = (UINT16)adcs[ EXT_GND ];
   2085              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_1:
   \   000548   7097         JNZ     ??computeADCs_19
   \   00054A   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_28:
   \   00054D   6003         JZ      $+5
   \   00054F   02....       LJMP    ??computeADCs_0
   2086              
   2087              if( accumulateEnergy ){    
   \   000552   E5..         MOV     A,?V0 + 3
   \   000554   6003         JZ      ??computeADCs_2
   2088                  //static BYTE _history = 0;
   2089                  checkVin();
   \   000556                ; Setup parameters for call to function checkVin
   \   000556   12....       LCALL   checkVin
   \                     ??computeADCs_2:
   \   000559   7F18         MOV     R7,#0x18
   \   00055B   02....       LJMP    ?FUNC_LEAVE_XDATA
   2090                  /*_history <<= 1; 
   2091                  if( ((INT16)adcs16[ 2 ]) > 15000 ){ //page.cur_noise ){ 
   2092                      deltaEnergy += (double) ( temp[2] * temp[0] * KE ); // W*h
   2093                      _history |= 1;
   2094                  }else{
   2095                      if( _history == 0xFE ){
   2096                          //BYTE *ptr = nextSlot();
   2097                          energy += deltaEnergy; 
   2098                          zerofill( (BYTE *)&deltaEnergy, 4 ); 
   2099                          //if(      ptr > ENERGY_WRITE_LIMIT ) savePB();
   2100                          //else if( ptr ) initiateTransfer( (BYTE *)&energy, ptr, 4 );
   2101                      }
   2102                  }*/
   2103              }
   2104          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   08           INC     R0
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   88..         MOV     ?V0 + 0,R0
   \   00000E   89..         MOV     ?V0 + 1,R1
   \   000010   8882         MOV     DPL,R0
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2401         ADD     A,#0x1
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??acc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??df:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??mV:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??rOff:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??temp:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
   2105          //______________________________________________________________________________________________________________________________
   2106          //BOOL checkPage( BYTE val ){ return val && val != 0x1F && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ); }
   2107          //______________________________________________________________________________________________________________________________
   2108          /******************************************************************************
   2109          * @fn  setByte
   2110          * @brief       set the byte value to register
   2111          * Parameters:  byte reg - register, byte val - value
   2112          * @return      void
   2113          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2114          void setByte( BYTE reg, BYTE val ){
   \                     setByte:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   2115          BYTE *ptr; BYTE *pptr = (BYTE *)&page;
   \   000007   7C..         MOV     R4,#(page & 0xff)
   \   000009   7D..         MOV     R5,#((page >> 8) & 0xff)
   2116              /*
   2117              if(page.isRelay && !page.is500Always ) switch(reg){
   2118                  case SET_CUR_CHANNEL: case SET_CHANNEL:     case RADIO_POWER:
   2119                  case IS_RELAY:        case IS_500_ALWAYS:   case REPEATER_POWER:
   2120                      tickWait( 3+2*TICKS_IN_MS );  // give repeater chance to finish transmission
   2121                  break;
   2122              }*/
   2123              switch(reg){
   \   00000B   8982         MOV     DPL,R1
   \   00000D   8582..       MOV     ?V0 + 0,DPL
   \   000010   75..00       MOV     ?V0 + 1,#0x0
   \   000013   E9           MOV     A,R1
   \   000014   24..         ADD     A,#(page & 0xff)
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   34..         ADDC    A,#((page >> 8) & 0xff)
   \   00001A   FF           MOV     R7,A
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for setByte>_0`:
   \   00001F   08           DB        8
   \   000020   06           DB        6
   \   000021   09           DB        9
   \   000022   ....         DW        ??setByte_0
   \   000024   10           DB        16
   \   000025   15           DB        21
   \   000026   ....         DW        ??setByte_1
   \   000028   2E           DB        46
   \   000029   30           DB        48
   \   00002A   ....         DW        ??setByte_2
   \   00002C   3D           DB        61
   \   00002D   46           DB        70
   \   00002E   ....         DW        ??setByte_3
   \   000030   49           DB        73
   \   000031   4E           DB        78
   \   000032   ....         DW        ??setByte_3
   \   000034   4F           DB        79
   \   000035   51           DB        81
   \   000036   ....         DW        ??CrossCallReturnLabel_81
   \   000038   55           DB        85
   \   000039   56           DB        86
   \   00003A   ....         DW        ??setByte_4
   \   00003C   57           DB        87
   \   00003D   58           DB        88
   \   00003E   ....         DW        ??setByte_5
   \   000040   28           DB        40
   \   000041   01           DB        1
   \   000042   ....         DW        ??setByte_6
   \   000044   04           DB        4
   \   000045   ....         DW        ??setByte_7
   \   000047   05           DB        5
   \   000048   ....         DW        ??setByte_8
   \   00004A   0B           DB        11
   \   00004B   ....         DW        ??setByte_9
   \   00004D   0C           DB        12
   \   00004E   ....         DW        ??setByte_10
   \   000050   0D           DB        13
   \   000051   ....         DW        ??setByte_11
   \   000053   0E           DB        14
   \   000054   ....         DW        ??setByte_12
   \   000056   16           DB        22
   \   000057   ....         DW        ??setByte_13
   \   000059   17           DB        23
   \   00005A   ....         DW        ??setByte_14
   \   00005C   1A           DB        26
   \   00005D   ....         DW        ??setByte_15
   \   00005F   1C           DB        28
   \   000060   ....         DW        ??setByte_16
   \   000062   1D           DB        29
   \   000063   ....         DW        ??setByte_17
   \   000065   1F           DB        31
   \   000066   ....         DW        ??setByte_18
   \   000068   20           DB        32
   \   000069   ....         DW        ??setByte_19
   \   00006B   21           DB        33
   \   00006C   ....         DW        ??setByte_20
   \   00006E   23           DB        35
   \   00006F   ....         DW        ??setByte_21
   \   000071   25           DB        37
   \   000072   ....         DW        ??setByte_22
   \   000074   28           DB        40
   \   000075   ....         DW        ??setByte_23
   \   000077   29           DB        41
   \   000078   ....         DW        ??setByte_24
   \   00007A   2A           DB        42
   \   00007B   ....         DW        ??setByte_25
   \   00007D   2B           DB        43
   \   00007E   ....         DW        ??setByte_26
   \   000080   2C           DB        44
   \   000081   ....         DW        ??setByte_27
   \   000083   2D           DB        45
   \   000084   ....         DW        ??setByte_28
   \   000086   31           DB        49
   \   000087   ....         DW        ??setByte_29
   \   000089   33           DB        51
   \   00008A   ....         DW        ??setByte_30
   \   00008C   35           DB        53
   \   00008D   ....         DW        ??setByte_31
   \   00008F   36           DB        54
   \   000090   ....         DW        ??setByte_32
   \   000092   38           DB        56
   \   000093   ....         DW        ??setByte_33
   \   000095   39           DB        57
   \   000096   ....         DW        ??setByte_34
   \   000098   3A           DB        58
   \   000099   ....         DW        ??setByte_35
   \   00009B   3B           DB        59
   \   00009C   ....         DW        ??setByte_36
   \   00009E   52           DB        82
   \   00009F   ....         DW        ??setByte_37
   \   0000A1   5C           DB        92
   \   0000A2   ....         DW        ??setByte_38
   \   0000A4   5D           DB        93
   \   0000A5   ....         DW        ??setByte_39
   \   0000A7   5E           DB        94
   \   0000A8   ....         DW        ??setByte_40
   \   0000AA   5F           DB        95
   \   0000AB   ....         DW        ??setByte_41
   \   0000AD   60           DB        96
   \   0000AE   ....         DW        ??setByte_42
   \   0000B0   61           DB        97
   \   0000B1   ....         DW        ??setByte_43
   \   0000B3   64           DB        100
   \   0000B4   ....         DW        ??setByte_44
   \   0000B6   71           DB        113
   \   0000B7   ....         DW        ??setByte_45
   \   0000B9   ....         DW        ??setByte_46
   2124                  case MPP:  // MPP
   2125                      if( val > 1 ) break;
   \                     ??setByte_7:
   \   0000BB   EA           MOV     A,R2
   \   0000BC   C3           CLR     C
   \   0000BD   9402         SUBB    A,#0x2
   \   0000BF   4003         JC      $+5
   \   0000C1   02....       LJMP    ??setByte_46
   2126                      if( val )  P1_3 = 1;   else P1_3 = 0;
   \   0000C4   EA           MOV     A,R2
   \   0000C5   6038         JZ      ??setByte_47
   \   0000C7   D293         SETB    0x90.3
   2127                      if( val ) { 
   2128                          atomicChange( BypassMode, 0 ); // do not need that delayed mpp off anymore
   \   0000C9   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_46:
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E4           CLR     A
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   F0           MOVX    @DPTR,A
   2129                          if( turnOnFlag || ticks[ TurnOn ] ) { ov_startup(); turnOnFlag = FALSE;  ticks[ TurnOn ] = 0; } //P1 |= 0x10; }
   \   0000D2   90....       MOV     DPTR,#turnOnFlag
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   7012         JNZ     ??setByte_48
   \   0000D8   90....       MOV     DPTR,#ticks
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   2414         ADD     A,#0x14
   \   0000DE   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_91:
   \   0000E1   7002         JNZ     ??setByte_49
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \                     ??setByte_49:
   \   0000E5   7003         JNZ     $+5
   \   0000E7   02....       LJMP    ??setByte_46
   \                     ??setByte_48:
   \   0000EA                ; Setup parameters for call to function ov_startup
   \   0000EA   12....       LCALL   ov_startup
   \   0000ED   E4           CLR     A
   \   0000EE   90....       MOV     DPTR,#turnOnFlag
   \   0000F1   12....       LCALL   ?Subroutine73
   \                     ??CrossCallReturnLabel_396:
   \   0000F4   2414         ADD     A,#0x14
   \                     ??setByte_50:
   \   0000F6   12....       LCALL   ??Subroutine43_0
   \                     ??CrossCallReturnLabel_111:
   \   0000F9   E4           CLR     A
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   02....       LJMP    ??setByte_51
   2130                      }
   \                     ??setByte_47:
   \   0000FF   C293         CLR     0x90.3
   \   000101   02....       LJMP    ??setByte_46
   2131                  break;
   2132                  case MODULE: // Module on / off
   2133                      if( val > 1 ) 
   \                     ??setByte_8:
   \   000104   EA           MOV     A,R2
   \   000105   C3           CLR     C
   \   000106   9402         SUBB    A,#0x2
   \   000108   4003         JC      $+5
   \   00010A   02....       LJMP    ??setByte_46
   2134                        break;
   2135                      if (val == 1) // If Module on, then set FET failure check appropriately
   \   00010D   7401         MOV     A,#0x1
   \   00010F   65..         XRL     A,?V0 + 2
   \   000111   7025         JNZ     ??setByte_52
   2136                      {
   2137                        *ModuleOffRememberedPtr = ModuleStatusCanTurnOn; // Module On command resets this
   \   000113   12....       LCALL   ?Subroutine57
   2138                        fetFailure = FALSE; // Module On command resets this
   \                     ??CrossCallReturnLabel_162:
   \   000116   E4           CLR     A
   \   000117   90....       MOV     DPTR,#fetFailure
   \   00011A   F0           MOVX    @DPTR,A
   2139                        netValue = MainNetValueStandard;  // Set base value back for main image
   \   00011B   90....       MOV     DPTR,#netValue
   \   00011E   7432         MOV     A,#0x32
   \   000120   12....       LCALL   ?Subroutine117
   2140                        if (page.fetFailureCount != 0)
   \                     ??CrossCallReturnLabel_387:
   \   000123   90....       MOV     DPTR,#(page + 128)
   \   000126   E0           MOVX    A,@DPTR
   \   000127   7002         JNZ     ??setByte_53
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \                     ??setByte_53:
   \   00012B   6008         JZ      ??setByte_54
   2141                          checkForFETFailure = TRUE; // Re-enable check
   \   00012D   7401         MOV     A,#0x1
   \                     ??setByte_55:
   \   00012F   90....       MOV     DPTR,#checkForFETFailure
   \   000132   F0           MOVX    @DPTR,A
   \   000133   8006         SJMP    ??setByte_56
   2142                        else
   2143                          checkForFETFailure = FALSE; // PB indicates don't check
   \                     ??setByte_54:
   \   000135   E4           CLR     A
   \   000136   80F7         SJMP    ??setByte_55
   2144                      }
   2145                      if( val && ((P1 & 0x18)==0) ) { P1_3 = 1; ov_startup(); /*P1 |= 0x18;*/ atomicChange( BypassMode, TICKS_IN_SEC );            } // bypass mode with delay
   \                     ??setByte_52:
   \   000138   EA           MOV     A,R2
   \   000139   6011         JZ      ??setByte_57
   \                     ??setByte_56:
   \   00013B   7418         MOV     A,#0x18
   \   00013D   5590         ANL     A,0x90
   \   00013F   7017         JNZ     ??setByte_58
   \   000141   D293         SETB    0x90.3
   \   000143                ; Setup parameters for call to function ov_startup
   \   000143   12....       LCALL   ov_startup
   \   000146   12....       LCALL   ?Subroutine9
   \                     ??CrossCallReturnLabel_32:
   \   000149   02....       LJMP    ??setByte_51
   2146                      //else                         { if( val ) P1 |= 0x10; else P1 &= ~0x10; }
   2147                      else 
   2148                      { 
   2149                        if( val ){ 
   2150                          if( P1_4 == 0 ) 
   2151                            ov_startup(); 
   2152                        }
   2153                        else 
   2154                        { 
   2155                          P1_4 = 0; 
   \                     ??setByte_57:
   \   00014C   C294         CLR     0x90.4
   2156                          *ModuleOffRememberedPtr = ModuleStatusOff; 
   \   00014E   90....       MOV     DPTR,#ModuleStatusOff
   \   000151   E0           MOVX    A,@DPTR
   \   000152   90FFFD       MOV     DPTR,#-0x3
   \   000155   02....       LJMP    ??setByte_51
   2157                        } 
   \                     ??setByte_58:
   \   000158   A294         MOV     C,0x90.4
   \   00015A   5003         JNC     $+5
   \   00015C   02....       LJMP    ??setByte_46
   \   00015F                ; Setup parameters for call to function ov_startup
   \   00015F   12....       LCALL   ov_startup
   \   000162   02....       LJMP    ??setByte_46
   2158                      }
   2159                  break;
   2160                  case SET_T3CH0:  
   2161                      //if( !page.fuseOVOC ){ 
   2162                          T3CC0 = val;                                      
   \                     ??setByte_13:
   \   000165   85..CD       MOV     0xcd,?V0 + 2
   \   000168   02....       LJMP    ??setByte_46
   2163          //                #ifdef MidString
   2164          //                compute98();
   2165          //                #endif
   2166                      //}
   2167                  break;
   2168                  case SET_T3CH1:  
   2169                    //if( !page.fuseOVOC ){
   2170                        T3CC1 = oc2timer( theOC = ( setOC = val ) );      
   \                     ??setByte_14:
   \   00016B   EA           MOV     A,R2
   \   00016C   90....       MOV     DPTR,#setOC
   \   00016F   F0           MOVX    @DPTR,A
   \   000170   12....       LCALL   ?Subroutine72
   \                     ??CrossCallReturnLabel_226:
   \   000173   02....       LJMP    ??setByte_46
   2171          //              #ifdef MidString
   2172          //              compute98();
   2173          //              #endif
   2174                    //}
   2175                  break;
   2176          
   2177                  case MAC0: case MAC1: case MAC2: case MAC3: case MAC4: case MAC5:   page.myMac[ reg-MAC0 ] = val;         break;
   \                     ??setByte_1:
   \   000176   EE           MOV     A,R6
   \   000177   24F6         ADD     A,#-0xa
   \   000179   F582         MOV     DPL,A
   \   00017B   EF           MOV     A,R7
   \   00017C   34FF         ADDC    A,#-0x1
   \                     ??setByte_59:
   \   00017E   F583         MOV     DPH,A
   \   000180   EA           MOV     A,R2
   \   000181   02....       LJMP    ??setByte_51
   2178                  /*
   2179                  case SET_CUR_CHANNEL:
   2180                      if( !page.is500Always && (cyclesTo500 < 200) ){ RFST = STROBE_IDLE; curChannel = CHANNR = val;  }
   2181                  break;
   2182                  */
   2183                  case SET_CHANNEL:    
   2184                      page.channel = val;  setup_hopper( page.channel );   
   \                     ??setByte_15:
   \   000184   EA           MOV     A,R2
   \   000185   90....       MOV     DPTR,#(page + 164)
   \   000188   F0           MOVX    @DPTR,A
   \   000189                ; Setup parameters for call to function setup_hopper
   \   000189   F9           MOV     R1,A
   \   00018A   12....       LCALL   setup_hopper
   2185                      if( !page.is500Always ){
   \   00018D   90....       MOV     DPTR,#(page + 194)
   \   000190   E0           MOVX    A,@DPTR
   \   000191   A2E6         MOV     C,0xE0 /* A   */.6
   \   000193   4025         JC      ??setByte_10
   2186                          //P1_1 ^= 1;
   2187                          curChannel = CHANNR = page.channel;
   \   000195   90....       MOV     DPTR,#(page + 164)
   \   000198   E0           MOVX    A,@DPTR
   \   000199   90DF06       MOV     DPTR,#-0x20fa
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   12....       LCALL   ?Subroutine4
   2188                          ticks[ Hop ] = 0; 
   2189                          cycles2Step10Channel = cyclesTo500 = 300;
   \                     ??CrossCallReturnLabel_13:
   \   0001A0   90....       MOV     DPTR,#cyclesTo500
   \   0001A3   742C         MOV     A,#0x2c
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   7401         MOV     A,#0x1
   \   0001A9   F0           MOVX    @DPTR,A
   \   0001AA   90....       MOV     DPTR,#cycles2Step10Channel
   \   0001AD   742C         MOV     A,#0x2c
   \   0001AF   F0           MOVX    @DPTR,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   7401         MOV     A,#0x1
   \   0001B3   F0           MOVX    @DPTR,A
   2190                          RFST = STROBE_IDLE; 
   \   0001B4   75E104       MOV     0xe1,#0x4
   2191                          softKick(); 
   \   0001B7                ; Setup parameters for call to function softKick
   \   0001B7   12....       LCALL   softKick
   2192                      }
   2193                  case RANDOMIZE:
   2194                      RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
   \                     ??setByte_10:
   \   0001BA   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_68:
   \   0001BD   02....       LJMP    ??setByte_46
   2195                      //srand( page.myMac[4]*256 + page.myMac[5] ); 
   2196                  break;
   2197          
   2198                  case FLASH_REFRESH2:   refreshTheFlash();   break;
   \                     ??setByte_9:
   \   0001C0                ; Setup parameters for call to function refreshTheFlash
   \   0001C0   12....       LCALL   refreshTheFlash
   \   0001C3   02....       LJMP    ??setByte_46
   2199            
   2200                  //case FUSE_Comm:  page.fuseComm = 1; savePB();   break;
   2201                  //case FUSE_OVOC:  if( !page.fuseOVOC ){ page.fuseOVOC = 1; page.ov = T3CC0; page.oc = setOC; savePB(); }  break;
   2202          
   2203                  case FLASH_AVAILABLE: 
   2204                      page.mpp    = P1_3;
   \                     ??setByte_16:
   \   0001C6   A293         MOV     C,0x90.3
   \   0001C8   E4           CLR     A
   \   0001C9   92E0         MOV     0xE0 /* A   */.0,C
   \   0001CB   90....       MOV     DPTR,#(page + 185)
   \   0001CE   F0           MOVX    @DPTR,A
   2205                      page.module = P1_4;
   \   0001CF   A294         MOV     C,0x90.4
   \   0001D1   E4           CLR     A
   \   0001D2   92E0         MOV     0xE0 /* A   */.0,C
   \   0001D4   90....       MOV     DPTR,#(page + 186)
   \   0001D7   F0           MOVX    @DPTR,A
   2206                      //if( !page.fuseOVOC ){ page.ov = T3CC0; page.oc = setOC; }
   2207                      page.ov = T3CC0; page.oc = setOC;
   \   0001D8   E5CD         MOV     A,0xcd
   \   0001DA   90....       MOV     DPTR,#(page + 187)
   \   0001DD   F0           MOVX    @DPTR,A
   \   0001DE   90....       MOV     DPTR,#setOC
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   90....       MOV     DPTR,#(page + 188)
   \   0001E5   F0           MOVX    @DPTR,A
   2208                      // go through
   2209                  case COEFFICIENTS_AVAILABLE:  
   2210                      savePB();
   \                     ??setByte_20:
   \   0001E6                ; Setup parameters for call to function savePB
   \   0001E6   12....       LCALL   savePB
   \   0001E9   02....       LJMP    ??setByte_46
   2211                  break;
   2212                  /*
   2213                  case CW_MODE:   
   2214                      //HAL_INT_ENABLE(INUM_RF,  INT_OFF);    // Disable RF general interrupt
   2215                      real_cw_mode = TRUE;
   2216                      //ticks[ SendData ] = 1; ticks[ ReceiveData ] = 0;
   2217                  break;
   2218                  */
   2219                  //case RESTART_MEASUREMENT:   bufferCount = 0; adcCount = 0xFF; tempAdcsCount = 0; enable2SendData = FALSE;    break;
   2220                  case DISSOLVE_NETWORK:      
   2221                    RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
   \                     ??setByte_18:
   \   0001EC   12....       LCALL   ?Subroutine26
   2222                    //srand( page.myMac[4]*256 + page.myMac[5] );
   2223                    page.netId = page.myBunch =  0xFF;  
   \                     ??CrossCallReturnLabel_69:
   \   0001EF   74FF         MOV     A,#-0x1
   \   0001F1   90....       MOV     DPTR,#(page + 3)
   \   0001F4   F0           MOVX    @DPTR,A
   \   0001F5   90....       MOV     DPTR,#(page + 2)
   \   0001F8   12....       LCALL   ?Subroutine73
   2224                    //savePB();
   2225                    //maxBunch = 0;  
   2226                    ticks[ DelayedPrepareData ] = 0; ticks[ SendData ] = 0; 
   \                     ??CrossCallReturnLabel_397:
   \   0001FB   241A         ADD     A,#0x1a
   \   0001FD   12....       LCALL   ??Subroutine4_1
   \                     ??CrossCallReturnLabel_16:
   \   000200   12....       LCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_71:
   \   000203   02....       LJMP    ??CrossCallReturnLabel_111
   2227                  break;
   2228          
   2229                  case CALIBRATION_FROM_FLASH:   pptr = (BYTE *)PAGEADDR; //0x400;        /* go through */
   \                     ??setByte_34:
   \   000206   7C00         MOV     R4,#0x0
   \   000208   7D5C         MOV     R5,#0x5c
   2230                  case REPORT_SCALING:   
   2231                    if( !reportScaling ){
   \                     ??setByte_19:
   \   00020A   90....       MOV     DPTR,#reportScaling
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   6003         JZ      $+5
   \   000210   02....       LJMP    ??setByte_46
   2232                          if( base_ptr==NULL ){
   \   000213   90....       MOV     DPTR,#base_ptr
   \   000216   E0           MOVX    A,@DPTR
   \   000217   7002         JNZ     ??setByte_60
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \                     ??setByte_60:
   \   00021B   7014         JNZ     ??setByte_61
   2233                              base_ptr = pptr; //(BYTE *)&page;
   \   00021D   EC           MOV     A,R4
   \   00021E   F8           MOV     R0,A
   \   00021F   ED           MOV     A,R5
   \   000220   12....       LCALL   ?Subroutine67
   2234                              reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
   \                     ??CrossCallReturnLabel_209:
   \   000223   75F00A       MOV     B,#0xa
   \   000226   90....       MOV     DPTR,#calibrationRepeat
   \   000229   E0           MOVX    A,@DPTR
   \                     ??setByte_62:
   \   00022A   A4           MUL     AB
   \   00022B   90....       MOV     DPTR,#reportScaling
   \   00022E   02....       LJMP    ??setByte_51
   2235                          }else reportScaling    = val * calibrationRepeat;
   \                     ??setByte_61:
   \   000231   90....       MOV     DPTR,#calibrationRepeat
   \   000234   E0           MOVX    A,@DPTR
   \   000235   C0E0         PUSH    A
   \   000237   EA           MOV     A,R2
   \   000238   F5F0         MOV     B,A
   \   00023A   D0E0         POP     A
   \   00023C   80EC         SJMP    ??setByte_62
   2236                    }
   2237                  break;
   2238                  case READ_COEFFICIENTS: reportScaling = val; base_ptr = coefficients_buffer; if( reportScaling == 0 ) reportScaling = 1; break;
   \                     ??setByte_45:
   \   00023E   EA           MOV     A,R2
   \   00023F   90....       MOV     DPTR,#reportScaling
   \   000242   F0           MOVX    @DPTR,A
   \   000243   90....       MOV     DPTR,#base_ptr
   \   000246   74..         MOV     A,#(coefficients_buffer & 0xff)
   \   000248   F0           MOVX    @DPTR,A
   \   000249   A3           INC     DPTR
   \   00024A   74..         MOV     A,#((coefficients_buffer >> 8) & 0xff)
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   90....       MOV     DPTR,#reportScaling
   \   000250   E0           MOVX    A,@DPTR
   \   000251   6003         JZ      $+5
   \   000253   02....       LJMP    ??setByte_46
   \   000256   7401         MOV     A,#0x1
   \   000258   02....       LJMP    ??setByte_51
   2239          
   2240                  //case CHECK_FLASH:            reportFlashCheck = calibrationRepeat*5 + 1; /* 5*4-1 */;    break;
   2241                  
   2242                  case RADIO_POWER: page.radioPower = val;      PA_TABLE0 = val;  break;
   \                     ??setByte_21:
   \   00025B   EA           MOV     A,R2
   \   00025C   90....       MOV     DPTR,#(page + 189)
   \   00025F   F0           MOVX    @DPTR,A
   \   000260   90DF2E       MOV     DPTR,#-0x20d2
   \   000263   02....       LJMP    ??setByte_51
   2243                  
   2244          //        case PRODUCTION:       page.production = val;                   break;
   2245                  case ENSURE_WD_RESET:  page.ensureWDReset = val;                break;
   \                     ??setByte_22:
   \   000266   90....       MOV     DPTR,#(page + 194)
   \   000269   EA           MOV     A,R2
   \   00026A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00026C   E0           MOVX    A,@DPTR
   \   00026D   92E1         MOV     0xE0 /* A   */.1,C
   \   00026F   02....       LJMP    ??setByte_51
   2246                  //case USE_12_kBod:   
   2247                  //  page.use12kbod = val;  
   2248                    //savePB();
   2249                    //tickWait(8*TICKS_IN_MS); 
   2250                  //  softKick(); 
   2251                  //break; /* write to flash as well */
   2252                  
   2253                  //case USE_FEC:          page.useFEC = val;     if( page.useFEC ) MDMCFG1 |= 0x80; else MDMCFG1 &= 0x7F;     break;
   2254                  case ENABLE_HOPPING:   page.hoppingAllowed  = val; break;     
   \                     ??setByte_23:
   \   000272   90....       MOV     DPTR,#(page + 194)
   \   000275   EA           MOV     A,R2
   \   000276   A2E0         MOV     C,0xE0 /* A   */.0
   \   000278   E0           MOVX    A,@DPTR
   \   000279   92E4         MOV     0xE0 /* A   */.4,C
   \   00027B   02....       LJMP    ??setByte_51
   2255                  case REPEATER_CHANNEL: page.repeaterChannel = val; break;     
   \                     ??setByte_26:
   \   00027E   EA           MOV     A,R2
   \   00027F   90....       MOV     DPTR,#(page + 192)
   \   000282   02....       LJMP    ??setByte_51
   2256                  case IS_RELAY:         page.isRelay = val;   
   \                     ??setByte_24:
   \   000285   90....       MOV     DPTR,#(page + 194)
   \   000288   EA           MOV     A,R2
   \   000289   A2E0         MOV     C,0xE0 /* A   */.0
   \   00028B   E0           MOVX    A,@DPTR
   \   00028C   92E5         MOV     0xE0 /* A   */.5,C
   \   00028E   F0           MOVX    @DPTR,A
   2257                                         if( !val ) setupRadio( curChannel );     
   \   00028F   EA           MOV     A,R2
   \   000290   6003         JZ      $+5
   \   000292   02....       LJMP    ??setByte_46
   \                     ??setByte_63:
   \   000295                ; Setup parameters for call to function setupRadio
   \   000295   90....       MOV     DPTR,#curChannel
   \                     ??setByte_64:
   \   000298   12....       LCALL   ??Subroutine52_0
   \                     ??CrossCallReturnLabel_142:
   \   00029B   02....       LJMP    ??setByte_46
   2258                  break;   
   2259                  case USE250:           page.use250kbod = val; 
   \                     ??setByte_36:
   \   00029E   90....       MOV     DPTR,#(page + 219)
   \   0002A1   EA           MOV     A,R2
   \   0002A2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   92E1         MOV     0xE0 /* A   */.1,C
   \   0002A7   F0           MOVX    @DPTR,A
   2260                                         // go through
   2261                  case IS_500_ALWAYS:    
   2262                      if( reg == IS_500_ALWAYS ) page.is500Always = val;     
   \                     ??setByte_25:
   \   0002A8   742A         MOV     A,#0x2a
   \   0002AA   69           XRL     A,R1
   \   0002AB   700A         JNZ     ??setByte_65
   \   0002AD   90....       MOV     DPTR,#(page + 194)
   \   0002B0   EA           MOV     A,R2
   \   0002B1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   92E6         MOV     0xE0 /* A   */.6,C
   \   0002B6   F0           MOVX    @DPTR,A
   2263                      if( page.is500Always ){ 
   \                     ??setByte_65:
   \   0002B7   90....       MOV     DPTR,#(page + 194)
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   A2E6         MOV     C,0xE0 /* A   */.6
   \   0002BD   501D         JNC     ??setByte_66
   2264                           cyclesTo10 = page.defCyclesTo10; //cyclesDefaults[1]; //page.defCyclesTo10; 
   \   0002BF   12....       LCALL   ?Subroutine36
   2265                           cyclesTo500 = 0;             
   \                     ??CrossCallReturnLabel_88:
   \   0002C2   90....       MOV     DPTR,#cyclesTo500
   \   0002C5   E4           CLR     A
   \   0002C6   F0           MOVX    @DPTR,A
   \   0002C7   A3           INC     DPTR
   \   0002C8   12....       LCALL   ?Subroutine20
   2266                           cyclesToStep500Channel =  page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
   2267                           setupRadio( curChannel = page.starting500Channel );
   \                     ??CrossCallReturnLabel_54:
   \   0002CB   90....       MOV     DPTR,#curChannel
   \   0002CE   F0           MOVX    @DPTR,A
   \   0002CF                ; Setup parameters for call to function setupRadio
   \   0002CF   F9           MOV     R1,A
   \   0002D0   12....       LCALL   setupRadio
   2268                           atomicChange( Hop, 0 );                  
   \   0002D3   90....       MOV     DPTR,#ticks
   \   0002D6   E0           MOVX    A,@DPTR
   \   0002D7   2410         ADD     A,#0x10
   \   0002D9   02....       LJMP    ??setByte_50
   2269                      }else{      
   2270                           cyclesTo10 = 0;                  
   \                     ??setByte_66:
   \   0002DC   90....       MOV     DPTR,#cyclesTo10
   \   0002DF   E4           CLR     A
   \   0002E0   F0           MOVX    @DPTR,A
   \   0002E1   A3           INC     DPTR
   \   0002E2   F0           MOVX    @DPTR,A
   2271                           cyclesTo500 = page.defCyclesTo500; 
   \   0002E3   12....       LCALL   ?Subroutine8
   2272                           cycles2Step10Channel   = page.defCyclesToStep10Channel;//cyclesDefaults[3]; //page.defCyclesToStep10Channel;
   2273                           curChannel = page.channel;
   \                     ??CrossCallReturnLabel_30:
   \   0002E6   90....       MOV     DPTR,#(page + 164)
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   90....       MOV     DPTR,#curChannel
   \   0002ED   02....       LJMP    ??setByte_51
   2274                           //setupRadio( curChannel = page.channel ); 
   2275                      }    
   2276                      //softKick();
   2277                  break;     
   2278                  case REPEATER_POWER:           page.repeaterPower = val;   if( page.is500Always ) setupRadio( page.channel ); break;
   \                     ??setByte_27:
   \   0002F0   EA           MOV     A,R2
   \   0002F1   90....       MOV     DPTR,#(page + 193)
   \   0002F4   12....       LCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_339:
   \   0002F7   4003         JC      $+5
   \   0002F9   02....       LJMP    ??setByte_46
   \   0002FC                ; Setup parameters for call to function setupRadio
   \   0002FC   90....       MOV     DPTR,#(page + 164)
   \   0002FF   8097         SJMP    ??setByte_64
   2279                  case SEARCH_FOR_COMMUNICATION: page.searchCommunication = search_stat = val;  break;
   \                     ??setByte_28:
   \   000301   EA           MOV     A,R2
   \   000302   90....       MOV     DPTR,#search_stat
   \   000305   F0           MOVX    @DPTR,A
   \   000306   A2E0         MOV     C,0xE0 /* A   */.0
   \   000308   7583..       MOV     DPH,#(((page + 194) >> 8) & 0xff)
   \   00030B   7582..       MOV     DPL,#((page + 194) & 0xff)
   \                     ??setByte_67:
   \   00030E   E0           MOVX    A,@DPTR
   \   00030F   92E7         MOV     0xE0 /* A   */.7,C
   \   000311   02....       LJMP    ??setByte_51
   2280          
   2281                  // win 7 bytes. 
   2282                  case SET_SHOW_STATE:  case SetCriticalLevel500:   case SetCriticalLevel10:
   2283                      (&page.showState)[ reg-SET_SHOW_STATE ]  = (signed char)val;            
   \                     ??setByte_2:
   \   000314   EE           MOV     A,R6
   \   000315   2495         ADD     A,#-0x6b
   \                     ??setByte_68:
   \   000317   F582         MOV     DPL,A
   \   000319   EF           MOV     A,R7
   \   00031A   3400         ADDC    A,#0x0
   \   00031C   02....       LJMP    ??setByte_59
   2284                  break;
   2285                  
   2286                  case END_OF_TEST: 
   2287                      page.channel = 0;
   \                     ??setByte_29:
   \   00031F   E4           CLR     A
   \   000320   90....       MOV     DPTR,#(page + 164)
   \   000323   F0           MOVX    @DPTR,A
   2288                      page.myBunch = 0xFF; page.netId = 0xFF;  page.groupId = 0xFFFF;
   \   000324   74FF         MOV     A,#-0x1
   \   000326   90....       MOV     DPTR,#(page + 3)
   \   000329   F0           MOVX    @DPTR,A
   \   00032A   90....       MOV     DPTR,#(page + 2)
   \   00032D   F0           MOVX    @DPTR,A
   \   00032E   90....       MOV     DPTR,#(page + 4)
   \   000331   12....       LCALL   ?Subroutine68
   2289                      page.edAddr = 2; page.gwAddr = 1;
   2290                      savePB();
   \                     ??CrossCallReturnLabel_217:
   \   000334                ; Setup parameters for call to function savePB
   \   000334   12....       LCALL   savePB
   2291                  // go through ...
   2292                  //case CLEAR_MAX_BUNCH:             maxBunch = 0;                         break;
   2293                  case SYNCHRONIZE_MPP_CYCLES:      ticks[ MppCycle ]        = _mppCycle; break; 
   \                     ??setByte_30:
   \   000337   12....       LCALL   ??Subroutine46_0
   \                     ??CrossCallReturnLabel_123:
   \   00033A   7478         MOV     A,#0x78
   \                     ??setByte_69:
   \   00033C   F0           MOVX    @DPTR,A
   \   00033D   A3           INC     DPTR
   \   00033E   E4           CLR     A
   \   00033F   02....       LJMP    ??setByte_51
   2294                  case SET_START500_CHANNEL:
   2295                      page.starting500Channel = val; if( page.is500Always ) setupRadio( curChannel = val );
   \                     ??setByte_31:
   \   000342   EA           MOV     A,R2
   \   000343   90....       MOV     DPTR,#(page + 218)
   \   000346   12....       LCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_340:
   \   000349   4003         JC      $+5
   \   00034B   02....       LJMP    ??setByte_46
   \   00034E   EA           MOV     A,R2
   \   00034F   90....       MOV     DPTR,#curChannel
   \   000352   F0           MOVX    @DPTR,A
   \   000353   02....       LJMP    ??setByte_63
   2296                  break;
   2297                  /*
   2298                  case CLEAR_THE_PAGE:
   2299                    val <<= 1;  
   2300                    if( !P1_4 && ( val > 48 ) && ( val < 64 ) ){
   2301                       tickWait( 8 * TICKS_IN_MS );
   2302                       clearAndHop( val );
   2303                       //clearThePage( val );
   2304                       ticks[ ReceiveData ] = 25*TICKS_IN_MS;
   2305                       //ticks[ ClearThePage ] = 12*TICKS_IN_MS;
   2306                       //page2clear = val;
   2307                    }
   2308                      //val <<= 1;  if( val && (val < 0x3E) && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ) ) clearThePage( val );
   2309                  break;
   2310                  */
   2311                  case TRY_OTHER_IMAGE:            page.tryOtherImageFirst = val;        break;
   \                     ??setByte_32:
   \   000356   90....       MOV     DPTR,#(page + 219)
   \   000359   EA           MOV     A,R2
   \   00035A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   92E0         MOV     0xE0 /* A   */.0,C
   \   00035F   02....       LJMP    ??setByte_51
   2312                  case SWITCH_SECURITY:
   2313                      mymemcpy( (BYTE *)page.curKey, nextKey, 16 ); mymemcpy( (BYTE *)page.curIV, nextIV, 16 );
   \                     ??setByte_33:
   \   000362                ; Setup parameters for call to function mymemcpy
   \   000362   7910         MOV     R1,#0x10
   \   000364   7C..         MOV     R4,#(nextKey & 0xff)
   \   000366   7D..         MOV     R5,#((nextKey >> 8) & 0xff)
   \   000368   7A..         MOV     R2,#((page + 96) & 0xff)
   \   00036A   7B..         MOV     R3,#(((page + 96) >> 8) & 0xff)
   \   00036C   12....       LCALL   mymemcpy
   \   00036F                ; Setup parameters for call to function mymemcpy
   \   00036F   7910         MOV     R1,#0x10
   \   000371   7C..         MOV     R4,#(nextIV & 0xff)
   \   000373   7D..         MOV     R5,#((nextIV >> 8) & 0xff)
   \   000375   7A..         MOV     R2,#((page + 112) & 0xff)
   \   000377   7B..         MOV     R3,#(((page + 112) >> 8) & 0xff)
   \   000379   12....       LCALL   mymemcpy
   2314                      zerofill( nextKey, 32 );
   \   00037C                ; Setup parameters for call to function zerofill
   \   00037C   7920         MOV     R1,#0x20
   \   00037E   7A..         MOV     R2,#(nextKey & 0xff)
   \   000380   7B..         MOV     R3,#((nextKey >> 8) & 0xff)
   \   000382   12....       LCALL   zerofill
   2315                      loadKey(  page.curKey );
   \   000385                ; Setup parameters for call to function load
   \   000385   12....       LCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_242:
   \   000388   02....       LJMP    ??setByte_46
   2316                  break;
   2317                  case CALIBRATION_REPEAT:
   2318                      if( val > 0 && val < 32 ) calibrationRepeat = val; else calibrationRepeat = 4;
   \                     ??setByte_35:
   \   00038B   EA           MOV     A,R2
   \   00038C   600C         JZ      ??setByte_70
   \   00038E   C3           CLR     C
   \   00038F   9420         SUBB    A,#0x20
   \   000391   5007         JNC     ??setByte_70
   \   000393   EA           MOV     A,R2
   \                     ??setByte_71:
   \   000394   90....       MOV     DPTR,#calibrationRepeat
   \   000397   02....       LJMP    ??setByte_51
   \                     ??setByte_70:
   \   00039A   7404         MOV     A,#0x4
   \   00039C   80F6         SJMP    ??setByte_71
   2319                  break;
   2320                  //case SPECULATIVE_REPORT: page.speculative_report = val;                  break;
   2321                  case STAY_IN_RX:         page.stay_in_rx  = val;                         break;
   \                     ??setByte_11:
   \   00039E   90....       MOV     DPTR,#(page + 219)
   \                     ??setByte_72:
   \   0003A1   EA           MOV     A,R2
   \   0003A2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003A4   E0           MOVX    A,@DPTR
   \   0003A5   92E3         MOV     0xE0 /* A   */.3,C
   \   0003A7   02....       LJMP    ??setByte_51
   2322                  //case THIRTY_THREE_MV:    page.thirty_three_mv = val;                     break;        
   2323                  
   2324                  case TEST_1:  case TEST_2:   case TEST_3:   case TEST_4:
   2325                      ptr = (BYTE *)&page.tests[reg-TEST_1]; 
   \                     ??setByte_0:
   \   0003AA   EE           MOV     A,R6
   \   0003AB   248A         ADD     A,#-0x76
   \   0003AD   FA           MOV     R2,A
   \   0003AE   EF           MOV     A,R7
   \   0003AF   3400         ADDC    A,#0x0
   \   0003B1   FB           MOV     R3,A
   2326                      *ptr++ = val; 
   \   0003B2   8A82         MOV     DPL,R2
   \   0003B4   8B83         MOV     DPH,R3
   \   0003B6   E5..         MOV     A,?V0 + 2
   \   0003B8   F0           MOVX    @DPTR,A
   \   0003B9   A3           INC     DPTR
   \   0003BA   AA82         MOV     R2,DPL
   \   0003BC   AB83         MOV     R3,DPH
   2327                  // go through
   2328                  case INSTALL_DATE:
   2329                      if( reg == INSTALL_DATE ) ptr = (BYTE *)&page.installDate;
   \                     ??setByte_12:
   \   0003BE   740E         MOV     A,#0xe
   \   0003C0   69           XRL     A,R1
   \   0003C1   7004         JNZ     ??setByte_73
   \   0003C3   7A..         MOV     R2,#((page + 148) & 0xff)
   \   0003C5   7B..         MOV     R3,#(((page + 148) >> 8) & 0xff)
   2330                      mymemcpy( ptr, (BYTE *)&utcLocal, 4); 
   \                     ??setByte_73:
   \   0003C7                ; Setup parameters for call to function mymemcpy
   \   0003C7   7904         MOV     R1,#0x4
   \   0003C9   7C..         MOV     R4,#(utcLocal & 0xff)
   \   0003CB   7D..         MOV     R5,#((utcLocal >> 8) & 0xff)
   \                     ??setByte_74:
   \   0003CD   12....       LCALL   mymemcpy
   \   0003D0   02....       LJMP    ??setByte_46
   2331                  break;
   2332                  
   2333                  case REP_STEP:   if( val < 5 && val >50 )  break;  // else go through
   2334                  
   2335                  case OV_STEP:  case T_OC_JUMP: case OV_STARTUP: 
   2336                      //if( page.fuseOVOC )       break;
   2337                  // go through 
   2338                  case T_SUPERHOT:              case T_HOT:          
   2339                  case T_COLD:                  case T_TIME:
   2340                  case NETWORK_CNST_1:          case NETWORK_CNST_2:  
   2341                  case OC_STEP:                 case SHUNT:  
   2342                  case MAX_OFF:                 case VIN_LIMIT: 
   2343                  case VIN_TURN_ON:             case VIN_SWITCH_OFF:
   2344                      ptr = (BYTE *)&page.repStep; ptr[ reg-REP_STEP ] = val; break;
   \                     ??setByte_3:
   \   0003D3   EE           MOV     A,R6
   \   0003D4   24A1         ADD     A,#-0x5f
   \   0003D6   02....       LJMP    ??setByte_68
   2345                      
   2346                  case SHORT_CIRCUIT_LEVEL: 
   2347                      #ifdef MidString
   2348                          if( val == 0 )
   \                     ??setByte_37:
   \   0003D9   EA           MOV     A,R2
   \   0003DA   7007         JNZ     ??setByte_75
   2349                              { ocShortCircuitLimit = 255; T3CC1 = oc2timer( theOC ); }
   \   0003DC   74FF         MOV     A,#-0x1
   \   0003DE   90....       MOV     DPTR,#ocShortCircuitLimit
   \   0003E1   8009         SJMP    ??setByte_76
   2350                          else if( ocShortCircuitLimit < 255 )
   \                     ??setByte_75:
   \   0003E3   90....       MOV     DPTR,#ocShortCircuitLimit
   \   0003E6   E0           MOVX    A,@DPTR
   \   0003E7   64FF         XRL     A,#0xff
   \   0003E9   6004         JZ      ??CrossCallReturnLabel_81
   2351                              { ocShortCircuitLimit = val; T3CC1 = oc2timer( theOC ); }
   \   0003EB   EA           MOV     A,R2
   \                     ??setByte_76:
   \   0003EC   12....       LCALL   ?Subroutine33
   2352                      #endif
   2353                      /*go through */
   2354                  case VIN_DISABLE_RADIO: case SET_RBUNCH: case SET_GBUNCH: //DEV250:
   2355                      ptr = (BYTE *)&page.vin_disable_radio; ptr[ reg-VIN_DISABLE_RADIO ] = val; 
   \                     ??CrossCallReturnLabel_81:
   \   0003EF   EE           MOV     A,R6
   \   0003F0   244D         ADD     A,#0x4d
   \   0003F2   F582         MOV     DPL,A
   \   0003F4   EF           MOV     A,R7
   \   0003F5   3400         ADDC    A,#0x0
   \   0003F7   F583         MOV     DPH,A
   \   0003F9   E5..         MOV     A,?V0 + 2
   \   0003FB   805C         SJMP    ??setByte_51
   2356                  break;
   2357                  case LOW_UTC: case HIGH_UTC: 
   2358                      mymemcpy( ((BYTE *)(&page.utcLow))+4*(reg-LOW_UTC), (BYTE *)&utcLast, 4);
   \                     ??setByte_4:
   \   0003FD                ; Setup parameters for call to function mymemcpy
   \   0003FD   7904         MOV     R1,#0x4
   \   0003FF   7C..         MOV     R4,#(utcLast & 0xff)
   \   000401   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000403   7402         MOV     A,#0x2
   \   000405   78..         MOV     R0,#?V0 + 0
   \   000407   12....       LCALL   ?S_SHL
   \   00040A   E5..         MOV     A,?V0 + 0
   \   00040C   24..         ADD     A,#((page + 85) & 0xff)
   \   00040E   FA           MOV     R2,A
   \   00040F   E5..         MOV     A,?V0 + 1
   \   000411   34..         ADDC    A,#(((page - 171) >> 8) & 0xff)
   \   000413   FB           MOV     R3,A
   \   000414   80B7         SJMP    ??setByte_74
   2359                  break;
   2360          
   2361                  //case TEST_STAND: if( val == 1 ) isOnTestStand = 11; break; 
   2362                  
   2363                  case REPORT_UTC: page.reportUTC = val; break;
   \                     ??setByte_17:
   \   000416   90....       MOV     DPTR,#(page + 219)
   \   000419   EA           MOV     A,R2
   \   00041A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00041C   02....       LJMP    ??setByte_67
   2364                  case BANDWIDTH_500:  mdm_rate1[0] = val; softKick(); break;
   \                     ??setByte_44:
   \   00041F   EA           MOV     A,R2
   \   000420   90....       MOV     DPTR,#mdm_rate1
   \   000423   F0           MOVX    @DPTR,A
   2365                  case TREAT_LB_AS_CHAN : page.treatLastByteAsChannel = val; break;
   2366                  case SYNCH_PHASE:   page.synch_phase = val;  break;
   2367                  case SYNCH_FREQ:    page.synch_freq = val;   break;              
   2368                  case BANDWIDTH250:  page.bandwidth250 = val; break;
   2369                  case TEMP_CALIBRATE:softKick(); break;
   \                     ??setByte_42:
   \   000424                ; Setup parameters for call to function softKick
   \   000424   12....       LCALL   softKick
   \   000427   8031         SJMP    ??setByte_46
   \                     ??setByte_6:
   \   000429   90....       MOV     DPTR,#(page + 194)
   \   00042C   02....       LJMP    ??setByte_72
   \                     ??setByte_39:
   \   00042F   EA           MOV     A,R2
   \   000430   90....       MOV     DPTR,#(page + 161)
   \   000433   8024         SJMP    ??setByte_51
   \                     ??setByte_40:
   \   000435   EA           MOV     A,R2
   \   000436   90....       MOV     DPTR,#(page + 162)
   \   000439   801E         SJMP    ??setByte_51
   \                     ??setByte_41:
   \   00043B   EA           MOV     A,R2
   \   00043C   90....       MOV     DPTR,#(page + 163)
   \   00043F   8018         SJMP    ??setByte_51
   2370                  case SET_MPPF:  si->mppCycle = val;  break;
   \                     ??setByte_43:
   \   000441   12....       LCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_112:
   \   000444   EA           MOV     A,R2
   \   000445   02....       LJMP    ??setByte_69
   2371                 
   2372                  case K_OV_VOLT:  case K_OC_CUR:
   2373                      ptr = (BYTE *)&page.k_ov_volt; ptr[ reg - K_OV_VOLT ] = val; 
   \                     ??setByte_5:
   \   000448   EE           MOV     A,R6
   \   000449   2441         ADD     A,#0x41
   \   00044B   02....       LJMP    ??setByte_68
   2374                  break;
   2375                  
   2376                  case XTAL_OFF: if( val == 1 ){
   \                     ??setByte_38:
   \   00044E   7401         MOV     A,#0x1
   \   000450   65..         XRL     A,?V0 + 2
   \   000452   7006         JNZ     ??setByte_46
   2377                    //BYTE counter = 127;
   2378                    //CLKCON |= OSC_BIT;                    // starting the RC Oscillator
   2379                    //while(!HIGH_FREQUENCY_RC_OSC_STABLE && counter-- ) halWait(2); 
   2380                    //SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
   2381                    rcgen = TRUE;
   \   000454   7401         MOV     A,#0x1
   \   000456   90....       MOV     DPTR,#rcgen
   \                     ??setByte_51:
   \   000459   F0           MOVX    @DPTR,A
   2382                  }break;
   2383              }
   2384          }
   \                     ??setByte_46:
   \   00045A                REQUIRE ?Subroutine123
   \   00045A                REQUIRE _A_P1
   \   00045A                REQUIRE RNDL
   \   00045A                REQUIRE T3CC0
   \   00045A                REQUIRE T3CC1
   \   00045A                REQUIRE RFST
   \   00045A                ; // Fall through to label ?Subroutine123

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA
   2385          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2386          void savePB(){
   \                     savePB:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2387          //new   rc();
   2388            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000004   43C640       ORL 0xC6, #0x40
   2389            asm( "NOP" );
   \   000007   00           NOP
   2390            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000008   43C640       ORL 0xC6, #0x40
   2391            asm( "NOP" );
   \   00000B   00           NOP
   2392            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00000C   43C640       ORL 0xC6, #0x40
   2393            asm( "NOP" );
   \   00000F   00           NOP
   2394            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000010   43C640       ORL 0xC6, #0x40
   2395            asm( "NOP" );
   \   000013   00           NOP
   2396            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000014   43C640       ORL 0xC6, #0x40
   2397            asm( "NOP" );
   \   000017   00           NOP
   2398            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000018   43C640       ORL 0xC6, #0x40
   2399            asm( "NOP" );
   \   00001B   00           NOP
   2400            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00001C   43C640       ORL 0xC6, #0x40
   2401            asm( "NOP" );
   \   00001F   00           NOP
   2402            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000020   43C640       ORL 0xC6, #0x40
   2403            asm( "NOP" );
   \   000023   00           NOP
   2404            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000024   43C640       ORL 0xC6, #0x40
   2405            asm( "NOP" );
   \   000027   00           NOP
   2406          //  if( !isOnTestStand ) return;
   2407            //if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; return; }
   2408            if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" );  return; }  
   \   000028   90....       MOV     DPTR,#isOnTestStand
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   7005         JNZ     ??savePB_0
   \   00002E   12....       LCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_124:
   \   000031   8063         SJMP    ??savePB_1
   2409            if( *((BYTE *)0xF53B) != 0xAA ) reset(); 
   \                     ??savePB_0:
   \   000033   90F53B       MOV     DPTR,#-0xac5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   64AA         XRL     A,#0xaa
   \   000039   6003         JZ      ??savePB_2
   \   00003B                ; Setup parameters for call to function reset
   \   00003B   12....       LCALL   reset
   2410            //clearAndHop( 2 ); 
   2411            //clearThePage( 2 );
   2412            //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
   2413            //P1_4 = 1; // debug statement for measuring save PB time
   2414            asm("CLR  0xA8.7");
   \                     ??savePB_2:
   \   00003E   C2AF         CLR  0xA8.7
   2415            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000040   43C640       ORL 0xC6, #0x40
   2416            asm( "NOP" );
   \   000043   00           NOP
   2417            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000044   43C640       ORL 0xC6, #0x40
   2418            asm( "NOP" );
   \   000047   00           NOP
   2419            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000048   43C640       ORL 0xC6, #0x40
   2420            asm( "NOP" );
   \   00004B   00           NOP
   2421            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00004C   43C640       ORL 0xC6, #0x40
   2422            asm( "NOP" );
   \   00004F   00           NOP
   2423            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000050   43C640       ORL 0xC6, #0x40
   2424            asm( "NOP" );
   \   000053   00           NOP
   2425            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000054   43C640       ORL 0xC6, #0x40
   2426            asm( "NOP" );
   \   000057   00           NOP
   2427            if( !isOnTestStand ) reset();  
   \   000058   90....       MOV     DPTR,#isOnTestStand
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   7003         JNZ     ??savePB_3
   \   00005E                ; Setup parameters for call to function reset
   \   00005E   12....       LCALL   reset
   2428            FADDRH = 0x2E; FWT = 0x21; FCTL = 1; asm("NOP"); // this line actually clears the page
   \                     ??savePB_3:
   \   000061   75AD2E       MOV     0xad,#0x2e
   \   000064   75AB21       MOV     0xab,#0x21
   \   000067   75AE01       MOV     0xae,#0x1
   \   00006A   00           NOP
   2429            FADDRH = 0;   
   \   00006B   75AD00       MOV     0xad,#0x0
   2430            asm("SETB 0xA8.7");
   \   00006E   D2AF         SETB 0xA8.7
   2431            tickWait( 25*TICKS_IN_MS );
   \   000070                ; Setup parameters for call to function tickWait
   \   000070   7932         MOV     R1,#0x32
   \   000072   12....       LCALL   tickWait
   2432          //  if( !isOnTestStand ) return;
   2433            initiateTransfer( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+8 );
   \   000075                ; Setup parameters for call to function initiateTransfer
   \   000075   79F2         MOV     R1,#-0xe
   \   000077   7C00         MOV     R4,#0x0
   \   000079   7D5C         MOV     R5,#0x5c
   \   00007B   7A..         MOV     R2,#(page & 0xff)
   \   00007D   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   00007F   12....       LCALL   initiateTransfer
   2434            tickWait( 11*TICKS_IN_MS );  // was 5 ms
   \   000082                ; Setup parameters for call to function tickWait
   \   000082   7916         MOV     R1,#0x16
   \   000084   12....       LCALL   tickWait
   2435            //softKick();
   2436            //FADDRH = 0; 
   2437            restoreRadio();
   \   000087   12....       LCALL   ?Subroutine0
   2438            isOnTestStand = 0;
   \                     ??CrossCallReturnLabel_391:
   \   00008A   90....       MOV     DPTR,#isOnTestStand
   \   00008D   F0           MOVX    @DPTR,A
   2439            //P1_4 = 0; // debug statement for measuring save PB time
   2440            CLKCON = 0x89;  asm( "NOP" );
   \   00008E   75C689       MOV     0xc6,#-0x77
   \   000091   00           NOP
   2441             asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" );
   \   000092   00           NOP
   \   000093   00           NOP
   \   000094   00           NOP
   \   000095   00           NOP
   \                     ??savePB_1:
   \   000096   00           NOP
   2442          }
   \   000097   02....       LJMP    ??Subroutine113_0
   \   00009A                REQUIRE FWT
   \   00009A                REQUIRE FADDRH
   \   00009A                REQUIRE FCTL
   \   00009A                REQUIRE CLKCON

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   7414         MOV     A,#0x14
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#cmdCount
   \   000006   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_295:
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   75C689       MOV     0xc6,#-0x77
   \   00000D   22           RET
   2443          /*
   2444          BYTE clearAndHop( BYTE p ){
   2445             clearThePage( p );
   2446             if( ticks[ Hop ] && page.hoppingAllowed && !page.is500Always ){
   2447                 CHANNR = curChannel; hop(); curChannel = CHANNR; 
   2448                 atomicChange( Hop, lastCycle ); //- _slot );  
   2449             }
   2450             return 1;
   2451          }
   2452          */
   2453          /******************************************************************************
   2454          * @fn  setInt
   2455          * @brief       set the int16 value to register
   2456          * Parameters:  byte reg - register, int val - value
   2457          * @return      void
   2458          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2459          void setInt( BYTE reg, UINT16 val ){
   \                     setInt:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2460          UINT16 *ptr = &page.defCyclesTo500;
   2461          BYTE *pptr = (BYTE *)&page;
   \   000009   75....       MOV     ?V0 + 0,#(page & 0xff)
   \   00000C   75....       MOV     ?V0 + 1,#((page >> 8) & 0xff)
   2462          INT16 *ptr_int16 = NULL;
   2463          
   2464              switch(reg){     
   \   00000F   E9           MOV     A,R1
   \   000010   C3           CLR     C
   \   000011   33           RLC     A
   \   000012   FA           MOV     R2,A
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   FB           MOV     R3,A
   \   000016   EA           MOV     A,R2
   \   000017   24..         ADD     A,#(page & 0xff)
   \   000019   FC           MOV     R4,A
   \   00001A   EB           MOV     A,R3
   \   00001B   34..         ADDC    A,#((page >> 8) & 0xff)
   \   00001D   FD           MOV     R5,A
   \   00001E   EE           MOV     A,R6
   \   00001F   540F         ANL     A,#0xf
   \   000021   F5..         MOV     ?V0 + 2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   E4           CLR     A
   \   000026   CB           XCH     A,R3
   \   000027   FA           MOV     R2,A
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for setInt>_0`:
   \   00002C   02           DB        2
   \   00002D   04           DB        4
   \   00002E   0C           DB        12
   \   00002F   ....         DW        ??setInt_0
   \   000031   13           DB        19
   \   000032   17           DB        23
   \   000033   ....         DW        ??setInt_1
   \   000035   0C           DB        12
   \   000036   01           DB        1
   \   000037   ....         DW        ??setInt_2
   \   000039   02           DB        2
   \   00003A   ....         DW        ??setInt_3
   \   00003C   03           DB        3
   \   00003D   ....         DW        ??setInt_4
   \   00003F   0D           DB        13
   \   000040   ....         DW        ??setInt_5
   \   000042   0E           DB        14
   \   000043   ....         DW        ??setInt_6
   \   000045   10           DB        16
   \   000046   ....         DW        ??setInt_7
   \   000048   11           DB        17
   \   000049   ....         DW        ??setInt_8
   \   00004B   18           DB        24
   \   00004C   ....         DW        ??setInt_9
   \   00004E   19           DB        25
   \   00004F   ....         DW        ??setInt_10
   \   000051   1A           DB        26
   \   000052   ....         DW        ??setInt_11
   \   000054   1B           DB        27
   \   000055   ....         DW        ??setInt_12
   \   000057   1C           DB        28
   \   000058   ....         DW        ??setInt_13
   \   00005A   ....         DW        ??setInt_14
   2465                  case SET_GROUP_ID: page.groupId = val; break;
   \                     ??setInt_2:
   \   00005C   90....       MOV     DPTR,#(page + 4)
   \                     ??setInt_15:
   \   00005F   EE           MOV     A,R6
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   EF           MOV     A,R7
   \   000063   02....       LJMP    ??setInt_16
   2466                  case JOIN: page.netId = (val & 0xF); page.myBunch = ( val >> 8 ) & 0xFF;  break;
   \                     ??setInt_3:
   \   000066   E5..         MOV     A,?V0 + 2
   \   000068   90....       MOV     DPTR,#(page + 2)
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   EA           MOV     A,R2
   \   00006D   90....       MOV     DPTR,#(page + 3)
   \   000070   02....       LJMP    ??setInt_16
   2467                  case SET_ED_GW:
   2468                      // this check for not 0 is a mistake, because it prohibits setting addr to 0, was a big issue on Remington Hi-Volts !!!
   2469                      //if( val & 0xFF   ) page.edAddr = val & 0xFF;
   2470                      //if( val & 0xFF00 ) page.gwAddr = ( val >> 8 ) & 0xFF;
   2471                      page.edAddr = val & 0xFF;
   \                     ??setInt_4:
   \   000073   EE           MOV     A,R6
   \   000074   90....       MOV     DPTR,#(page + 190)
   \   000077   F0           MOVX    @DPTR,A
   2472                      page.gwAddr = ( val >> 8 ) & 0xFF;
   \   000078   EA           MOV     A,R2
   \   000079   90....       MOV     DPTR,#(page + 191)
   \   00007C   12....       LCALL   ?Subroutine79
   2473                      ADDR = page.edAddr;
   \                     ??CrossCallReturnLabel_239:
   \   00007F   02....       LJMP    ??setInt_16
   2474                  break;
   2475                  case FetFailureCount:
   2476                    // The following if is meant to use = (not ==), set value
   2477                    // and then compare if fetFailureCount to 0 to set check logic
   2478                    if ((page.fetFailureCount = val) != 0)
   \                     ??setInt_11:
   \   000082   90....       MOV     DPTR,#(page + 128)
   \   000085   EE           MOV     A,R6
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   EF           MOV     A,R7
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   90....       MOV     DPTR,#(page + 128)
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   7002         JNZ     ??setInt_17
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \                     ??setInt_17:
   \   000092   6008         JZ      ??setInt_18
   2479                      checkForFETFailure = TRUE;
   \   000094   7401         MOV     A,#0x1
   \                     ??setInt_19:
   \   000096   90....       MOV     DPTR,#checkForFETFailure
   \   000099   02....       LJMP    ??setInt_16
   2480                    else
   2481                      checkForFETFailure = FALSE;
   \                     ??setInt_18:
   \   00009C   E4           CLR     A
   \   00009D   80F7         SJMP    ??setInt_19
   2482                    break;
   2483                  case FetCurrentThreshold:                                                                          
   2484                    page.fetCurrentThreshold = val;
   \                     ??setInt_12:
   \   00009F   90....       MOV     DPTR,#(page + 130)
   \   0000A2   80BB         SJMP    ??setInt_15
   2485                  break;
   2486                  case FetDeltaCurrent:
   2487          	  page.fetDeltaCurrent = val;
   \                     ??setInt_13:
   \   0000A4   90....       MOV     DPTR,#(page + 132)
   \   0000A7   80B6         SJMP    ??setInt_15
   2488                  break;
   2489                  case BootImage: // try before buy
   2490                      tickWait( 12 * TICKS_IN_MS);
   \                     ??setInt_5:
   \   0000A9                ; Setup parameters for call to function tickWait
   \   0000A9   7918         MOV     R1,#0x18
   \   0000AB   12....       LCALL   tickWait
   2491                      // changing timers to boot (old) values
   2492                      /*if( val == 0x603F ){
   2493                          T1CTL &= 0xFC;
   2494                          SET_WORD(T1CNTH, T1CNTL, 0);
   2495                          SET_WORD(T1CC0H, T1CC0L, 600 - 1);
   2496                          T1CTL |= 0x04  | 0x02;
   2497                          T1CCTL0 = 0x44;
   2498                          si->mppCycle = 300;   // change when we change 8k image and Boot
   2499                      }*/
   2500                      if( val == 0x83F ) break;
   \   0000AE   743F         MOV     A,#0x3f
   \   0000B0   6E           XRL     A,R6
   \   0000B1   7003         JNZ     ??setInt_20
   \   0000B3   7408         MOV     A,#0x8
   \   0000B5   6F           XRL     A,R7
   \                     ??setInt_20:
   \   0000B6   7003         JNZ     $+5
   \   0000B8   02....       LJMP    ??setInt_14
   2501                      {void (*f)( void ) = ( void (*)( void ) )val;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}          
   \   0000BB                ; Setup parameters for indirect call
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   12....       LCALL   ?CALL_IND
   \   0000C2   02....       LJMP    ??setInt_14
   2502                  break;
   2503                  case SyncWord: 
   2504                    SYNC0 = val & 0xFF;    SYNC1 = ( val >> 8 ) & 0xFF;
   \                     ??setInt_6:
   \   0000C5   EE           MOV     A,R6
   \   0000C6   90DF01       MOV     DPTR,#-0x20ff
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   EA           MOV     A,R2
   \   0000CB   90DF00       MOV     DPTR,#-0x2100
   \   0000CE   F0           MOVX    @DPTR,A
   2505                    page.syncword = val; 
   \   0000CF   90....       MOV     DPTR,#(page + 154)
   \   0000D2   808B         SJMP    ??setInt_15
   2506                  break;
   2507                  /*
   2508                  case SetCyclesTo500:            page.defCyclesTo500 = val;            break;
   2509                  case SetCyclesTo10:             page.defCyclesTo10  = val;            break;
   2510                  case SetCyclesToStep500Channel: page.defCyclesToStep500Channel = val; break;
   2511                  case SetCyclesToStep10Channel:  page.defCyclesToStep10Channel  = val; break;
   2512                  case SetCyclesToLightKick:      page.defCycles2LightKick = val;       break;
   2513                  case SetCyclesToSoftKick:       page.defCycles2SoftKick = val;        break;
   2514                  case SetCyclesToHardKick:       page.defCycles2HardKick =val;         break;
   2515                  */
   2516                  
   2517                  case SetCyclesTo500:                    case SetCyclesTo10:             
   2518                  case SetCyclesToStep500Channel:         case SetCyclesToStep10Channel:  
   2519                  case SetCyclesToSoftKick:               case SetCyclesToHardKick:   
   2520                  case SetImageAddr:
   2521                  case SetVersionLow:                     case SetVersionHigh:
   2522                  //default:
   2523                      //if( (reg > (SetCyclesTo500-1) ) && ( reg < (SetVersionHigh+1) ) ){
   2524                          //UINT16 *ptr = &page.defCyclesTo500;
   2525                          ptr[ reg - SetCyclesTo500 ] = val;
   \                     ??setInt_0:
   \   0000D4   EC           MOV     A,R4
   \   0000D5   24C0         ADD     A,#-0x40
   \                     ??setInt_21:
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   ED           MOV     A,R5
   \   0000DA   3400         ADDC    A,#0x0
   \   0000DC   F583         MOV     DPH,A
   \   0000DE   02....       LJMP    ??setInt_15
   2526                      //}
   2527                  break;
   2528                  case SetBasePtr:
   2529                      if( (base_ptr == NULL) && (((UINT16)val) > 0x3FF) && (((UINT16)val) < 0x800) )  base_ptr = (BYTE *)val;
   \                     ??setInt_7:
   \   0000E1   90....       MOV     DPTR,#base_ptr
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   7002         JNZ     ??setInt_22
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \                     ??setInt_22:
   \   0000E9   7062         JNZ     ??setInt_14
   \   0000EB   C3           CLR     C
   \   0000EC   EF           MOV     A,R7
   \   0000ED   9404         SUBB    A,#0x4
   \   0000EF   405C         JC      ??setInt_14
   \   0000F1   C3           CLR     C
   \   0000F2   EF           MOV     A,R7
   \   0000F3   9408         SUBB    A,#0x8
   \   0000F5   5056         JNC     ??setInt_14
   \   0000F7   90....       MOV     DPTR,#base_ptr
   \   0000FA   02....       LJMP    ??setInt_15
   2530                  break;  
   2531                  case SetCurNoise: page.cur_noise = val; break;
   \                     ??setInt_8:
   \   0000FD   90....       MOV     DPTR,#(page + 232)
   \   000100   02....       LJMP    ??setInt_15
   2532                  //case GndShift:    gnd_shift = val;      break;
   2533                  case SetOscLowCurrentLimitInmA:
   2534                  case SetOscDeltaV:
   2535                  case SetOscOVStartupDelay:
   2536                  case SetOscAfterStartupDelay:
   2537                  case SetOscLowCurrentOnlyDelay:
   2538                    ptr_int16 = &page.oscLowCurrentLimitInmA;
   2539                    ptr_int16[reg - SetOscLowCurrentLimitInmA] = val;
   \                     ??setInt_1:
   \   000103   EC           MOV     A,R4
   \   000104   2460         ADD     A,#0x60
   \   000106   80CF         SJMP    ??setInt_21
   2540                  break;
   2541                  case ReadPBOneCommand: 
   2542                      if( (val>>12)&0xF ) pptr = (BYTE *)0x5C00; 
   \                     ??setInt_9:
   \   000108   74F0         MOV     A,#-0x10
   \   00010A   5F           ANL     A,R7
   \   00010B   F9           MOV     R1,A
   \   00010C   E4           CLR     A
   \   00010D   7001         JNZ     ??setInt_23
   \   00010F   E9           MOV     A,R1
   \                     ??setInt_23:
   \   000110   6005         JZ      ??setInt_24
   \   000112   8B..         MOV     ?V0 + 0,R3
   \   000114   75..5C       MOV     ?V0 + 1,#0x5c
   2543                      base_ptr = pptr + 24*((val>>8)&0xF);
   \                     ??setInt_24:
   \   000117   740F         MOV     A,#0xf
   \   000119   5A           ANL     A,R2
   \   00011A   75F018       MOV     B,#0x18
   \   00011D   A4           MUL     AB
   \   00011E   F8           MOV     R0,A
   \   00011F   A9F0         MOV     R1,B
   \   000121   E5..         MOV     A,?V0 + 0
   \   000123   28           ADD     A,R0
   \   000124   F8           MOV     R0,A
   \   000125   E5..         MOV     A,?V0 + 1
   \   000127   39           ADDC    A,R1
   \   000128   12....       LCALL   ?Subroutine67
   2544                      calibrationRepeat = (val>>4)&0xF;
   \                     ??CrossCallReturnLabel_210:
   \   00012B   EE           MOV     A,R6
   \   00012C   C4           SWAP    A
   \   00012D   540F         ANL     A,#0xf
   \   00012F   90....       MOV     DPTR,#calibrationRepeat
   \   000132   F0           MOVX    @DPTR,A
   2545                      reportScaling  = (val&0xF) * calibrationRepeat; 
   \   000133   C0E0         PUSH    A
   \   000135   E5..         MOV     A,?V0 + 2
   \   000137   F5F0         MOV     B,A
   \   000139   D0E0         POP     A
   \   00013B   A4           MUL     AB
   \   00013C   90....       MOV     DPTR,#reportScaling
   \   00013F   800B         SJMP    ??setInt_16
   2546                  break;
   2547                  case SetPBByte: pptr[ ( val >> 8 )&0xFF ] = val & 0xFF; break;
   \                     ??setInt_10:
   \   000141   EA           MOV     A,R2
   \   000142   24..         ADD     A,#(page & 0xff)
   \   000144   F582         MOV     DPL,A
   \   000146   E4           CLR     A
   \   000147   34..         ADDC    A,#((page >> 8) & 0xff)
   \   000149   F583         MOV     DPH,A
   \   00014B   EE           MOV     A,R6
   \                     ??setInt_16:
   \   00014C   F0           MOVX    @DPTR,A
   2548              }
   2549          }
   \                     ??setInt_14:
   \   00014D   02....       LJMP    ?Subroutine123
   2550          /******************************************************************************
   2551          * @fn  setLong
   2552          * @brief       set the long value to register
   2553          * Parameters:  byte reg - register, long val - value
   2554          * @return      void
   2555          ******************************************************************************/
   2556          //void setLong( BYTE reg, UINT32 val ){  if( reg == SET_DF_TOLERANCE ){ page.dF_Tolerance = val;  } }
   2557          /******************************************************************************
   2558          * @fn  setFloat
   2559          * @brief       set the float value to register
   2560          * Parameters:  byte reg - register, float val - value
   2561          * @return      void
   2562          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2563          void setFloat( BYTE reg, float *ptr){
   \                     setFloat:
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   2564          //BYTE oc = 0;
   2565          //float val = *ptr;
   2566          BYTE *dst = NULL;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   2567          BOOL recomputeOC2Timer = FALSE;
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   2568              switch(reg){     
   \   000014   89..         MOV     ?V0 + 4,R1
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   \   000019   7402         MOV     A,#0x2
   \   00001B   78..         MOV     R0,#?V0 + 4
   \   00001D   12....       LCALL   ?S_SHL
   \   000020   E5..         MOV     A,?V0 + 4
   \   000022   24..         ADD     A,#(page & 0xff)
   \   000024   FA           MOV     R2,A
   \   000025   E5..         MOV     A,?V0 + 5
   \   000027   34..         ADDC    A,#((page >> 8) & 0xff)
   \   000029   FB           MOV     R3,A
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   78..         MOV     R0,#?V0 + 4
   \   000030   12....       LCALL   ?L_MOV_X
   \   000033   E9           MOV     A,R1
   \   000034   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for setFloat>_0`:
   \   000037   04           DB        4
   \   000038   01           DB        1
   \   000039   04           DB        4
   \   00003A   ....         DW        ??setFloat_0
   \   00003C   05           DB        5
   \   00003D   06           DB        6
   \   00003E   ....         DW        ??setFloat_1
   \   000040   0A           DB        10
   \   000041   17           DB        23
   \   000042   ....         DW        ??setFloat_2
   \   000044   19           DB        25
   \   000045   1A           DB        26
   \   000046   ....         DW        ??setFloat_3
   \   000048   01           DB        1
   \   000049   18           DB        24
   \   00004A   ....         DW        ??setFloat_4
   \   00004C   ....         DW        ??setFloat_5
   2569                  case SET_DFK0:  case SET_DFK1:  case SET_DFK2:  case SET_DFK3:     
   2570                      //page.dFk[reg-SET_DFK0] = val;    
   2571                      dst = (BYTE *) &page.dFk[reg-SET_DFK0];
   \                     ??setFloat_0:
   \   00004E   EA           MOV     A,R2
   \   00004F   2408         ADD     A,#0x8
   \   000051   F5..         MOV     ?V0 + 0,A
   \   000053   EB           MOV     A,R3
   \   000054   3400         ADDC    A,#0x0
   \   000056   F5..         MOV     ?V0 + 1,A
   2572                      if( reg == SET_DFK3 ) page.pureOffset = ((INT16) (*ptr))+20;
   \   000058   7404         MOV     A,#0x4
   \   00005A   65..         XRL     A,?V0 + 2
   \   00005C   6003         JZ      $+5
   \   00005E   02....       LJMP    ??setFloat_5
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?FLT_TO_L
   \   000066   7414         MOV     A,#0x14
   \   000068   25..         ADD     A,?V0 + 4
   \   00006A   F8           MOV     R0,A
   \   00006B   E4           CLR     A
   \   00006C   35..         ADDC    A,?V0 + 5
   \   00006E   F9           MOV     R1,A
   \   00006F   90....       MOV     DPTR,#(page + 198)
   \   000072   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_211:
   \   000075   8078         SJMP    ??setFloat_5
   2573                  break;
   2574                  //case SET_VIN_TURN_ON: case SET_VIN_SHUT_OFF: (&page.VinTurnOn)[reg-SET_VIN_TURN_ON]  = val;      return;
   2575                  
   2576                  case SET_TK_CUR: case SET_TK_POW:          
   2577                      //(&page.tkCurrent)[reg-SET_TK_CUR] = val;   
   2578                      dst = (BYTE *) &( (&page.tkCurrent)[reg-SET_TK_CUR] );
   \                     ??setFloat_1:
   \   000077   EA           MOV     A,R2
   \   000078   249D         ADD     A,#-0x63
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   806C         SJMP    ??setFloat_6
   2579                  break;
   2580                  
   2581                  //case SET_VIN_DISABLE_RADIO:                                        page.VinDisableRadio  = val;  return;
   2582          
   2583                  case SET_LC00:  case SET_LC01:  case SET_LC10:  case SET_LC11:  
   2584                  case SET_LC20:  case SET_LC21:  case SET_LC30:  case SET_LC31:  
   2585                  case SET_LC40:  case SET_LC41:  case SET_LC50:  case SET_LC51:  // linearK [6][2]  
   2586                  case SET_LC60:  case SET_LC61:
   2587                      if( reg == 14 ){ zerofill( (BYTE *)&k_oc2timer, 4 );  recomputeOC2Timer = TRUE; }
   \                     ??setFloat_2:
   \   000081   740E         MOV     A,#0xe
   \   000083   65..         XRL     A,?V0 + 2
   \   000085   700C         JNZ     ??setFloat_7
   \   000087                ; Setup parameters for call to function zerofill
   \   000087   7904         MOV     R1,#0x4
   \   000089   7A..         MOV     R2,#(k_oc2timer & 0xff)
   \   00008B   7B..         MOV     R3,#((k_oc2timer >> 8) & 0xff)
   \   00008D   12....       LCALL   zerofill
   \   000090   75..01       MOV     ?V0 + 3,#0x1
   2588                      reg -= SET_LC00;
   \                     ??setFloat_7:
   \   000093   74F6         MOV     A,#-0xa
   \   000095   25..         ADD     A,?V0 + 2
   \   000097   F5..         MOV     ?V0 + 2,A
   2589                      //page.linearK[reg>>1][reg&1]     = val; 
   2590                      dst = (BYTE *) &page.linearK[reg>>1][reg&1]; 
   \   000099   C3           CLR     C
   \   00009A   13           RRC     A
   \   00009B   F5..         MOV     ?V0 + 0,A
   \   00009D   7403         MOV     A,#0x3
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?S_SHL
   \   0000A4   E5..         MOV     A,?V0 + 2
   \   0000A6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A8   E4           CLR     A
   \   0000A9   92E0         MOV     0xE0 /* A   */.0,C
   \   0000AB   F5..         MOV     ?V0 + 4,A
   \   0000AD   75..00       MOV     ?V0 + 5,#0x0
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   78..         MOV     R0,#?V0 + 4
   \   0000B4   12....       LCALL   ?S_SHL
   \   0000B7   E5..         MOV     A,?V0 + 4
   \   0000B9   24..         ADD     A,#((page + 40) & 0xff)
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E4           CLR     A
   \   0000BD   34..         ADDC    A,#(((page + 40) >> 8) & 0xff)
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E5..         MOV     A,?V0 + 0
   \   0000C2   28           ADD     A,R0
   \   0000C3   F5..         MOV     ?V0 + 0,A
   \   0000C5   E5..         MOV     A,?V0 + 1
   \   0000C7   39           ADDC    A,R1
   \   0000C8   8023         SJMP    ??setFloat_6
   2591          //            if( reg == 4 ){
   2592          //                T3CC1 = oc2timer( theOC ); // lin coeff for 
   2593          //                #ifdef MidString
   2594          //                compute98();
   2595          //                #endif
   2596          //            }
   2597                  break;
   2598                  case SET_VREF0:                   invVref0 = 1 / (*ptr);                    // go through
   \                     ??setFloat_4:
   \   0000CA   75..00       MOV     ?V0 + 8,#0x0
   \   0000CD   75..00       MOV     ?V0 + 9,#0x0
   \   0000D0   75..80       MOV     ?V0 + 10,#-0x80
   \   0000D3   75..3F       MOV     ?V0 + 11,#0x3f
   \   0000D6   78..         MOV     R0,#?V0 + 8
   \   0000D8   79..         MOV     R1,#?V0 + 4
   \   0000DA   12....       LCALL   ?FLT_DIV
   \   0000DD   90....       MOV     DPTR,#invVref0
   \   0000E0   78..         MOV     R0,#?V0 + 8
   \   0000E2   12....       LCALL   ?L_MOV_TO_X
   2599                  case SET_VREF1: case SET_VREF2:   
   2600                      //mymemcpy( (BYTE *) &page.vrefPolynom[reg-SET_VREF0], (BYTE *) ptr, 4 );
   2601                      dst = (BYTE *) &page.vrefPolynom[reg-SET_VREF0];
   \                     ??setFloat_3:
   \   0000E5   EA           MOV     A,R2
   \   0000E6   24BC         ADD     A,#-0x44
   \   0000E8   F5..         MOV     ?V0 + 0,A
   \   0000EA   EB           MOV     A,R3
   \   0000EB   34FF         ADDC    A,#-0x1
   \                     ??setFloat_6:
   \   0000ED   F5..         MOV     ?V0 + 1,A
   2602                  break;
   2603              }
   2604              if( dst ) mymemcpy( dst, (BYTE *) ptr, 4 );
   \                     ??setFloat_5:
   \   0000EF   E5..         MOV     A,?V0 + 0
   \   0000F1   7002         JNZ     ??setFloat_8
   \   0000F3   E5..         MOV     A,?V0 + 1
   \                     ??setFloat_8:
   \   0000F5   600D         JZ      ??setFloat_9
   \   0000F7                ; Setup parameters for call to function mymemcpy
   \   0000F7   7904         MOV     R1,#0x4
   \   0000F9   EE           MOV     A,R6
   \   0000FA   FC           MOV     R4,A
   \   0000FB   EF           MOV     A,R7
   \   0000FC   FD           MOV     R5,A
   \   0000FD   AA..         MOV     R2,?V0 + 0
   \   0000FF   AB..         MOV     R3,?V0 + 1
   \   000101   12....       LCALL   mymemcpy
   2605              if( recomputeOC2Timer ) T3CC1 = oc2timer( theOC );
   \                     ??setFloat_9:
   \   000104   E5..         MOV     A,?V0 + 3
   \   000106   6003         JZ      ??CrossCallReturnLabel_82
   \   000108                ; Setup parameters for call to function oc2timer
   \   000108   12....       LCALL   ??Subroutine33_0
   2606          }
   \                     ??CrossCallReturnLabel_82:
   \   00010B   02....       LJMP    ?Subroutine109
   \   00010E                REQUIRE T3CC1
   2607          /******************************************************************************/
   2608          #define NULLOP          0
   2609          #define SETREG          0x10
   2610          #define RESET           0x20
   2611          #define SILENCE         0x30
   2612          #define CALIBRATE_R     0x40
   2613          #define SET_MAC_CMD     0x50
   2614          #define BOOT_OVER_AIR   0x60
   2615          #define SET_NEXT_KEY    0x70
   2616          #define SET_NEXT_IV     0x80
   2617          #define ASVOL_NETCMD    0x90
   2618          #define SHORT_NETJOIN   0xF0
   2619          
   2620          #define BROADCAST       0
   2621          #define STRINGADDR      1
   2622          #define NIADDR          2
   2623          #define MACADDR         3
   2624          
   2625          #define FLOAT_VAL       0
   2626          #define BYTE_VAL        (1<<2)
   2627          #define SHORT_VAL       (2<<2)
   2628          #define LONG_VAL        (3<<2)
   2629          
   2630          /******************************************************************************
   2631          * @fn  parseCommands
   2632          * @brief       This function parses commands and sets global flags
   2633          * Parameters:
   2634          * @return void
   2635          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2636          void parseCommands(BYTE l){
   \                     parseCommands:
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   2637          BYTE *ptr     = radioPktBuffer + 8;
   \   000007   7E..         MOV     R6,#((radioPktBuffer + 8) & 0xff)
   \   000009   7F..         MOV     R7,#(((radioPktBuffer + 8) >> 8) & 0xff)
   2638          BYTE cmd, reg;
   2639          BOOL flag = TRUE, /*addrFlag = FALSE,*/ individualAddr = FALSE;
   \   00000B   75..01       MOV     ?V0 + 2,#0x1
   \   00000E   75..00       MOV     ?V0 + 3,#0x0
   \   000011   802D         SJMP    ??parseCommands_0
   2640          static UINT16 cmdCnt = 0; //, i;
   2641              while( *ptr && (l--) ){
   2642                  cmd = *ptr++; 
   2643                  if( (cmd & 0xF0) == SHORT_NETJOIN ){
   2644                      reg = *ptr++;
   \                     ??parseCommands_1:
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   0E           INC     R6
   \   000018   AF83         MOV     R7,DPH
   2645                      if( mymemcmp( page.myMac, ptr, 6 ) == 0 ){ page.netId = (cmd & 0xF); page.myBunch = reg; }
   \   00001A                ; Setup parameters for call to function mymemcmp
   \   00001A   7906         MOV     R1,#0x6
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   7A..         MOV     R2,#((page + 6) & 0xff)
   \   000022   7B..         MOV     R3,#(((page + 6) >> 8) & 0xff)
   \   000024   12....       LCALL   mymemcmp
   \   000027   E9           MOV     A,R1
   \   000028   700E         JNZ     ??parseCommands_2
   \   00002A   740F         MOV     A,#0xf
   \   00002C   55..         ANL     A,?V0 + 5
   \   00002E   90....       MOV     DPTR,#(page + 2)
   \   000031   F0           MOVX    @DPTR,A
   \   000032   E5..         MOV     A,?V0 + 0
   \   000034   90....       MOV     DPTR,#(page + 3)
   \   000037   F0           MOVX    @DPTR,A
   2646                      ptr += 6;
   \                     ??parseCommands_2:
   \   000038   EE           MOV     A,R6
   \   000039   2406         ADD     A,#0x6
   \                     ??parseCommands_3:
   \   00003B   FE           MOV     R6,A
   \                     ??parseCommands_4:
   \   00003C   EF           MOV     A,R7
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   FF           MOV     R7,A
   2647                  }else{
   \                     ??parseCommands_0:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??CrossCallReturnLabel_243
   \   00004B   AB..         MOV     R3,?V0 + 4
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   2B           ADD     A,R3
   \   000050   F5..         MOV     ?V0 + 4,A
   \   000052   EB           MOV     A,R3
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??CrossCallReturnLabel_243
   \   000058   8A..         MOV     ?V0 + 5,R2
   \   00005A   A3           INC     DPTR
   \   00005B   AE82         MOV     R6,DPL
   \   00005D   AF83         MOV     R7,DPH
   \   00005F   74F0         MOV     A,#-0x10
   \   000061   55..         ANL     A,?V0 + 5
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   74F0         MOV     A,#-0x10
   \   000067   65..         XRL     A,?V0 + 0
   \   000069   60A8         JZ      ??parseCommands_1
   2648                      if( search_stat == 2 ) search_stat = page.searchCommunication;
   \   00006B   90....       MOV     DPTR,#search_stat
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6402         XRL     A,#0x2
   \   000071   7003         JNZ     ??CrossCallReturnLabel_153
   \   000073   12....       LCALL   ?Subroutine54
   2649                      //mymemcpy( (BYTE *)&cmdCnt, ptr, 2 ); 
   2650                      cmdCnt = *((UINT16 *)ptr);
   \                     ??CrossCallReturnLabel_153:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_185:
   \   00007D   90....       MOV     DPTR,#??cmdCnt
   \   000080   12....       LCALL   ??Subroutine67_0
   2651                      ptr+=2;
   \                     ??CrossCallReturnLabel_212:
   \   000083   EE           MOV     A,R6
   \   000084   2402         ADD     A,#0x2
   \   000086   0E           INC     R6
   \   000087   0E           INC     R6
   \   000088   EF           MOV     A,R7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   FF           MOV     R7,A
   2652                      switch( cmd & 0x3 ){ 
   \   00008C   EE           MOV     A,R6
   \   00008D   2402         ADD     A,#0x2
   \   00008F   EF           MOV     A,R7
   \   000090   3400         ADDC    A,#0x0
   \   000092   F9           MOV     R1,A
   \   000093   7403         MOV     A,#0x3
   \   000095   55..         ANL     A,?V0 + 5
   \   000097   F5..         MOV     ?V0 + 1,A
   \   000099   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for parseCommands>_0`:
   \   00009C   00           DB        0
   \   00009D   03           DB        3
   \   00009E   ....         DW        ??parseCommands_5
   \   0000A0   ....         DW        ??parseCommands_6
   \   0000A2   ....         DW        ??parseCommands_7
   \   0000A4   ....         DW        ??parseCommands_8
   \   0000A6   ....         DW        ??parseCommands_9
   2653                          case BROADCAST:                                                             flag = TRUE; break;
   \                     ??parseCommands_6:
   \   0000A8   75..01       MOV     ?V0 + 2,#0x1
   \   0000AB   8067         SJMP    ??parseCommands_5
   2654                          case STRINGADDR: flag = ( *((UINT16 *) ptr) == page.groupId );              ptr += 2;    break;
   \                     ??parseCommands_7:
   \   0000AD   12....       LCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_136:
   \   0000B0   90....       MOV     DPTR,#(page + 4)
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6A           XRL     A,R2
   \   0000B5   7003         JNZ     ??parseCommands_10
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   6B           XRL     A,R3
   \                     ??parseCommands_10:
   \   0000BA   7004         JNZ     ??parseCommands_11
   \   0000BC   7A01         MOV     R2,#0x1
   \   0000BE   8002         SJMP    ??parseCommands_12
   \                     ??parseCommands_11:
   \   0000C0   7A00         MOV     R2,#0x0
   \                     ??parseCommands_12:
   \   0000C2   8A..         MOV     ?V0 + 2,R2
   \                     ??parseCommands_13:
   \   0000C4   0E           INC     R6
   \   0000C5   0E           INC     R6
   \   0000C6   E9           MOV     A,R1
   \   0000C7   804A         SJMP    ??parseCommands_14
   2655                          case NIADDR:     flag = ( ptr[0] == page.myBunch && ptr[1] == page.netId ); individualAddr = flag; ptr += 2;    break;
   \                     ??parseCommands_8:
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FA           MOV     R2,A
   \   0000CF   90....       MOV     DPTR,#(page + 3)
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6A           XRL     A,R2
   \   0000D4   7012         JNZ     ??parseCommands_15
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FA           MOV     R2,A
   \   0000DD   90....       MOV     DPTR,#(page + 2)
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6A           XRL     A,R2
   \   0000E2   7004         JNZ     ??parseCommands_15
   \   0000E4   7A01         MOV     R2,#0x1
   \   0000E6   8002         SJMP    ??parseCommands_16
   \                     ??parseCommands_15:
   \   0000E8   7A00         MOV     R2,#0x0
   \                     ??parseCommands_16:
   \   0000EA   8A..         MOV     ?V0 + 2,R2
   \   0000EC   85....       MOV     ?V0 + 3,?V0 + 2
   \   0000EF   80D3         SJMP    ??parseCommands_13
   2656                          case MACADDR:    
   2657                              flag = ( mymemcmp( page.myMac, ptr, 6 ) == 0 );// flag = TRUE; else flag = FALSE;
   \                     ??parseCommands_9:
   \   0000F1                ; Setup parameters for call to function mymemcmp
   \   0000F1   7906         MOV     R1,#0x6
   \   0000F3   EE           MOV     A,R6
   \   0000F4   FC           MOV     R4,A
   \   0000F5   EF           MOV     A,R7
   \   0000F6   FD           MOV     R5,A
   \   0000F7   7A..         MOV     R2,#((page + 6) & 0xff)
   \   0000F9   7B..         MOV     R3,#(((page + 6) >> 8) & 0xff)
   \   0000FB   12....       LCALL   mymemcmp
   \   0000FE   E9           MOV     A,R1
   \   0000FF   7004         JNZ     ??parseCommands_17
   \   000101   7A01         MOV     R2,#0x1
   \   000103   8002         SJMP    ??parseCommands_18
   \                     ??parseCommands_17:
   \   000105   7A00         MOV     R2,#0x0
   \                     ??parseCommands_18:
   \   000107   8A..         MOV     ?V0 + 2,R2
   2658                              individualAddr = flag;
   \   000109   85....       MOV     ?V0 + 3,?V0 + 2
   2659                              ptr += 6;
   \   00010C   EE           MOV     A,R6
   \   00010D   2406         ADD     A,#0x6
   \   00010F   FE           MOV     R6,A
   \   000110   EF           MOV     A,R7
   \   000111   3400         ADDC    A,#0x0
   \                     ??parseCommands_14:
   \   000113   FF           MOV     R7,A
   2660                          break;
   2661                      }
   2662                      //addrFlag = flag;
   2663                      if( cmdCnt ){
   \                     ??parseCommands_5:
   \   000114   90....       MOV     DPTR,#??cmdCnt
   \   000117   E0           MOVX    A,@DPTR
   \   000118   7002         JNZ     ??parseCommands_19
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \                     ??parseCommands_19:
   \   00011C   6035         JZ      ??parseCommands_20
   2664                          if( cmdCount > 0xFF00 &&  cmdCnt < 0x100 ) cmdCount = cmdCnt;
   \   00011E   90....       MOV     DPTR,#cmdCount
   \   000121   C3           CLR     C
   \   000122   E0           MOVX    A,@DPTR
   \   000123   9401         SUBB    A,#0x1
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   94FF         SUBB    A,#-0x1
   \   000129   4017         JC      ??parseCommands_21
   \   00012B   C3           CLR     C
   \   00012C   90....       MOV     DPTR,#(??cmdCnt + 1)
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   9401         SUBB    A,#0x1
   \   000132   500E         JNC     ??parseCommands_21
   \   000134   90....       MOV     DPTR,#??cmdCnt
   \   000137   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_186:
   \   00013A   90....       MOV     DPTR,#cmdCount
   \   00013D   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_213:
   \   000140   8011         SJMP    ??parseCommands_20
   2665                          else                                       flag = flag && (cmdCnt > cmdCount);
   \                     ??parseCommands_21:
   \   000142   E5..         MOV     A,?V0 + 2
   \   000144   6009         JZ      ??parseCommands_22
   \   000146   12....       LCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_55:
   \   000149   5004         JNC     ??parseCommands_22
   \   00014B   7A01         MOV     R2,#0x1
   \   00014D   8002         SJMP    ??parseCommands_23
   \                     ??parseCommands_22:
   \   00014F   7A00         MOV     R2,#0x0
   \                     ??parseCommands_23:
   \   000151   8A..         MOV     ?V0 + 2,R2
   2666                      }
   2667                      if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
   \                     ??parseCommands_20:
   \   000153   12....       LCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_56:
   \   000156   5006         JNC     ??CrossCallReturnLabel_214
   \   000158   90....       MOV     DPTR,#cmdCount
   \   00015B   12....       LCALL   ??Subroutine67_0
   2668                      switch( cmd & 0xF0 ){
   \                     ??CrossCallReturnLabel_214:
   \   00015E   8E82         MOV     DPL,R6
   \   000160   8F83         MOV     DPH,R7
   \   000162   A3           INC     DPTR
   \   000163   A882         MOV     R0,DPL
   \   000165   A983         MOV     R1,DPH
   \   000167   E5..         MOV     A,?V0 + 0
   \   000169   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for parseCommands>_1`:
   \   00016C   00           DB        0
   \   00016D   06           DB        6
   \   00016E   10           DB        16
   \   00016F   ....         DW        ??parseCommands_24
   \   000171   20           DB        32
   \   000172   ....         DW        ??parseCommands_25
   \   000174   50           DB        80
   \   000175   ....         DW        ??parseCommands_26
   \   000177   70           DB        112
   \   000178   ....         DW        ??parseCommands_27
   \   00017A   80           DB        128
   \   00017B   ....         DW        ??parseCommands_27
   \   00017D   90           DB        144
   \   00017E   ....         DW        ??parseCommands_28
   \   000180   ....         DW        ??parseCommands_0
   2669                          case SET_MAC_CMD:
   2670                            if( flag && ( ( cmd & 0x3 ) == MACADDR ) ) {
   \                     ??parseCommands_26:
   \   000182   E5..         MOV     A,?V0 + 2
   \   000184   7003         JNZ     $+5
   \   000186   02....       LJMP    ??parseCommands_2
   \   000189   7403         MOV     A,#0x3
   \   00018B   65..         XRL     A,?V0 + 1
   \   00018D   6003         JZ      $+5
   \   00018F   02....       LJMP    ??parseCommands_2
   2671                                mymemcpy( page.myMac, ptr, 6 );
   \   000192                ; Setup parameters for call to function mymemcpy
   \   000192   7906         MOV     R1,#0x6
   \   000194   EE           MOV     A,R6
   \   000195   FC           MOV     R4,A
   \   000196   EF           MOV     A,R7
   \   000197   FD           MOV     R5,A
   \   000198   7A..         MOV     R2,#((page + 6) & 0xff)
   \   00019A   7B..         MOV     R3,#(((page + 6) >> 8) & 0xff)
   \   00019C   12....       LCALL   mymemcpy
   \   00019F   02....       LJMP    ??parseCommands_2
   2672                                //savePB();
   2673                            }
   2674                            ptr += 6;
   2675                          break;
   2676                          case SETREG:
   2677                              if( search_stat != page.searchCommunication ) page.searchCommunication = search_stat;
   \                     ??parseCommands_24:
   \   0001A2   90....       MOV     DPTR,#search_stat
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   FA           MOV     R2,A
   \   0001A7   90....       MOV     DPTR,#(page + 194)
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   A2E7         MOV     C,0xE0 /* A   */.7
   \   0001AD   E4           CLR     A
   \   0001AE   92E0         MOV     0xE0 /* A   */.0,C
   \   0001B0   6A           XRL     A,R2
   \   0001B1   6010         JZ      ??parseCommands_29
   \   0001B3   90....       MOV     DPTR,#search_stat
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B9   7583..       MOV     DPH,#(((page + 194) >> 8) & 0xff)
   \   0001BC   7582..       MOV     DPL,#((page + 194) & 0xff)
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   92E7         MOV     0xE0 /* A   */.7,C
   \   0001C2   F0           MOVX    @DPTR,A
   2678                              reg = *ptr++;
   \                     ??parseCommands_29:
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   F5..         MOV     ?V0 + 0,A
   \   0001CA   E8           MOV     A,R0
   \   0001CB   FE           MOV     R6,A
   \   0001CC   E9           MOV     A,R1
   \   0001CD   FF           MOV     R7,A
   2679                              switch( cmd&0xC ){
   \   0001CE   740C         MOV     A,#0xc
   \   0001D0   55..         ANL     A,?V0 + 5
   \   0001D2   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for parseCommands>_2`:
   \   0001D5   00           DB        0
   \   0001D6   03           DB        3
   \   0001D7   00           DB        0
   \   0001D8   ....         DW        ??parseCommands_30
   \   0001DA   04           DB        4
   \   0001DB   ....         DW        ??parseCommands_31
   \   0001DD   08           DB        8
   \   0001DE   ....         DW        ??parseCommands_32
   \   0001E0   ....         DW        ??parseCommands_0
   2680                                  case FLOAT_VAL:  if( flag ) setFloat( reg, (float *)ptr );       ptr+=4;  break;
   \                     ??parseCommands_30:
   \   0001E2   E5..         MOV     A,?V0 + 2
   \   0001E4   6009         JZ      ??parseCommands_33
   \   0001E6                ; Setup parameters for call to function setFloat
   \   0001E6   EE           MOV     A,R6
   \   0001E7   FA           MOV     R2,A
   \   0001E8   EF           MOV     A,R7
   \   0001E9   FB           MOV     R3,A
   \   0001EA   A9..         MOV     R1,?V0 + 0
   \   0001EC   12....       LCALL   setFloat
   \                     ??parseCommands_33:
   \   0001EF   EE           MOV     A,R6
   \   0001F0   2404         ADD     A,#0x4
   \   0001F2   02....       LJMP    ??parseCommands_3
   2681                                  case BYTE_VAL:   if( flag ) setByte ( reg, *ptr );               ptr++;   break;
   \                     ??parseCommands_31:
   \   0001F5   E5..         MOV     A,?V0 + 2
   \   0001F7   600B         JZ      ??parseCommands_34
   \   0001F9                ; Setup parameters for call to function setByte
   \   0001F9   8E82         MOV     DPL,R6
   \   0001FB   8F83         MOV     DPH,R7
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   FA           MOV     R2,A
   \   0001FF   A9..         MOV     R1,?V0 + 0
   \   000201   12....       LCALL   setByte
   \                     ??parseCommands_34:
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   A3           INC     DPTR
   \   000209   0E           INC     R6
   \   00020A   AF83         MOV     R7,DPH
   \   00020C   02....       LJMP    ??parseCommands_0
   2682                                  case SHORT_VAL:  if( flag ) setInt  ( reg, *((UINT16*)ptr) );    ptr+=2;  break;
   \                     ??parseCommands_32:
   \   00020F   E5..         MOV     A,?V0 + 2
   \   000211   6008         JZ      ??parseCommands_35
   \   000213                ; Setup parameters for call to function setInt
   \   000213   12....       LCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_137:
   \   000216   A9..         MOV     R1,?V0 + 0
   \   000218   12....       LCALL   setInt
   \                     ??parseCommands_35:
   \   00021B   EE           MOV     A,R6
   \   00021C   2402         ADD     A,#0x2
   \   00021E   0E           INC     R6
   \   00021F   0E           INC     R6
   \   000220   02....       LJMP    ??parseCommands_4
   2683                              }
   2684                          break;
   2685                          case RESET: if( flag ){ tickWait( 12 * TICKS_IN_MS ); reset(); }else break; // ticks[ Reset ] = TICKS_IN_SEC; else break;
   \                     ??parseCommands_25:
   \   000223   E5..         MOV     A,?V0 + 2
   \   000225   7003         JNZ     $+5
   \   000227   02....       LJMP    ??parseCommands_0
   \   00022A                ; Setup parameters for call to function tickWait
   \   00022A   7918         MOV     R1,#0x18
   \   00022C   12....       LCALL   tickWait
   \   00022F                ; Setup parameters for call to function reset
   \   00022F   12....       LCALL   reset
   2686                          /*
   2687                          case BOOT_OVER_AIR: if( addrFlag && !P1_4 ) {
   2688                          UINT16 addr;  
   2689                              page.searchCommunication = FALSE;
   2690                              reg = *ptr++; addr = *((UINT16*)ptr);  
   2691                              if( ( addr > 0x3FF ) && ( 0x4000 & ( addr ^ page.imageAddr ) ) && ( addr < PAGEADDR ) ){
   2692                              //static BYTE bootBuf[18];
   2693                                  ptr += 2;
   2694                                  //for( cmd = 0; cmd < reg; cmd++ ) bootBuf[ cmd ] = *ptr++;
   2695                                  //mymemcpy( bootBuf, ptr, reg );
   2696                                  if( reg & 1 ) reg++;
   2697                                  tickWait( 12 * TICKS_IN_MS );
   2698                                  initiateTransfer( ptr, (BYTE *)addr, reg );
   2699                              }
   2700                          }return;
   2701                          */
   2702                          case SET_NEXT_KEY: case SET_NEXT_IV: 
   2703                              if( individualAddr ){ 
   \                     ??parseCommands_27:
   \   000232   E5..         MOV     A,?V0 + 3
   \   000234   603C         JZ      ??CrossCallReturnLabel_243
   2704                                  loadKey( (char *)0x3E0 ); loadIV( (char *)0x3F0 ); 
   \   000236                ; Setup parameters for call to function load
   \   000236   7AE0         MOV     R2,#-0x20
   \   000238   7B03         MOV     R3,#0x3
   \   00023A   12....       LCALL   ??Subroutine80_0
   \                     ??CrossCallReturnLabel_244:
   \   00023D                ; Setup parameters for call to function load
   \   00023D   7AF0         MOV     R2,#-0x10
   \   00023F   7B03         MOV     R3,#0x3
   \   000241   7906         MOV     R1,#0x6
   \   000243   12....       LCALL   ??Subroutine80_1
   2705                                  decode( 16, (char *)ptr, ((cmd&0xF0)==SET_NEXT_IV) ? (char *)nextIV : (char *)nextKey ); 
   \                     ??CrossCallReturnLabel_247:
   \   000246   7480         MOV     A,#-0x80
   \   000248   65..         XRL     A,?V0 + 0
   \   00024A   7008         JNZ     ??parseCommands_36
   \   00024C   75....       MOV     ?V0 + 0,#(nextIV & 0xff)
   \   00024F   75....       MOV     ?V0 + 1,#((nextIV >> 8) & 0xff)
   \   000252   8006         SJMP    ??parseCommands_37
   \                     ??parseCommands_36:
   \   000254   75....       MOV     ?V0 + 0,#(nextKey & 0xff)
   \   000257   75....       MOV     ?V0 + 1,#((nextKey >> 8) & 0xff)
   \                     ??parseCommands_37:
   \   00025A                ; Setup parameters for call to function code
   \   00025A   78..         MOV     R0,#?V0 + 0
   \   00025C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025F   EE           MOV     A,R6
   \   000260   FC           MOV     R4,A
   \   000261   EF           MOV     A,R7
   \   000262   FD           MOV     R5,A
   \   000263   7A10         MOV     R2,#0x10
   \   000265   7902         MOV     R1,#0x2
   \   000267   12....       LCALL   `code`
   \   00026A   7402         MOV     A,#0x2
   \   00026C   12....       LCALL   ?DEALLOC_XSTACK8
   2706                                  loadKey( page.curKey );
   \   00026F                ; Setup parameters for call to function load
   \   00026F   12....       LCALL   ?Subroutine80
   \                     ??CrossCallReturnLabel_243:
   \   000272   7F06         MOV     R7,#0x6
   \   000274   02....       LJMP    ?FUNC_LEAVE_XDATA
   2707                              }
   2708                          return;
   2709                          case ASVOL_NETCMD:
   2710                              if( individualAddr ){
   \                     ??parseCommands_28:
   \   000277   EE           MOV     A,R6
   \   000278   2407         ADD     A,#0x7
   \   00027A   F5..         MOV     ?V0 + 0,A
   \   00027C   EF           MOV     A,R7
   \   00027D   3400         ADDC    A,#0x0
   \   00027F   F5..         MOV     ?V0 + 1,A
   \   000281   E5..         MOV     A,?V0 + 3
   \   000283   602E         JZ      ??parseCommands_38
   2711                                  BYTE *saved_ptr = ptr;
   2712                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000285   43C640       ORL 0xC6, #0x40
   2713                                  asm( "NOP" );
   \   000288   00           NOP
   2714                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000289   43C640       ORL 0xC6, #0x40
   2715                                  asm( "NOP" );
   \   00028C   00           NOP
   2716                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00028D   43C640       ORL 0xC6, #0x40
   2717                                  asm( "NOP" );
   \   000290   00           NOP
   2718                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000291   43C640       ORL 0xC6, #0x40
   2719                                  asm( "NOP" );
   \   000294   00           NOP
   2720                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000295   43C640       ORL 0xC6, #0x40
   2721                                  asm( "NOP" );
   \   000298   00           NOP
   2722                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000299   43C640       ORL 0xC6, #0x40
   2723                                  asm( "NOP" );
   \   00029C   00           NOP
   2724                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00029D   43C640       ORL 0xC6, #0x40
   2725                                  asm( "NOP" );
   \   0002A0   00           NOP
   2726                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   0002A1   43C640       ORL 0xC6, #0x40
   2727                                  asm( "NOP" );
   \   0002A4   00           NOP
   2728                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   0002A5   43C640       ORL 0xC6, #0x40
   2729                                  asm( "NOP" );
   \   0002A8   00           NOP
   2730                                  if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" ); ptr += 7; break; }  
   \   0002A9   90....       MOV     DPTR,#isOnTestStand
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   700B         JNZ     ??parseCommands_39
   \   0002AF   12....       LCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_125:
   \   0002B2   00           NOP
   2731                                
   2732                                  cmd = *ptr++;
   2733                                  page.channel = page.starting500Channel = *ptr++;                // 7 bytes so far, 1 bit free
   2734                                  page.edAddr  =                           *ptr++;
   2735                                  page.gwAddr  =                           *ptr++;
   2736                                  page.myBunch =                           *ptr++;
   2737                                  page.groupId =                           *((UINT16 *) ptr);  ptr += 2;
   2738          
   2739                                  page.netId   =     0xF & cmd;
   2740                                  page.use12kbod  = (0!=(0x10 & cmd ) )?1:0;
   2741                                  page.useFEC     = (0!=(0x20 & cmd ) )?1:0;
   2742                                  page.use250kbod = (0!=(0x40 & cmd ) )?1:0;
   2743                                  
   2744                                  mymemcpy( (BYTE *)(&page.installDate), (BYTE *)&utcLast, 4);
   2745                                  savePB();
   2746                                  ptr = saved_ptr+7;
   2747                                  setup_hopper( page.channel );
   2748                                  setupRadio(   page.channel ); //page.is500Always ? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
   2749                              }else ptr+=7;
   \                     ??parseCommands_38:
   \   0002B3   AE..         MOV     R6,?V0 + 0
   \   0002B5   AF..         MOV     R7,?V0 + 1
   \   0002B7   02....       LJMP    ??parseCommands_0
   \                     ??parseCommands_39:
   \   0002BA   8E82         MOV     DPL,R6
   \   0002BC   8F83         MOV     DPH,R7
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F5..         MOV     ?V0 + 5,A
   \   0002C1   E8           MOV     A,R0
   \   0002C2   FE           MOV     R6,A
   \   0002C3   E9           MOV     A,R1
   \   0002C4   FF           MOV     R7,A
   \   0002C5   8E82         MOV     DPL,R6
   \   0002C7   8F83         MOV     DPH,R7
   \   0002C9   E0           MOVX    A,@DPTR
   \   0002CA   A3           INC     DPTR
   \   0002CB   0E           INC     R6
   \   0002CC   AF83         MOV     R7,DPH
   \   0002CE   90....       MOV     DPTR,#(page + 218)
   \   0002D1   F0           MOVX    @DPTR,A
   \   0002D2   90....       MOV     DPTR,#(page + 164)
   \   0002D5   12....       LCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_298:
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   90....       MOV     DPTR,#(page + 190)
   \   0002DC   12....       LCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_230:
   \   0002DF   90....       MOV     DPTR,#(page + 191)
   \   0002E2   12....       LCALL   ?Subroutine76
   \                     ??CrossCallReturnLabel_231:
   \   0002E5   90....       MOV     DPTR,#(page + 3)
   \   0002E8   12....       LCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_299:
   \   0002EB   A3           INC     DPTR
   \   0002EC   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_187:
   \   0002EF   90....       MOV     DPTR,#(page + 4)
   \   0002F2   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_215:
   \   0002F5   740F         MOV     A,#0xf
   \   0002F7   55..         ANL     A,?V0 + 5
   \   0002F9   90....       MOV     DPTR,#(page + 2)
   \   0002FC   F0           MOVX    @DPTR,A
   \   0002FD   90....       MOV     DPTR,#(page + 194)
   \   000300   E5..         MOV     A,?V0 + 5
   \   000302   A2E4         MOV     C,0xE0 /* A   */.4
   \   000304   E0           MOVX    A,@DPTR
   \   000305   92E2         MOV     0xE0 /* A   */.2,C
   \   000307   F0           MOVX    @DPTR,A
   \   000308   90....       MOV     DPTR,#(page + 219)
   \   00030B   E5..         MOV     A,?V0 + 5
   \   00030D   A2E5         MOV     C,0xE0 /* A   */.5
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   92E4         MOV     0xE0 /* A   */.4,C
   \   000312   F0           MOVX    @DPTR,A
   \   000313   E5..         MOV     A,?V0 + 5
   \   000315   A2E6         MOV     C,0xE0 /* A   */.6
   \   000317   E0           MOVX    A,@DPTR
   \   000318   92E1         MOV     0xE0 /* A   */.1,C
   \   00031A   F0           MOVX    @DPTR,A
   \   00031B                ; Setup parameters for call to function mymemcpy
   \   00031B   7904         MOV     R1,#0x4
   \   00031D   7C..         MOV     R4,#(utcLast & 0xff)
   \   00031F   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000321   7A..         MOV     R2,#((page + 148) & 0xff)
   \   000323   7B..         MOV     R3,#(((page + 148) >> 8) & 0xff)
   \   000325   12....       LCALL   mymemcpy
   \   000328                ; Setup parameters for call to function savePB
   \   000328   12....       LCALL   savePB
   \   00032B   AE..         MOV     R6,?V0 + 0
   \   00032D   AF..         MOV     R7,?V0 + 1
   \   00032F                ; Setup parameters for call to function setup_hopper
   \   00032F   90....       MOV     DPTR,#(page + 164)
   \   000332   E0           MOVX    A,@DPTR
   \   000333   F9           MOV     R1,A
   \   000334   12....       LCALL   setup_hopper
   \   000337                ; Setup parameters for call to function setupRadio
   \   000337   12....       LCALL   ??Subroutine52_0
   \                     ??CrossCallReturnLabel_143:
   \   00033A   02....       LJMP    ??parseCommands_0
   \   00033D                REQUIRE CLKCON
   2750                          break;
   2751                      }
   2752                      //if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
   2753                  }
   2754              }
   2755          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_300:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#??cmdCnt
   \   000003   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_287:
   \   000006   7583..       MOV     DPH,#((cmdCount >> 8) & 0xff)
   \   000009   7582..       MOV     DPL,#(cmdCount & 0xff)
   \   00000C   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_280:
   \   00000F   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??cmdCnt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3f800000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3f800000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_447a0000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_447a0000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_42c80000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_42c80000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_c1c80000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_c1c80000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _slot>`:
   \   000000   5000         DW 80

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _join_slot>`:
   \   000000   3000         DW 48

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _gw_delay>`:
   \   000000   3C00         DW 60

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _loop_delay>`:
   \   000000   5000         DW 80

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _datarate>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for search_stat>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for lastCycle>`:
   \   000000   9006         DW 1680

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cyclesTo500>`:
   \   000000   7800         DW 120

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cyclesTo10>`:
   \   000000   DC00         DW 220

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cyclesToStep500Channel>`:
   \   000000   1400         DW 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cycles2Step10Channel>`:
   \   000000   1E00         DW 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cycles2SoftKick>`:
   \   000000   0800         DW 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cycles2HardKick>`:
   \   000000   5000         DW 80

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for calibrationRepeat>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for oscWhatToWaitFor>`:
   \   000000   17           DB 23

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ocShortCircuitLimit>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ModuleOffRememberedPtr>`:
   \   000000   FDFF         DW 0FFFDH

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ModuleStatusOff>`:
   \   000000   E7           DB 231

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ModuleStatusOffFetFailure>`:
   \   000000   7E           DB 126

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for alignMPP>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gnd_shift>`:
   \   000000   A8FD         DW -600

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for checkForFETFailure>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for netValue>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for si>`:
   \   000000   00F5         DW 0F500H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for adcChannels>`:
   \   000000   B1B2B3BC     DB 177, 178, 179, 188, 183, 176, 181, 180, 182
   \            B7B0B5B4
   \            B6      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for indices>`:
   \   000000   000102FF     DB 0, 1, 2, 255, 255, 3, 255, 6, 5
   \            FF03FF06
   \            05      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for theKey>`:
   \   000000   414E4453     DB 65, 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7
   \            006C6172
   \            41756775
   \            73740007
   \   000010   41756775     DB 65, 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7
   \            73740007
   \            41756775
   \            73740007

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for defFreq>`:
   \   000000   AA6A6400     DD 6580906

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for the_frequency>`:
   \   000000   646AAA       DB 100, 106, 170

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sleepCounter>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for wasAHardResetOrPowerOn>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for xored>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for theShift>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cnt>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3f800000>`:
   \   000000   0000803F     DD 3F800000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_447a0000>`:
   \   000000   00007A44     DD 447A0000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_42c80000>`:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_c1c80000>`:
   \   000000   0000C8C1     DD 0C1C80000H
   2756          inline void rc(void){
   2757          //    CLKCON |= OSC_BIT;                    // starting the RC Oscillator
   2758          //    asm( "NOP" );
   2759          //    SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
   2760          }
   2761          /*==== END OF FILE ==========================================================*/

   Maximum stack usage in bytes:

     Function                ISTACK PSTACK XSTACK
     --------                ------ ------ ------
     abs                         0      0     15
     armAdcs                     2      0      0
     checkItOut                  3      0      0
     checkMore                   0      0      9
     checkVin                    2      0     54
       -> kickOsc                0      0     46
       -> lin_coeff              0      0     46
       -> convU                  0      0     46
       -> switchTo255            0      0     46
       -> read_page              0      0     46
       -> softKick               0      0     46
       -> lin_coeff_t            0      0     46
       -> ov_startup             0      0     46
       -> oc2timer               0      0     46
       -> oc2timer               0      0     46
       -> oc2timer               0      0     46
       -> lin_coeff              0      0     46
       -> convU                  0      0     46
       -> oc2timer               0      0     46
       -> oc2timer               0      0     46
     computeADCs                 1      0     42
       -> substractGround        0      0     62
       -> lin                    0      0     62
       -> cube_coeff             0      0     62
       -> addDF                  0      0     62
       -> computeAdjustment      0      0     62
       -> computeAdjustment      0      0     62
       -> computeAdjustment      0      0     62
       -> lin_coeff              0      0     62
       -> convU                  0      0     62
       -> convU                  0      0     62
       -> convU                  0      0     62
       -> convS                  0      0     62
       -> convS                  0      0     62
       -> convS                  0      0     62
       -> checkVin               0      0     62
     computeAdjustment           0      0     46
     computeTI                   3      0      0
     copyMac                     0      0      8
       -> mymemcpy               0      0      0
     cube_coeff                  0      0     46
     dec                         2      0     11
     def_freq                    0      0     15
       -> mymemcpy               0      0      0
     init                        0      0     15
       -> zerofill               0      0     30
       -> setup_hopper           0      0     30
       -> dmaRadioSetup          0      0     30
       -> def_freq               0      0     30
       -> setupRadio             0      0     30
     kickOsc                     2      0     23
     lin                         0      0     46
       -> lin_coeff_t            0      0     30
     lin_coeff                   0      0     46
     lin_coeff_t                 0      0     38
     longTickWait                1      0      0
       -> tickWait               2      0      0
     main                        2      0      0
       -> reset                  0      0      0
       -> checkMore              0      0      0
       -> zerofill               0      0      0
       -> read_page              0      0      0
       -> mymemcpy               0      0      0
       -> oc2timer               0      0      0
       -> zerofill               0      0      0
       -> init                   0      0      0
       -> load                   0      0      0
       -> wait_aes               0      0      0
       -> longTickWait           0      0      0
       -> mymemcmp               0      0      0
       -> reset                  0      0      0
       -> quartz                 0      0      0
       -> softKick               0      0      0
       -> reset                  0      0      0
       -> reset                  0      0      0
       -> main_loop              0      0      0
       -> reset                  0      0      0
     main_loop                   2      0     11
       -> setupRepeater          0      0     22
       -> receive                0      0     22
       -> setupRepeater          0      0     22
       -> receive                0      0     22
       -> prepareJoinRequest     0      0     22
       -> parseGWPackage         0      0     22
       -> computeADCs            0      0     22
       -> dec                    0      0     22
       -> softKick               0      0     22
       -> switchTo255            0      0     22
       -> dec                    0      0     22
       -> setupRadio             0      0     22
       -> dec                    0      0     22
       -> setupRadio             0      0     22
       -> dec                    0      0     22
       -> setupRadio             0      0     22
       -> dec                    0      0     22
       -> hop                    0      0     22
       -> sendData               0      0     22
       -> ov_startup             0      0     22
       -> kickOsc                0      0     22
       -> hop                    0      0     22
       -> setupRepeater          0      0     22
       -> receive                0      0     22
       -> oc2timer               0      0     22
       -> prepareData            0      0     22
     mult                        0      0     17
     multSaver                   0      0     15
     nextSlot                    0      0      9
     oc2timer                    0      0     42
     ov_startup                  2      0     23
     parseCommands               2      0     30
       -> mymemcmp               0      0     26
       -> mymemcmp               0      0     26
       -> mymemcpy               0      0     26
       -> setFloat               0      0     26
       -> setByte                0      0     26
       -> setInt                 0      0     26
       -> tickWait               0      0     26
       -> reset                  0      0     26
       -> load                   0      0     26
       -> wait_aes               0      0     26
       -> load                   0      0     26
       -> wait_aes               0      0     26
       -> code                   0      0     30
       -> load                   0      0     26
       -> wait_aes               0      0     26
       -> mymemcpy               0      0     26
       -> savePB                 0      0     26
       -> setup_hopper           0      0     26
       -> setupRadio             0      0     26
     parseGWPackage              2      0     28
       -> setupRepeater          0      0     30
       -> setupRepeater          0      0     30
       -> receive                0      0     30
       -> sendData               0      0     30
       -> sendData               0      0     30
       -> load                   0      0     30
       -> wait_aes               0      0     30
       -> code                   0      0     34
       -> mymemcpy               0      0     30
       -> mymemcmp               0      0     30
       -> mymemcmp               0      0     30
       -> abs                    0      0     30
       -> addDF                  0      0     30
       -> mymemcpy               0      0     30
       -> mymemcpy               0      0     30
       -> mymemcpy               0      0     30
       -> tickWait               0      0     30
       -> parseCommands          0      0     30
       -> setupRepeater          0      0     30
     prepareCoeff                0      0     27
       -> convU                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> prepareSpecial         0      0     38
     prepareData                 1      0     19
       -> prepareCoeff           0      0     16
       -> prepareScaling         0      0     16
       -> computeADCs            0      0     16
       -> mymemcpy               0      0     16
       -> copyMac                0      0     16
       -> mymemcpy               0      0     16
       -> prepareTxBuffer        0      0     16
     prepareJoinRequest          2      0     11
       -> mymemcpy               4      0      0
       -> copyMac                4      0      0
       -> prepareTxBuffer        4      0      0
     prepareScaling              0      0     16
       -> prepareSpecial         0      0     16
     prepareSpecial              0      0     27
       -> mymemcpy               0      0     16
       -> copyMac                0      0     16
       -> mymemcpy               0      0     16
     prepareTxBuffer             0      0     19
       -> load                   0      0     18
       -> wait_aes               0      0     18
       -> code                   0      0     22
     processCheck                0      0     15
       -> lin_coeff              0      0     30
     quartz                      0      0      8
       -> halWait                0      0     16
     readNextValue               2      0     11
       -> zerofill               0      0     22
     read_page                   2      0     23
       -> mymemcpy               4      0      0
       -> mymemcpy               4      0      0
       -> switchTo255            4      0      0
     receive                     3      0     15
     restoreRadio                2      0      0
     savePB                      2      0     13
       -> reset                  4      0      0
       -> reset                  4      0      0
       -> tickWait               4      0      0
       -> initiateTransfer       4      0      0
       -> tickWait               4      0      0
     sendData                    3      0     15
       -> setupRepeater          4      0      0
     setByte                     2      0     23
       -> ov_startup             0      0     20
       -> ov_startup             0      0     20
       -> ov_startup             0      0     20
       -> oc2timer               0      0     20
       -> setup_hopper           0      0     20
       -> softKick               0      0     20
       -> refreshTheFlash        0      0     20
       -> savePB                 0      0     20
       -> setupRadio             0      0     20
       -> setupRadio             0      0     20
       -> setupRadio             0      0     20
       -> savePB                 0      0     20
       -> mymemcpy               0      0     20
       -> mymemcpy               0      0     20
       -> zerofill               0      0     20
       -> load                   0      0     20
       -> wait_aes               0      0     20
       -> mymemcpy               0      0     20
       -> oc2timer               0      0     20
       -> oc2timer               0      0     20
       -> mymemcpy               0      0     20
       -> softKick               0      0     20
     setFloat                    0      0     32
       -> zerofill               0      0     38
       -> mymemcpy               0      0     38
       -> oc2timer               0      0     38
     setInt                      1      0     23
       -> tickWait               0      0     20
     setupRadio                  2      0     15
       -> setupRadioDR           4      0      0
     setupRadioDR                1      0      8
       -> tickWait               0      0     16
       -> radioConfigure         0      0     16
       -> radioConfigure         0      0     16
     setupRepeater               2      0     15
       -> setupRadioDR           4      0      0
       -> setupRadio             4      0      0
     softKick                    3      0     23
       -> zerofill               4      0      0
       -> def_freq               4      0      0
       -> load                   4      0      0
       -> wait_aes               4      0      0
       -> setupRadio             4      0      0
       -> zerofill               4      0      0
       -> computeADCs            4      0      0
     switchTo255                 2      0     23
       -> mymemcpy               4      0      0
       -> mymemcpy               4      0      0
       -> softKick               4      0      0
     tickWait                    0      0     24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     P0INP                             1
     _A_P1                             1
     RFIM                              1
     IEN2                              1
     S1CON                             1
     _A_IEN0                           1
     FWT                               1
     FADDRH                            1
     FCTL                              1
     ADCCON1                           1
     ADCCON3                           1
     _A_IEN1                           1
     ADCL                              1
     ADCH                              1
     RNDL                              1
     RNDH                              1
     SLEEP                             1
     CLKCON                            1
     WDCTL                             1
     T3CTL                             1
     T3CCTL0                           1
     T3CC0                             1
     T3CCTL1                           1
     T3CC1                             1
     DMAARM                            1
     T1CC0L                            1
     T1CC0H                            1
     RFST                              1
     T1CNTL                            1
     T1CNTH                            1
     T1CTL                             1
     T1CCTL0                           1
     RFIF                              1
     PERCFG                            1
     ADCCFG                            1
     P0SEL                             1
     P1SEL                             1
     P2SEL                             1
     P0DIR                             1
     P1DIR                             1
     _slot                             2
     _join_slot                        2
     _gw_delay                         2
     _loop_delay                       2
     _datarate                         1
     page                            242
     base_ptr                          2
     search_stat                       1
     invVref0                          4
     theRealOffset                     1
     adcBuf                          144
     adcs                             36
     adcs16                           18
     adcsTemp                         18
     tempAdcsCount                     1
     ticks2ProcessCmd                  2
     cmdCount                          2
     lastCycle                         2
     cyclesTo500                       2
     cyclesTo10                        2
     cyclesToStep500Channel            2
     cycles2Step10Channel              2
     cycles2SoftKick                   2
     cycles2HardKick                   2
     cyclesFromStart                   2
     temperatureProtectionDelay        2
     decodeDelay                       2
     curChannel                        1
     curBunch                          1
     bufferCount                       1
     adcCount                          1
     reportScaling                     1
     joinRequestWasSend                1
     resetReason                       1
     theOC                             1
     setOC                             1
     reportFlashCheck                  1
     calibrationRepeat                 1
     cyclesToHop                       1
     bunchCount                        1
     got_gw                            1
     isOnTestStand                     1
     oscWhatToWaitFor                  1
     ocShortCircuitLimit               1
     ModuleOffRememberedPtr            2
     ModuleStatusOff                   1
     ModuleStatusOffFetFailure         1
     ModuleStatusCanTurnOn             1
     enable2SendData                   1
     txDisabled                        1
     alignMPP                          1
     from_flash                        1
     turnOnFlag                        1
     isCalibrationPackage              1
     was_listening                     1
     rcgen                             1
     ch255                             1
     packagePrepared                   1
     gnd_shift                         2
     utc                               4
     ms                                2
     utcLast                           4
     msLast                            2
     processingTime                    2
     pt                                2
     mdmcfg4_cycles                    2
     fetFailure                        1
     checkForFETFailure                1
     netValue                          2
     default_pb                      242
     si                                2
     flags                             2
     ticks                             2
     adcChannels                       9
     indices                           9
     lastOff                           2
     lastRssi                          2
     theKey                           32
     nextKey                          16
     nextIV                           16
     k_oc2timer                        4
     oc2timer                        136
     ?Subroutine109                    5
     abs                              26
     ?Subroutine63                     5
     ?Subroutine100                    4
     ?Subroutine114                    6
     defFreq                           4
     the_frequency                     3
     def_freq                         14
     setupRadioDR                    108
     ?Subroutine22                    16
     ?Subroutine119                    5
     ?Subroutine87                     4
     ?Subroutine106                   11
     ?Subroutine79                     9
     setupRadio                       26
     ?Subroutine113                    6
     setupRepeater                    44
     ?Subroutine52                     9
     softKick                         90
     ?Subroutine80                    13
     ?Subroutine4                     18
     ?Subroutine116                    5
     ?Subroutine89                     7
     ?Subroutine104                    9
     ?Subroutine108                    9
     ?Subroutine117                    5
     ?Subroutine0                      8
     restoreRadio                     10
     init                            148
     ?Subroutine120                   20
     ov_startup                       54
     ?Subroutine5                     17
     _coeff                            2
     invRef                            4
     mult                             30
     ?Subroutine81                    10
     ?Subroutine24                     8
     lin_coeff                        49
     ?Subroutine45                     7
     ?Subroutine90                     6
     ?Subroutine46                     8
     ?Subroutine98                     4
     ?Subroutine107                    4
     lin_coeff_t                      42
     lin                              82
     cube_coeff                       80
     ?Subroutine124                   10
     checkVref                         4
     processCheck                     44
     last                             18
     checkVoutOnT                      2
     checkPD                           2
     isSteppedDown                     1
     read_page                        83
     ?Subroutine82                     9
     switchTo255                      84
     ?Subroutine77                     6
     ?Subroutine68                    16
     dVOut                             2
     vOutMin                           2
     vOutMax                           2
     kickOsc                          26
     ?Subroutine110                   10
     ?Subroutine118                    5
     ?Subroutine1                     14
     ?Subroutine93                     8
     iOutIin1Diff                      2
     iOutIin2Diff                      2
     checkVin                        905
     ?Subroutine72                     8
     ?Subroutine65                     7
     ?Subroutine56                     8
     ?Subroutine44                    11
     ?Subroutine33                     9
     ?Subroutine103                    8
     ?Subroutine3                     16
     ?Subroutine48                     4
     ?Subroutine99                     9
     ?Subroutine38                     4
     ?Subroutine7                      3
     ?Subroutine57                     9
     ?Subroutine115                    5
     ?Subroutine6                     12
     ?Subroutine2                     14
     ?Subroutine60                     7
     ?Subroutine97                     4
     ?Subroutine105                    6
     ?Subroutine43                    10
     ?Subroutine71                     6
     ?Subroutine94                     7
     ?Subroutine86                    11
     ?Subroutine92                     7
     oscCondition                      1
     currentFETTickCount               2
     checkItOut                       22
     ptr2RunningTick                   2
     computeTI                        42
     tickWait                         69
     ?Subroutine121                    6
     ?Subroutine112                    6
     ?Subroutine67                     8
     checkMore                        75
     ?Subroutine84                    12
     ?Subroutine83                    19
     dec                              28
     sleepCounter                      1
     saved_channel                     1
     wasAHardResetOrPowerOn            1
     milliSeconds                      2
     seconds                           1
     minutes                           1
     was_repeater                      1
     main_loop                      1411
     ?Subroutine122                    5
     ?Subroutine64                    18
     ?Subroutine42                    10
     ?Subroutine41                    17
     ?Subroutine39                    12
     ?Subroutine25                    18
     ?Subroutine19                    12
     ?Subroutine14                    13
     ?Subroutine11                    19
     ?Subroutine49                     9
     ?Subroutine34                    13
     ?Subroutine29                     6
     ?Subroutine16                     4
     ?Subroutine73                     1
     ?Subroutine58                     4
     ?Subroutine96                    10
     ?Subroutine53                     7
     ?Subroutine51                    12
     ?Subroutine50                     8
     ?Subroutine40                    10
     ?Subroutine35                     4
     ?Subroutine91                     9
     ?Subroutine30                    11
     ?Subroutine15                     9
     ?Subroutine13                    24
     ?Subroutine23                     6
     ?Subroutine31                     4
     ?Subroutine36                    13
     ?Subroutine28                     6
     ?Subroutine20                     9
     ?Subroutine9                     14
     ?Subroutine88                     5
     ?Subroutine8                     19
     xored                             1
     longTickWait                     20
     main                            792
     ?Subroutine37                     3
     ?Subroutine27                     6
     ?Subroutine66                     3
     ?Subroutine111                    7
     ?Subroutine75                    12
     ?Subroutine70                     9
     ?Subroutine26                    13
     ?Subroutine54                    14
     armAdcs                          49
     ?Subroutine32                    11
     readNextValue                   436
     theShift                          2
     rawVout                           2
     prepareTxBuffer                  63
     copyMac                          10
     ndev                              1
     prevRssi                          2
     coefficients_buffer              24
     prepareData                     353
     ?Subroutine61                     9
     ?Subroutine78                    12
     prepareSpecial                   60
     prepareCoeff                    252
     prepareScaling                   69
     prepareJoinRequest               53
     quartz                           52
     q                                 1
     sendData                         82
     utcLocal                          4
     msLocal                           2
     parseGWPackage                 1779
     ?Subroutine62                     7
     ?Subroutine59                     4
     ?Subroutine95                     7
     ?Subroutine55                    11
     ?Subroutine12                    22
     ?Subroutine10                    18
     ?Subroutine74                     4
     bunch                             1
     plen                              1
     cnt                               1
     nextSlot                         61
     ?Subroutine85                     9
     receive                          60
     vref                              4
     t                                 4
     computeAdjustment                47
     multSaver                        53
     computeADCs                    1374
     ?Subroutine18                    22
     ?Subroutine17                    22
     ?Subroutine101                    6
     acc                               4
     df                                4
     mV                                4
     rOff                              4
     temp                             36
     setByte                        1114
     ?Subroutine123                    5
     savePB                          154
     ?Subroutine47                    14
     setInt                          336
     setFloat                        270
     parseCommands                   829
     ?Subroutine76                     9
     ?Subroutine21                    16
     cmdCnt                            2
     __Constant_3f800000               4
     __Constant_447a0000               4
     __Constant_0                      4
     __Constant_42c80000               4
     __Constant_c1c80000               4
     ?<Initializer for _slot>          2
     ?<Initializer for _join_slot>     2
     ?<Initializer for _gw_delay>      2
     ?<Initializer for _loop_delay>    2
     ?<Initializer for _datarate>      1
     ?<Initializer for search_stat>    1
     ?<Initializer for lastCycle>      2
     ?<Initializer for cyclesTo500>    2
     ?<Initializer for cyclesTo10>     2
     ?<Initializer for cyclesToStep500Channel>
                                       2
     ?<Initializer for cycles2Step10Channel>
                                       2
     ?<Initializer for cycles2SoftKick>
                                       2
     ?<Initializer for cycles2HardKick>
                                       2
     ?<Initializer for calibrationRepeat>
                                       1
     ?<Initializer for oscWhatToWaitFor>
                                       1
     ?<Initializer for ocShortCircuitLimit>
                                       1
     ?<Initializer for ModuleOffRememberedPtr>
                                       2
     ?<Initializer for ModuleStatusOff>
                                       1
     ?<Initializer for ModuleStatusOffFetFailure>
                                       1
     ?<Initializer for alignMPP>       1
     ?<Initializer for gnd_shift>      2
     ?<Initializer for checkForFETFailure>
                                       1
     ?<Initializer for netValue>       2
     ?<Initializer for si>             2
     ?<Initializer for adcChannels>    9
     ?<Initializer for indices>        9
     ?<Initializer for theKey>        32
     ?<Initializer for defFreq>        4
     ?<Initializer for the_frequency>
                                       3
     ?<Initializer for sleepCounter>
                                       1
     ?<Initializer for wasAHardResetOrPowerOn>
                                       1
     ?<Initializer for xored>          1
     ?<Initializer for theShift>       2
     ?<Initializer for cnt>            1
     ?<Initializer for __Constant_3f800000>
                                       4
     ?<Initializer for __Constant_447a0000>
                                       4
     ?<Initializer for __Constant_0>
                                       4
     ?<Initializer for __Constant_42c80000>
                                       4
     ?<Initializer for __Constant_c1c80000>
                                       4

 
 13 264 bytes in segment NEAR_CODE
     40 bytes in segment SFR_AN
    122 bytes in segment XDATA_I
    122 bytes in segment XDATA_ID
    242 bytes in segment XDATA_ROM_C
    717 bytes in segment XDATA_Z
 
 13 366 bytes of CODE  memory (+ 20 bytes shared)
    242 bytes of CONST memory
      0 bytes of DATA  memory (+ 40 bytes shared)
    819 bytes of XDATA memory (+ 20 bytes shared)

Errors: none
Warnings: 2
