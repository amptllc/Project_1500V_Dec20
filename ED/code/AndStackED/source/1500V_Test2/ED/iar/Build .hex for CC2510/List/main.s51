///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   06/Apr/2017  13:54:51 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\1500V_Test2\ED\code\AndStackED\source\main.c   /
//    Command line       =  E:\1500V_Test2\ED\code\AndStackED\source\main.c   /
//                          -D NDEBUG -D chip=2510 -D LOWER_IMAGE -lA         /
//                          "E:\1500V_Test2\ED\iar\Build .hex for             /
//                          CC2510\List\" -o "E:\1500V_Test2\ED\iar\Build     /
//                          .hex for CC2510\Obj\" -e -z9 --core=plain         /
//                          --dptr=16,1 --data_model=large --code_model=near  /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\ /
//                           -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INC /
//                          LUDE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HA /
//                          L_BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\ /
//    List file          =  E:\1500V_Test2\ED\iar\Build .hex for              /
//                          CC2510\List\main.s51                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?FLT_TO_L
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SC_DIV_MOD
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_GT_X
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK CLKCON
        PUBWEAK DMAARM
        PUBWEAK FADDRH
        PUBWEAK FCTL
        PUBWEAK FWT
        PUBWEAK IEN2
        PUBLIC ModuleOffRememberedPtr
        PUBLIC ModuleStatusCanTurnOn
        PUBLIC ModuleStatusOff
        PUBLIC ModuleStatusOffFetFailure
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK P2SEL
        PUBWEAK PERCFG
        PUBWEAK RFIF
        PUBWEAK RFIM
        PUBWEAK RFST
        PUBWEAK RNDH
        PUBWEAK RNDL
        PUBWEAK S1CON
        PUBWEAK SLEEP
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CCTL0
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBWEAK T1CTL
        PUBWEAK T3CC0
        PUBWEAK T3CC1
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CTL
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_38d1b717
        PUBWEAK __Constant_3f800000
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_c1c80000
        PUBLIC _coeff
        PUBLIC _datarate
        PUBLIC _gw_delay
        PUBLIC _join_slot
        PUBLIC _loop_delay
        PUBLIC _slot
        PUBLIC abs
        FUNCTION abs,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC adcBuf
        PUBLIC adcChannels
        PUBLIC adcCount
        PUBLIC adcs
        PUBLIC adcs16
        PUBLIC adcsTemp
        PUBLIC alignMPP
        PUBLIC armAdcs
        FUNCTION armAdcs,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC base_ptr
        PUBLIC bufferCount
        PUBLIC bunchCount
        PUBLIC calibrationRepeat
        PUBLIC ch255
        PUBLIC checkForFETFailure
        PUBLIC checkItOut
        FUNCTION checkItOut,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC checkMore
        FUNCTION checkMore,0201H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC checkPD
        PUBLIC checkVin
        FUNCTION checkVin,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC checkVoutOnT
        PUBLIC checkVref
        PUBLIC cmdCount
        PUBLIC coefficients_buffer
        PUBLIC computeADCs
        FUNCTION computeADCs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC computeAdjustment
        FUNCTION computeAdjustment,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC computeTI
        FUNCTION computeTI,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC copyMac
        FUNCTION copyMac,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC cube_coeff
        FUNCTION cube_coeff,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC curBunch
        PUBLIC curChannel
        PUBLIC cycles2HardKick
        PUBLIC cycles2SoftKick
        PUBLIC cycles2Step10Channel
        PUBLIC cyclesFromStart
        PUBLIC cyclesTo10
        PUBLIC cyclesTo500
        PUBLIC cyclesToHop
        PUBLIC cyclesToStep500Channel
        PUBLIC `dec`
        FUNCTION `dec`,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC decodeDelay
        PUBLIC defFreq
        PUBLIC def_freq
        FUNCTION def_freq,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC enable2SendData
        PUBLIC from_flash
        PUBLIC gnd_shift
        PUBLIC got_gw
        PUBLIC indices
        PUBLIC init
        FUNCTION init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC invRef
        PUBLIC invVref0
        PUBLIC isCalibrationPackage
        PUBLIC isOnTestStand
        PUBLIC isSteppedDown
        PUBLIC joinRequestWasSend
        PUBLIC kickOsc
        FUNCTION kickOsc,0201H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC last
        PUBLIC lastCycle
        PUBLIC lastOff
        PUBLIC lastRssi
        PUBLIC lin
        FUNCTION lin,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC lin_coeff
        FUNCTION lin_coeff,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC lin_coeff_t
        FUNCTION lin_coeff_t,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC longTickWait
        FUNCTION longTickWait,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        PUBLIC main
        FUNCTION main,0a1a03H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC main_loop
        FUNCTION main_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC mdmcfg4_cycles
        PUBLIC milliSeconds
        PUBLIC minutes
        PUBLIC ms
        PUBLIC msLast
        PUBLIC mult
        FUNCTION mult,0203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC multSaver
        FUNCTION multSaver,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC ndev
        PUBLIC nextIV
        PUBLIC nextKey
        PUBLIC nextSlot
        FUNCTION nextSlot,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC oc2timer
        FUNCTION oc2timer,0203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ocShortCircuitLimit
        PUBLIC oscWhatToWaitFor
        PUBLIC ov_startup
        FUNCTION ov_startup,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC packagePrepared
        PUBLIC page
        PUBLIC parseCommands
        FUNCTION parseCommands,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC parseGWPackage
        FUNCTION parseGWPackage,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC prepareCoeff
        FUNCTION prepareCoeff,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC prepareData
        FUNCTION prepareData,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareJoinRequest
        FUNCTION prepareJoinRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC prepareScaling
        FUNCTION prepareScaling,021603H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareSpecial
        FUNCTION prepareSpecial,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareTxBuffer
        FUNCTION prepareTxBuffer,021201H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC prevRssi
        PUBLIC processCheck
        FUNCTION processCheck,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC processingTime
        PUBLIC pt
        PUBLIC ptr2RunningTick
        PUBLIC quartz
        FUNCTION quartz,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC rcgen
        PUBLIC readNextValue
        FUNCTION readNextValue,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC read_page
        FUNCTION read_page,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC receive
        FUNCTION receive,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC reportFlashCheck
        PUBLIC reportScaling
        PUBLIC resetReason
        PUBLIC restoreRadio
        FUNCTION restoreRadio,0201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC savePB
        FUNCTION savePB,0a1201H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC saved_channel
        PUBLIC search_stat
        PUBLIC seconds
        PUBLIC sendData
        FUNCTION sendData,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC setByte
        FUNCTION setByte,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC setFloat
        FUNCTION setFloat,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC setInt
        FUNCTION setInt,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC setOC
        PUBLIC setupRadio
        FUNCTION setupRadio,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC setupRadioDR
        FUNCTION setupRadioDR,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC setupRepeater
        FUNCTION setupRepeater,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC si
        PUBLIC sleepCounter
        PUBLIC softKick
        FUNCTION softKick,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC switchTo255
        FUNCTION switchTo255,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC t
        PUBLIC tempAdcsCount
        PUBLIC temperatureProtectionDelay
        PUBLIC theKey
        PUBLIC theOC
        PUBLIC theRealOffset
        PUBLIC the_frequency
        PUBLIC tickWait
        FUNCTION tickWait,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ticks2ProcessCmd
        PUBLIC turnOnFlag
        PUBLIC txDisabled
        PUBLIC utc
        PUBLIC utcLast
        PUBLIC vref
        PUBLIC was_listening
        PUBLIC was_repeater
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN mymemcpy
        FUNCTION mymemcpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN radioConfigure
        FUNCTION radioConfigure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zerofill
        FUNCTION zerofill,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN load
        FUNCTION load,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN wait_aes
        FUNCTION wait_aes,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN setup_hopper
        FUNCTION setup_hopper,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmaRadioSetup
        FUNCTION dmaRadioSetup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN convU
        FUNCTION convU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN hop
        FUNCTION hop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN reset
        FUNCTION reset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mymemcmp
        FUNCTION mymemcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `code`
        FUNCTION `code`,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN convS
        FUNCTION convS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halWait
        FUNCTION halWait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN addDF
        FUNCTION addDF,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN substractGround
        FUNCTION substractGround,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN refreshTheFlash
        FUNCTION refreshTheFlash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initiateTransfer
        FUNCTION initiateTransfer,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN delta
        EXTERN dmaConfig
        EXTERN flashCallback
        FUNCTION flashCallback,0602H
        EXTERN mdm_rate1
        EXTERN perRssiOffset
        EXTERN radioPktBuffer
        EXTERN radioPktBufferRx
        EXTERN radioPktBufferTx

// E:\1500V_Test2\ED\code\AndStackED\source\main.c
//    1 /*==== DECLARATION CONTROL ===================================================*/
//    2 /*==== INCLUDES ==============================================================*/
//    3 
//    4 #include "hal_main.h"

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIM
RFIM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr FWT
FWT:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0adH
// unsigned char volatile __sfr FADDRH
FADDRH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0aeH
// unsigned char volatile __sfr FCTL
FCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bcH
// unsigned char volatile __sfr RNDL
RNDL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bdH
// unsigned char volatile __sfr RNDH
RNDH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEP
SLEEP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCON
CLKCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cdH
// unsigned char volatile __sfr T3CC0
T3CC0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cfH
// unsigned char volatile __sfr T3CC1
T3CC1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e5H
// unsigned char volatile __sfr T1CCTL0
T1CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIF
RFIF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//    5 #include "main.h"
//    6 #include "parameter_block.h"
//    7 #include "commands.h"
//    8 //#include <stdio.h>
//    9 //#include <stdlib.h>
//   10 //#include <string.h>
//   11 
//   12 #define MKS_IN_TICK     500
//   13 #define TICKS_IN_SEC    2000
//   14 #define TICKS_IN_MS     2
//   15 /*
//   16 #define MKS_IN_TICK     200
//   17 #define TICKS_IN_SEC    5000
//   18 #define TICKS_IN_MS     5
//   19 */
//   20 //UINT32  _freq         = FREQUENCY_FCC_CC2511;

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   21 INT16  _slot         = ( 40 * TICKS_IN_MS );
_slot:
        DS 2
        REQUIRE `?<Initializer for _slot>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   22 INT16  _join_slot    = ( 24 * TICKS_IN_MS );
_join_slot:
        DS 2
        REQUIRE `?<Initializer for _join_slot>`
        REQUIRE __INIT_XDATA_I
//   23 //#define  _slot         ( 40 * TICKS_IN_MS )
//   24 //#define  _join_slot    ( 24 * TICKS_IN_MS )

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   25 INT16  _gw_delay     = ( 30 * TICKS_IN_MS );
_gw_delay:
        DS 2
        REQUIRE `?<Initializer for _gw_delay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   26 INT16  _loop_delay   = ( 40 * TICKS_IN_MS );
_loop_delay:
        DS 2
        REQUIRE `?<Initializer for _loop_delay>`
        REQUIRE __INIT_XDATA_I
//   27 //#define  _gw_delay      ( 30 * TICKS_IN_MS )
//   28 //#define  _loop_delay     ( 40 * TICKS_IN_MS )

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   29 BYTE    _datarate     = DATA_RATE_4_CC2511;
_datarate:
        DS 1
        REQUIRE `?<Initializer for _datarate>`
        REQUIRE __INIT_XDATA_I
//   30 
//   31 //#define _mppCycle            ( TICKS_IN_SEC / 16 ) 
//   32 #define _mppCycle            ( 60 * TICKS_IN_MS ) 
//   33 #define _dogFeeding          ( TICKS_IN_SEC / 16 )
//   34 #define _adjustFrequency     ( (UINT16)TICKS_IN_SEC * 2 )
//   35 #define _firstAdcMeasurement ( TICKS_IN_SEC / 50 )
//   36 //#define _adcMeasurement      ( TICKS_IN_SEC / 100 )
//   37 #define _adcMeasurement      ( 4 * TICKS_IN_MS )
//   38 #define _calibrationDelay    ( TICKS_IN_MS  )
//   39 
//   40 //void configureAdcs(void);
//   41 
//   42 //void feedTheDog(void);
//   43 //BYTE clearAndHop( BYTE p );
//   44 void tickWait(BYTE wait);
//   45 void rc(void);
//   46 void prepareData(void);
//   47 void sendData(BYTE *buffer, BOOL is500 );
//   48 void armAdcs(void);
//   49 void readNextValue(void);
//   50 void parseGWPackage(void);
//   51 //void calibrate(void);
//   52 void computeADCs(BOOL timeout, BOOL accumulateEnergy);
//   53 void prepareJoinRequest(void);
//   54 void prepareScaling(void);
//   55 //void prepareFlashCheck(void);
//   56 void setup500( BOOL flag );
//   57 BYTE *nextSlot(void);
//   58 void switchTo255(void);
//   59 
//   60 void parseCommands(BYTE l);
//   61 void setByte( BYTE reg, BYTE val );
//   62 
//   63 extern void flashCallback(void);
//   64 extern void setup_hopper(BYTE curch);
//   65 extern void hop(void);
//   66 
//   67 extern void wait_aes(void);
//   68 extern void load(const unsigned char what, char *ptr);
//   69 extern void code(    unsigned char what, unsigned char size,  char *from, char *to );
//   70 //extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, UINT16 len);
//   71 extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, BYTE len);
//   72 //extern void writeTheLatest(BYTE *ptr, BYTE len);
//   73 extern BOOL readTheLatest( BYTE *ptr, BYTE len);
//   74 
//   75 //#ifdef MidString
//   76 //void compute98(void);
//   77 //#endif
//   78 
//   79 #define loadKey( key )                  { load( 0x04, key );     wait_aes(); }
//   80 #define loadIV(  iv )                   { load( 0x06, iv  );     wait_aes(); }
//   81 #define encode( size,  from, to )       code( 0x00, size, from, to );
//   82 #define decode( size,  from, to )       code( 0x02, size, from, to );
//   83 
//   84 // must be even

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   85 ParameterBlock page;
page:
        DS 242
        REQUIRE __INIT_XDATA_Z
//   86 //float energy       = 0.0;
//   87 //float deltaEnergy  = 0.0;

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   88 BYTE *base_ptr = NULL;
base_ptr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   89 
//   90 //#define PAGESIZE 240
//   91 #define PAGESIZE 242
//   92 #define PAGEADDR 0x5C00
//   93 
//   94 //#define ENERGY_WRITE_LIMIT   ((BYTE *) (PAGEADDR + 0x3F0) )
//   95 #ifdef MidString 
//   96     #define KE (1E-3*20.0*1E-3*0.125 / 3600.0)
//   97 #else
//   98     #define KE (1E-3*2.0*1E-3*0.125  / 3600.0)
//   99 #endif

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  100 BYTE  search_stat = 2;
search_stat:
        DS 1
        REQUIRE `?<Initializer for search_stat>`
        REQUIRE __INIT_XDATA_I
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  102 float invVref0 = 0;
invVref0:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  103 INT8 theRealOffset  = 0;
theRealOffset:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 
//  105 /*==== PUBLIC FUNCTIONS ======================================================*/
//  106 #define BUFFER_SIZE 8
//  107 #define BUFFER_MASK 0x7    
//  108 #define N_CHANNELS  9
//  109 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  110 UINT16 adcBuf  [ N_CHANNELS ][ BUFFER_SIZE    ];
adcBuf:
        DS 144
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  111 INT32  adcs[     N_CHANNELS ];
adcs:
        DS 36
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  112 UINT16 adcs16[   N_CHANNELS ];
adcs16:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  114 UINT16 adcsTemp[ N_CHANNELS ];
adcsTemp:
        DS 18
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  115 BYTE tempAdcsCount = 0;
tempAdcsCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  116 
//  117 extern BYTE mdm_rate1[6];
//  118 
//  119 UINT16            

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  120        ticks2ProcessCmd = 0,       
ticks2ProcessCmd:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  121        cmdCount = 0,
cmdCount:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  122        lastCycle   = (40 * TICKS_IN_MS * 21),
lastCycle:
        DS 2
        REQUIRE `?<Initializer for lastCycle>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  123        cyclesTo500 = 120, cyclesTo10 = 220, cyclesToStep500Channel = 20, cycles2Step10Channel = 30,
cyclesTo500:
        DS 2
        REQUIRE `?<Initializer for cyclesTo500>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cyclesTo10:
        DS 2
        REQUIRE `?<Initializer for cyclesTo10>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cyclesToStep500Channel:
        DS 2
        REQUIRE `?<Initializer for cyclesToStep500Channel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2Step10Channel:
        DS 2
        REQUIRE `?<Initializer for cycles2Step10Channel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  124        cycles2SoftKick = 8, cycles2HardKick = 80, cyclesFromStart = 0;
cycles2SoftKick:
        DS 2
        REQUIRE `?<Initializer for cycles2SoftKick>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2HardKick:
        DS 2
        REQUIRE `?<Initializer for cycles2HardKick>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
cyclesFromStart:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  125 UINT16 temperatureProtectionDelay, decodeDelay;
temperatureProtectionDelay:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
decodeDelay:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  126 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  127 BYTE   curChannel = 0,  curBunch = 0,  /*maxBunch = 0,*/        
curChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
curBunch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  128        bufferCount = 0, adcCount = 0,  reportScaling = 0,       joinRequestWasSend = 0,
bufferCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
adcCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
reportScaling:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
joinRequestWasSend:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  129        resetReason,     theOC,         setOC,
resetReason:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
theOC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
setOC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  130        reportFlashCheck = 0,           calibrationRepeat = 4,   cyclesToHop = 0, 
reportFlashCheck:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
calibrationRepeat:
        DS 1
        REQUIRE `?<Initializer for calibrationRepeat>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
cyclesToHop:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  131        bunchCount = 0,                 got_gw = 0,              isOnTestStand = 0,
bunchCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
got_gw:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
isOnTestStand:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  132        oscWhatToWaitFor = SetOscLowCurrentOnlyDelay,
oscWhatToWaitFor:
        DS 1
        REQUIRE `?<Initializer for oscWhatToWaitFor>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  133        ocShortCircuitLimit = 255; //, page2clear = 255;
ocShortCircuitLimit:
        DS 1
        REQUIRE `?<Initializer for ocShortCircuitLimit>`
        REQUIRE __INIT_XDATA_I
//  134 
//  135 // Pointer to memory location tracking whether module can turn on,                                              
//  136 // and the three acceptable values. Module turning off because of                                               
//  137 // temperature is not tracked.  Pointer to memory location is                                                   
//  138 // constant.                                                                                                    

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  139 BYTE * const ModuleOffRememberedPtr = ((BYTE *) 0xFFFD);
ModuleOffRememberedPtr:
        DS 2
        REQUIRE `?<Initializer for ModuleOffRememberedPtr>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  140 BYTE ModuleStatusOff = 0xE7;
ModuleStatusOff:
        DS 1
        REQUIRE `?<Initializer for ModuleStatusOff>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  141 BYTE ModuleStatusOffFetFailure = 0x7E;
ModuleStatusOffFetFailure:
        DS 1
        REQUIRE `?<Initializer for ModuleStatusOffFetFailure>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  142 BYTE ModuleStatusCanTurnOn = 0x00;
ModuleStatusCanTurnOn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  144 BOOL   enable2SendData  = FALSE,       txDisabled = FALSE,                    alignMPP = TRUE,     //cleanTxBuffer   = FALSE,
enable2SendData:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
txDisabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
alignMPP:
        DS 1
        REQUIRE `?<Initializer for alignMPP>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  145        from_flash = FALSE,             /*zeroPackageWasNotReceived = FALSE,*/ turnOnFlag = FALSE,  isCalibrationPackage = FALSE,
from_flash:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
turnOnFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
isCalibrationPackage:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  146        was_listening = FALSE, rcgen = FALSE,
was_listening:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
rcgen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  147        ch255 = FALSE,                  packagePrepared = FALSE;//,                  real_cw_mode = FALSE;
ch255:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
packagePrepared:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  148 INT16 gnd_shift = -600;
gnd_shift:
        DS 2
        REQUIRE `?<Initializer for gnd_shift>`
        REQUIRE __INIT_XDATA_I
//  149 
//  150 //UINT16 Vout98 = 0; 
//  151 //INT16  Cur98  = 0;
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  153 UINT32 utc = 0;
utc:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  154 UINT16 ms  = 0;
ms:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  155 //UINT16 ticks2Prepare = 0;
//  156 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  157 UINT32 utcLast = 0;
utcLast:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  158 UINT16 msLast = 0,  processingTime, pt;
msLast:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
processingTime:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
pt:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  159 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  160 UINT16 mdmcfg4_cycles = 0;
mdmcfg4_cycles:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  161 
//  162 // variables to control turning module on/ "track" FET failures                                             

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  163 static BOOL fetFailure = FALSE; // static variable indicating if a FET failure recognized
fetFailure:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  164 BOOL checkForFETFailure = TRUE; // once FET failure recognized, no longer check unless restart
checkForFETFailure:
        DS 1
        REQUIRE `?<Initializer for checkForFETFailure>`
        REQUIRE __INIT_XDATA_I
//  165 // netValue made global so fetFailure condition can access/change reported "status"

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  166 static UINT16 netValue = MainNetValueStandard;
netValue:
        DS 2
        REQUIRE `?<Initializer for netValue>`
        REQUIRE __INIT_XDATA_I
//  167 
//  168 static __xdata_rom const UINT16 cyclesDefaults[] = {180, 30, 3, 4, 8, 80};

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  169 static __xdata_rom const BYTE default_pb[] = {
default_pb:
        DB 170, 170, 0, 0, 255, 255, 44, 118, 64, 2, 39, 68, 113, 170, 53, 186
        DB 211, 188, 99, 61, 145, 237, 28, 63, 0, 0, 117, 195, 0, 0, 28, 69
        DB 149, 191, 214, 52, 0, 0, 146, 66, 184, 30, 221, 65, 0, 192, 90, 197
        DB 225, 122, 200, 65, 0, 0, 0, 0, 0, 0, 248, 64, 0, 128, 14, 196, 143
        DB 194, 199, 65, 0, 0, 107, 195, 82, 184, 222, 62, 0, 64, 28, 68, 205
        DB 204, 252, 64, 0, 0, 5, 196, 195, 245, 248, 64, 0, 128, 18, 196, 65
        DB 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7, 65
        DB 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7, 32
        DB 78, 188, 2, 80, 0, 0, 0, 48, 117, 240, 0, 176, 4, 248, 127, 0, 0, 0
        DB 0, 255, 255, 255, 255, 255, 255, 240, 240, 0, 0, 0, 170, 255, 120
        DB 128, 77, 255, 203, 72, 102, 84, 203, 72, 102, 84, 203, 72, 102, 84
        DB 172, 197, 167, 55, 23, 183, 81, 56, 1, 1, 100, 100, 255, 2, 1, 255
        DB 255, 23, 1, 164, 154, 56, 255, 40, 0, 30, 0, 3, 0, 4, 0, 8, 0, 80, 0
        DB 63, 8, 241, 0, 241, 0, 255, 137, 255, 255, 25, 70, 110, 100, 90, 10
        DB 7, 11, 60, 10, 24, 252, 10, 20, 1, 0, 0, 0, 85, 85
//  170 /*0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x76, 0x40, 0x03, 0x62, 0x7B, 0x71, 0xAA, 0x35, 0xBA, 
//  171 0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x34, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
//  172 0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
//  173 0x9A, 0x99, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4,
//  174 0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
//  175 0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0xF0, 0xF0, 0x18, 0xFC, 0x00, 0x00, 0x00, 0x64, 
//  176 0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  177 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  178 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  179 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//  180 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 
//  181 0x53, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0xD2, 0x82, 0xFF, 0x02, 0x01, 
//  182 0xFE, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
//  183 0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFE, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
//  184 0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
//  185 0x55, 0x55 */
//  186 // channel 255, ed/gw 0201, std key, bunch 0, netid 0
//  187 /* 0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
//  188 0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x48, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
//  189 0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
//  190 0x66, 0x66, 0x4A, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4, 
//  191 0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
//  192 0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
//  193 0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  194 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  195 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  196 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
//  197 0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
//  198 0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
//  199 0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
//  200 0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
//  201 0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
//  202 0x55, 0x55 */
//  203 // New in code parameter block 09/15/15, defaults according to manufacturing
//  204 // 1st Line : barrier through dFk[0]
//  205 // 2nd Line : dFk[1] through vrefPolynom[0] (dFk[3] changed)
//  206 // 3rd Line : vrefPolynom[1] through linearK[0][1] (linearK[0][0], [0][1] changed)
//  207 // 4th Line : linearK[1][0] through linearK[2][1] (linearK[1][0], [2][0],[2][1] changed)
//  208 // 5th Line : linearK[3][0] through linearK[4][1] (linearK[3][0], [3][1] changed)
//  209 // 6th Line : linearK[5][0] through linearK[6][1] (all four values changed)
//  210 // 7th Line : curKey[AES_SIZE]  
//  211 // 8th Line : curIV[AES_SIZE] 
//  212 // 9th Line : fetFailureCount through oscLowCurrentOnlyDelay (only oscLowCurrentLimitInmA stayed same)
//  213 // 10th Line: tests[4] through shortCircuitLevel
//  214 // 11th Line: reserved through 3rd byte of utcHigh (did not change the 3 times values)
//  215 // 12th Line: 4th byte of utcHigh through gwAddr  (should oc change?)
//  216 // 13th Line: repeaterChannel through defCyclesToStep10Channel
//  217 // 14th Line: defCycles2SoftKick through ov_startup (changed ov_startup)
//  218 // 15th Line: t_mod_off through vin_switch_off
//  219 // 16th Line: post_barrier
//  220 0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
//  221 0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x75, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
//  222 0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0xB8, 0x1E, 0xDD, 0x41, 0x00, 0xC0, 0x5A, 0xC5, 
//  223 0xE1, 0x7A, 0xC8, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x40, 0x00, 0x80, 0x0E, 0xC4, 
//  224 0x8F, 0xC2, 0xC7, 0x41, 0x00, 0x00, 0x6B, 0xC3, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
//  225 0xCD, 0xCC, 0xFC, 0x40, 0x00, 0x00, 0x05, 0xC4, 0xC3, 0xF5, 0xF8, 0x40, 0x00, 0x80, 0x12, 0xC4, 
//  226 0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  227 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  228 0x20, 0x4E, 0xBC, 0x02, 0x50, 0x00, 0x00, 0x00, 0x30, 0x75, 0xF0, 0x00, 0xB0, 0x04, 0xF8, 0x7F, 
//  229 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
//  230 0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
//  231 0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
//  232 0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
//  233 0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0x46, 
//  234 0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x14, 0x01, 0x00, 0x00, 0x00, 
//  235 0x55, 0x55
//  236 };
//  237 
//  238 //static INT32 counts1[5] = {0L,0L,0L,0L,0L};
//  239 //static INT32 counts2[5] = {0L,0L,0L,0L,0L};
//  240 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  241 SchedulerInterface *si = (SchedulerInterface *)0xF500;
si:
        DS 2
        REQUIRE `?<Initializer for si>`
        REQUIRE __INIT_XDATA_I
//  242 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  243 static BOOL  *flags;// = si->flags;
flags:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  244 static INT16 *ticks;// = si->ticks;
ticks:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  245 
//  246 //float safe_vin;
//  247 //UINT16 safe_vin_16;
//  248 //UINT16 VinTurnOn_16, VinShutOff_16, VinDisableRadio_16;
//  249 
//  250 #define POWER   1
//  251 #define CURRENT 2
//  252 #define EXT_GND 3
//  253 #define REF     4
//  254 
//  255 #define TINT    7
//  256 #define TEXT    6
//  257 
//  258 #define Iin2    8
//  259 
//  260 /*
//  261 const BYTE  adcChannels[ N_CHANNELS ] = {  
//  262   // Vout  0                                         Pin   1                                        Iout  2      
//  263     ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN1,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
//  264   // Gnd ext 3                                       Ref 4
//  265     ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN4,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN6,    
//  266   // Vin  5                                          Text  6                          
//  267     ADC_REF_P0_7   
//  268 | ADC_12_BIT | ADC_AIN0,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN5,    
//  269   // Tin 7
//  270     ADC_REF_P0_7   | ADC_12_BIT | ADC_TEMP_SENS
//  271     //ADC_REF_1_25_V | ADC_12_BIT | ADC_TEMP_SENS
//  272 };
//  273 */
//  274 
//  275 //#define MidString - defined in projects
//  276 
//  277 #ifdef MidString
//  278   #define REFERENCE       ADC_REF_AVDD
//  279   #define REFERENCE_PIN   ADC_AIN7
//  280 #else
//  281   #define REFERENCE       ADC_REF_P0_7
//  282   #define REFERENCE_PIN   ADC_AIN6
//  283 #endif
//  284 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  285 const BYTE  adcChannels[ N_CHANNELS ] = {  
adcChannels:
        DS 9
        REQUIRE `?<Initializer for adcChannels>`
        REQUIRE __INIT_XDATA_I
//  286   // Vout  0                                         Pin   1                                        Iout  2      
//  287     REFERENCE | ADC_12_BIT | ADC_AIN1,      REFERENCE | ADC_12_BIT | ADC_AIN2,    REFERENCE | ADC_12_BIT | ADC_AIN3,    
//  288   // Gnd ext 3                                       Ref 4
//  289     REFERENCE | ADC_12_BIT | ADC_GND,       REFERENCE | ADC_12_BIT | REFERENCE_PIN,    
//  290   // Vin  5                                          Text  6                          
//  291     REFERENCE | ADC_12_BIT | ADC_AIN0,      REFERENCE | ADC_12_BIT | ADC_AIN5,    
//  292   // Tin 7                                           Iin2 8
//  293     REFERENCE | ADC_12_BIT | ADC_AIN4,       REFERENCE | ADC_12_BIT | ADC_AIN6
//  294 };
//  295 /*
//  296 #else
//  297 const BYTE  adcChannels[ N_CHANNELS ] = {  
//  298   // Vout  0                                        Pin   1                                        Iout  2      
//  299     ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN1,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
//  300   // Gnd ext 3                                      Ref 4
//  301     ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN4,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN6,    
//  302   // Vin  5                                         Text  6                          
//  303     ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN0,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN5,    
//  304   // Tin 7                                          Iin2 8 
//  305     ADC_REF_P0_7 | ADC_12_BIT | ADC_TEMP_SENS, ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN7,
//  306   // int Gnd. 9                                     int Ref 10
//  307     ADC_REF_P0_7 | ADC_12_BIT | ADC_GND,       ADC_REF_P0_7 | ADC_12_BIT | ADC_REF
//  308 };
//  309 #endif
//  310 */
//  311 
//  312                                    // Vout Pin Iout           Vin Text  Iout+ Iin2  //  IntGnd  IntRef

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  313 const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 6,    5};   //,    0xFF }; //,   0xFF   };
indices:
        DS 9
        REQUIRE `?<Initializer for indices>`
        REQUIRE __INIT_XDATA_I
//  314 //const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 0xFF,  5};   //,    0xFF }; //,   0xFF   };

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  315 INT16  lastOff = 0, lastRssi = 0; //, delta = 0;
lastOff:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
lastRssi:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  316 extern INT32 delta;
//  317 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  318 const char theKey[ 2*AES_SIZE ] = { 'A', 'N', 'D', 'S',  0,  'l', 'a', 'r', 'A', 'u', 'g', 'u', 's', 't',  0,   7 ,
theKey:
        DS 32
        REQUIRE `?<Initializer for theKey>`
        REQUIRE __INIT_XDATA_I
//  319                                     'A', 'u', 'g', 'u', 's', 't',  0,   7,  'A', 'u', 'g', 'u', 's', 't',  0,   7 };
//  320 /******************************************************************************/
//  321 /*
//  322 void atomicChange( BYTE idx, INT16 val ){
//  323     INT_GLOBAL_ENABLE( INT_OFF ); 
//  324         ticks[ idx ] = val;
//  325     INT_GLOBAL_ENABLE( INT_ON ); 
//  326 }
//  327 */
//  328 #define atomicChange( idx, val ) ticks[idx]=val
//  329 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  330 BYTE nextKey[ AES_SIZE ];
nextKey:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  331 BYTE nextIV [ AES_SIZE ];
nextIV:
        DS 16
        REQUIRE __INIT_XDATA_Z
//  332 
//  333 void savePB();
//  334 
//  335 // 12/27/2016 static const float DEF_CURRENT_MULTYPLIER = 3.93; //7.93; //5.536;
//  336 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  337 static float k_oc2timer = 0.0;
k_oc2timer:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  338 BYTE oc2timer(BYTE oc){ 
oc2timer:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function oc2timer
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 0,R1
//  339 UINT16 val;
//  340 #ifdef MidString
//  341   if( oc > ocShortCircuitLimit ) oc = ocShortCircuitLimit;  // Short Circuit protection.
//  342 #endif
//  343   // 12/27/2016 if( k_oc2timer < 1.0 ) k_oc2timer = DEF_CURRENT_MULTYPLIER / (page.linearK[2][0]-4.0);
//  344   // 04/06/2017 if( k_oc2timer < 1.0 ) k_oc2timer =  7.6 / (page.linearK[2][0]);
//  345   if( k_oc2timer < 1.0 ) 
        MOV     DPTR,#k_oc2timer
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3f800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_LT
        JNC     ??oc2timer_0
//  346     k_oc2timer =  8.33 / (page.linearK[2][0]);
        MOV     ?V0 + 4,#-0x52
        MOV     ?V0 + 5,#0x47
        MOV     ?V0 + 6,#0x5
        MOV     ?V0 + 7,#0x41
        MOV     DPTR,#(page + 56)
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     DPTR,#k_oc2timer
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  347 
//  348   //  if( test4Zero((BYTE*)&k_oc2timer, 4) ) k_oc2timer = DEF_CURRENT_MULTYPLIER / page.linearK[2][0];
//  349 
//  350   // 12/27/2016 added line
//  351   if ( oc > 240 ) oc = 240;
??oc2timer_0:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#-0xf
        JC      ??oc2timer_1
        MOV     ?V0 + 0,#-0x10
//  352   
//  353   // 12/27/2016 val = (UINT16)( oc * k_oc2timer + 0.5 );
//  354   val = (UINT16)( oc * k_oc2timer ); 
??oc2timer_1:
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#k_oc2timer
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R0,?V0 + 0
//  355   if( val > 255 ) val = 255;
        CLR     C
        MOV     A,?V0 + 1
        SUBB    A,#0x1
        JC      ??oc2timer_2
        MOV     R0,#-0x1
//  356   return (BYTE) val; 
??oc2timer_2:
        MOV     A,R0
        MOV     R1,A
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine111
        ; // Fall through to label ?Subroutine111
//  357 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine111:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0xc
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  358 INT16 abs( INT16 a ) { return ( a > 0 ) ? a : -a; }
abs:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function abs
        ; Saved register size: 0
        ; Auto size: 0
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_326:
        JC      ??abs_0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        SJMP    ??abs_1
??abs_0:
        CLR     C
        CLR     A
        SUBB    A,R2
        MOV     R0,A
        CLR     A
        SUBB    A,R3
??abs_1:
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        RET
        CFI EndBlock cfiBlock2
//  359 //void bootOtherImage()
//  360 //  {void (*f)( void ) = ( void (*)( void ) ) page.imageAddr;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}
//  361 
//  362 /******************************************************************************/
//  363 inline float sqr( float x ){ return x*x; }
//  364 /******************************************************************************/
//  365 //inline void setupFrequency(){
//  366     // Configure the radio frequency to use
//  367 //    FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC
//  368 //}

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  369 const INT32 defFreq = 0x646AAA;
defFreq:
        DS 4
        REQUIRE `?<Initializer for defFreq>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  370 const BYTE the_frequency[3] = { 0x64, 0x6A, 0xAA };
the_frequency:
        DS 3
        REQUIRE `?<Initializer for the_frequency>`
        REQUIRE __INIT_XDATA_I
//  371 // def_freq puts the frequency values into the FrequencyControl High/Medium/Low Bytes

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  372 void def_freq(void){ mymemcpy( (BYTE *)0xDF09, (BYTE *)the_frequency, 3 ); }
def_freq:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function def_freq
        FUNCALL def_freq, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x3
        MOV     R4,#(the_frequency & 0xff)
        MOV     R5,#((the_frequency >> 8) & 0xff)
        MOV     R2,#0x9
        MOV     R3,#-0x21
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiBlock3
//  373 /*
//  374 void switchDataRate( BOOL tenKbod ){
//  375   if( page.is500Always )    _datarate    = DATA_RATE_1_CC2511;
//  376   else  if( tenKbod )       _datarate    = DATA_RATE_3_CC2511;
//  377   else                      _datarate    = DATA_RATE_4_CC2511;
//  378 }
//  379 */
//  380 /*
//  381 void setupRadioDR(BYTE dr, BYTE channel, BOOL useFEC ){
//  382     INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
//  383         RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
//  384         S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
//  385         //switchDataRate( page.use12kbod );
//  386         //if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
//  387         //else
//  388         radioConfigure( dr ); 
//  389         CHANNR = channel;      
//  390         if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
//  391         else                           PA_TABLE0 = page.radioPower;
//  392         if( useFEC  ) MDMCFG1 |= 0x80; else MDMCFG1 &= 0x7F;
//  393         ADDR = page.edAddr;
//  394         //SYNC0 = 0xF0;    SYNC1 = 0xF0;
//  395         SYNC0 = page.syncword & 0xFF;    SYNC1 = ( page.syncword >> 8 ) & 0xFF;
//  396         HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
//  397     INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
//  398 }
//  399 extern BOOL transfer;
//  400 void setupRadio( BYTE channel ){ 
//  401     //switchDataRate( page.use12kbod ); 
//  402     if( page.is500Always )     _datarate    = DATA_RATE_1_CC2511;
//  403     else  if( page.use12kbod ) _datarate    = DATA_RATE_3_CC2511;
//  404     else                       _datarate    = DATA_RATE_4_CC2511;
//  405     setupRadioDR( _datarate, channel, page.useFEC || page.is500Always ); 
//  406 }
//  407 void setupRepeater( BOOL flag ){
//  408   DMAARM = 0x83; // stop receive and transmit
//  409   if( flag && (!page.is500Always) ){  
//  410        setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel, TRUE );  
//  411        ADDR = page.gwAddr;  
//  412   }else setupRadio( curChannel );                    
//  413   // global interrups are enabled inside setup radio
//  414 }
//  415 */

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  416 void setupRadioDR(BYTE dr, BYTE channel ){
setupRadioDR:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function setupRadioDR
        FUNCALL setupRadioDR, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRadioDR, radioConfigure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRadioDR, radioConfigure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        SJMP    ??setupRadioDR_0
//  417     //INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
//  418         while( *((BYTE *)0xF53A) == RADIO_MODE_TX) tickWait(1);            
??setupRadioDR_1:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x1
        LCALL   tickWait
??setupRadioDR_0:
        MOV     DPTR,#-0xac6
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      ??setupRadioDR_1
//  419         RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
        LCALL   ?Subroutine24
//  420         S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
??CrossCallReturnLabel_45:
        ANL     0x9b,#0xfc
        MOV     A,0x9b
        ANL     0xe9,#0xef
        MOV     0x91,#0x10
//  421         if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??setupRadioDR_2
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??setupRadioDR_2
        ; Setup parameters for call to function radioConfigure
        MOV     R1,#0x19
        SJMP    ??setupRadioDR_3
//  422         else                                                  radioConfigure( dr ); 
??setupRadioDR_2:
        ; Setup parameters for call to function radioConfigure
        MOV     A,R6
        MOV     R1,A
??setupRadioDR_3:
        LCALL   radioConfigure
//  423         CHANNR = channel;      
        MOV     A,R7
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
//  424         if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??setupRadioDR_4
        MOV     DPTR,#(page + 193)
        SJMP    ??setupRadioDR_5
//  425         else                           PA_TABLE0 = page.radioPower;
??setupRadioDR_4:
        MOV     DPTR,#(page + 189)
??setupRadioDR_5:
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20d2
        LCALL   ?Subroutine79
//  426         ADDR = page.edAddr;
??CrossCallReturnLabel_208:
        MOVX    @DPTR,A
//  427         SYNC0 = page.syncword & 0xFF;    SYNC1 = ( page.syncword >> 8 ) & 0xFF;
        MOV     DPTR,#(page + 154)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20ff
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 155)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x2100
        MOVX    @DPTR,A
//  428         //RFST = STROBE_CAL; 
//  429         HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
        ORL     0x9a,#0x1
//  430     //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
//  431 }
        LJMP    ?Subroutine123
        CFI EndBlock cfiBlock4
        REQUIRE RFIM
        REQUIRE IEN2
        REQUIRE S1CON
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE RFST
        REQUIRE RFIF
//  432 extern BOOL transfer;

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  433 void setupRadio( BYTE channel ){ setupRadioDR( page.is500Always ? DATA_RATE_1_CC2511 : DATA_RATE_3_CC2511, channel ); }
setupRadio:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function setupRadio
        FUNCALL setupRadio, setupRadioDR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??setupRadio_0
        MOV     R1,#0x32
        SJMP    ??setupRadio_1
??setupRadio_0:
        MOV     R1,#0xc
??setupRadio_1:
        ; Setup parameters for call to function setupRadioDR
        LCALL   setupRadioDR
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock5

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  434 void setupRepeater( BOOL flag ){
setupRepeater:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function setupRepeater
        FUNCALL setupRepeater, setupRadioDR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRepeater, setupRadio
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  435   DMAARM = 0x83; // stop receive and transmit
        MOV     0xd6,#-0x7d
//  436   if( flag && (!page.is500Always) ){  
        MOV     A,R1
        JZ      ??setupRepeater_0
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??setupRepeater_0
//  437        //P1_1 = 1;
//  438        setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel );  
        ; Setup parameters for call to function setupRadioDR
        MOV     DPTR,#(page + 192)
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x32
        LCALL   setupRadioDR
//  439        ADDR = page.gwAddr;  
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fb
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_128
//  440   }else{
//  441        //P1_1 = 0;
//  442        setupRadio( curChannel );                    
??setupRepeater_0:
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine56
//  443   }
//  444 }
??CrossCallReturnLabel_128:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock6
        REQUIRE DMAARM

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_128
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPTR,#curChannel
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 13)
??Subroutine56_0:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setupRadio
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  445 void softKick(void){
softKick:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function softKick
        FUNCALL softKick, zerofill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, def_freq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, load
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, wait_aes
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, setupRadio
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, zerofill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, computeADCs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  446     //if( transfer ) return;
//  447     //INT_GLOBAL_ENABLE( INT_OFF );
//  448         //halPowerClkMgmtSetMainClkSrc(CRYSTAL);  // it is never needed to set crystall again
//  449         DMAARM = 0x83; RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
        MOV     0xd6,#-0x7d
        LCALL   ?Subroutine24
//  450         //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC //setupFrequency();       //
//  451         zerofill( (BYTE *)&delta, 4 ); //delta = 0;     
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x4
        MOV     R2,#(delta & 0xff)
        MOV     R3,#((delta >> 8) & 0xff)
        LCALL   zerofill
//  452         FSCTRL0 = 0;   def_freq();
        CLR     A
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
        ; Setup parameters for call to function def_freq
        LCALL   def_freq
//  453         //dmaRadioSetup();
//  454         //MCSM0 = 0x14; // calibraton on
//  455         loadKey( page.curKey );
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
//  456         setupRadio( curChannel = ( page.is500Always ? curChannel : page.channel ) );        // global interrups are enabled inside setup radio
??CrossCallReturnLabel_212:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??softKick_0
        MOV     DPTR,#curChannel
        SJMP    ??softKick_1
??softKick_0:
        MOV     DPTR,#(page + 164)
??softKick_1:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R1
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
        LCALL   setupRadio
//  457         zerofill( (BYTE *)&utcLast, 6 ); //utcLast = 0; msLast = 0;
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x6
        MOV     R2,#(utcLast & 0xff)
        MOV     R3,#((utcLast >> 8) & 0xff)
        LCALL   zerofill
//  458         cmdCount = 0;
        MOV     DPTR,#cmdCount
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  459         //if( enable2SendData ){ computeADCs( TRUE, FALSE );  } // adjust quartz to temperature only if buffer is already full
//  460         computeADCs( TRUE, FALSE );  // adjust quartz to temperature only if buffer is already full
        ; Setup parameters for call to function computeADCs
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   computeADCs
//  461         ticks[ ReceiveData ] = 1;
        LCALL   ?Subroutine6
//  462         ticks[ Hop ] = 0; cyclesToHop = 0;
??CrossCallReturnLabel_363:
        LCALL   ??Subroutine8_0
??CrossCallReturnLabel_6:
        MOV     DPTR,#cyclesToHop
        LJMP    ?Subroutine116
        CFI EndBlock cfiBlock12
        REQUIRE DMAARM
        REQUIRE RFST
//  463     //INT_GLOBAL_ENABLE( INT_ON );
//  464 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine81:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_212
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_213
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 13)
??Subroutine81_0:
        MOV     R1,#0x4
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 13)
??Subroutine81_1:
        LCALL   load
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        LCALL   wait_aes
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond23) CFA_SP SP+-4
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     0xe1,#0x4
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        LCALL   ?Subroutine90
??CrossCallReturnLabel_242:
        MOV     A,#-0x10
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond28) CFA_SP SP+-4
??Subroutine8_0:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond29) CFA_SP SP+-4
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 11)
??Subroutine8_1:
        LCALL   ?Subroutine90
??CrossCallReturnLabel_239:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  465 void restoreRadio(){
restoreRadio:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function restoreRadio
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  466     //ticks[ ReceiveData ] = 1;
//  467     //HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
//  468     //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
//  469     //DMAARM = 0x83; RFST = STROBE_IDLE; 
//  470     ticks[ ReceiveData ] = 1;
        LCALL   ?Subroutine6
//  471 }
??CrossCallReturnLabel_364:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock31
//  472 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  473 void init(void){
init:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function init
        FUNCALL init, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, dmaRadioSetup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, def_freq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  474 BYTE pin;
//  475     P0DIR = 0;    // all port 0 pins are input
        MOV     0xfd,#0x0
//  476     P0INP = 0xFF; // all port 0 pins are tristate
        MOV     0x8f,#-0x1
//  477     ADC_ENABLE_CHANNELS( 0xFF );
        MOV     A,0xf2
        MOV     0xf2,#-0x1
//  478     for( pin = 0; pin < 8; pin++ ){ IO_ADC_PORT0_PIN( pin, IO_ADC_EN); }
        MOV     R2,#0x0
??init_0:
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ORL     A,0xf2
        MOV     0xf2,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??init_0
//  479 
//  480     // 2 top pins are secial function - timer 3 channels
//  481     P1SEL = 0xC0;                          
        MOV     0xf4,#-0x40
//  482     // pins 7(oc) 6(ov) 4(on/off), 3(mpp), 1(LED), 0(mpp cycle) are for output
//  483     P1DIR = 0xDB;   // 1101 1011
        MOV     0xfe,#-0x25
//  484 
//  485     T3CTL   = 0x50; // was 0x70, prescaler 1/4, normal operation, mode - free running
        MOV     0xcb,#0x50
//  486     T3CCTL0 = 0x24; // clear output on compare up, set on 0, enabled
        MOV     0xcc,#0x24
//  487     T3CCTL1 = 0x24; // clear output on compare up, set on 0, enabled
        MOV     0xce,#0x24
//  488     PERCFG  = 0x20; // Timer3 has alternate 2 location - P1_6 & P1_7
        MOV     0xf1,#0x20
//  489 
//  490     P2SEL   = 0x20; // Timer3 has priority over USART1
        MOV     0xf5,#0x20
//  491     // pull down commented out for version 8
//  492     //P2DIR   = 0x0F; P2_1 = 0; P2_2 = 0;
//  493     
//  494     //P1_3 = 1; //P1 |= 8;  // MPP ON
//  495     zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x12
        MOV     R2,#(adcsTemp & 0xff)
        MOV     R3,#((adcsTemp >> 8) & 0xff)
        LCALL   zerofill
//  496     //     LED down,  MPP off, Module Off 
//  497     //P1 &= ~ ( 2 | 8 | 0x10 ); 
//  498     
//  499     P0SEL = 0;
        MOV     0xf3,#0x0
//  500     // Choose the crystal oscillator as the system clock
//  501  //   P1_1 = 0;
//  502  //   halPowerClkMgmtSetMainClkSrc(CRYSTAL);
//  503     // Select frequency and data rate from LCD menu, then configure the radio
//  504     
//  505     // Configure interrupt for every time a packet is sent
//  506     
//  507     FSCTRL0 = 0;
        CLR     A
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
//  508         
//  509     setup_hopper( page.channel );
        ; Setup parameters for call to function setup_hopper
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setup_hopper
//  510     dmaRadioSetup();
        ; Setup parameters for call to function dmaRadioSetup
        LCALL   dmaRadioSetup
//  511 
//  512     //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC setupFrequency();
//  513     def_freq();
        ; Setup parameters for call to function def_freq
        LCALL   def_freq
//  514     setupRadio( curChannel ); //page.is500Always? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine56
//  515 
//  516     //calibrateParking();
//  517 
//  518     invVref0 = 1.0 / page.vrefPolynom[0];
??CrossCallReturnLabel_129:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#-0x80
        MOV     ?V0 + 3,#0x3f
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#invVref0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  519     //__________________________________________________________________________
//  520    // Over Voltage     Over Current
//  521 
//  522     T3CTL |= 0x14;
        ORL     0xcb,#0x14
        MOV     A,0xcb
//  523     
//  524     HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
        SETB    0xb8.1
//  525     HAL_INT_ENABLE(INUM_ADC, INT_ON);    // enable ADC interrupt
        SETB    0xa8.1
//  526     HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
        ORL     0x9a,#0x1
//  527 }
        LJMP    ??Subroutine124_1
        CFI EndBlock cfiBlock32
        REQUIRE P0INP
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE T3CTL
        REQUIRE T3CCTL0
        REQUIRE T3CCTL1
        REQUIRE PERCFG
        REQUIRE ADCCFG
        REQUIRE P0SEL
        REQUIRE P1SEL
        REQUIRE P2SEL
        REQUIRE P0DIR
        REQUIRE P1DIR
//  528 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  529 void ov_startup(void)
ov_startup:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function ov_startup
//  530 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  531   // ensure FETs are good/Module can turn on before beginning ov_startup sequence
//  532   // and turning module on.
//  533   if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
        MOV     DPTR,#-0x3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ModuleStatusCanTurnOn
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ov_startup_0
//  534   {
//  535     if( page.ov_startup )
        MOV     DPTR,#(page + 223)
        MOVX    A,@DPTR
        MOV     R2,A
        JZ      ??CrossCallReturnLabel_367
//  536     {
//  537       T3CC0 = (page.ov_startup < page.ov) ? page.ov_startup : page.ov; 
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        JNC     ??ov_startup_1
        MOV     A,R2
        SJMP    ??ov_startup_2
??ov_startup_1:
        MOV     A,R3
??ov_startup_2:
        MOV     R4,A
        MOV     0xcd,R4
//  538       atomicChange( OvStartup, TICKS_IN_SEC );
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1e
        LCALL   ??Subroutine9_0
//  539       //        #ifdef MidString                                                                            
//  540       //        compute98();                                                                                
//  541       //        #endif
//  542     }
//  543     P1_4 = 1;
??CrossCallReturnLabel_367:
        SETB    0x90.4
//  544   }
//  545 }
??ov_startup_0:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock33
        REQUIRE _A_P1
        REQUIRE T3CC0
//  546 /*
//  547 void init_board(void){
//  548     if( (!page.mpp) && page.module ){
//  549         P1_3 = 1;  atomicChange( BypassMode, TICKS_IN_SEC ); // switching mpp on and switching it off (bypass mode) only after delay
//  550     }else{
//  551         if( page.mpp )    P1_3 = 1;  else P1_3 = 0;
//  552         //if( page.module ) P1_4 = 1;  else P1_4 = 0;
//  553     }
//  554     if( page.module ) ov_startup();
//  555 }
//  556 */
//  557 /******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  558 float *_coeff, invRef = 0;
_coeff:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
invRef:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  559 float mult( float t, INT16 i ){ return (t)*(float)i; }
mult:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function mult
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28
??CrossCallReturnLabel_51:
        LCALL   ?Subroutine82
??CrossCallReturnLabel_220:
        LCALL   ?L_TO_FLT
        LJMP    ?Subroutine124
        CFI EndBlock cfiBlock34

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  560 float lin_coeff( float f ){ return _coeff[0]*f + _coeff[1]; }
lin_coeff:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function lin_coeff
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine49_1
??CrossCallReturnLabel_105:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        LCALL   ?Subroutine48
??CrossCallReturnLabel_101:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        LJMP    ??Subroutine124_0
        CFI EndBlock cfiBlock35

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  561 float lin_coeff_t( float f ){    return (_coeff[1] - f )*_coeff[0]; }
lin_coeff_t:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function lin_coeff_t
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        LCALL   ?Subroutine48
??CrossCallReturnLabel_102:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_SUB
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine49_1
??CrossCallReturnLabel_106:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LJMP    ?Subroutine124
        CFI EndBlock cfiBlock36

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine93_0
??CrossCallReturnLabel_351:
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  562 float lin( BYTE idx ){
lin:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function lin
        FUNCALL lin, lin_coeff_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  563 float t  = ((float)adcs[ idx ]) * page.vrefPolynom[0] * invRef; // invRef = 1.0 / (float)adcs[ REF ];
//  564     return lin_coeff_t( t ); //( coeff[1] - t ) * coeff[0];  
        ; Setup parameters for call to function lin_coeff_t
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#(adcs & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#((adcs >> 8) & 0xff)
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff_t
        SJMP    ??Subroutine124_1
        CFI EndBlock cfiBlock40
//  565 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  566 float cube_coeff( float *t ){ 
cube_coeff:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function cube_coeff
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  567 //  return ( ( ( _coeff[0]*t + _coeff[1] )*t + _coeff[2] )*t + _coeff[3] ); 
//  568 float acc = _coeff[0]; 
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine49_1
??CrossCallReturnLabel_107:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  569 BYTE i;
//  570     for( i = 1; i < 4; i++ ) acc = acc*(*t) + _coeff[i];
        MOV     R5,#0x1
??cube_coeff_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     ?V0 + 4,R5
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     DPTR,#_coeff
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOV     DPL,R4
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        INC     R5
        MOV     A,R5
        CLR     C
        SUBB    A,#0x4
        JC      ??cube_coeff_0
        CFI EndBlock cfiBlock41
//  571     return acc;
        REQUIRE ?Subroutine127
        ; // Fall through to label ?Subroutine127
//  572 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine127:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        SJMP    ??Subroutine124_1
        CFI EndBlock cfiBlock42

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine124:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
??Subroutine124_0:
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
??Subroutine124_1:
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock43

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  573 float checkVref;
checkVref:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  574 float processCheck( INT16 val ){ return lin_coeff( ((float)val) * checkVref );  }
processCheck:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function processCheck
        FUNCALL processCheck, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        ; Setup parameters for call to function lin_coeff
        MOV     ?V0 + 0,R2
        MOV     A,R3
        MOV     ?V0 + 1,A
        LCALL   ?Subroutine82
??CrossCallReturnLabel_221:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff
        SJMP    ??Subroutine124_1
        CFI EndBlock cfiBlock44

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine82:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_220
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_221
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
//  575 /******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  576 UINT16  last[ N_CHANNELS ]; //Vout, lastPin, lastIout, lastGnd, lastRef, lastVin, lastTex, lastTin;
last:
        DS 18
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  577 UINT16  checkVoutOnT  = 0, checkPD = 0;
checkVoutOnT:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
checkPD:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  578 BOOL  isSteppedDown = FALSE;
isSteppedDown:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  579 void read_page(void){
read_page:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function read_page
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_page, switchTo255
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  580     mymemcpy( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+4 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#-0xe
        MOV     R4,#0x0
        MOV     R5,#0x5c
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  581     //if( page.barrier == 0xAAAA ){
//  582     if( page.barrier == 0xAAAA  && page.post_barrier == 0x5555 ){
        MOV     DPTR,#page
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JNZ     ??read_page_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xaa
??read_page_0:
        JNZ     ??read_page_1
        MOV     DPTR,#(page + 240)
        MOVX    A,@DPTR
        XRL     A,#0x55
        JNZ     ??read_page_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x55
??read_page_2:
        JZ      ??read_page_3
//  583         /* page F compatibility - not needed anymore
//  584         zerofill( (BYTE *)&page.syncword, 8 );
//  585         page.syncword = 0xF0F0; 
//  586         page.vin_disable_radio = 6;
//  587         page.vin_limit         = 0; 
//  588         page.vin_turn_on       = 120;
//  589         page.vin_switch_off    = 100;
//  590         */
//  591         //BYTE *ptr = nextSlot();
//  592         //if( ptr && ptr > (BYTE *)(PAGEADDR+PAGESIZE+4) ){ ptr -= 4;  mymemcpy( (BYTE *)&energy, ptr, 4 );  }
//  593         //zerofill( (BYTE *)&deltaEnergy, 4 );
//  594     }else{
//  595         //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
//  596         mymemcpy((BYTE *)&page, (BYTE *)default_pb, PAGESIZE );
??read_page_1:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#-0xe
        MOV     R4,#(default_pb & 0xff)
        MOV     R5,#((default_pb >> 8) & 0xff)
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  597         // partial PB restoration goes here
//  598         //void (*f)( void ) = ( void (*)( void ) )0x603F;  (*f)();  // to 8k image
//  599         switchTo255(); ch255 = FALSE;
        ; Setup parameters for call to function switchTo255
        LCALL   ?Subroutine83
//  600         page.ov         = *((BYTE *)0x3DC);
??CrossCallReturnLabel_222:
        MOV     DPTR,#0x3dc
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 187)
        MOVX    @DPTR,A
//  601         page.oc         = *((BYTE *)0x3DD);
        MOV     DPTR,#0x3dd
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 188)
        MOVX    @DPTR,A
//  602         //page.ov_startup = 100;//*((BYTE *)0x3DE);
//  603         //page.myBunch = 0;   page.netId  = 0;
//  604          /*
//  605         page.channel = 255; page.pureOffset = -130;
//  606         page.edAddr    = 2; page.gwAddr     = 1; 
//  607         page.vin_limit = 0; 
//  608         mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 );
//  609         //page.myBunch = 0;   page.netId  = 0;
//  610         mymemcpy( (BYTE *)&page, (BYTE *)0x3D4, 12 );    // netid, bunch, mac
//  611         //zerofill( (BYTE *)&energy, 8 );
//  612         */
//  613     }
//  614     ch255 = FALSE;
??read_page_3:
        CLR     A
        MOV     DPTR,#ch255
        SJMP    ?Subroutine116
        CFI EndBlock cfiBlock48
//  615 }
//  616 //float polynomial[] = { 0, 0, 0, -200 }; // -0.000693, 0.0556, 0.613, -220.0};

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  617 void switchTo255(){
switchTo255:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function switchTo255
        FUNCALL switchTo255, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL switchTo255, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL switchTo255, softKick
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  618     curChannel = page.channel = 255;   
        MOV     A,#-0x1
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
        MOV     DPTR,#curChannel
        LCALL   ?Subroutine76
//  619     page.use12kbod  = TRUE;   page.hoppingAllowed = FALSE;
??CrossCallReturnLabel_202:
        CLR     0xE0 /* A   */.4
        MOVX    @DPTR,A
        SETB    0xE0 /* A   */.2
        MOVX    @DPTR,A
//  620     page.useFEC     = FALSE;  page.is500Always = FALSE; 
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.4
        LCALL   ?Subroutine76
//  621     page.isRelay    = FALSE;  page.searchCommunication = FALSE;
??CrossCallReturnLabel_203:
        ANL     A,#0x1f
        MOVX    @DPTR,A
//  622     page.vin_disable_radio = 0;
        CLR     A
        MOV     DPTR,#(page + 156)
        MOVX    @DPTR,A
//  623     //page.production = 0;
//  624     //page.fuseComm   = 0;    page.fuseOVOC = 0;
//  625     mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x20
        MOV     R4,#(theKey & 0xff)
        MOV     R5,#((theKey >> 8) & 0xff)
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        LCALL   mymemcpy
//  626     //mymemcpy( (BYTE *)page.dFk,    (BYTE *)polynomial, 16 );
//  627     page.syncword = 0xF0F0; page.edAddr = 2; page.gwAddr = 1;
        MOV     DPTR,#(page + 154)
        MOV     A,#-0x10
        LCALL   ?Subroutine69
//  628     mymemcpy( (BYTE *)&page, (BYTE *)0x3D0, 12 );    // barrier, netid (0), bunch (0), group, mac, 
??CrossCallReturnLabel_189:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0xc
        MOV     R4,#-0x30
        MOV     R5,#0x3
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  629     ch255 = TRUE;   softKick();
        MOV     A,#0x1
        MOV     DPTR,#ch255
        MOVX    @DPTR,A
        ; Setup parameters for call to function softKick
        LCALL   softKick
//  630     //page.myBunch    =  0;     page.netId = 0;  
//  631 }
        SJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock49
//  632 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  633 static UINT16 dVOut = 0,
dVOut:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  634   vOutMin = 0,
vOutMin:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  635   vOutMax = 0;
vOutMax:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  636 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  637 void kickOsc()
kickOsc:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function kickOsc
//  638 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  639   P1_3 = 0;
        CLR     0x90.3
//  640   oscWhatToWaitFor = SetOscOVStartupDelay;
        MOV     A,#0x15
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    @DPTR,A
//  641   ticks[OscEvent] = page.oscOVStartupDelay;
        MOV     DPTR,#(page + 138)
        LCALL   ??Subroutine7_0
//  642   T3CC0 = page.ov_startup;
??CrossCallReturnLabel_299:
        MOV     DPTR,#(page + 223)
        MOVX    A,@DPTR
        MOV     0xcd,A
//  643 }
        SJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock50
        REQUIRE _A_P1
        REQUIRE T3CC0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine116:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        MOVX    @DPTR,A
??Subroutine116_0:
        POP     DPH
        CFI CFA_SP SP+-3
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-2
        CFI DPL0 SameValue
        RET
        CFI EndBlock cfiBlock51
//  644 
//  645 #ifdef MidString
//  646 INT16 iOutIin1Diff; // Used in compute ADCs for FET failure
//  647 INT16 iOutIin2Diff; // Global to save time with computeADCs
//  648 #endif
//  649 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  650 void checkVin(void){
checkVin:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function checkVin
        FUNCALL checkVin, kickOsc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, switchTo255
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, read_page
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, read_page
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, lin_coeff_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  651 INT16  t;
//  652 UINT16 safe_vin_16; //, dp; // dp is needed for power dissipation protection
//  653 static BYTE oscCondition = 0;
//  654 
//  655 #ifdef MidString
//  656     static UINT16 currentFETTickCount = 0;
//  657 
//  658     if (checkForFETFailure)
//  659       {
//  660 	iOutIin1Diff = (INT16)adcs16[2] - (INT16)adcs16[6];
//  661 	iOutIin2Diff = (INT16)adcs16[2] - (INT16)adcs16[5];
//  662 	if ( ((INT16)adcs16[2] > page.fetCurrentThreshold) &&
//  663 	     ( (iOutIin1Diff < page.fetDeltaCurrent) ||
//  664 	       (iOutIin2Diff < page.fetDeltaCurrent) )  )
//  665 	  {
//  666 	    currentFETTickCount += 120;
//  667 	    netValue = MainNetValueFETFailing; // indicate FET failure being observed
//  668 	    if (currentFETTickCount >= (INT16)page.fetFailureCount)
//  669 	      {
//  670 		P1_4 = 0; // turn the module off 
//  671 		fetFailure = TRUE; // set guard to keep module from being turned on
//  672 		checkForFETFailure = FALSE; // No need to check further until power cycle or Module On
//  673 		netValue = MainNetValueFETFailed; // indicate FET failure condition
//  674 		*ModuleOffRememberedPtr = ModuleStatusOffFetFailure; // Remember module is off
//  675 		currentFETTickCount = 0; // Reset to 0
//  676 	      }
//  677 	  }
//  678 	else
//  679 	  {
//  680 	    currentFETTickCount = 0; // Ensure count is back to default
//  681 	    netValue = MainNetValueStandard; // "default" netValue for main image
//  682 	  }
//  683       }
//  684 #endif
//  685 
//  686 if( ( ticks[ OvStartup ] == 0 ) &&
//  687     ( page.oscLowCurrentLimitInmA != 0 ) &&
//  688     ( page.oscLowCurrentLimitInmA != -1 ) &&
//  689     ( oscWhatToWaitFor == SetOscLowCurrentOnlyDelay ) &&
//  690     ( ((INT16)adcs16[2]) < page.oscLowCurrentLimitInmA) )
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1e
        LCALL   ?Subroutine43
??CrossCallReturnLabel_80:
        JNZ     ??checkVin_0
        INC     DPTR
        MOVX    A,@DPTR
??checkVin_0:
        JNZ     ??checkVin_1
        LCALL   ?Subroutine60
??CrossCallReturnLabel_136:
        JNZ     ??checkVin_2
        MOV     A,R1
??checkVin_2:
        JZ      ??checkVin_1
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??checkVin_3
        MOV     A,#-0x1
        XRL     A,R1
??checkVin_3:
        JZ      ??checkVin_1
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    A,@DPTR
        XRL     A,#0x17
        JNZ     ??checkVin_1
        MOV     DPTR,#(adcs16 + 4)
        LCALL   ?Subroutine57
??CrossCallReturnLabel_339:
        JNC     ??checkVin_4
//  691   {
//  692     if( dVOut > page.oscDeltaV )
        MOV     DPTR,#dVOut
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_152:
        MOV     DPH,#(((page + 136) >> 8) & 0xff)
        MOV     DPL,#((page + 136) & 0xff)
        LCALL   ?Subroutine97
??CrossCallReturnLabel_252:
        JNC     ??CrossCallReturnLabel_300
//  693       oscCondition++;
        MOV     DPTR,#??oscCondition
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  694     else
//  695       oscCondition = 0;
//  696 
//  697     if( oscCondition > 1 )
        CLR     C
        SUBB    A,#0x2
        JC      ??checkVin_5
//  698       {
//  699 	oscCondition = 0;
        CLR     A
        MOVX    @DPTR,A
//  700 	kickOsc();
        ; Setup parameters for call to function kickOsc
        LCALL   kickOsc
        SJMP    ??checkVin_5
//  701       }
//  702   }
//  703  else if(oscWhatToWaitFor == SetOscLowCurrentOnlyDelay)
??checkVin_1:
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    A,@DPTR
        XRL     A,#0x17
        JNZ     ??checkVin_5
//  704    {
//  705      ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
??checkVin_4:
        LCALL   ?Subroutine7
//  706      oscCondition = 0;
??CrossCallReturnLabel_300:
        CLR     A
        MOV     DPTR,#??oscCondition
        MOVX    @DPTR,A
//  707    }
//  708 
//  709 #ifdef MidString
//  710 UINT16 switchTo255Lim = 30000, switchFrom255Lim = 28500, shortCircuitProtectionOff = 8000, shortCircuitProtectionOn = 6000; 
//  711     if( ((UINT16)page.linearK[0][0]) > 16 ) // MS1000
//  712     { switchTo255Lim = 60000; switchFrom255Lim = 57000; shortCircuitProtectionOff = 16000; shortCircuitProtectionOn = 12000;  }
//  713 #endif
//  714     checkVref = page.vrefPolynom[0] / ((float)last[4]);
??checkVin_5:
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#(last + 8)
        LCALL   ?Subroutine13
??CrossCallReturnLabel_23:
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  715     _coeff = page.linearK[3];
        MOV     DPTR,#_coeff
        MOV     A,#((page + 64) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 64) >> 8) & 0xff)
        MOVX    @DPTR,A
//  716     //safe_vin_16 = (UINT16) processCheck( last[5] );
//  717     safe_vin_16  = convU( lin_coeff( ((float) last[5])*checkVref ) );
        ; Setup parameters for call to function convU
        ; Setup parameters for call to function lin_coeff
        MOV     DPTR,#(last + 10)
        LCALL   ?Subroutine13
??CrossCallReturnLabel_24:
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff
        LCALL   convU
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  718 
//  719     #ifndef MidString
//  720     if( P1_3 == 0 ){
        MOV     C,0x90.3
        JC      ??checkVin_6
//  721         if( P1_4  && (safe_vin_16 < (100*(UINT16)page.vin_switch_off) ) ){
        MOV     C,0x90.4
        JNC     ??checkVin_7
        MOV     DPTR,#(page + 239)
        LCALL   ?Subroutine55
??CrossCallReturnLabel_126:
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??checkVin_7
//  722             ticks[ TurnOn ] = 3 * TICKS_IN_SEC;     P1_4 = 0; 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine29
??CrossCallReturnLabel_55:
        CLR     0x90.4
        SJMP    ??checkVin_6
//  723         }else if( (P1_4 == 0) && turnOnFlag && ( safe_vin_16 > (100*(UINT16)page.vin_turn_on) ) ){
??checkVin_7:
        MOV     C,0x90.4
        JC      ??checkVin_6
        MOV     DPTR,#turnOnFlag
        MOVX    A,@DPTR
        JZ      ??checkVin_6
        MOV     DPTR,#(page + 238)
        LCALL   ?Subroutine55
??CrossCallReturnLabel_127:
        MOV     A,R0
        SUBB    A,R6
        MOV     A,R1
        SUBB    A,R7
        JNC     ??checkVin_6
//  724             turnOnFlag = 0; ticks[ BypassMode ] = TICKS_IN_SEC;  
        CLR     A
        MOV     DPTR,#turnOnFlag
        MOVX    @DPTR,A
        LCALL   ?Subroutine14
//  725             P1_3 = 1; ov_startup();
??CrossCallReturnLabel_371:
        SETB    0x90.3
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
//  726         } 
//  727     }
//  728     #endif
//  729     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??checkVin_6:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_9:
        JNZ     ??checkVin_8
        LCALL   ?Subroutine12
??CrossCallReturnLabel_17:
        JZ      ??checkVin_9
??checkVin_8:
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0xb
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_89:
        MOV     A,#0x1
??checkVin_10:
        MOVX    @DPTR,A
        LJMP    ??CrossCallReturnLabel_310
//  730     
//  731     txDisabled = 0;
??checkVin_9:
        CLR     A
        MOV     DPTR,#txDisabled
        MOVX    @DPTR,A
//  732     if( page.vin_disable_radio ) txDisabled = ( safe_vin_16 < (1000*(UINT16)page.vin_disable_radio) ); 
        MOV     DPTR,#(page + 156)
        MOVX    A,@DPTR
        JZ      ??checkVin_11
        MOV     R0,A
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        CLR     A
        ADD     A,R2
        MOV     R1,A
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??checkVin_12
        MOV     R2,#0x1
        SJMP    ??checkVin_13
??checkVin_12:
        MOV     R2,#0x0
??checkVin_13:
        MOV     A,R2
        MOV     DPTR,#txDisabled
        MOVX    @DPTR,A
//  733     
//  734     #ifndef MidString    
//  735     if( page.vin_limit ){
??checkVin_11:
        MOV     DPTR,#(page + 237)
        MOVX    A,@DPTR
        MOV     R3,A
        JZ      ??checkVin_14
//  736     register BOOL flag = ( safe_vin_16 < (page.vin_limit*100) );
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        CLR     A
        ADD     A,R2
        MOV     R1,A
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        JNC     ??checkVin_15
        MOV     R2,#0x1
        SJMP    ??checkVin_16
??checkVin_15:
        MOV     R2,#0x0
??checkVin_16:
        MOV     A,R2
        MOV     R4,A
//  737         if( !ch255 && flag ){
        MOV     DPTR,#ch255
        MOVX    A,@DPTR
        JNZ     ??checkVin_17
        MOV     A,R4
        JZ      ??checkVin_18
//  738           /*
//  739             curChannel = page.channel = 255;   
//  740             page.use12kbod  = TRUE;   page.hoppingAllowed = FALSE;
//  741             page.useFEC     = FALSE;  page.is500Always = FALSE; 
//  742             page.isRelay    = FALSE;  page.searchCommunication = FALSE;
//  743             page.myBunch    =  0;   page.netId = 0;  page.vin_disable_radio = 0;
//  744             page.production = 0;
//  745             //page.fuseComm   = 0;    page.fuseOVOC = 0;
//  746             mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 ); 
//  747             page.syncword = 0xF0F0; page.edAddr = 2; page.gwAddr = 1;
//  748             ch255 = TRUE;   softKick();
//  749           */
//  750           switchTo255();
        ; Setup parameters for call to function switchTo255
        LCALL   switchTo255
        SJMP    ??checkVin_18
//  751         }else if( ch255 && !flag ){
??checkVin_17:
        MOV     A,R4
        JNZ     ??checkVin_18
//  752         BYTE curV255 = page.vin_limit;  
        MOV     A,R3
        MOV     R6,A
//  753             read_page(); 
        ; Setup parameters for call to function read_page
        LCALL   read_page
//  754             page.vin_limit = curV255;
        MOV     A,R6
        SJMP    ??checkVin_19
//  755             curChannel = page.channel;
//  756             softKick();
//  757         }
//  758     }else if( ch255 ){
??checkVin_14:
        MOV     DPTR,#ch255
        MOVX    A,@DPTR
        JZ      ??checkVin_18
//  759         BYTE curV255 = page.vin_limit;  
//  760         read_page();
        ; Setup parameters for call to function read_page
        LCALL   read_page
//  761         page.vin_limit = curV255;
        CLR     A
??checkVin_19:
        MOV     DPTR,#(page + 237)
        LCALL   ?Subroutine80
//  762         curChannel = page.channel;
??CrossCallReturnLabel_210:
        MOVX    @DPTR,A
//  763         softKick();
        ; Setup parameters for call to function softKick
        LCALL   softKick
//  764     }
//  765     #endif
//  766     
//  767     #ifdef MidString    
//  768     if( !ch255 && (safe_vin_16 > switchTo255Lim ) )        switchTo255(); // was 30000 for MS600, 60000 for MS1000 
//  769     else if( ch255 && ( safe_vin_16 < switchFrom255Lim ) ){                 // was 28500 for MS600, 57000 for MS1000
//  770         read_page();   
//  771         if( page.is500Always ) curChannel = page.starting500Channel; 
//  772         softKick();  
//  773     }
//  774     #endif
//  775     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??checkVin_18:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_10:
        JZ      $+5
        LJMP    ??checkVin_8
        LCALL   ?Subroutine12
??CrossCallReturnLabel_18:
        JZ      $+5
        LJMP    ??checkVin_8
//  776     
//  777     // temperature protection
//  778     _coeff = page.linearK[4];
        MOV     DPTR,#_coeff
        MOV     A,#((page + 72) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 72) >> 8) & 0xff)
        MOVX    @DPTR,A
//  779     t =  (INT16) lin_coeff_t( ((float)last[6]) * checkVref );
        ; Setup parameters for call to function lin_coeff_t
        MOV     DPTR,#(last + 12)
        LCALL   ?Subroutine13
??CrossCallReturnLabel_25:
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff_t
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  780     // removed UINT16, removed whole T_Superhot
//  781     if( page.t_mod_off && (t > ((INT16)page.t_mod_off)) ){ isSteppedDown = TRUE;  P1_4 = 0;  }   // Critical Temperature protection
        MOV     DPTR,#(page + 224)
        MOVX    A,@DPTR
        JZ      ??checkVin_20
        LCALL   ?Subroutine5
??CrossCallReturnLabel_337:
        JNC     ??checkVin_20
        MOV     A,#0x1
        MOV     DPTR,#isSteppedDown
        MOVX    @DPTR,A
        CLR     0x90.4
        LJMP    ??CrossCallReturnLabel_310
//  782     else 
//  783     if( page.fallback_time && page.fallback_time!=0xFF ){                                   // Temperature protection
??checkVin_20:
        MOV     DPTR,#(page + 227)
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_310
        MOV     A,#-0x1
        XRL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_310
//  784         if( checkVoutOnT )  checkVoutOnT--; 
        MOV     DPTR,#checkVoutOnT
        MOVX    A,@DPTR
        JNZ     ??checkVin_21
        INC     DPTR
        MOVX    A,@DPTR
??checkVin_21:
        JZ      ??checkVin_22
        MOV     DPTR,#checkVoutOnT
        LCALL   ?Subroutine51
??CrossCallReturnLabel_112:
        LJMP    ??checkVin_10
//  785         else{ 
//  786             checkVoutOnT = 8*(UINT16)page.fallback_time;
??checkVin_22:
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     DPTR,#checkVoutOnT
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  787             if( isSteppedDown ){
        MOV     DPTR,#isSteppedDown
        MOVX    A,@DPTR
        JZ      ??checkVin_23
//  788                 if( t < ((INT16)page.ton_fallback) ) {
        MOV     DPTR,#(page + 226)
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_327:
        JNC     ??checkVin_24
//  789                     if( !P1_4 ) ov_startup();   // module on, starting OV seq
        MOV     C,0x90.4
        JC      ??checkVin_25
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
//  790                     T3CC1 = oc2timer( theOC = setOC ); isSteppedDown = FALSE;
??checkVin_25:
        MOV     DPTR,#setOC
        MOVX    A,@DPTR
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        LCALL   ?Subroutine85
??CrossCallReturnLabel_309:
        CLR     A
        MOV     DPTR,#isSteppedDown
        LJMP    ??checkVin_10
//  791                 }else if( P1_4 && /*( t > t_prev ) &&*/ theOC ) T3CC1 = oc2timer( --theOC );  
??checkVin_24:
        MOV     C,0x90.4
        JNC     ??CrossCallReturnLabel_310
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_310
        DEC     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        SJMP    ??checkVin_26
//  792             }else  if( P1_4 && ( t > ((INT16)page.toff_fallback) ) ) {  
??checkVin_23:
        MOV     C,0x90.4
        JNC     ??CrossCallReturnLabel_310
        MOV     DPTR,#(page + 225)
        MOVX    A,@DPTR
        LCALL   ?Subroutine5
??CrossCallReturnLabel_338:
        JNC     ??CrossCallReturnLabel_310
//  793                 if( theOC > page.oc_protection ) theOC = page.oc_protection; else theOC--;
        MOV     DPTR,#(page + 230)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JNC     ??checkVin_27
        MOV     A,R3
        SJMP    ??checkVin_28
??checkVin_27:
        MOVX    A,@DPTR
        DEC     A
??checkVin_28:
        MOVX    @DPTR,A
//  794                 isSteppedDown = TRUE;   T3CC1 = oc2timer( theOC );  
        MOV     A,#0x1
        MOV     DPTR,#isSteppedDown
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
??checkVin_26:
        LCALL   ?Subroutine85
??CrossCallReturnLabel_310:
        LJMP    ??Subroutine124_1
        CFI EndBlock cfiBlock52
        REQUIRE _A_P1
        REQUIRE T3CC1
//  795             }
//  796 //            #ifdef MidString
//  797 //            compute98();
//  798 //            #endif
//  799         }
//  800     } 
//  801     #ifdef MidString
//  802     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
//  803     if( page.shortCircuitLevel && P1_4 ){ // module on and shortCircuitLevel is not 0
//  804         UINT16 vout; 
//  805         _coeff = page.linearK[0]; vout = convU( lin_coeff( ((float) last[0])*checkVref ) );
//  806         if( ocShortCircuitLimit < 255 ){ // Short Circuit Protection is currently ON
//  807           if( vout > shortCircuitProtectionOff ) // was 8000 - 160V on Midstring 600V, 16000 (320 V) on MS1000 turning Short Circuit Protection OFF
//  808               { ocShortCircuitLimit = 255;  T3CC1 = oc2timer( theOC );  }  
//  809         }else{                           // Short Circuit Protection is currently OFF
//  810           if( vout < shortCircuitProtectionOn ) // was 6000 - 120V on Midstring 600V, was 1200 for MS1000, turning Short Circuit Protection ON
//  811               { ocShortCircuitLimit = page.shortCircuitLevel;  T3CC1 = oc2timer( theOC );  }  
//  812         }
//  813     }else ocShortCircuitLimit = 255;  // if module OFF -> no Short Circuit Protection, turning it OFF
//  814     #endif    
//  815     
//  816     /* temporary commented for version 7a !!!
//  817     // noise amplifier reset - MidString only
//  818     #ifdef MidString
//  819     static INT8 noiseAmplCnt = 0;
//  820     if( page.mpp && ( P1_3 || (noiseAmplCnt > -1) ) ) {
//  821         UINT16 vout; INT16 cur; BOOL noiseAmplResetRequired;
//  822         _coeff = page.linearK[0]; vout = convU( lin_coeff( ((float) last[0])*checkVref ) );
//  823         _coeff = page.linearK[2]; cur  = convS( lin_coeff( ((float) last[2])*checkVref ) );
//  824         
//  825         noiseAmplResetRequired  = page.k_oc_cur  && (page.k_oc_cur  != 0xFF) && ( cur  > Cur98  );
//  826         noiseAmplResetRequired |= page.k_ov_volt && (page.k_ov_volt != 0xFF) && ( vout > Vout98 );
//  827         
//  828         if( noiseAmplResetRequired ){
//  829           // reset error amplifier once a second, for one mpp period
//  830           if( noiseAmplCnt <= 0 ){ P1_3 = 0; noiseAmplCnt = 0; }
//  831           if( noiseAmplCnt == 1 ){ P1_3 = page.mpp;  }
//  832         }else{ P1_3 = page.mpp; } // mpp on
//  833     }
//  834     noiseAmplCnt = (noiseAmplCnt+1)%8;
//  835     #endif
//  836     */
//  837 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine85:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_309
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_310
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_311
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        MOV     R1,A
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
        REQUIRE ?Subroutine113
        ; // Fall through to label ?Subroutine113

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine113:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_309
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_310
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_311
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_312
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_307
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_308
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        LCALL   oc2timer
        MOV     A,R1
        MOV     0xcf,A
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_136
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOV     DPTR,#(page + 134)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 15)
??Subroutine60_0:
        LCALL   ?Subroutine100
??CrossCallReturnLabel_266:
        MOV     A,R0
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66
        CFI EndBlock cfiCond67

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_126
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_127
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        CLR     A
        ADD     A,R2
        MOV     R1,A
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_337
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_338
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        CLR     C
        SUBB    A,R2
        CLR     A
        SUBB    A,R3
        LJMP    ?Subroutine117
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77

        RSEG XDATA_Z:XDATA:NOROOT(0)
??oscCondition:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  838 //#ifdef MidString
//  839 //void compute98(){ // computed from values taken from ITF midstrings on Sep. 25
//  840 //    Cur98  = convS( (((float)page.k_oc_cur)  * ( 4670 + 38.6*((float)theOC) ))  * 0.005 );
//  841 //    Vout98 = convU( (((float)page.k_ov_volt) * ( 68.2*((float)T3CC0) + 10680 )) * 0.005 );
//  842 //}
//  843 //#endif

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  844 BOOL checkItOut( BOOL *flag_ptr ){
checkItOut:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI Function checkItOut
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  845   if( *flag_ptr ){ *flag_ptr = FALSE; return TRUE; }
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??checkItOut_0
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
        SJMP    ??checkItOut_1
//  846   return FALSE;
??checkItOut_0:
        MOV     R1,#0x0
??checkItOut_1:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock78
//  847 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  848 UINT16 *ptr2RunningTick = NULL;
ptr2RunningTick:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  849 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  850 UINT16 computeTI(UINT16 _pt)
computeTI:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function computeTI
//  851 //    { return ( ( _pt <= (*ptr2RunningTick) ) ? ((*ptr2RunningTick) - _pt) : ((*ptr2RunningTick) + (65535 - _pt)) ); } 
//  852       { return ( ( (_pt&0xFF) <= *((BYTE *)0xF538) ) ? (*((BYTE *)0xF538) - (0xFF&_pt)) : (*((BYTE *)0xF538) + (255 - (0xFF&_pt))) ); } 
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,#-0x1
        ANL     A,R2
        MOV     R0,A
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOVX    A,@DPTR
        JC      ??computeTI_0
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        CLR     A
        SJMP    ??computeTI_1
??computeTI_0:
        MOV     R2,A
        MOV     A,#-0x1
        ADD     A,R2
        DEC     R2
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R3
??computeTI_1:
        SUBB    A,#0x0
        MOV     R3,A
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock79

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  853 void tickWait(BYTE wait){ 
tickWait:
        CFI Block cfiBlock80 Using cfiCommon0
        CFI Function tickWait
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  854     ticks[ TickWait ] = ( (INT16)wait ) + 1; //(reset of watchdog should be only in one place)
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     ?V0 + 0,R1
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine68_0
??CrossCallReturnLabel_171:
        SJMP    ??tickWait_0
//  855     while( ticks[ TickWait ] > 0 ){ P1_2 ^= 1; };//{ WDCTL = 0xA8;  WDCTL = 0x58; *((BYTE *)0xFFFF) = 0x10; } 
??tickWait_1:
        XRL     0x90,#0x4
        MOV     A,0x90
??tickWait_0:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??tickWait_1
//  856     ticks[ TickWait ] = 0;
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ?Subroutine125
        CFI EndBlock cfiBlock80
        REQUIRE _A_P1
//  857 }
//  858 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  859 void checkMore(){
checkMore:
        CFI Block cfiBlock81 Using cfiCommon0
        CFI Function checkMore
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  860 BYTE i; UINT16 j; BOOL go8k = FALSE;
//  861     P1_4 = 0;   P1DIR = 0xDB;    // module off
        CLR     0x90.4
        MOV     0xfe,#-0x25
//  862     for( i = 0; (i<15); i++ ){ // the self check
        MOV     R6,#0x0
//  863         BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
??checkMore_0:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine84
//  864         BOOL flag = TRUE; 
//  865         *((BYTE *)0xFFFF) = 0x10;
//  866         for( j = 0; flag && (j < 0x400); j++ ) flag = ( (*ptr++)==0xFF );
??CrossCallReturnLabel_224:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??checkMore_1
        MOV     R2,#0x1
        SJMP    ??checkMore_2
??checkMore_1:
        MOV     R2,#0x0
??checkMore_2:
        LCALL   ?Subroutine86
??CrossCallReturnLabel_226:
        JZ      ??checkMore_3
        CLR     C
        MOV     A,R5
        SUBB    A,#0x4
        JC      ??CrossCallReturnLabel_224
//  867         go8k |= flag;
//  868     }
??checkMore_3:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0xf
        JC      ??checkMore_0
//  869     //if( go8k ) {void (*f)( void ) = ( void (*)( void ) )0x603F; (*f)();} // commented jump to 8k image, Feb 12 2014, 16:35
//  870 }
        SJMP    ??Subroutine125_0
        CFI EndBlock cfiBlock81
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine125:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOVX    @DPTR,A
??Subroutine125_0:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock82
//  871 
//  872 //void reset(void){ WDCTL = 0x8 | 0x3; while( TRUE ) halWait( 10 ); }
//  873 //BOOL dec( UINT16 *cntPtr ) { return ((*cntPtr) && (--(*cntPtr) == 0 ))?TRUE:FALSE; }

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  874 BOOL dec( UINT16 *cntPtr ){ --(*cntPtr); return (*((BYTE *)cntPtr)==0)?TRUE:FALSE; }
`dec`:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function `dec`
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine51
??CrossCallReturnLabel_113:
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??dec_0
        MOV     R1,#0x1
        SJMP    ??dec_1
??dec_0:
        MOV     R1,#0x0
??dec_1:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock83

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond84 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_112
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond85) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond85) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond85) CFA_SP SP+-4
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        LCALL   ?Subroutine102
??CrossCallReturnLabel_271:
        RET
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine102:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_271, ??CrossCallReturnLabel_112
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_271, ??CrossCallReturnLabel_113
        CFI (cfiCond89) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond89) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond89) CFA_SP SP+-4
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_271, ??CrossCallReturnLabel_114
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_270, ??CrossCallReturnLabel_110
        CFI (cfiCond91) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond91) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond91) CFA_SP SP+-4
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_270, ??CrossCallReturnLabel_111
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93
//  875 /******************************************************************************
//  876 * @fn  main
//  877 * @brief
//  878 *      Main function. Triggers setup menus and main loops for both receiver
//  879 *      and transmitter. This function supports both CC1110 and CC2510.
//  880 * Parameters:
//  881 * @param  void
//  882 * @return void
//  883 ******************************************************************************/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  884 BYTE sleepCounter = 5, saved_channel;
sleepCounter:
        DS 1
        REQUIRE `?<Initializer for sleepCounter>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
saved_channel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  885 //void goSleep( void ){ if( sleepCounter && (--sleepCounter==0) && si->radioMode == RADIO_MODE_UNDEF ) PCON |= 1; }
//  886 //static BYTE fakeBuf[ 2 ] = { 4, 0xFE };

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  887 static BOOL   wasAHardResetOrPowerOn = TRUE;//, need_wiggle = FALSE, was_wiggling = FALSE;
wasAHardResetOrPowerOn:
        DS 1
        REQUIRE `?<Initializer for wasAHardResetOrPowerOn>`
        REQUIRE __INIT_XDATA_I
//  888 //void readNextValueScheduled(void);
//  889 /*
//  890 void switch2parking( BYTE j ){
//  891      CHANNR = parking_channels[j]; 
//  892      //FSCAL3 = fscal_parking[j][0];         FSCAL2 = fscal_parking[j][1];          FSCAL1 = fscal_parking[j][2];
//  893      mymemcpy( FSCAL3_ADDR, fscal_parking[j], 3 );
//  894      tickWait( 0 );
//  895 }
//  896 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  897 UINT16 milliSeconds = 0;
milliSeconds:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  898 BYTE   seconds = 0, minutes = 0;
seconds:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
minutes:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  899 BYTE was_repeater = 0;
was_repeater:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  900 void main_loop(void){
main_loop:
        CFI Block cfiBlock94 Using cfiCommon0
        CFI Function main_loop
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, prepareJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, parseGWPackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, computeADCs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, switchTo255
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, hop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, kickOsc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, hop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, prepareData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  901 BYTE idx, cwCnt = 1; 
//  902 static BYTE xored = 1;
//  903     //while( cwCnt -- ){
//  904         //*((BYTE *)0xFFFF) = 0x20;
//  905         for( idx = 0; idx < N_Of_Flags; idx ++ ){
        MOV     R6,#0x0
//  906             if( flags[ idx ] ){
??main_loop_0:
        MOV     A,R6
        MOV     R0,A
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,R0
        LCALL   ?Subroutine43
??CrossCallReturnLabel_81:
        JNZ     $+5
        LJMP    ??main_loop_1
//  907                 flags[ idx ] = FALSE;
        CLR     A
        MOVX    @DPTR,A
//  908                 switch( idx ){
        MOV     A,R6
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for main_loop>_0`:
        DATA
        DB        0
        DB        5
        DB        1
        DW        ??main_loop_2
        DB        2
        DW        ??main_loop_3
        DB        3
        DW        ??main_loop_4
        DB        9
        DW        ??main_loop_5
        DB        11
        DW        ??main_loop_6
        DW        ??main_loop_7
        CODE
//  909                     case DataSent:
//  910                         rc();
//  911                         //P1_1 = 0;
//  912                         //P1_1 ^= 1;
//  913                         //while( real_cw_mode ) tickWait( 1 ); 
//  914                         //if( checkItOut(&cleanTxBuffer ) ) radioPktBufferTx[0] = 0; //cleanTxBuffer = FALSE; 
//  915                         //if( was_wiggling ) was_wiggling = FALSE; CHANNR = saved_channel;  MCSM0 = 0x14; }
//  916                         /*
//  917                         if( page.wiggle_dchan && need_wiggle ){
//  918                            setupTxBuffer( fakeBuf );
//  919                            INT_GLOBAL_ENABLE( INT_OFF ); 
//  920                               was_wiggling = TRUE; 
//  921                               saved_channel = CHANNR; MCSM0 = 0x04; // no calibration
//  922                               CHANNR ^= page.wiggle_dchan;
//  923                               si->radioMode = RADIO_MODE_TX;        
//  924                               atomicChange( CheckFlag, TICKS_IN_MS );
//  925                               DMAARM = DMAARM_CHANNEL1;        // Arm DMA channel 1
//  926                               //RFST   = STROBE_TX;            // Switch radio to TX
//  927                               need_wiggle = FALSE; 
//  928                            INT_GLOBAL_ENABLE( INT_ON ); 
//  929                         }else{
//  930                           // switching transmission off
//  931                           if( was_wiggling ) { CHANNR = saved_channel;   MCSM0 = 0x14; }
//  932                           if(      page.isRelay && (!page.is500Always) ) setupRepeater( TRUE ); 
//  933                           else if( page.stay_in_rx )                     receive();
//  934                         }
//  935                         */
//  936                         //if(  page.isRelay && (!page.is500Always) ) setupRepeater( got_gw ); 
//  937                         //else                                       setupRepeater( FALSE ); 
//  938                         ////was_repeater = 0;
//  939                         //receive();
//  940                         //P1_4 = 1;  // debug line !!!
//  941                         if( was_listening )                           { setupRepeater( FALSE );   receive(); }
??main_loop_3:
        MOV     DPTR,#was_listening
        MOVX    A,@DPTR
        JZ      ??main_loop_8
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
??main_loop_9:
        LCALL   setupRepeater
        ; Setup parameters for call to function receive
        LCALL   receive
        LJMP    ??main_loop_7
//  942                         else if( page.isRelay && (!page.is500Always) ){ setupRepeater( got_gw );  receive(); }
??main_loop_8:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        JZ      $+5
        LJMP    ??main_loop_7
        ; Setup parameters for call to function setupRepeater
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??main_loop_9
//  943                     break;
//  944                     
//  945                     case PrepareJoin:       prepareJoinRequest( );                  break;
??main_loop_4:
        ; Setup parameters for call to function prepareJoinRequest
        LCALL   prepareJoinRequest
        LJMP    ??main_loop_7
//  946                     /*
//  947                     case PrepareData:       prepareData();     // here most of the time is spent
//  948                                             processingTime = computeTI( pt ); //( pt <= si->runningTick ) ? (si->runningTick - pt) : (si->runningTick + (65535-pt));
//  949                     break;
//  950                     */
//  951                     case PackageReceived:   /*P1_4 = 1;*/ parseGWPackage(); /*P1_4 = 0;*/  break; // P1_4  is a debug added on Feb 22 2014, should be removed
??main_loop_2:
        ; Setup parameters for call to function parseGWPackage
        LCALL   parseGWPackage
        LJMP    ??main_loop_7
//  952                     case AltCheckVin:     // was 8
//  953                       //if( ( ticks[SendData] > 14*TICKS_IN_MS ) || ( ticks[SendData] == 0 ) ) computeADCs( FALSE, TRUE ); //checkVin();
//  954                       if( ( PKTSTATUS & 0x4 ) && ( ( MARCSTATE > 0xC ) && ( MARCSTATE < 0x10 ) ) ) flags[AltCheckVin] = TRUE; // receving a packet
??main_loop_6:
        MOV     DPTR,#-0x20c4
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??main_loop_10
        MOV     DPTR,#-0x20c5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xd
        JC      ??main_loop_10
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x10
        JNC     ??main_loop_10
??main_loop_11:
        LCALL   ?Subroutine17
??CrossCallReturnLabel_30:
        SJMP    ??main_loop_12
//  955                       else if( flags[PackageReceived] || flags[DataSent] )                         flags[AltCheckVin] = TRUE; // receving a packet
??main_loop_10:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_11:
        JNZ     ??main_loop_11
        LCALL   ?Subroutine12
??CrossCallReturnLabel_19:
        JNZ     ??main_loop_11
//  956                       else if( ( ( ticks[SendData]      > 14*TICKS_IN_MS ) || ( ticks[SendData] == 0 ) ) &&
//  957                           ( ( ticks[DelayedPrepareData] > 14*TICKS_IN_MS ) || ( ticks[DelayedPrepareData] == 0 ) ) ) 
        LCALL   ?Subroutine33
??CrossCallReturnLabel_62:
        LCALL   ?Subroutine0
??CrossCallReturnLabel_328:
        JNC     ??main_loop_13
        MOV     A,R0
        JNZ     ??main_loop_14
        MOV     A,R1
??main_loop_14:
        JNZ     ??main_loop_11
??main_loop_13:
        LCALL   ?Subroutine44
??CrossCallReturnLabel_83:
        LCALL   ?Subroutine0
??CrossCallReturnLabel_329:
        JNC     ??main_loop_15
        MOV     A,R0
        JNZ     ??main_loop_16
        MOV     A,R1
??main_loop_16:
        JNZ     ??main_loop_11
//  958                             computeADCs( FALSE, TRUE ); //checkVin();
??main_loop_15:
        ; Setup parameters for call to function computeADCs
        MOV     R2,#0x1
        MOV     R1,#0x0
        LCALL   computeADCs
//  959                       else                                                       flags[AltCheckVin] = TRUE;
//  960                       if( (((INT16)adcs16[ 2 ]) < page.cur_noise ) ){ T3CC1 = theOC = 0; atomicChange( OcRamp, TICKS_IN_SEC ); }
??main_loop_12:
        MOV     DPTR,#(page + 232)
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_153:
        MOV     DPH,#(((adcs16 + 4) >> 8) & 0xff)
        MOV     DPL,#((adcs16 + 4) & 0xff)
        LCALL   ?Subroutine57
??CrossCallReturnLabel_340:
        JC      $+5
        LJMP    ??main_loop_7
        CLR     A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        MOV     0xcf,#0x0
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_90:
        LCALL   ??Subroutine104_0
??CrossCallReturnLabel_373:
        LJMP    ??main_loop_17
//  961                     break;
//  962                     case Cycle:
//  963                             //if( bunchCount ) bunchCount--;
//  964                             /*
//  965                             if( enable2SendData && ( curBunch != 255 ) ){ 
//  966                                 if( (curBunch == maxBunch) && zeroPackageWasNotReceived ){ 
//  967                                     BYTE k;
//  968                                     //computeADCs( page.is500Always, TRUE ); 
//  969                                     for( k = 0; k <= maxBunch; k++ ){ ms += lastCycle; if( ms > 1000 ){ utc++; ms-= 1000; } }
//  970                                     lastRssi = 0; 
//  971                                     prepareData();
//  972                                     curBunch = 0; 
//  973                                 } else curBunch++; 
//  974                                 zeroPackageWasNotReceived = TRUE;
//  975                             }
//  976                             */
//  977                             if( dec( &cycles2SoftKick )  ){ softKick();  cycles2SoftKick  = page.defCycles2SoftKick;  }//cyclesDefaults[4]; } // page.defCycles2SoftKick;  }
??main_loop_5:
        ; Setup parameters for call to function dec
        MOV     R2,#(cycles2SoftKick & 0xff)
        MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_74
        ; Setup parameters for call to function softKick
        LCALL   softKick
        LCALL   ?Subroutine39
//  978                             if( cycles2HardKick < 10 ){ switchTo255(); ch255 = FALSE; }
??CrossCallReturnLabel_74:
        MOV     DPTR,#cycles2HardKick
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0xa
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??CrossCallReturnLabel_223
        ; Setup parameters for call to function switchTo255
        LCALL   ?Subroutine83
//  979                             //if( dec( &cycles2HardKick ) /* && page.production */){
//  980                             //    reset();  // a reset
//  981                             //}
//  982                             if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
??CrossCallReturnLabel_223:
        LCALL   ?Subroutine16
??CrossCallReturnLabel_28:
        JC      ??main_loop_18
        CLR     A
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    @DPTR,A
        SJMP    ??main_loop_19
//  983                             /**/
//  984                             if( (!wasAHardResetOrPowerOn) && page.searchCommunication ){
??main_loop_18:
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??main_loop_7
??main_loop_19:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      $+5
        LJMP    ??main_loop_7
//  985                                 if( page.is500Always ){
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_loop_20
//  986                                     if( dec( &cyclesTo10 ) ) { 
        ; Setup parameters for call to function dec
        MOV     R2,#(cyclesTo10 & 0xff)
        MOV     R3,#((cyclesTo10 >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_21
//  987                                         cyclesTo500 = page.defCyclesTo500;  cycles2Step10Channel = page.defCyclesToStep10Channel;
        LCALL   ?Subroutine11
//  988                                         //cyclesTo500 = cyclesDefaults[0];  cycles2Step10Channel = cyclesDefaults[3];
//  989                                         page.is500Always = FALSE; //cycles2Step10Channel = page.defCyclesToStep10Channel;
??CrossCallReturnLabel_15:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
        LCALL   ?Subroutine80
//  990                                         setupRadio( curChannel = page.channel );
??CrossCallReturnLabel_211:
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
??main_loop_22:
        MOV     R1,A
        LCALL   setupRadio
        SJMP    ??main_loop_7
//  991                                     }else if( dec( &cyclesToStep500Channel ) ) { 
??main_loop_21:
        ; Setup parameters for call to function dec
        MOV     R2,#(cyclesToStep500Channel & 0xff)
        MOV     R3,#((cyclesToStep500Channel >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_7
//  992                                         cyclesToStep500Channel = page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
        LCALL   ?Subroutine40
//  993                                         page.starting500Channel = curChannel = (curChannel + page.repStep) % 250;
??CrossCallReturnLabel_76:
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#(page + 222)
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#-0x6
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 218)
        SJMP    ??CrossCallReturnLabel_211
//  994                                         setupRadio( curChannel );
//  995                                     }
//  996                                 }else{
//  997                                     if( dec( &cyclesTo500 ) ) { 
??main_loop_20:
        ; Setup parameters for call to function dec
        MOV     R2,#(cyclesTo500 & 0xff)
        MOV     R3,#((cyclesTo500 >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_23
//  998                                         cyclesTo10 = page.defCyclesTo10;    cycles2Step10Channel = 0;
        LCALL   ?Subroutine41
??CrossCallReturnLabel_78:
        MOV     DPTR,#cycles2Step10Channel
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine76
//  999                                         //cyclesTo10 = cyclesDefaults[1];    cycles2Step10Channel = 0;
// 1000                                         page.is500Always = TRUE; cyclesToStep500Channel = page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
??CrossCallReturnLabel_204:
        SETB    0xE0 /* A   */.6
        LCALL   ?Subroutine22
// 1001                                         if( page.starting500Channel == 0xFF ) page.starting500Channel = page.channel;
??CrossCallReturnLabel_41:
        XRL     A,#0xff
        JNZ     ??main_loop_24
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 218)
        MOVX    @DPTR,A
// 1002                                         curChannel = page.starting500Channel;
??main_loop_24:
        MOVX    A,@DPTR
        LCALL   ?Subroutine8
// 1003                                         ticks[ Hop ] = 0;
// 1004                                         setupRadio( curChannel );
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        SJMP    ??main_loop_22
// 1005                                     }else if( dec( &cycles2Step10Channel ) ){
??main_loop_23:
        ; Setup parameters for call to function dec
        MOV     R2,#(cycles2Step10Channel & 0xff)
        MOV     R3,#((cycles2Step10Channel >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_7
// 1006                                         //hop(); 
// 1007                                         CHANNR = curChannel; hop(); curChannel = CHANNR; 
        LCALL   ?Subroutine45
// 1008                                         cycles2Step10Channel = page.defCyclesToStep10Channel;// cyclesDefaults[3];//page.defCyclesToStep10Channel;
??CrossCallReturnLabel_85:
        LCALL   ?Subroutine63
??CrossCallReturnLabel_148:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??main_loop_17:
        MOVX    @DPTR,A
// 1009                                     }
// 1010                                 }
// 1011                             }
// 1012                             /**/
// 1013                     break;
// 1014                 } // switch
// 1015                 if( flags[ PackageReceived ] || flags[DataSent] ) break;
??main_loop_7:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_12:
        JNZ     ??main_loop_25
        LCALL   ?Subroutine12
??CrossCallReturnLabel_20:
        JNZ     ??main_loop_25
// 1016             } // if( flags )
// 1017         }// after the whole for cycle
??main_loop_1:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x10
        JNC     $+5
        LJMP    ??main_loop_0
// 1018     //} // while
// 1019   //  *((BYTE *)0xFFFF) = 0x20;
// 1020     for( idx = 0; idx < N_Of_Ticks; idx++ ){
??main_loop_25:
        MOV     R6,#0x0
// 1021         //INT_GLOBAL_ENABLE( INT_OFF ); 
// 1022         if( ticks[ idx ] < 0 ){
??main_loop_26:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     C
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_330:
        JC      $+5
        LJMP    ??main_loop_27
// 1023             ticks[ idx ] = 0;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine77
// 1024             //INT_GLOBAL_ENABLE( INT_ON ); 
// 1025             switch( idx ){
??CrossCallReturnLabel_378:
        ADD     A,#0x1e
        LCALL   ?Subroutine62
??CrossCallReturnLabel_141:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for main_loop>_1`:
        DATA
        DB        2
        DB        13
        DW        ??main_loop_27
        DW        ??main_loop_28
        DW        ??main_loop_29
        DW        ??main_loop_30
        DW        ??main_loop_31
        DW        ??main_loop_32
        DW        ??main_loop_33
        DW        ??main_loop_34
        DW        ??main_loop_35
        DW        ??main_loop_36
        DW        ??main_loop_37
        DW        ??main_loop_27
        DW        ??main_loop_38
        DW        ??main_loop_27
        DW        ??main_loop_39
        CODE
// 1026                 //case Reset: reset();
// 1027                 case FeedTheDog:    
// 1028                     WDCTL = 0xA8;  WDCTL = 0x58;  ticks[ FeedTheDog ] = _dogFeeding;          
??main_loop_28:
        MOV     0xc9,#-0x58
        MOV     0xc9,#0x58
        LCALL   ?Subroutine34
??CrossCallReturnLabel_64:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LJMP    ??CrossCallReturnLabel_3
// 1029                 break;
// 1030                 case SendData:
// 1031                     if( !bunchCount ) break;
??main_loop_29:
        MOV     DPTR,#bunchCount
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_27
// 1032                     if( bunchCount ) bunchCount--;
        DEC     A
        MOVX    @DPTR,A
// 1033                     *((BYTE *)0xF538) = 0;
        CLR     A
        MOV     DPTR,#-0xac8
        MOVX    @DPTR,A
// 1034                     was_repeater = ( ADDR == page.gwAddr );
        MOV     DPTR,#-0x20fb
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??main_loop_40
        MOV     R2,#0x1
        SJMP    ??main_loop_41
??main_loop_40:
        MOV     R2,#0x0
??main_loop_41:
        MOV     A,R2
        MOV     DPTR,#was_repeater
        MOVX    @DPTR,A
// 1035                     if( packagePrepared ){
        MOV     DPTR,#packagePrepared
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_27
// 1036                         if( !was_repeater )  was_listening = (si->radioMode == RADIO_MODE_RX);
        MOV     DPTR,#was_repeater
        MOVX    A,@DPTR
        JNZ     ??main_loop_42
        LCALL   ?Subroutine36
??CrossCallReturnLabel_68:
        XRL     A,#0x20
        JNZ     ??main_loop_43
        MOV     R2,#0x1
        SJMP    ??main_loop_44
??main_loop_43:
        MOV     R2,#0x0
??main_loop_44:
        MOV     A,R2
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
// 1037                         //if( reportScaling ){         reportScaling--; if( !reportScaling ) base_ptr = NULL; }
// 1038                         if( isCalibrationPackage && reportScaling ){ isCalibrationPackage--; reportScaling--; if( !reportScaling ) base_ptr = NULL; }
??main_loop_42:
        MOV     DPTR,#isCalibrationPackage
        MOVX    A,@DPTR
        JZ      ??main_loop_45
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      ??main_loop_45
        MOV     DPTR,#isCalibrationPackage
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??main_loop_46
        MOV     DPTR,#base_ptr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??main_loop_47
// 1039                         else if( reportFlashCheck )  reportFlashCheck--;
??main_loop_45:
        MOV     DPTR,#reportFlashCheck
        MOVX    A,@DPTR
        JZ      ??main_loop_46
        DEC     A
??main_loop_47:
        MOVX    @DPTR,A
// 1040                         //P1_4 = 0;
// 1041                         //P1_1 = 0;
// 1042                         sendData( radioPktBufferTx, FALSE );  //cleanTxBuffer = TRUE; 
??main_loop_46:
        ; Setup parameters for call to function sendData
        MOV     R1,#0x0
        MOV     R2,#(radioPktBufferTx & 0xff)
        MOV     R3,#((radioPktBufferTx >> 8) & 0xff)
        LCALL   sendData
// 1043                         //P1_1 = 1;
// 1044                         if( page.gbunch && ( ( page.gbunch <= 7 ) || ( page.rbunch <= 7 ) ) ){
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     R2,A
        JNZ     $+5
        LJMP    ??main_loop_27
        MOV     DPTR,#(page + 157)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??main_loop_48
        MOV     A,R3
        CLR     C
        SUBB    A,#0x8
        JC      $+5
        LJMP    ??main_loop_27
// 1045                             BYTE b; 
// 1046                             if( page.rbunch && ( page.rbunch < page.gbunch ) ) b = page.rbunch; else b = page.gbunch;
??main_loop_48:
        MOV     A,R3
        JZ      ??main_loop_49
        CLR     C
        SUBB    A,R2
        JNC     ??main_loop_49
        MOV     ?V0 + 0,R3
        SJMP    ??main_loop_50
??main_loop_49:
        MOV     ?V0 + 0,R2
// 1047                             if( page.use12kbod ){ if( b <= 18 ) atomicChange( SendData, lastCycle*b - 1 -*((BYTE *)0xF538)-xored); } // was 3
??main_loop_50:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x6
        LCALL   ?Subroutine30
??CrossCallReturnLabel_57:
        JNC     ??main_loop_51
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x13
        JNC     ??main_loop_52
        LCALL   ?Subroutine15
??CrossCallReturnLabel_26:
        MOV     A,#-0x1
        ADD     A,R2
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R3
        SJMP    ??main_loop_53
// 1048                             else{                 if( b == 1 )  atomicChange( SendData, lastCycle   - 1 -*((BYTE *)0xF538)-xored); } // was 3
??main_loop_51:
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??main_loop_52
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
??main_loop_53:
        MOV     R3,A
        LCALL   ?Subroutine61
??CrossCallReturnLabel_139:
        SUBB    A,#0x0
        LCALL   ?Subroutine3
??CrossCallReturnLabel_2:
        MOVX    @DPTR,A
// 1049                             xored ^= 1;
??main_loop_52:
        MOV     DPTR,#??xored
        MOVX    A,@DPTR
        XRL     A,#0x1
        LJMP    ??CrossCallReturnLabel_3
// 1050                         }
// 1051                     }//else flags[ DataSent ] = 1;
// 1052                 break;
// 1053                 case BypassMode:        P1_3 = 0;                                                   break;
??main_loop_31:
        CLR     0x90.3
        LJMP    ??main_loop_27
// 1054                 case TurnOn:            
// 1055 #ifdef MIDSTRING 
// 1056 		  if (fetFailure == FALSE)
// 1057 		    {
// 1058 		      turnOnFlag = TRUE;
// 1059 		    }
// 1060 #else
// 1061                     if( page.ov == T3CC0 ) P1_4 = 1; else turnOnFlag = TRUE;                                          
??main_loop_36:
        MOV     A,0xcd
        XRL     A,R4
        JNZ     ??main_loop_54
        SETB    0x90.4
        LJMP    ??main_loop_27
??main_loop_54:
        MOV     A,#0x1
        MOV     DPTR,#turnOnFlag
        LJMP    ??CrossCallReturnLabel_3
// 1062 #endif
// 1063                 break;                
// 1064                 case Init:              //init_board();                                               
// 1065                     if( (!page.mpp) && page.module ){
??main_loop_32:
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        JNZ     ??main_loop_55
        MOV     DPTR,#(page + 186)
        MOVX    A,@DPTR
        JZ      ??main_loop_55
// 1066                         P1_3 = 1;  /*P1 |= 0x18;*/ atomicChange( BypassMode, TICKS_IN_SEC ); // switching mpp on and switching it off (bypass mode) only after delay
        SETB    0x90.3
        LCALL   ?Subroutine14
??CrossCallReturnLabel_372:
        SJMP    ??main_loop_56
// 1067                     }else P1_3 = page.mpp;
??main_loop_55:
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.3,C
// 1068                     if( page.module ) ov_startup();
??main_loop_56:
        MOV     DPTR,#(page + 186)
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_27
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        LJMP    ??main_loop_27
// 1069                 break;
// 1070                 /*
// 1071                 case CheckFlag:         if( si->radioMode == RADIO_MODE_TX ){
// 1072                     INT_GLOBAL_ENABLE( INT_OFF ); 
// 1073                         si->radioMode = RADIO_MODE_UNDEF; 
// 1074                         RFIF &= ~IRQ_DONE; S1CON &= ~0x03;  RFIM = IRQ_DONE; 
// 1075                         RFST = STROBE_IDLE;
// 1076                         DMAARM = 0x80 | DMAARM_CHANNEL1;
// 1077                         flags[ DataSent ] = TRUE;
// 1078                     INT_GLOBAL_ENABLE( INT_ON ); 
// 1079                 } break;
// 1080                 */
// 1081 	    case OscEvent:
// 1082 	      if( ( ticks[ OvStartup ] == 0 )
// 1083 		  && ( page.oscLowCurrentLimitInmA != 0 )
// 1084 		  && ( page.oscLowCurrentLimitInmA != 0xFFFF ) )
??main_loop_33:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0xe
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??main_loop_57
        INC     DPTR
        MOVX    A,@DPTR
??main_loop_57:
        JNZ     ??main_loop_58
        LCALL   ?Subroutine60
??CrossCallReturnLabel_137:
        JNZ     ??main_loop_59
        MOV     A,R1
??main_loop_59:
        JZ      ??main_loop_58
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??main_loop_60
        MOV     A,#-0x1
        XRL     A,R1
??main_loop_60:
        JZ      ??main_loop_58
// 1085 		switch( oscWhatToWaitFor )
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for main_loop>_2`:
        DATA
        DB        21
        DB        2
        DW        ??main_loop_58
        DW        ??main_loop_61
        DW        ??main_loop_62
        DW        ??main_loop_63
        CODE
// 1086 		  {
// 1087 		  case SetOscLowCurrentOnlyDelay:
// 1088 		    kickOsc();
??main_loop_63:
        ; Setup parameters for call to function kickOsc
        LCALL   kickOsc
        LJMP    ??main_loop_27
// 1089 		    break;
// 1090 		  case SetOscAfterStartupDelay:
// 1091 		    oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
??main_loop_62:
        MOV     A,#0x17
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    @DPTR,A
// 1092 		    ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
        MOV     DPTR,#(page + 142)
        LCALL   ?Subroutine35
// 1093 		    P1_3 = page.mpp;
??CrossCallReturnLabel_66:
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.3,C
        LJMP    ??main_loop_27
// 1094 		    break;
// 1095 		  case SetOscOVStartupDelay:
// 1096 		    if( T3CC0 < page.ov )
??main_loop_61:
        MOV     A,0xcd
        CLR     C
        SUBB    A,R4
        JNC     ??main_loop_64
// 1097 		      {
// 1098 			T3CC0 = T3CC0+1;
        INC     0xcd
        MOV     A,0xcd
// 1099 			ticks[OscEvent] = page.oscOVStartupDelay;
        MOV     DPTR,#(page + 138)
??main_loop_65:
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_154:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LJMP    ??CrossCallReturnLabel_3
// 1100 		      }
// 1101 		    else
// 1102 		      {
// 1103 			oscWhatToWaitFor = SetOscAfterStartupDelay;
??main_loop_64:
        MOV     A,#0x16
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    @DPTR,A
// 1104 			ticks[OscEvent]= page.oscAfterStartupDelay;
        MOV     DPTR,#(page + 140)
        SJMP    ??main_loop_65
// 1105 		      }
// 1106 		    break;
// 1107 		  default:
// 1108 		    oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
??main_loop_58:
        MOV     A,#0x17
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    @DPTR,A
// 1109 		    ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
        MOV     DPTR,#(page + 142)
        SJMP    ??main_loop_65
// 1110 		    break;
// 1111 		  }
// 1112 	      else
// 1113 		{
// 1114 		  oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
// 1115 		  ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
// 1116 		}
// 1117 	      break;
// 1118 
// 1119                 case Hop: if( page.hoppingAllowed && !page.is500Always ){
??main_loop_34:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x50
        XRL     A,#0x10
        JNZ     ??main_loop_30
// 1120                     if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( Hop, 1 ); break; }
        LCALL   ?Subroutine27
??CrossCallReturnLabel_49:
        JNZ     ??main_loop_66
        LCALL   ?Subroutine46
??CrossCallReturnLabel_87:
        MOV     A,#0x1
        LJMP    ??CrossCallReturnLabel_64
// 1121                     if( cyclesToHop-- ){ 
??main_loop_66:
        MOV     DPTR,#cyclesToHop
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x1
        ADD     A,R2
        MOVX    @DPTR,A
        MOV     A,R2
        JZ      ??main_loop_67
// 1122                         CHANNR = curChannel; hop(); curChannel = CHANNR; 
        LCALL   ?Subroutine45
// 1123                         atomicChange( Hop, lastCycle /*- 4*TICKS_IN_MS */); //- _slot );  
??CrossCallReturnLabel_86:
        MOV     DPTR,#lastCycle
        LCALL   ??Subroutine53_0
??CrossCallReturnLabel_117:
        LCALL   ?Subroutine46
??CrossCallReturnLabel_88:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??main_loop_68
// 1124                         //setupRepeater( FALSE );     receive();
// 1125                     } else   { curChannel = page.channel; CHANNR = curChannel; }
??main_loop_67:
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        MOV     DPTR,#-0x20fa
??main_loop_68:
        MOVX    @DPTR,A
// 1126                     ticks[ ReceiveData ] = 0;
        LCALL   ?Subroutine26
??CrossCallReturnLabel_47:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1127                 } // go through
// 1128                 case ReceiveData:  setupRepeater( FALSE );  was_listening=TRUE;   receive();   break;
??main_loop_30:
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
        LCALL   setupRepeater
        MOV     A,#0x1
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
        ; Setup parameters for call to function receive
        LCALL   receive
        LJMP    ??main_loop_27
// 1129 //                case Ms:   atomicChange( Ms, TICKS_IN_MS );  
// 1130 //                   milliSeconds++; 
// 1131 //                   if( milliSeconds >= 1000 ){
// 1132                 case Ms:   atomicChange( Ms, TICKS_IN_SEC );  
??main_loop_37:
        LCALL   ?Subroutine9
// 1133                         cycles2HardKick--;
??CrossCallReturnLabel_368:
        MOV     DPTR,#cycles2HardKick
        LCALL   ?Subroutine51
??CrossCallReturnLabel_114:
        LJMP    ??CrossCallReturnLabel_3
// 1134 //                        milliSeconds = 0; seconds++;
// 1135 //                        if( seconds >= 60 ){
// 1136 //                            seconds = 0;  minutes++;
// 1137 //                            if( ( minutes > 0 ) && ( 0 == (minutes % 15 ) ) ) alignMPP = TRUE;
// 1138 //                            if( minutes >= 60 ) minutes = 0;
// 1139 //                        }
// 1140 //                   }
// 1141                 break;
// 1142                 case Cycle: // kicking and search logic
// 1143                     atomicChange( Cycle, lastCycle );
??main_loop_35:
        LCALL   ?Subroutine52
??CrossCallReturnLabel_115:
        LCALL   ??Subroutine7_1
// 1144                     atomicChange( ReceiveData, lastCycle - _slot - 5*TICKS_IN_MS );    // was 25
??CrossCallReturnLabel_301:
        MOV     DPTR,#_slot
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_155:
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        MOV     A,#-0xa
        ADD     A,R0
        MOV     R0,A
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#ticks
        LCALL   ?Subroutine54
??CrossCallReturnLabel_124:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine68_0
// 1145                     flags[ Cycle ] = TRUE;
??CrossCallReturnLabel_172:
        LCALL   ?Subroutine18
??CrossCallReturnLabel_33:
        MOVX    @DPTR,A
// 1146                     if(got_gw) got_gw--;
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        JZ      ??main_loop_69
        DEC     A
        MOVX    @DPTR,A
// 1147                     if( isOnTestStand ) isOnTestStand--;
??main_loop_69:
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JZ      ??main_loop_27
        DEC     A
        SJMP    ??CrossCallReturnLabel_3
// 1148                 break;
// 1149                 case OvStartup:
// 1150                       if( T3CC0 < page.ov ){ 
??main_loop_39:
        MOV     A,0xcd
        CLR     C
        SUBB    A,R4
        JNC     ??main_loop_27
// 1151                           BYTE cnt = page.ov_step, a = T3CC0;
        MOV     DPTR,#(page + 234)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,0xcd
        MOV     R2,A
// 1152                           if( cnt == 0 ) cnt = 1;
        MOV     A,R3
        JNZ     ??main_loop_70
        MOV     R3,#0x1
        SJMP    ??main_loop_70
// 1153                           while( cnt-- && (a < page.ov) ) a++;
??main_loop_71:
        INC     R2
??main_loop_70:
        MOV     A,R3
        DEC     R3
        JZ      ??main_loop_72
        MOV     A,R2
        CLR     C
        SUBB    A,R4
        JC      ??main_loop_71
// 1154                           T3CC0 = a;
??main_loop_72:
        MOV     0xcd,R2
// 1155                           atomicChange( OvStartup, TICKS_IN_SEC ); 
        LCALL   ?Subroutine104
??CrossCallReturnLabel_374:
        SJMP    ??CrossCallReturnLabel_3
// 1156                       } 
// 1157 //                      #ifdef MidString
// 1158 //                      compute98();
// 1159 //                      #endif
// 1160                 break;
// 1161                 case OcRamp:
// 1162                       #ifdef MidString
// 1163                       if( (((INT16)adcs16[ 2 ]) > page.cur_noise ) ){
// 1164                             if( theOC < setOC ){ 
// 1165                                 BYTE cnt = page.oc_step, a = theOC;
// 1166                                 if( cnt == 0 ) cnt = 10;
// 1167                                 while( cnt-- && ( a < setOC ) ) a++;  
// 1168                                 T3CC1 = oc2timer( theOC = a );
// 1169                                 atomicChange( OcRamp, TICKS_IN_SEC ); 
// 1170                             }
// 1171                       }else{ T3CC1 = theOC = 0; atomicChange( OcRamp, TICKS_IN_SEC ); }
// 1172 //                      compute98();
// 1173                       #endif
// 1174                 break;
// 1175                 case DelayedPrepareData: { // here most of the time is spent
// 1176                     *((BYTE *)0xF538) = 0; 
??main_loop_38:
        CLR     A
        MOV     DPTR,#-0xac8
        MOVX    @DPTR,A
// 1177                     //ticks2Prepare = (*ptr2RunningTick)&0xFF; 
// 1178                     prepareData(); 
        ; Setup parameters for call to function prepareData
        LCALL   prepareData
// 1179                     //ticks2Prepare = computeTI(ticks2Prepare); 
// 1180                     if( page.gbunch ){
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        JZ      ??main_loop_27
// 1181                       if(page.use12kbod && ( page.gbunch <= 18 ) )
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ?Subroutine30
??CrossCallReturnLabel_58:
        JNC     ??main_loop_73
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x13
        JNC     ??main_loop_27
// 1182                       //  { atomicChange( DelayedPrepareData, page.gbunch * lastCycle - ticks2Prepare - 1 ); } // was 3
// 1183                           { atomicChange( DelayedPrepareData, page.gbunch * lastCycle - *((BYTE *)0xF538) - 1 -xored); } // was 3
        LCALL   ?Subroutine15
??CrossCallReturnLabel_27:
        LCALL   ?Subroutine61
??CrossCallReturnLabel_140:
        SJMP    ??main_loop_74
// 1184                       else if( !page.use12kbod && ( page.gbunch == 1 ) )
??main_loop_73:
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??main_loop_27
// 1185                       //  { atomicChange( DelayedPrepareData, lastCycle - ticks2Prepare - 1 ); } // was 3
// 1186                           { atomicChange( DelayedPrepareData, lastCycle - *((BYTE *)0xF538) - 1 -xored); } // was 3                        
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??main_loop_74:
        SUBB    A,#0x0
        MOV     R3,A
        MOV     A,#-0x1
        ADD     A,R2
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R3
        LCALL   ?Subroutine3
??CrossCallReturnLabel_3:
        MOVX    @DPTR,A
// 1187                     }
// 1188                 }break;  
// 1189                 //case StartOtherImage:   bootOtherImage();
// 1190             } // switch
// 1191         } //else { INT_GLOBAL_ENABLE( INT_ON ); }
// 1192     }// for idx
??main_loop_27:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x10
        JNC     $+5
        LJMP    ??main_loop_26
// 1193 }
        LJMP    ??Subroutine125_0
        CFI EndBlock cfiBlock94
        REQUIRE _A_P1
        REQUIRE WDCTL
        REQUIRE T3CC0
        REQUIRE T3CC1

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine83:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_222
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_223
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        LCALL   switchTo255
        CLR     A
        MOV     DPTR,#ch255
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_210
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_202
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_203
        CFI (cfiCond102) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond102) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond102) CFA_SP SP+-4
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_204
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_205
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker105 Using cfiCommon1
        CFI (cfiPicker105) NoFunction
        CFI (cfiPicker105) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiPicker105

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond106 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 0
        MOV     R2,A
        MOV     A,R3
        RET
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_339
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_340
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        LCALL   ?Subroutine97
??CrossCallReturnLabel_255:
        LJMP    ?Subroutine117
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond112 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        LCALL   ?Subroutine90
??CrossCallReturnLabel_245:
        RET
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_85
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        ; Setup parameters for call to function hop
        ; Setup parameters for call to function hop
        LCALL   hop
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_237:
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker124 Using cfiCommon1
        CFI (cfiPicker124) NoFunction
        CFI (cfiPicker124) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??xored
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiPicker124

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond125 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond126) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond126) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond126) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond126) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond126) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond126) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond126) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0xb
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_31
??Subroutine17_0:
        LCALL   ?Subroutine90
??CrossCallReturnLabel_241:
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127
        CFI EndBlock cfiCond128

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        LCALL   ?Subroutine96
??CrossCallReturnLabel_346:
        MOV     A,R2
        MOV     B,?V0 + 0
        MUL     AB
        MOV     R2,A
        MOV     R7,B
        MOV     B,?V0 + 0
        MOV     A,R3
        MUL     AB
        ADD     A,R7
        MOV     R3,A
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine96:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_27
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_305
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_306
        CFI Block cfiPicker136 Using cfiCommon1
        CFI (cfiPicker136) NoFunction
        CFI (cfiPicker136) Picker
        MOV     DPTR,#lastCycle
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_122
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_123
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_117
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_118
        CFI Block cfiCond141 Using cfiCommon0
        CFI (cfiCond141) NoFunction
        CFI (cfiCond141) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_119
        CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond141) CFA_SP SP+0
        CFI (cfiCond141) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_120
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_121
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_297
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_298
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 15)
??Subroutine96_0:
        MOVX    A,@DPTR
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiPicker136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        REQUIRE ?Subroutine118
        ; // Fall through to label ?Subroutine118

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine118:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_27
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_305
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_306
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_122
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_123
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_117
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_118
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_119
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_120
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_121
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_297
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_298
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_343
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_344
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_371
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_372
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker164 Using cfiCommon1
        CFI (cfiPicker164) NoFunction
        CFI (cfiPicker164) Picker
        LCALL   ?Subroutine91
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiPicker164
??CrossCallReturnLabel_247:
        REQUIRE ?Subroutine121
        ; // Fall through to label ?Subroutine121

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine121:
        CFI Block cfiCond165 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_371
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_372
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_368
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_370
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_367
        CFI (cfiCond169) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond169) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond169) CFA_SP SP+-4
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_369
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        LCALL   ??Subroutine104_0
??CrossCallReturnLabel_377:
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker174 Using cfiCommon1
        CFI (cfiPicker174) NoFunction
        CFI (cfiPicker174) Picker
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R4
        MOV     R2,A
        MOV     A,R3
        SUBB    A,#0x0
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiPicker174

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond175 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_328
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_329
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker177 Using cfiCommon1
        CFI (cfiPicker177) NoFunction
        CFI (cfiPicker177) Picker
        LCALL   ?Subroutine100
??CrossCallReturnLabel_260:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1d
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_334
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 15)
??Subroutine0_0:
        MOV     A,R1
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_326
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_327
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_330
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_331
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_332
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_333
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_335
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_336
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 15)
??Subroutine0_1:
        SUBB    A,#0x0
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiPicker177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        REQUIRE ?Subroutine117
        ; // Fall through to label ?Subroutine117

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine117:
        CFI Block cfiCond187 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_337
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_338
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_339
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_340
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_328
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_329
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_334
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_326
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_327
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_330
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_331
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_332
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_333
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_335
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_336
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_341
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_342
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker204 Using cfiCommon1
        CFI (cfiPicker204) NoFunction
        CFI (cfiPicker204) Picker
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiPicker204

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??xored:
        DS 1
        REQUIRE `?<Initializer for xored>`
        REQUIRE __INIT_XDATA_I
// 1194 #define BARRIER  0xAA
// 1195 void quartz();

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1196 void longTickWait( BYTE q ){ while( q-- ) tickWait( 50*TICKS_IN_MS ); }
longTickWait:
        CFI Block cfiBlock205 Using cfiCommon0
        CFI Function longTickWait
        FUNCALL longTickWait, tickWait
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
        CFI R6 A
        PUSH    A
        CFI R6 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        SJMP    ??longTickWait_0
??longTickWait_1:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x64
        LCALL   tickWait
??longTickWait_0:
        MOV     A,R6
        DEC     R6
        JNZ     ??longTickWait_1
        POP     A
        CFI R6 A
        CFI CFA_SP SP+-2
        MOV     R6,A
        CFI R6 SameValue
        RET
        CFI EndBlock cfiBlock205

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1197 void main(void){
main:
        CFI Block cfiBlock206 Using cfiCommon0
        CFI Function main
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, checkMore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, read_page
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, longTickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, quartz
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, main_loop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Auto size: 0
// 1198 UINT16 i, j;
// 1199     *((BYTE *)0xF53B) = 0xAA;
        MOV     A,#-0x56
        MOV     DPTR,#-0xac5
        MOVX    @DPTR,A
// 1200     *((BYTE *)0xFFFF) = 0x10; // was 0x80 on Dec 19th
        MOV     A,#0x10
        MOV     DPTR,#-0x1
        MOVX    @DPTR,A
// 1201     if( PARTNUM != 0x81 ) reset(); //{ WDCTL = 0x8 | 0x3; while( TRUE ) halWait( 10 ); } //a reset  
        MOV     DPTR,#-0x20ca
        MOVX    A,@DPTR
        XRL     A,#0x81
        JZ      ??main_0
        ; Setup parameters for call to function reset
        LCALL   reset
// 1202     if( *((BYTE *)0xFFFE) == 0x5A ) goto MainLoopLabel;
??main_0:
        MOV     DPTR,#-0x2
        MOVX    A,@DPTR
        XRL     A,#0x5a
        JNZ     $+5
        LJMP    ??main_1
// 1203     *((BYTE *)0xFFFE) = 0x5A; 
        MOV     A,#0x5a
        MOVX    @DPTR,A
// 1204 //    WDCTL = 0xA8; WDCTL = 0x58;
// 1205 /*    T1CTL &= 0xFC;
// 1206     SET_WORD(T1CNTH, T1CNTL, 0);
// 1207     SET_WORD(T1CC0H, T1CC0L, 600 - 1);
// 1208     T1CTL |= 0x04  | 0x02;
// 1209     T1CCTL0 = 0x44;
// 1210 */    
// 1211     HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
        SETB    0xb8.1
// 1212 
// 1213     //            15
// 1214     for( i = 0; i<15; i++ ){ // was 15 the self check !!!! check line 663 if loop limit changed !!!
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1215         BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
??main_2:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine84
// 1216         BOOL flag = TRUE; 
// 1217         *((BYTE *)0xFFFF) = 0x10;
// 1218         for( j = 0; flag && (j < 0x400); j++ )
// 1219            flag = ( (*ptr++)==0xFF );
??CrossCallReturnLabel_225:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??main_3
        MOV     R2,#0x1
        SJMP    ??main_4
??main_3:
        MOV     R2,#0x0
??main_4:
        LCALL   ?Subroutine86
??CrossCallReturnLabel_227:
        JZ      ??main_5
        CLR     C
        MOV     A,R5
        SUBB    A,#0x4
        JC      ??CrossCallReturnLabel_225
// 1220         //if( flag ){void (*f)( void ) = ( void (*)( void ) )0x603F; (*f)();}
// 1221         if( flag ) checkMore();
        ; Setup parameters for call to function checkMore
        LCALL   checkMore
// 1222     }
??main_5:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0xf
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??main_2
// 1223     
// 1224     si->armAdcs       = &armAdcs;
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x30
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_91:
        MOV     A,#(armAdcs & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((armAdcs >> 8) & 0xff)
        LCALL   ??Subroutine70_0
// 1225     si->readNextValue = &readNextValue;
??CrossCallReturnLabel_193:
        ADD     A,#0x32
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_92:
        MOV     A,#(readNextValue & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((readNextValue >> 8) & 0xff)
        LCALL   ??Subroutine70_0
// 1226     si->flashCallback = &flashCallback;
??CrossCallReturnLabel_194:
        ADD     A,#0x34
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_93:
        MOV     A,#(flashCallback & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((flashCallback >> 8) & 0xff)
        LCALL   ??Subroutine70_0
// 1227     //si->rfCallback    = &rfCallback;
// 1228     si->adcEnabled    = TRUE;
??CrossCallReturnLabel_195:
        ADD     A,#0x37
        LCALL   ??Subroutine17_0
// 1229     // added in order to setup correct MPP frequecy
// 1230     si->mppCycle      = _mppCycle;
??CrossCallReturnLabel_31:
        LCALL   ?Subroutine47
??CrossCallReturnLabel_94:
        MOV     A,#0x78
        LCALL   ?Subroutine70
// 1231     si->firstAdcReading = _firstAdcMeasurement;
??CrossCallReturnLabel_191:
        ADD     A,#0x5d
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_95:
        MOV     A,#0x28
        LCALL   ?Subroutine70
// 1232     flags = si->flags;
??CrossCallReturnLabel_192:
        ADD     A,#0x20
        LCALL   ?Subroutine62
??CrossCallReturnLabel_142:
        MOV     DPTR,#flags
        LCALL   ??Subroutine68_0
// 1233     ticks = si->ticks;
??CrossCallReturnLabel_173:
        MOV     DPTR,#si
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_156:
        MOV     DPTR,#ticks
        LCALL   ??Subroutine68_0
// 1234     ptr2RunningTick = & (si->runningTick);
??CrossCallReturnLabel_174:
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x38
        LCALL   ?Subroutine62
??CrossCallReturnLabel_143:
        MOV     DPTR,#ptr2RunningTick
        LCALL   ??Subroutine68_0
// 1235     
// 1236     //unnecessary if da_boot is right
// 1237     //SET_WORD(T1CC0H, T1CC0L, 600 - 1); // 300 - 1    
// 1238     
// 1239     oscWhatToWaitFor = SetOscLowCurrentOnlyDelay;
??CrossCallReturnLabel_175:
        MOV     A,#0x17
        MOV     DPTR,#oscWhatToWaitFor
        MOVX    @DPTR,A
// 1240     ticks[OscEvent] = page.oscLowCurrentOnlyDelay;
        LCALL   ?Subroutine7
// 1241 
// 1242     resetReason = (SLEEP & 0x18)>>3;
??CrossCallReturnLabel_302:
        MOV     A,#0x18
        ANL     A,0xbe
        CLR     C
        RRC     A
        RRC     A
        RRC     A
        MOV     DPTR,#resetReason
        MOVX    @DPTR,A
// 1243     zerofill( (BYTE *)&page, 240 );
        ; Setup parameters for call to function zerofill
        MOV     R1,#-0x10
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   zerofill
// 1244     read_page(); 
        ; Setup parameters for call to function read_page
        LCALL   read_page
// 1245 
// 1246     if (page.fetFailureCount != 0)
        MOV     DPTR,#(page + 128)
        MOVX    A,@DPTR
        JNZ     ??main_6
        INC     DPTR
        MOVX    A,@DPTR
??main_6:
        JZ      ??main_7
// 1247       checkForFETFailure = TRUE;
        MOV     A,#0x1
        SJMP    ??main_8
// 1248     else
// 1249       checkForFETFailure = FALSE;
??main_7:
        CLR     A
??main_8:
        MOV     DPTR,#checkForFETFailure
        LCALL   ?Subroutine74
// 1250 
// 1251     mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); //(BYTE *)&cyclesDefaults[4], 4 );//(BYTE *)&page.defCycles2SoftKick, 4 );
??CrossCallReturnLabel_198:
        LCALL   ?Subroutine4
// 1252     curChannel = page.is500Always ? page.starting500Channel : page.channel; 
??CrossCallReturnLabel_316:
        JNC     ??main_9
        MOV     DPTR,#(page + 218)
        SJMP    ??main_10
??main_9:
        MOV     DPTR,#(page + 164)
??main_10:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
// 1253     search_stat = page.searchCommunication; 
        LCALL   ?Subroutine58
// 1254     //init();
// 1255 
// 1256     switch( resetReason ){
??CrossCallReturnLabel_132:
        MOV     DPTR,#resetReason
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for main>_0`:
        DATA
        DB        0
        DB        3
        DW        ??CrossCallReturnLabel_369
        DW        ??main_11
        DW        ??main_11
        DW        ??main_12
        DW        ??main_11
        CODE
// 1257         case 2:  // Watchdog Reset  
// 1258           #ifdef MidString
// 1259             /*
// 1260             P1_3 = 0; P1_4 = 0; 
// 1261             longTickWait( 20 );
// 1262             P1_3 = 1; 
// 1263             atomicChange( Init, ((INT16) TICKS_IN_SEC) * 3 );
// 1264             */
// 1265 	  if (*ModuleOffRememberedPtr == ModuleStatusOffFetFailure)
// 1266 	    {
// 1267 	      fetFailure = TRUE;
// 1268 	      netValue = MainNetValueFETFailed;
// 1269 	      checkForFETFailure = FALSE;
// 1270 	      P1_4 = 0;
// 1271 	    }
// 1272 	  else if (*ModuleOffRememberedPtr == ModuleStatusOff)
// 1273 	    {
// 1274 	      P1_4 = 0;
// 1275 	    }
// 1276 	  else
// 1277 	    {
// 1278 	      *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
// 1279 	    }
// 1280 	  if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
// 1281 	    {
// 1282 	      if(page.module)
// 1283 		P1_4 = 1;
// 1284 	      else
// 1285 		P1_4 = 0;
// 1286 	    }
// 1287 	  if( page.mpp )    P1_3 = 1; else P1_3 = 0;
// 1288           #else
// 1289             // SPT: MPP On, Module On
// 1290             P1_3 = 1; P1_4 = 1; 
??main_12:
        SETB    0x90.3
        SETB    0x90.4
// 1291           #endif
// 1292           T3CC0 = page.ov; T3CC1 = oc2timer( setOC = theOC = page.oc ); 
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     0xcd,A
        LCALL   ?Subroutine25
??CrossCallReturnLabel_307:
        SJMP    ??CrossCallReturnLabel_369
// 1293           //wasAHardResetOrPowerOn = FALSE; 
// 1294         break; 
// 1295         case 1: case 3: 
// 1296         case 0:             // Power On Reset      
// 1297             //P1 &= ~ ( 8 | 0x10 );  // Mpp Off, Module Off
// 1298 	  *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
??main_11:
        MOV     DPTR,#ModuleStatusCanTurnOn
        MOVX    A,@DPTR
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
// 1299 
// 1300             if( page.ov_startup ) T3CC0 = page.ov_startup; else T3CC0 = page.ov;    
        MOV     DPTR,#(page + 223)
        MOVX    A,@DPTR
        MOV     R2,A
        JZ      ??main_13
        MOV     0xcd,R2
        SJMP    ??main_14
??main_13:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     0xcd,A
// 1301             P1_3 = 0; P1_4 = 0; 
??main_14:
        CLR     0x90.3
        CLR     0x90.4
// 1302             //{ BYTE i = 8;  while( i-- ){ WDCTL = 0xA8; WDCTL = 0x58; *((BYTE *)0xFFFF) = 0x10; halWait(125); } }
// 1303             //longTickWait( 5 ); // to fill ADC buffer with data should be done later
// 1304             #ifdef MidString
// 1305                 P1_3 = page.mpp; 
// 1306                 T3CC1 = theOC = 0; setOC = page.oc;  
// 1307             #else    
// 1308                 P1_3 = 1; 
        SETB    0x90.3
// 1309                 T3CC1 = oc2timer( setOC = theOC = page.oc );    
        LCALL   ?Subroutine25
// 1310             #endif
// 1311             atomicChange( Init, ((INT16) TICKS_IN_SEC) * 3 );
??CrossCallReturnLabel_308:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0xc
        LCALL   ?Subroutine29
// 1312             atomicChange( OcRamp, TICKS_IN_SEC );
??CrossCallReturnLabel_56:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ??Subroutine9_0
// 1313         break; 
// 1314     }
// 1315     zerofill( (BYTE *)adcBuf, 2*N_CHANNELS*BUFFER_SIZE );
??CrossCallReturnLabel_369:
        ; Setup parameters for call to function zerofill
        MOV     R1,#-0x70
        MOV     R2,#(adcBuf & 0xff)
        MOV     R3,#((adcBuf >> 8) & 0xff)
        LCALL   zerofill
// 1316     init();             // turn the crystall on, exit from third state
        ; Setup parameters for call to function init
        LCALL   init
// 1317     //longTickWait( 12 ); // to fill ADC buffer with data should be done later
// 1318     //ticks[ MppCycle ]    = _mppCycle;   // 60 ms
// 1319     //ticks[ Ms       ]    = TICKS_IN_MS;
// 1320     ticks[ Ms       ]    = TICKS_IN_SEC;     
        LCALL   ?Subroutine9
// 1321     ticks[ ReceiveData ] = TICKS_IN_MS;    
??CrossCallReturnLabel_370:
        LCALL   ?Subroutine26
??CrossCallReturnLabel_48:
        MOV     A,#0x2
        LCALL   ?Subroutine120
// 1322     ticks[ FeedTheDog ]  = _dogFeeding; 
??CrossCallReturnLabel_354:
        LCALL   ?Subroutine34
??CrossCallReturnLabel_65:
        LCALL   ?Subroutine120
// 1323     ticks[ Cycle ]       = lastCycle;
??CrossCallReturnLabel_355:
        LCALL   ?Subroutine52
??CrossCallReturnLabel_116:
        LCALL   ??Subroutine7_1
// 1324 
// 1325     // set of the timer registers
// 1326     //SET_WORD(T1CC0H, T1CC0L, 600 - 1);
// 1327     //        prescaler = 8      modulo mode            ie
// 1328     //T1CTL   = 0x04  | 0x02;    T1CCTL0 = 0x44;
// 1329     // check of the timer registers
// 1330     //if( ((T1CTL&0xF)!=(0x04|0x02)) || (T1CCTL0!=0x44) || (T1CC0H!=0x2) || (T1CC0L!=0x57) ) reset();
// 1331        
// 1332     //ticks[ OvStartup ]   = TICKS_IN_SEC;
// 1333     
// 1334     loadKey( page.curKey ); 
??CrossCallReturnLabel_303:
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
// 1335     RNDL = page.myMac[4]; RNDL = page.myMac[5]; //ADCCON1 |= 1; 
??CrossCallReturnLabel_213:
        LCALL   ?Subroutine31
// 1336  
// 1337 //    #ifdef MidString
// 1338 //    compute98();
// 1339 //    #endif
// 1340 //    { BYTE counter = 127;
// 1341 //      SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
// 1342 //      while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
// 1343 //      asm("NOP");
// 1344 //      //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
// 1345 //      CLKCON = 0x89;  
// 1346 //      SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
// 1347 //    }
// 1348     //P1_1 = 0; // to fill ADC buffer with data
// 1349     T1CTL &= 0xFC;
??CrossCallReturnLabel_59:
        ANL     0xe4,#0xfc
        MOV     A,0xe4
// 1350     SET_WORD(T1CNTH, T1CNTL, 0);
        MOV     0xe3,#0x0
        MOV     0xe2,#0x0
// 1351     SET_WORD(T1CC0H, T1CC0L, 750 - 1);
        MOV     0xdb,#0x2
        MOV     0xda,#-0x13
// 1352     T1CTL |= 0x04  | 0x02;
        ORL     0xe4,#0x6
        MOV     A,0xe4
// 1353     T1CCTL0 = 0x44;
        MOV     0xe5,#0x44
// 1354     longTickWait( 10 ); //20 ); was 20
        ; Setup parameters for call to function longTickWait
        MOV     R1,#0xa
        LCALL   longTickWait
// 1355     if( mymemcmp( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ) ) reset(); // (BYTE *)&cyclesDefaults[4]
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x4
        MOV     R4,#((page + 208) & 0xff)
        MOV     R5,#(((page + 208) >> 8) & 0xff)
        MOV     R2,#(cycles2SoftKick & 0xff)
        MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JZ      ??main_15
        ; Setup parameters for call to function reset
        LCALL   reset
// 1356 //    search_stat = page.searchCommunication = 0;
// 1357 //    softKick();
// 1358     P1_1 = 0; // was 1
??main_15:
        CLR     0x90.1
// 1359 MainLoopLabel:
// 1360   /* We are not turning the quartz on *
// 1361     { BYTE counter = 127;
// 1362       SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
// 1363       while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
// 1364       asm("NOP");
// 1365       //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
// 1366       CLKCON = 0x89;  
// 1367       SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
// 1368     }
// 1369   **/
// 1370     quartz();
??main_1:
        ; Setup parameters for call to function quartz
        LCALL   quartz
// 1371     softKick();
        ; Setup parameters for call to function softKick
        LCALL   softKick
        SJMP    ??main_16
// 1372     for (;;){ 
// 1373         if( *((BYTE *)0xF53B) != 0xAA ) reset(); 
// 1374         if( PARTNUM != 0x81 ) reset();
// 1375         WDCTL = 8;
// 1376         main_loop(); 
// 1377         if( flags[ PackageReceived ] || flags[DataSent] ) continue;
// 1378         if( lastCycle > (840*TICKS_IN_MS) ) lastCycle = 840*TICKS_IN_MS;
// 1379         if( lastCycle == 0 )                lastCycle = 840*TICKS_IN_MS;
// 1380         if( ticks[ Cycle ] > lastCycle )    ticks[ Cycle ] = lastCycle;
// 1381         if( ticks[ Cycle ] == 0        )    ticks[ Cycle ] = lastCycle;
// 1382         if( cycles2SoftKick > page.defCycles2SoftKick /*8*/ )           cycles2SoftKick = page.defCycles2SoftKick; //8;
// 1383         if( cycles2SoftKick == 0 )          cycles2SoftKick = page.defCycles2SoftKick; //8;
// 1384         if( (cycles2HardKick&0xFF) == 0 )   reset();  // a reset        
// 1385 
// 1386 //        if( ticks[ MppCycle ] > _mppCycle )    ticks[ MppCycle ] = _mppCycle;
// 1387 //        if( ticks[ MppCycle ] == 0        )    ticks[ MppCycle ] = _mppCycle;
// 1388         //if( ticks[ Ms       ] > TICKS_IN_MS )  ticks[ Ms ]       = TICKS_IN_MS;
// 1389         //if( ticks[ Ms ]       == 0          )  ticks[ Ms ]       = TICKS_IN_MS;
// 1390         if( ticks[ Ms       ] > TICKS_IN_SEC )  ticks[ Ms ]       = TICKS_IN_SEC;
// 1391         if( ticks[ Ms ]       == 0           )  ticks[ Ms ]       = TICKS_IN_SEC;
??main_17:
        MOV     A,R2
        JNZ     ??main_18
        MOV     A,R3
??main_18:
        JNZ     ??main_16
??main_19:
        LCALL   ?Subroutine104
??CrossCallReturnLabel_375:
        MOVX    @DPTR,A
??main_16:
        MOV     DPTR,#-0xac5
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JZ      ??main_20
        ; Setup parameters for call to function reset
        LCALL   reset
??main_20:
        MOV     DPTR,#-0x20ca
        MOVX    A,@DPTR
        XRL     A,#0x81
        JZ      ??main_21
        ; Setup parameters for call to function reset
        LCALL   reset
??main_21:
        MOV     0xc9,#0x8
        ; Setup parameters for call to function main_loop
        LCALL   main_loop
        LCALL   ?Subroutine10
??CrossCallReturnLabel_13:
        JNZ     ??main_16
        LCALL   ?Subroutine12
??CrossCallReturnLabel_21:
        JNZ     ??main_16
        MOV     DPTR,#lastCycle
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x6f
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x6
        JNC     ??main_22
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        JNZ     ??main_23
        INC     DPTR
        MOVX    A,@DPTR
??main_23:
        JNZ     ??main_24
??main_22:
        MOV     DPTR,#lastCycle
        MOV     A,#-0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x6
        MOVX    @DPTR,A
??main_24:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x12
        LCALL   ?Subroutine42
??CrossCallReturnLabel_343:
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R3
        JNC     ??CrossCallReturnLabel_305
        LCALL   ?Subroutine32
??CrossCallReturnLabel_305:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??main_25
        INC     DPTR
        MOVX    A,@DPTR
??main_25:
        JNZ     ??CrossCallReturnLabel_306
        LCALL   ?Subroutine32
??CrossCallReturnLabel_306:
        MOV     DPTR,#(page + 208)
        LCALL   ??Subroutine53_0
??CrossCallReturnLabel_118:
        MOV     DPTR,#cycles2SoftKick
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_157:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JNC     ??CrossCallReturnLabel_286
        MOV     DPTR,#cycles2SoftKick
        LCALL   ??Subroutine112_0
??CrossCallReturnLabel_286:
        MOV     DPTR,#cycles2SoftKick
        MOVX    A,@DPTR
        JNZ     ??main_26
        INC     DPTR
        MOVX    A,@DPTR
??main_26:
        JNZ     ??CrossCallReturnLabel_75
        LCALL   ?Subroutine39
??CrossCallReturnLabel_75:
        MOV     DPTR,#cycles2HardKick
        MOVX    A,@DPTR
        JNZ     ??main_27
        ; Setup parameters for call to function reset
        LCALL   reset
??main_27:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x16
        LCALL   ?Subroutine42
??CrossCallReturnLabel_344:
        CLR     C
        MOV     A,R2
        SUBB    A,#-0x2f
        MOV     A,R3
        SUBB    A,#0x7
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??main_17
        LJMP    ??main_19
        CFI EndBlock cfiBlock206
        REQUIRE _A_P1
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE RNDL
        REQUIRE SLEEP
        REQUIRE WDCTL
        REQUIRE T3CC0
        REQUIRE T3CC1
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CNTL
        REQUIRE T1CNTH
        REQUIRE T1CTL
        REQUIRE T1CCTL0
// 1392         // goSleep(); 
// 1393         //P1_1 ^= 1;
// 1394     }
// 1395 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine86:
        CFI Block cfiCond207 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_226
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_227
        CFI Block cfiPicker209 Using cfiCommon1
        CFI (cfiPicker209) NoFunction
        CFI (cfiPicker209) Picker
        MOV     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x1
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R3
        RET
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiPicker209

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine84:
        CFI Block cfiCond210 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_224
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_225
        CFI Block cfiPicker212 Using cfiCommon1
        CFI (cfiPicker212) NoFunction
        CFI (cfiPicker212) Picker
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,#0x8
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#0x10
        MOV     DPTR,#-0x1
        MOVX    @DPTR,A
        MOV     R4,#0x0
        MOV     R5,#0x0
        RET
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiPicker212

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond213 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_115
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_116
        CFI Block cfiPicker215 Using cfiCommon1
        CFI (cfiPicker215) NoFunction
        CFI (cfiPicker215) Picker
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine95
??CrossCallReturnLabel_383:
        ADD     A,#0x12
        RET
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiPicker215

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond216 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_343
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_344
        CFI Block cfiPicker218 Using cfiCommon1
        CFI (cfiPicker218) NoFunction
        CFI (cfiPicker218) Picker
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_236:
        LJMP    ?Subroutine118
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiPicker218

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond219 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_75
        CFI Block cfiPicker221 Using cfiCommon1
        CFI (cfiPicker221) NoFunction
        CFI (cfiPicker221) Picker
        MOV     DPTR,#(page + 208)
        LCALL   ?Subroutine100
??CrossCallReturnLabel_264:
        MOV     DPTR,#cycles2SoftKick
        LCALL   ?Subroutine115
??CrossCallReturnLabel_321:
        RET
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiPicker221

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond222 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_65
        CFI Block cfiPicker224 Using cfiCommon1
        CFI (cfiPicker224) NoFunction
        CFI (cfiPicker224) Picker
        LCALL   ?Subroutine93
??CrossCallReturnLabel_350:
        MOV     A,#0x7d
        RET
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiPicker224

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine93:
        CFI Block cfiCond225 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_65
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_62
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_63
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker229 Using cfiCommon1
        CFI (cfiPicker229) NoFunction
        CFI (cfiPicker229) Picker
        MOV     DPTR,#ticks
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_101
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_102
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 15)
??Subroutine93_0:
        LCALL   ?Subroutine108
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiPicker229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
??CrossCallReturnLabel_280:
        REQUIRE ?Subroutine119
        ; // Fall through to label ?Subroutine119

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine119:
        CFI Block cfiCond232 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_65
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_62
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_63
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_101
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_102
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_47
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_48
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_363
        CFI (cfiCond240) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond240) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond240) CFA_SP SP+-4
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_364
        CFI (cfiCond241) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond241) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond241) CFA_SP SP+-4
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_365
        CFI (cfiCond242) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond242) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond242) CFA_SP SP+-4
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_366
        CFI (cfiCond243) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond243) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond243) CFA_SP SP+-4
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_33
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_34
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_371
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_372
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_35
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_36
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker250 Using cfiCommon1
        CFI (cfiPicker250) NoFunction
        CFI (cfiPicker250) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiPicker250

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond251 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_305
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_306
        CFI Block cfiPicker253 Using cfiCommon1
        CFI (cfiPicker253) NoFunction
        CFI (cfiPicker253) Picker
        LCALL   ?Subroutine96
??CrossCallReturnLabel_347:
        LJMP    ?Subroutine112
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiPicker253

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond254 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_56
        CFI Block cfiPicker256 Using cfiCommon1
        CFI (cfiPicker256) NoFunction
        CFI (cfiPicker256) Picker
        LCALL   ?Subroutine90
??CrossCallReturnLabel_243:
        MOV     A,#0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x17
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiPicker256

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond257 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_48
        CFI Block cfiPicker259 Using cfiCommon1
        CFI (cfiPicker259) NoFunction
        CFI (cfiPicker259) Picker
        LCALL   ?Subroutine92
??CrossCallReturnLabel_251:
        RET
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiPicker259

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine92:
        CFI Block cfiCond260 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond261 Using cfiCommon0
        CFI (cfiCond261) NoFunction
        CFI (cfiCond261) Conditional ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_48
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_363
        CFI (cfiCond262) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond262) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond262) CFA_SP SP+-4
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_364
        CFI (cfiCond263) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond263) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond263) CFA_SP SP+-4
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_365
        CFI (cfiCond264) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond264) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond264) CFA_SP SP+-4
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_366
        CFI (cfiCond265) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond265) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond265) CFA_SP SP+-4
        CFI Block cfiPicker266 Using cfiCommon1
        CFI (cfiPicker266) NoFunction
        CFI (cfiPicker266) Picker
        MOV     DPTR,#ticks
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_33
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_34
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 15)
??Subroutine92_0:
        LCALL   ?Subroutine106
??CrossCallReturnLabel_353:
        RET
        CFI EndBlock cfiCond260
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiPicker266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine106:
        CFI Block cfiCond269 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_48
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_363
        CFI (cfiCond271) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond271) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond271) CFA_SP SP+-4
        CFI Block cfiCond272 Using cfiCommon0
        CFI (cfiCond272) NoFunction
        CFI (cfiCond272) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_364
        CFI (cfiCond272) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond272) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond272) CFA_SP SP+-4
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_365
        CFI (cfiCond273) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond273) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond273) CFA_SP SP+-4
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_366
        CFI (cfiCond274) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond274) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond274) CFA_SP SP+-4
        CFI Block cfiCond275 Using cfiCommon0
        CFI (cfiCond275) NoFunction
        CFI (cfiCond275) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_33
        CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond275) CFA_SP SP+0
        CFI (cfiCond275) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_34
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_371
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_372
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+0
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond279 Using cfiCommon0
        CFI (cfiCond279) NoFunction
        CFI (cfiCond279) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_35
        CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond279) CFA_SP SP+0
        CFI (cfiCond279) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond280 Using cfiCommon0
        CFI (cfiCond280) NoFunction
        CFI (cfiCond280) Conditional ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_36
        CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond280) CFA_SP SP+0
        CFI (cfiCond280) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker281 Using cfiCommon1
        CFI (cfiPicker281) NoFunction
        CFI (cfiPicker281) Picker
        LCALL   ?Subroutine110
??CrossCallReturnLabel_284:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        SJMP    ?Subroutine119
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiCond279
        CFI EndBlock cfiCond280
        CFI EndBlock cfiPicker281

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond282 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_307
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_308
        CFI Block cfiPicker284 Using cfiCommon1
        CFI (cfiPicker284) NoFunction
        CFI (cfiPicker284) Picker
        MOV     DPTR,#(page + 188)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        MOV     DPTR,#setOC
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        ; Setup parameters for call to function oc2timer
        LJMP    ?Subroutine113
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiPicker284

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond285 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond287) CFA_SP SP+0
        CFI (cfiCond287) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_21
        CFI Block cfiCond290 Using cfiCommon0
        CFI (cfiCond290) NoFunction
        CFI (cfiCond290) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond290) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond290) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond290) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond290) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond290) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond290) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond290) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond290) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond290) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond290) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond290) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond290) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond290) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond290) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond290) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond290) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond290) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond290) CFA_SP SP+0
        CFI (cfiCond290) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker291 Using cfiCommon1
        CFI (cfiPicker291) NoFunction
        CFI (cfiPicker291) Picker
        MOV     DPTR,#(flags + 1)
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiCond290
        CFI EndBlock cfiPicker291

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond292 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond293 Using cfiCommon0
        CFI (cfiCond293) NoFunction
        CFI (cfiCond293) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond293) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond293) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond293) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond293) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond293) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond293) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond293) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond293) CFA_SP SP+0
        CFI (cfiCond293) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond294) CFA_SP SP+0
        CFI (cfiCond294) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_13
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond297) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond297) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond297) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond297) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond297) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond297) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond297) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond297) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond297) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond297) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond297) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond297) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond297) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker298 Using cfiCommon1
        CFI (cfiPicker298) NoFunction
        CFI (cfiPicker298) Picker
        MOV     DPTR,#flags
        LCALL   ?Subroutine101
??CrossCallReturnLabel_268:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond292
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiPicker298

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond299 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_368
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_370
        CFI Block cfiPicker301 Using cfiCommon1
        CFI (cfiPicker301) NoFunction
        CFI (cfiPicker301) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x16
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_367
        CFI (cfiCond302) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond302) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond302) CFA_SP SP+-4
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_369
??Subroutine9_0:
        LCALL   ?Subroutine90
??CrossCallReturnLabel_240:
        LJMP    ?Subroutine121
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiPicker301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine104:
        CFI Block cfiCond304 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_374
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_375
        CFI Block cfiPicker306 Using cfiCommon1
        CFI (cfiPicker306) NoFunction
        CFI (cfiPicker306) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CFI Block cfiCond307 Using cfiCommon0
        CFI (cfiCond307) NoFunction
        CFI (cfiCond307) Conditional ??CrossCallReturnLabel_373
        CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond307) CFA_SP SP+0
        CFI (cfiCond307) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_377, ??CrossCallReturnLabel_371
        CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond308) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond308) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond308) CFA_SP SP+0
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_377, ??CrossCallReturnLabel_372
        CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond309) CFA_SP SP+0
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond310 Using cfiCommon0
        CFI (cfiCond310) NoFunction
        CFI (cfiCond310) Conditional ??CrossCallReturnLabel_377, ??CrossCallReturnLabel_368
        CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond310) CFA_SP SP+0
        CFI (cfiCond310) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond311 Using cfiCommon0
        CFI (cfiCond311) NoFunction
        CFI (cfiCond311) Conditional ??CrossCallReturnLabel_377, ??CrossCallReturnLabel_370
        CFI Block cfiCond312 Using cfiCommon0
        CFI (cfiCond312) NoFunction
        CFI (cfiCond312) Conditional ??CrossCallReturnLabel_377, ??CrossCallReturnLabel_367
        CFI (cfiCond312) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond312) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond312) CFA_SP SP+-4
        CFI Block cfiCond313 Using cfiCommon0
        CFI (cfiCond313) NoFunction
        CFI (cfiCond313) Conditional ??CrossCallReturnLabel_377, ??CrossCallReturnLabel_369
        CFI Block cfiCond314 Using cfiCommon0
        CFI (cfiCond314) NoFunction
        CFI (cfiCond314) Conditional ??CrossCallReturnLabel_376
        CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond314) CFA_SP SP+0
        CFI (cfiCond314) CFA_XSP16 add(XSP16, 11)
??Subroutine104_0:
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        RET
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiPicker306
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiCond310
        CFI EndBlock cfiCond311
        CFI EndBlock cfiCond312
        CFI EndBlock cfiCond313
        CFI EndBlock cfiCond314
// 1396 /*==== PRIVATE FUNCTIONS =====================================================*/
// 1397 /******************************************************************************
// 1398 * Work with watchdogs and LED's
// 1399 ******************************************************************************/
// 1400 //void feedTheDog(void){ WDCTL = 0xA8;  WDCTL = 0x58; }
// 1401 /******************************************************************************
// 1402 * initiate reading of adc channels
// 1403 ******************************************************************************/
// 1404 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1405 void armAdcs(void){  
armAdcs:
        CFI Block cfiBlock315 Using cfiCommon0
        CFI Function armAdcs
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1406     adcCount = 0;
        CLR     A
        MOV     DPTR,#adcCount
        LCALL   ?Subroutine37
// 1407     si->inCurCycle++; 
??CrossCallReturnLabel_70:
        INC     A
        LCALL   ?Subroutine37
// 1408     if( si->inCurCycle < 4 ) ticks[ AdcMeasurement ] = _adcMeasurement;  // 5ms
??CrossCallReturnLabel_71:
        CLR     C
        SUBB    A,#0x4
        JNC     ??CrossCallReturnLabel_356
        LCALL   ??Subroutine49_0
??CrossCallReturnLabel_108:
        INC     DPTR
        INC     DPTR
        MOV     A,#0x8
        LCALL   ?Subroutine120
// 1409     ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
??CrossCallReturnLabel_356:
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        ADD     A,#(adcChannels & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((adcChannels >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xb6,A
// 1410 }
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock315
        REQUIRE ADCCON3

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond316 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond317 Using cfiCommon0
        CFI (cfiCond317) NoFunction
        CFI (cfiCond317) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond317) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond317) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond317) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond317) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond317) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond317) CFA_SP SP+0
        CFI (cfiCond317) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker318 Using cfiCommon1
        CFI (cfiPicker318) NoFunction
        CFI (cfiPicker318) Picker
        MOVX    @DPTR,A
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond319) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond319) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond319) CFA_SP SP+-4
        CFI Block cfiCond320 Using cfiCommon0
        CFI (cfiCond320) NoFunction
        CFI (cfiCond320) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond320) CFA_SP SP+0
        CFI (cfiCond320) CFA_XSP16 add(XSP16, 11)
??Subroutine49_0:
        MOV     DPTR,#ticks
        CFI Block cfiCond321 Using cfiCommon0
        CFI (cfiCond321) NoFunction
        CFI (cfiCond321) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond321) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond321) CFA_SP SP+0
        CFI (cfiCond321) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond322) CFA_SP SP+0
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond323 Using cfiCommon0
        CFI (cfiCond323) NoFunction
        CFI (cfiCond323) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond323) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond323) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond323) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond323) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond323) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond323) CFA_SP SP+0
        CFI (cfiCond323) CFA_XSP16 add(XSP16, 15)
??Subroutine49_1:
        LCALL   ?Subroutine101
??CrossCallReturnLabel_269:
        RET
        CFI EndBlock cfiCond316
        CFI EndBlock cfiCond317
        CFI EndBlock cfiPicker318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiCond320
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiCond323

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine101:
        CFI Block cfiCond324 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_10
        CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond325) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond325) CFA_SP SP+0
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_11
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_12
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_13
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_14
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond329) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond329) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond329) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond329) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond329) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond329) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond329) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond329) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond329) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond329) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond329) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond329) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+0
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_103
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_104
        CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond331) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond331) CFA_SP SP+0
        CFI (cfiCond331) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_108
        CFI (cfiCond332) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond332) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond332) CFA_SP SP+-4
        CFI Block cfiCond333 Using cfiCommon0
        CFI (cfiCond333) NoFunction
        CFI (cfiCond333) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_109
        CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond333) CFA_SP SP+0
        CFI (cfiCond333) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_105
        CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond334) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond334) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond334) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond334) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond334) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond334) CFA_SP SP+0
        CFI (cfiCond334) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_106
        CFI (cfiCond335) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond335) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond335) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond335) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond335) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond335) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond335) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond335) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond335) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond335) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond335) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond335) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond335) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond335) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond335) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond335) CFA_SP SP+0
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_107
        CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond336) CFA_SP SP+0
        CFI (cfiCond336) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker337 Using cfiCommon1
        CFI (cfiPicker337) NoFunction
        CFI (cfiPicker337) Picker
        LCALL   ?Subroutine108
??CrossCallReturnLabel_281:
        RET
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiPicker337

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine108:
        CFI Block cfiCond338 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_65
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_62
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond341 Using cfiCommon0
        CFI (cfiCond341) NoFunction
        CFI (cfiCond341) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_63
        CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond341) CFA_SP SP+0
        CFI (cfiCond341) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond342 Using cfiCommon0
        CFI (cfiCond342) NoFunction
        CFI (cfiCond342) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_101
        CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond342) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond342) CFA_SP SP+0
        CFI (cfiCond342) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_102
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_9
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_10
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond346 Using cfiCommon0
        CFI (cfiCond346) NoFunction
        CFI (cfiCond346) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_11
        CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond346) CFA_SP SP+0
        CFI (cfiCond346) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond347 Using cfiCommon0
        CFI (cfiCond347) NoFunction
        CFI (cfiCond347) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_12
        CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond347) CFA_SP SP+0
        CFI (cfiCond347) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond348 Using cfiCommon0
        CFI (cfiCond348) NoFunction
        CFI (cfiCond348) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_13
        CFI Block cfiCond349 Using cfiCommon0
        CFI (cfiCond349) NoFunction
        CFI (cfiCond349) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_14
        CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond349) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond349) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond349) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond349) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond349) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond349) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond349) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond349) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond349) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond349) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond349) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond349) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond349) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond349) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond349) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond349) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond349) CFA_SP SP+0
        CFI (cfiCond349) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_103
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond351 Using cfiCommon0
        CFI (cfiCond351) NoFunction
        CFI (cfiCond351) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_104
        CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond351) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond351) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond351) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond351) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond351) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond351) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond351) CFA_SP SP+0
        CFI (cfiCond351) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond352 Using cfiCommon0
        CFI (cfiCond352) NoFunction
        CFI (cfiCond352) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_108
        CFI (cfiCond352) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond352) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond352) CFA_SP SP+-4
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_109
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_105
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_106
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_107
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker357 Using cfiCommon1
        CFI (cfiPicker357) NoFunction
        CFI (cfiPicker357) Picker
        LCALL   ?Subroutine110
??CrossCallReturnLabel_285:
        RET
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiCond341
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345
        CFI EndBlock cfiCond346
        CFI EndBlock cfiCond347
        CFI EndBlock cfiCond348
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiCond351
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiPicker357

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine110:
        CFI Block cfiCond358 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_251, ??CrossCallReturnLabel_48
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_363
        CFI (cfiCond360) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond360) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond360) CFA_SP SP+-4
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_364
        CFI (cfiCond361) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond361) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond361) CFA_SP SP+-4
        CFI Block cfiCond362 Using cfiCommon0
        CFI (cfiCond362) NoFunction
        CFI (cfiCond362) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_365
        CFI (cfiCond362) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond362) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond362) CFA_SP SP+-4
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_249, ??CrossCallReturnLabel_366
        CFI (cfiCond363) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond363) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond363) CFA_SP SP+-4
        CFI Block cfiCond364 Using cfiCommon0
        CFI (cfiCond364) NoFunction
        CFI (cfiCond364) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_33
        CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond364) CFA_SP SP+0
        CFI (cfiCond364) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond365 Using cfiCommon0
        CFI (cfiCond365) NoFunction
        CFI (cfiCond365) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_353, ??CrossCallReturnLabel_250, ??CrossCallReturnLabel_34
        CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond365) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond365) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond365) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond365) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond365) CFA_SP SP+0
        CFI (cfiCond365) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond366 Using cfiCommon0
        CFI (cfiCond366) NoFunction
        CFI (cfiCond366) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_371
        CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond366) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond366) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond366) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond366) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond366) CFA_SP SP+0
        CFI (cfiCond366) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond367 Using cfiCommon0
        CFI (cfiCond367) NoFunction
        CFI (cfiCond367) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_372
        CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond367) CFA_SP SP+0
        CFI (cfiCond367) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond368 Using cfiCommon0
        CFI (cfiCond368) NoFunction
        CFI (cfiCond368) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_35
        CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond368) CFA_SP SP+0
        CFI (cfiCond368) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond369 Using cfiCommon0
        CFI (cfiCond369) NoFunction
        CFI (cfiCond369) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_352, ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_36
        CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond369) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond369) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond369) CFA_SP SP+0
        CFI (cfiCond369) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_64
        CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond370) CFA_SP SP+0
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond371 Using cfiCommon0
        CFI (cfiCond371) NoFunction
        CFI (cfiCond371) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_350, ??CrossCallReturnLabel_65
        CFI Block cfiCond372 Using cfiCommon0
        CFI (cfiCond372) NoFunction
        CFI (cfiCond372) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_62
        CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond372) CFA_SP SP+0
        CFI (cfiCond372) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond373 Using cfiCommon0
        CFI (cfiCond373) NoFunction
        CFI (cfiCond373) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_63
        CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond373) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond373) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond373) CFA_SP SP+0
        CFI (cfiCond373) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond374 Using cfiCommon0
        CFI (cfiCond374) NoFunction
        CFI (cfiCond374) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_101
        CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond374) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond374) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond374) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond374) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond374) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond374) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond374) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond374) CFA_SP SP+0
        CFI (cfiCond374) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_351, ??CrossCallReturnLabel_102
        CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond375) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond375) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond375) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond375) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond375) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond375) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond375) CFA_SP SP+0
        CFI (cfiCond375) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_9
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond376) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond377 Using cfiCommon0
        CFI (cfiCond377) NoFunction
        CFI (cfiCond377) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_10
        CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond377) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond377) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond377) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond377) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond377) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond377) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond377) CFA_SP SP+0
        CFI (cfiCond377) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond378 Using cfiCommon0
        CFI (cfiCond378) NoFunction
        CFI (cfiCond378) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_11
        CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond378) CFA_SP SP+0
        CFI (cfiCond378) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_12
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_13
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_268, ??CrossCallReturnLabel_14
        CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond381) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond381) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond381) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond381) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond381) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond381) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond381) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond381) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond381) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond381) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond381) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond381) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond381) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond381) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond381) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond381) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond381) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond381) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond381) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond381) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond381) CFA_SP SP+0
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond382 Using cfiCommon0
        CFI (cfiCond382) NoFunction
        CFI (cfiCond382) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_103
        CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond382) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond382) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond382) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond382) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond382) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond382) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond382) CFA_SP SP+0
        CFI (cfiCond382) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond383 Using cfiCommon0
        CFI (cfiCond383) NoFunction
        CFI (cfiCond383) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_104
        CFI (cfiCond383) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond383) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond383) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond383) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond383) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond383) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond383) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond383) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond383) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond383) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond383) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond383) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond383) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond383) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond383) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond383) CFA_SP SP+0
        CFI (cfiCond383) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond384 Using cfiCommon0
        CFI (cfiCond384) NoFunction
        CFI (cfiCond384) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_108
        CFI (cfiCond384) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond384) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond384) CFA_SP SP+-4
        CFI Block cfiCond385 Using cfiCommon0
        CFI (cfiCond385) NoFunction
        CFI (cfiCond385) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_109
        CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond385) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond385) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond385) CFA_SP SP+0
        CFI (cfiCond385) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond386 Using cfiCommon0
        CFI (cfiCond386) NoFunction
        CFI (cfiCond386) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_105
        CFI (cfiCond386) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond386) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond386) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond386) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond386) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond386) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond386) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond386) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond386) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond386) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond386) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond386) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond386) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond386) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond386) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond386) CFA_SP SP+0
        CFI (cfiCond386) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond387 Using cfiCommon0
        CFI (cfiCond387) NoFunction
        CFI (cfiCond387) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_106
        CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond387) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond387) CFA_SP SP+0
        CFI (cfiCond387) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond388 Using cfiCommon0
        CFI (cfiCond388) NoFunction
        CFI (cfiCond388) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_269, ??CrossCallReturnLabel_107
        CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond388) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond388) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond388) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond388) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond388) CFA_SP SP+0
        CFI (cfiCond388) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker389 Using cfiCommon1
        CFI (cfiPicker389) NoFunction
        CFI (cfiPicker389) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiCond364
        CFI EndBlock cfiCond365
        CFI EndBlock cfiCond366
        CFI EndBlock cfiCond367
        CFI EndBlock cfiCond368
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiCond371
        CFI EndBlock cfiCond372
        CFI EndBlock cfiCond373
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiCond377
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiCond382
        CFI EndBlock cfiCond383
        CFI EndBlock cfiCond384
        CFI EndBlock cfiCond385
        CFI EndBlock cfiCond386
        CFI EndBlock cfiCond387
        CFI EndBlock cfiCond388
        CFI EndBlock cfiPicker389

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond390 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond391 Using cfiCommon0
        CFI (cfiCond391) NoFunction
        CFI (cfiCond391) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond391) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond391) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond391) CFA_SP SP+-4
        CFI Block cfiPicker392 Using cfiCommon1
        CFI (cfiPicker392) NoFunction
        CFI (cfiPicker392) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x36
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_235:
        RET
        CFI EndBlock cfiCond390
        CFI EndBlock cfiCond391
        CFI EndBlock cfiPicker392
// 1411 /******************************************************************************
// 1412 * Read ADC's once into buffer
// 1413 ******************************************************************************/
// 1414 
// 1415 //void readNextValue(void){ flags[ IncreaseSleepCnt ] = TRUE;  flags[ ReadNextValue ] = TRUE; } 
// 1416 #pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1417 void readNextValue(void){ //Scheduled(void){  // 
readNextValue:
        CFI Block cfiBlock393 Using cfiCommon0
        CFI Function readNextValue
        FUNCALL readNextValue, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1418 INT16 value;
// 1419 static int theShift = 50;
// 1420 static UINT16 rawVout;
// 1421 
// 1422     ADC_GET_VALUE( value ); value >>= 2; value += theShift;  // 200 >> 2 = 50
        MOV     A,0xbb
        MOV     ?V0 + 1,A
        MOV     A,0xba
        MOV     ?V0 + 0,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     DPTR,#??theShift
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     ?V0 + 1,A
// 1423     
// 1424     if (adcCount == 0)
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        JNZ     ??readNextValue_0
// 1425       rawVout = (UINT16)value;
        MOV     DPTR,#??rawVout
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 1426     
// 1427     //while( value < 0 ){ value++; theShift++; } // adaptive
// 1428     adcsTemp[ adcCount++ ] += (UINT16)value; 
??readNextValue_0:
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1
        ADD     A,R2
        MOVX    @DPTR,A
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(adcsTemp & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#((adcsTemp >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOVX    @DPTR,A
// 1429 
// 1430     if( adcCount < N_CHANNELS ){
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x9
        JNC     ??readNextValue_1
// 1431         ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
        MOVX    A,@DPTR
        ADD     A,#(adcChannels & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((adcChannels >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xb6,A
        LJMP    ??readNextValue_2
// 1432     }else{
// 1433       if( tempAdcsCount == 0 )
??readNextValue_1:
        MOV     DPTR,#tempAdcsCount
        MOVX    A,@DPTR
        MOV     DPTR,#??rawVout
        JNZ     ??readNextValue_3
// 1434 	vOutMin = vOutMax = rawVout;
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#vOutMax
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??readNextValue_4
// 1435       else
// 1436 	{
// 1437 	  if( rawVout > vOutMax )
??readNextValue_3:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPH,#((vOutMax >> 8) & 0xff)
        MOV     DPL,#(vOutMax & 0xff)
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??readNextValue_5
// 1438 	    vOutMax = rawVout;
        MOV     DPTR,#vOutMax
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1439 	  if( rawVout < vOutMin )
??readNextValue_5:
        MOV     DPTR,#vOutMin
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPH,#((??rawVout >> 8) & 0xff)
        MOV     DPL,#(??rawVout & 0xff)
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JNC     ??readNextValue_6
// 1440 	    vOutMin = rawVout;
        MOV     DPTR,#??rawVout
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
??readNextValue_4:
        MOV     DPTR,#vOutMin
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1441 	}
// 1442 
// 1443         if( ++tempAdcsCount >= 8 ){
??readNextValue_6:
        MOV     DPTR,#tempAdcsCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x8
        JNC     $+5
        LJMP    ??readNextValue_7
// 1444         BYTE idx; INT16 grnd = adcsTemp[ 3 ];
        MOV     DPTR,#(adcsTemp + 6)
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1445             //mymemcpy( (BYTE *)ptr, (BYTE *)adcsTemp, 8*sizeof( INT16 ) );
// 1446             for( idx = 0; idx < N_CHANNELS; idx++ ){
        MOV     R4,#(adcsTemp & 0xff)
        MOV     R5,#((adcsTemp >> 8) & 0xff)
        MOV     R2,#(last & 0xff)
        MOV     R3,#((last >> 8) & 0xff)
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(adcBuf & 0xff)
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#((adcBuf >> 8) & 0xff)
        MOV     R1,A
        MOV     ?V0 + 2,#0x9
// 1447                 adcBuf[ idx ][ bufferCount ] = adcsTemp[ idx ];
??readNextValue_8:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 1448                 //last[idx]                    = adcsTemp[ idx ] - grnd;// + ( page.thirty_three_mv ? 649 : 0 );
// 1449                 if( adcsTemp[ idx ] < grnd ) last[idx] = 0; else last[idx] = adcsTemp[ idx ] - grnd;
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R6
        MOV     A,?V0 + 1
        SUBB    A,R7
        JNC     ??readNextValue_9
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??readNextValue_10
??readNextValue_9:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R6
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,R7
        MOV     ?V0 + 1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
??readNextValue_10:
        MOVX    @DPTR,A
// 1450                 //if( ( idx < 5  ) && ( idx > 0  ) ){ counts1[ idx ] += adcsTemp[ idx ]; /* counts2[ idx ] += adcsTemp[ idx ]; */ }
// 1451             }
        MOV     A,R0
        ADD     A,#0x10
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        DEC     ?V0 + 2
        MOV     A,?V0 + 2
        JNZ     ??readNextValue_8
// 1452             //lastRef        = adcsTemp[ 4 ] - adcsTemp[ 3 ];
// 1453             /*
// 1454             lastVout       = adcsTemp[ 0 ] - lastGnd;
// 1455             lastIout       = adcsTemp[ 2 ] - lastGnd;
// 1456             lastRef        = adcsTemp[ 4 ] - lastGnd;
// 1457             lastTex        = adcsTemp[ 6 ] - lastGnd;
// 1458             lastVin        = adcsTemp[ 5 ] - lastGnd;
// 1459             */
// 1460             flags[ AltCheckVin ] = TRUE;
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0xb
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1461 	    dVOut = vOutMax - vOutMin;
        MOV     DPTR,#vOutMin
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPH,#((vOutMax >> 8) & 0xff)
        MOV     DPL,#(vOutMax & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        MOV     DPTR,#dVOut
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1462             zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );    tempAdcsCount = 0;
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x12
        MOV     R2,#(adcsTemp & 0xff)
        MOV     R3,#((adcsTemp >> 8) & 0xff)
        LCALL   zerofill
        CLR     A
        MOV     DPTR,#tempAdcsCount
        MOVX    @DPTR,A
// 1463             if( ++bufferCount == BUFFER_SIZE ){ enable2SendData = TRUE; bufferCount = 0; }
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        XRL     A,#0x8
        JNZ     ??readNextValue_7
        MOV     A,#0x1
        MOV     DPTR,#enable2SendData
        MOVX    @DPTR,A
        CLR     A
        MOV     DPTR,#bufferCount
        MOVX    @DPTR,A
// 1464         }
// 1465         adcCount = 0;
??readNextValue_7:
        CLR     A
        MOV     DPTR,#adcCount
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock393
// 1466     }
// 1467 }
??readNextValue_2:
        REQUIRE ?Subroutine126
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH
        ; // Fall through to label ?Subroutine126

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine126:
        CFI Block cfiBlock394 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock394

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??theShift:
        DS 2
        REQUIRE `?<Initializer for theShift>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
??rawVout:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 1468 //________________________________________________________________________________

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1469 void prepareTxBuffer(){
prepareTxBuffer:
        CFI Block cfiBlock395 Using cfiCommon0
        CFI Function prepareTxBuffer
        FUNCALL prepareTxBuffer, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1470      loadIV( page.curIV );  
        ; Setup parameters for call to function load
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        MOV     R1,#0x6
        LCALL   ??Subroutine81_1
// 1471      encode( 32, (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2) );
??CrossCallReturnLabel_217:
        ; Setup parameters for call to function code
        MOV     ?V0 + 0,#((radioPktBufferTx + 2) & 0xff)
        MOV     ?V0 + 1,#(((radioPktBufferTx + 2) >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R4,#(radioPktBuffer & 0xff)
        MOV     R5,#((radioPktBuffer >> 8) & 0xff)
        MOV     R2,#0x20
        MOV     R1,#0x0
        LCALL   `code`
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
// 1472      //loadIV( page.curIV );  
// 1473      //encode( 16, (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2) );
// 1474      //loadIV( page.curIV );  
// 1475      //encode( 16, (char *)(radioPktBuffer+16), (char *)(radioPktBufferTx+18) );
// 1476 
// 1477      // for SDAG debug 
// 1478      //mymemcpy( (char *)(radioPktBufferTx+2), (char *)radioPktBuffer, PACKET_LENGTH_ED-2 );
// 1479      
// 1480      radioPktBufferTx[0] = PACKET_LENGTH_ED;               // Length byte
        MOV     A,#0x22
        MOV     DPTR,#radioPktBufferTx
        MOVX    @DPTR,A
// 1481      radioPktBufferTx[1] = page.gwAddr;                    // GW address
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBufferTx + 1)
        MOVX    @DPTR,A
// 1482      packagePrepared = TRUE; 
        MOV     A,#0x1
        MOV     DPTR,#packagePrepared
        LJMP    ?Subroutine125
        CFI EndBlock cfiBlock395
// 1483 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1484 void copyMac( BYTE *ptr) { mymemcpy( ptr, page.myMac, 6); }
copyMac:
        CFI Block cfiBlock396 Using cfiCommon0
        CFI Function copyMac
        FUNCALL copyMac, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#((page + 6) & 0xff)
        MOV     R5,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiBlock396
// 1485 //#define copyMac( ptr ) mymemcpy( (BYTE *)ptr, page.myMac, 6); 

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1486 BYTE ndev = 0;
ndev:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1487 INT16 prevRssi = 0;
prevRssi:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1488 BYTE coefficients_buffer[ 24 ];
coefficients_buffer:
        DS 24
        REQUIRE __INIT_XDATA_Z
// 1489 void prepareCoeff(void);
// 1490 /******************************************************************************
// 1491 * Prepare data - average the round robin buffer into 10 values
// 1492 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1493 void prepareData(void){  
prepareData:
        CFI Block cfiBlock397 Using cfiCommon0
        CFI Function prepareData
        FUNCALL prepareData, prepareCoeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, prepareScaling
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, computeADCs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, copyMac
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, prepareTxBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
// 1494   UINT16 reportStatus = netValue;
        MOV     DPTR,#netValue
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1495 
// 1496   isCalibrationPackage = FALSE;
        CLR     A
        MOV     DPTR,#isCalibrationPackage
        MOVX    @DPTR,A
// 1497   //if(      reportScaling    ) prepareScaling();
// 1498   //if(      reportScaling    ){ prepareScaling();   isCalibrationPackage = TRUE;  }
// 1499   if(      reportScaling    ){ if( base_ptr==coefficients_buffer ) prepareCoeff(); else prepareScaling();   isCalibrationPackage = TRUE;  }
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      ??prepareData_0
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        XRL     A,#(coefficients_buffer & 0xff)
        JNZ     ??prepareData_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#((coefficients_buffer >> 8) & 0xff)
??prepareData_1:
        JNZ     ??prepareData_2
        ; Setup parameters for call to function prepareCoeff
        LCALL   prepareCoeff
        SJMP    ??prepareData_3
??prepareData_2:
        ; Setup parameters for call to function prepareScaling
        LCALL   prepareScaling
??prepareData_3:
        MOV     A,#0x1
        MOV     DPTR,#isCalibrationPackage
        LJMP    ??prepareData_4
// 1500   //else if( reportFlashCheck ) prepareFlashCheck();
// 1501   else if( enable2SendData  ){
??prepareData_0:
        MOV     DPTR,#enable2SendData
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??prepareData_5
// 1502       BYTE *ptr  = radioPktBuffer;
// 1503       //float e = energy + deltaEnergy;
// 1504       // UINT16 value = 50; 
// 1505       computeADCs( FALSE /*page.is500Always*/, FALSE ); 
        ; Setup parameters for call to function computeADCs
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   computeADCs
// 1506       // Insert the 6 byte timestamp into a static packet buffer
// 1507       // if( page.reportUTC ) mymemcpy( ptr, (BYTE *)&utc, 4 ); 
// 1508       //else                 mymemcpy( ptr, (BYTE *)&e,   4 );     // 
// 1509       mymemcpy( ptr, (BYTE *)&utc, 4 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utc & 0xff)
        MOV     R5,#((utc >> 8) & 0xff)
        MOV     R2,#(radioPktBuffer & 0xff)
        MOV     R3,#((radioPktBuffer >> 8) & 0xff)
        LCALL   mymemcpy
// 1510       ptr +=4;
// 1511       *ptr++ = (BYTE)curChannel;  *ptr++ = ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );    
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 4)
        MOVX    @DPTR,A
        MOV     A,#0x18
        ANL     A,0x90
        CLR     C
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ORL     A,R2
        RLC     A
        RLC     A
        ANL     A,#0xfc
        LCALL   ?Subroutine78
// 1512       //*ptr++ = (BYTE) adcs16[10];  *ptr++ = (BYTE)(0x3) | ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );    
// 1513       copyMac( ptr );  
// 1514       ptr += 6;                  // mac   
// 1515       // 12 bytes gone
// 1516       mymemcpy( ptr, (BYTE *)adcs16, 16 ); 
??CrossCallReturnLabel_206:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(adcs16 & 0xff)
        MOV     R5,#((adcs16 >> 8) & 0xff)
        MOV     R2,#((radioPktBuffer + 12) & 0xff)
        MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
        LCALL   ?Subroutine4
// 1517       if( page.is500Always )             reportStatus += 2 + ((UINT16)CHANNR)*100;
??CrossCallReturnLabel_317:
        JNC     ??prepareData_6
        MOV     DPTR,#-0x20fa
        LCALL   ?Subroutine66
??CrossCallReturnLabel_169:
        MOV     A,#0x2
        ADD     A,R0
        INC     R0
        SJMP    ??prepareData_7
// 1518       else if( page.isRelay  )           reportStatus += 1 + page.repeaterChannel*100;
??prepareData_6:
        MOV     C,0xE0 /* A   */.5
        JNC     ??prepareData_8
        MOV     DPTR,#(page + 192)
        LCALL   ?Subroutine66
??CrossCallReturnLabel_170:
        MOV     A,#0x1
        ADD     A,R0
??prepareData_7:
        INC     R0
        CLR     A
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
// 1519       if( page.searchCommunication )     reportStatus += 4;
??prepareData_8:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??prepareData_9
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1520       if( page.use250kbod )              reportStatus += 8;
??prepareData_9:
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??prepareData_10
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1521       if( isOnTestStand )                reportStatus += 16;
??prepareData_10:
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JZ      ??prepareData_11
        MOV     A,R6
        ADD     A,#0x10
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1522       *((INT16 *)(ptr+14)) = reportStatus;
??prepareData_11:
        MOV     DPTR,#(radioPktBuffer + 26)
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1523       /*
// 1524       if(      mdm_rate1[0] == 0x0E )   *((INT16 *)(ptr+2)) = 3000;
// 1525       else if( mdm_rate1[0] == 0x1E )   *((INT16 *)(ptr+2)) = 1000;
// 1526       else                              *((INT16 *)(ptr+2)) = 2000;
// 1527       */
// 1528       //*((INT16 *)(ptr+12)) = cmdCount;//_slot;
// 1529       //*((INT16 *)(ptr+12)) = decodeDelay; // temperatureProtectionDelay;
// 1530       ptr += 16;
// 1531       //*ptr++ = (BYTE) theRealOffset;    //   lastOff;       // 28
// 1532       *ptr++ = lastRssi ? ((BYTE) theRealOffset) : 0x3F; //0x7F;
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        JNZ     ??prepareData_12
        INC     DPTR
        MOVX    A,@DPTR
??prepareData_12:
        JZ      ??prepareData_13
        MOV     DPTR,#theRealOffset
        MOVX    A,@DPTR
        MOV     R2,A
        SJMP    ??prepareData_14
??prepareData_13:
        MOV     R2,#0x3f
??prepareData_14:
        MOV     A,R2
        MOV     DPTR,#(radioPktBuffer + 28)
        MOVX    @DPTR,A
// 1533       if( !lastRssi ) lastRssi = prevRssi; else prevRssi = lastRssi;
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        JNZ     ??prepareData_15
        INC     DPTR
        MOVX    A,@DPTR
??prepareData_15:
        JNZ     ??prepareData_16
        MOV     DPTR,#prevRssi
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_158:
        MOV     DPTR,#lastRssi
        SJMP    ??prepareData_17
??prepareData_16:
        MOV     DPTR,#lastRssi
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_159:
        MOV     DPTR,#prevRssi
??prepareData_17:
        LCALL   ??Subroutine68_0
// 1534       *ptr++ = (BYTE) ( lastRssi );    // 29
??CrossCallReturnLabel_176:
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 29)
        MOVX    @DPTR,A
// 1535       //*ptr++ = T3CC1;  // recalculated OC value for the test of the OC controlling algorithm
// 1536       if( P1_4 ){
        MOV     C,0x90.4
        JNC     ??prepareData_18
// 1537           *ptr++ = (BYTE)   T3CC0;          
        MOV     A,0xcd
        MOV     DPTR,#(radioPktBuffer + 30)
        MOVX    @DPTR,A
// 1538           *ptr   = (BYTE)   theOC; // timer2oc( T3CC1 ); //T3CC1;         // 30 & 31
        MOV     DPTR,#theOC
        SJMP    ??prepareData_19
// 1539           #ifdef MidString
// 1540             if( *ptr > ocShortCircuitLimit ) *ptr = ocShortCircuitLimit;
// 1541           #endif
// 1542       }else{
// 1543           *ptr++ = page.ov;
??prepareData_18:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 30)
        MOVX    @DPTR,A
// 1544           *ptr   = (BYTE)   setOC;   
        MOV     DPTR,#setOC
??prepareData_19:
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 31)
        MOVX    @DPTR,A
// 1545       }
// 1546       lastRssi = 0;
        MOV     DPTR,#lastRssi
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??prepareData_4:
        MOVX    @DPTR,A
// 1547   }else return;
// 1548   prepareTxBuffer();        
        ; Setup parameters for call to function prepareTxBuffer
        LCALL   prepareTxBuffer
// 1549 }
??prepareData_5:
        SJMP    ?Subroutine123
        CFI EndBlock cfiBlock397
        REQUIRE _A_P1
        REQUIRE T3CC0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond398 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_169
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker400 Using cfiCommon1
        CFI (cfiPicker400) NoFunction
        CFI (cfiPicker400) Picker
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        RET
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiPicker400

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond401 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_160
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond402 Using cfiCommon0
        CFI (cfiCond402) NoFunction
        CFI (cfiCond402) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond402) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond402) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond402) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond402) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond402) CFA_SP SP+0
        CFI (cfiCond402) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker403 Using cfiCommon1
        CFI (cfiPicker403) NoFunction
        CFI (cfiPicker403) Picker
        MOV     DPTR,#msLocal
        CFI Block cfiCond404 Using cfiCommon0
        CFI (cfiCond404) NoFunction
        CFI (cfiCond404) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond404) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond404) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond404) CFA_SP SP+0
        CFI (cfiCond404) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond405 Using cfiCommon0
        CFI (cfiCond405) NoFunction
        CFI (cfiCond405) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond405) CFA_SP SP+0
        CFI (cfiCond405) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond406 Using cfiCommon0
        CFI (cfiCond406) NoFunction
        CFI (cfiCond406) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond406) CFA_SP SP+0
        CFI (cfiCond406) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond407 Using cfiCommon0
        CFI (cfiCond407) NoFunction
        CFI (cfiCond407) Conditional ??CrossCallReturnLabel_155
        CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond407) CFA_SP SP+0
        CFI (cfiCond407) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond408 Using cfiCommon0
        CFI (cfiCond408) NoFunction
        CFI (cfiCond408) Conditional ??CrossCallReturnLabel_156
        CFI Block cfiCond409 Using cfiCommon0
        CFI (cfiCond409) NoFunction
        CFI (cfiCond409) Conditional ??CrossCallReturnLabel_157
        CFI Block cfiCond410 Using cfiCommon0
        CFI (cfiCond410) NoFunction
        CFI (cfiCond410) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond410) CFA_SP SP+0
        CFI (cfiCond410) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond411 Using cfiCommon0
        CFI (cfiCond411) NoFunction
        CFI (cfiCond411) Conditional ??CrossCallReturnLabel_159
        CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond411) CFA_SP SP+0
        CFI (cfiCond411) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_162
        CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond412) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond412) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond412) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond412) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond412) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond412) CFA_SP SP+0
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond413 Using cfiCommon0
        CFI (cfiCond413) NoFunction
        CFI (cfiCond413) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond413) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond413) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond413) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond413) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond413) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond413) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond413) CFA_SP SP+0
        CFI (cfiCond413) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond414 Using cfiCommon0
        CFI (cfiCond414) NoFunction
        CFI (cfiCond414) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond414) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond414) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond414) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond414) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond414) CFA_SP SP+0
        CFI (cfiCond414) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond415 Using cfiCommon0
        CFI (cfiCond415) NoFunction
        CFI (cfiCond415) Conditional ??CrossCallReturnLabel_165
        CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond415) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond415) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond415) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond415) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond415) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond415) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond415) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond415) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond415) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond415) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond415) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond415) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond415) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond415) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond415) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond415) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond415) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond415) CFA_SP SP+0
        CFI (cfiCond415) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond416 Using cfiCommon0
        CFI (cfiCond416) NoFunction
        CFI (cfiCond416) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond416) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond416) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond416) CFA_SP SP+0
        CFI (cfiCond416) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond417 Using cfiCommon0
        CFI (cfiCond417) NoFunction
        CFI (cfiCond417) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond417) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond417) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond417) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond417) CFA_SP SP+0
        CFI (cfiCond417) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond418 Using cfiCommon0
        CFI (cfiCond418) NoFunction
        CFI (cfiCond418) Conditional ??CrossCallReturnLabel_168
        CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond418) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond418) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond418) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond418) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond418) CFA_SP SP+0
        CFI (cfiCond418) CFA_XSP16 add(XSP16, 13)
??Subroutine65_0:
        LCALL   ?Subroutine100
??CrossCallReturnLabel_267:
        RET
        CFI EndBlock cfiCond401
        CFI EndBlock cfiCond402
        CFI EndBlock cfiPicker403
        CFI EndBlock cfiCond404
        CFI EndBlock cfiCond405
        CFI EndBlock cfiCond406
        CFI EndBlock cfiCond407
        CFI EndBlock cfiCond408
        CFI EndBlock cfiCond409
        CFI EndBlock cfiCond410
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiCond413
        CFI EndBlock cfiCond414
        CFI EndBlock cfiCond415
        CFI EndBlock cfiCond416
        CFI EndBlock cfiCond417
        CFI EndBlock cfiCond418

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine100:
        CFI Block cfiCond419 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_266, ??CrossCallReturnLabel_136
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond420 Using cfiCommon0
        CFI (cfiCond420) NoFunction
        CFI (cfiCond420) Conditional ??CrossCallReturnLabel_266, ??CrossCallReturnLabel_137
        CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond420) CFA_SP SP+0
        CFI (cfiCond420) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond421 Using cfiCommon0
        CFI (cfiCond421) NoFunction
        CFI (cfiCond421) Conditional ??CrossCallReturnLabel_266, ??CrossCallReturnLabel_138
        CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond421) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond421) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond421) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond421) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond421) CFA_SP SP+0
        CFI (cfiCond421) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond422 Using cfiCommon0
        CFI (cfiCond422) NoFunction
        CFI (cfiCond422) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_328
        CFI (cfiCond422) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond422) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond422) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond422) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond422) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond422) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond422) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond422) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond422) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond422) CFA_SP SP+0
        CFI (cfiCond422) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond423 Using cfiCommon0
        CFI (cfiCond423) NoFunction
        CFI (cfiCond423) Conditional ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_329
        CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond423) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond423) CFA_SP SP+0
        CFI (cfiCond423) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_74
        CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond424) CFA_SP SP+0
        CFI (cfiCond424) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_75
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_160
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond426) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond426) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond427 Using cfiCommon0
        CFI (cfiCond427) NoFunction
        CFI (cfiCond427) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_161
        CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond427) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond427) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond427) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond427) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond427) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond427) CFA_SP SP+0
        CFI (cfiCond427) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond428 Using cfiCommon0
        CFI (cfiCond428) NoFunction
        CFI (cfiCond428) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_152
        CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond428) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond428) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond428) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond428) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond428) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond428) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond428) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond428) CFA_SP SP+0
        CFI (cfiCond428) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond429 Using cfiCommon0
        CFI (cfiCond429) NoFunction
        CFI (cfiCond429) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_153
        CFI (cfiCond429) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond429) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond429) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond429) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond429) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond429) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond429) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond429) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond429) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond429) CFA_SP SP+0
        CFI (cfiCond429) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond430 Using cfiCommon0
        CFI (cfiCond430) NoFunction
        CFI (cfiCond430) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_154
        CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond430) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond430) CFA_SP SP+0
        CFI (cfiCond430) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond431 Using cfiCommon0
        CFI (cfiCond431) NoFunction
        CFI (cfiCond431) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_155
        CFI (cfiCond431) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond431) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond431) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond431) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond431) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond431) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond431) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond431) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond431) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond431) CFA_SP SP+0
        CFI (cfiCond431) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond432 Using cfiCommon0
        CFI (cfiCond432) NoFunction
        CFI (cfiCond432) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_156
        CFI Block cfiCond433 Using cfiCommon0
        CFI (cfiCond433) NoFunction
        CFI (cfiCond433) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_157
        CFI Block cfiCond434 Using cfiCommon0
        CFI (cfiCond434) NoFunction
        CFI (cfiCond434) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_158
        CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond434) CFA_SP SP+0
        CFI (cfiCond434) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond435 Using cfiCommon0
        CFI (cfiCond435) NoFunction
        CFI (cfiCond435) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_159
        CFI (cfiCond435) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond435) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond435) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond435) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond435) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond435) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond435) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond435) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond435) CFA_SP SP+0
        CFI (cfiCond435) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_162
        CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond436) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond436) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond436) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond436) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond436) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond436) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond436) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond436) CFA_SP SP+0
        CFI (cfiCond436) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond437 Using cfiCommon0
        CFI (cfiCond437) NoFunction
        CFI (cfiCond437) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_163
        CFI (cfiCond437) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond437) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond437) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond437) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond437) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond437) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond437) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond437) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond437) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond437) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond437) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond437) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond437) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond437) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond437) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond437) CFA_SP SP+0
        CFI (cfiCond437) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond438 Using cfiCommon0
        CFI (cfiCond438) NoFunction
        CFI (cfiCond438) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_164
        CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond438) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond438) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond438) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond438) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond438) CFA_SP SP+0
        CFI (cfiCond438) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_165
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond439) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond439) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond439) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond439) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond439) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond439) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond439) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond439) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond439) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond439) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond439) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond439) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond439) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond439) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond439) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond439) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond439) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond439) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond439) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond440 Using cfiCommon0
        CFI (cfiCond440) NoFunction
        CFI (cfiCond440) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_166
        CFI (cfiCond440) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond440) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond440) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond440) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond440) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond440) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond440) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond440) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond440) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond440) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond440) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond440) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond440) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond440) CFA_SP SP+0
        CFI (cfiCond440) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond441 Using cfiCommon0
        CFI (cfiCond441) NoFunction
        CFI (cfiCond441) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_167
        CFI (cfiCond441) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond441) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond441) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond441) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond441) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond441) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond441) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond441) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond441) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond441) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond441) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond441) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond441) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond441) CFA_SP SP+0
        CFI (cfiCond441) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_168
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond443 Using cfiCommon0
        CFI (cfiCond443) NoFunction
        CFI (cfiCond443) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_66
        CFI (cfiCond443) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond443) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond443) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond443) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond443) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond443) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond443) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond443) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond443) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond443) CFA_SP SP+0
        CFI (cfiCond443) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond444 Using cfiCommon0
        CFI (cfiCond444) NoFunction
        CFI (cfiCond444) Conditional ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_67
        CFI (cfiCond444) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond444) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond444) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond444) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond444) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond444) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond444) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond444) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond444) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond444) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond444) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond444) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond444) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond444) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond444) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond444) CFA_SP SP+0
        CFI (cfiCond444) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond445 Using cfiCommon0
        CFI (cfiCond445) NoFunction
        CFI (cfiCond445) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_78
        CFI (cfiCond445) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond445) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond445) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond445) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond445) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond445) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond445) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond445) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond445) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond445) CFA_SP SP+0
        CFI (cfiCond445) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_79
        CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond446) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond446) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond446) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond446) CFA_SP SP+0
        CFI (cfiCond446) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond447 Using cfiCommon0
        CFI (cfiCond447) NoFunction
        CFI (cfiCond447) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_15
        CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond447) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond447) CFA_SP SP+0
        CFI (cfiCond447) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond448 Using cfiCommon0
        CFI (cfiCond448) NoFunction
        CFI (cfiCond448) Conditional ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_16
        CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond448) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond448) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond448) CFA_SP SP+0
        CFI (cfiCond448) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond449 Using cfiCommon0
        CFI (cfiCond449) NoFunction
        CFI (cfiCond449) Conditional ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_43
        CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond449) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond449) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond449) CFA_SP SP+0
        CFI (cfiCond449) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond450 Using cfiCommon0
        CFI (cfiCond450) NoFunction
        CFI (cfiCond450) Conditional ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_44
        CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond450) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond450) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond450) CFA_SP SP+0
        CFI (cfiCond450) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker451 Using cfiCommon1
        CFI (cfiPicker451) NoFunction
        CFI (cfiPicker451) Picker
        LCALL   ?Subroutine107
??CrossCallReturnLabel_279:
        RET
        CFI EndBlock cfiCond419
        CFI EndBlock cfiCond420
        CFI EndBlock cfiCond421
        CFI EndBlock cfiCond422
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiCond427
        CFI EndBlock cfiCond428
        CFI EndBlock cfiCond429
        CFI EndBlock cfiCond430
        CFI EndBlock cfiCond431
        CFI EndBlock cfiCond432
        CFI EndBlock cfiCond433
        CFI EndBlock cfiCond434
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiCond437
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiCond440
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiCond443
        CFI EndBlock cfiCond444
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiCond447
        CFI EndBlock cfiCond448
        CFI EndBlock cfiCond449
        CFI EndBlock cfiCond450
        CFI EndBlock cfiPicker451

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine107:
        CFI Block cfiCond452 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_266, ??CrossCallReturnLabel_136
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond453 Using cfiCommon0
        CFI (cfiCond453) NoFunction
        CFI (cfiCond453) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_266, ??CrossCallReturnLabel_137
        CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond453) CFA_SP SP+0
        CFI (cfiCond453) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_266, ??CrossCallReturnLabel_138
        CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond454) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond454) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond454) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond454) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond454) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond454) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond454) CFA_SP SP+0
        CFI (cfiCond454) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond455 Using cfiCommon0
        CFI (cfiCond455) NoFunction
        CFI (cfiCond455) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_328
        CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond455) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond455) CFA_SP SP+0
        CFI (cfiCond455) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond456 Using cfiCommon0
        CFI (cfiCond456) NoFunction
        CFI (cfiCond456) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_260, ??CrossCallReturnLabel_329
        CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond456) CFA_SP SP+0
        CFI (cfiCond456) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_74
        CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond457) CFA_SP SP+0
        CFI (cfiCond457) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond458 Using cfiCommon0
        CFI (cfiCond458) NoFunction
        CFI (cfiCond458) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_264, ??CrossCallReturnLabel_75
        CFI Block cfiCond459 Using cfiCommon0
        CFI (cfiCond459) NoFunction
        CFI (cfiCond459) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_160
        CFI (cfiCond459) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond459) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond459) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond459) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond459) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond459) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond459) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond459) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond459) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond459) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond459) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond459) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond459) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond459) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond459) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond459) CFA_SP SP+0
        CFI (cfiCond459) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond460 Using cfiCommon0
        CFI (cfiCond460) NoFunction
        CFI (cfiCond460) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_161
        CFI (cfiCond460) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond460) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond460) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond460) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond460) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond460) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond460) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond460) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond460) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond460) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond460) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond460) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond460) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond460) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond460) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond460) CFA_SP SP+0
        CFI (cfiCond460) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond461 Using cfiCommon0
        CFI (cfiCond461) NoFunction
        CFI (cfiCond461) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_152
        CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond461) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond461) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond461) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond461) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond461) CFA_SP SP+0
        CFI (cfiCond461) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond462 Using cfiCommon0
        CFI (cfiCond462) NoFunction
        CFI (cfiCond462) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_153
        CFI (cfiCond462) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond462) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond462) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond462) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond462) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond462) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond462) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond462) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond462) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond462) CFA_SP SP+0
        CFI (cfiCond462) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond463 Using cfiCommon0
        CFI (cfiCond463) NoFunction
        CFI (cfiCond463) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_154
        CFI (cfiCond463) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond463) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond463) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond463) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond463) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond463) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond463) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond463) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond463) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond463) CFA_SP SP+0
        CFI (cfiCond463) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_155
        CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond464) CFA_SP SP+0
        CFI (cfiCond464) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond465 Using cfiCommon0
        CFI (cfiCond465) NoFunction
        CFI (cfiCond465) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_156
        CFI Block cfiCond466 Using cfiCommon0
        CFI (cfiCond466) NoFunction
        CFI (cfiCond466) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_157
        CFI Block cfiCond467 Using cfiCommon0
        CFI (cfiCond467) NoFunction
        CFI (cfiCond467) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_158
        CFI (cfiCond467) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond467) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond467) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond467) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond467) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond467) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond467) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond467) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond467) CFA_SP SP+0
        CFI (cfiCond467) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond468 Using cfiCommon0
        CFI (cfiCond468) NoFunction
        CFI (cfiCond468) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_159
        CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond468) CFA_SP SP+0
        CFI (cfiCond468) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond469 Using cfiCommon0
        CFI (cfiCond469) NoFunction
        CFI (cfiCond469) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_162
        CFI (cfiCond469) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond469) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond469) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond469) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond469) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond469) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond469) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond469) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond469) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond469) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond469) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond469) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond469) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond469) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond469) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond469) CFA_SP SP+0
        CFI (cfiCond469) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond470 Using cfiCommon0
        CFI (cfiCond470) NoFunction
        CFI (cfiCond470) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_163
        CFI (cfiCond470) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond470) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond470) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond470) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond470) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond470) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond470) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond470) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond470) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond470) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond470) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond470) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond470) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond470) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond470) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond470) CFA_SP SP+0
        CFI (cfiCond470) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond471 Using cfiCommon0
        CFI (cfiCond471) NoFunction
        CFI (cfiCond471) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_164
        CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond471) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond471) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond471) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond471) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond471) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond471) CFA_SP SP+0
        CFI (cfiCond471) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond472 Using cfiCommon0
        CFI (cfiCond472) NoFunction
        CFI (cfiCond472) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_165
        CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond472) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond472) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond472) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond472) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond472) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond472) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond472) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond472) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond472) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond472) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond472) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond472) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond472) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond472) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond472) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond472) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond472) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond472) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond472) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond472) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond472) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond472) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond472) CFA_SP SP+0
        CFI (cfiCond472) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond473 Using cfiCommon0
        CFI (cfiCond473) NoFunction
        CFI (cfiCond473) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_166
        CFI (cfiCond473) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond473) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond473) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond473) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond473) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond473) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond473) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond473) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond473) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond473) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond473) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond473) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond473) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond473) CFA_SP SP+0
        CFI (cfiCond473) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_167
        CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond474) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond474) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond474) CFA_SP SP+0
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond475 Using cfiCommon0
        CFI (cfiCond475) NoFunction
        CFI (cfiCond475) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_267, ??CrossCallReturnLabel_168
        CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond475) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond475) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond475) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond475) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond475) CFA_SP SP+0
        CFI (cfiCond475) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond476 Using cfiCommon0
        CFI (cfiCond476) NoFunction
        CFI (cfiCond476) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_66
        CFI (cfiCond476) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond476) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond476) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond476) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond476) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond476) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond476) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond476) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond476) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond476) CFA_SP SP+0
        CFI (cfiCond476) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_263, ??CrossCallReturnLabel_67
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_78
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond479 Using cfiCommon0
        CFI (cfiCond479) NoFunction
        CFI (cfiCond479) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_265, ??CrossCallReturnLabel_79
        CFI (cfiCond479) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond479) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond479) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond479) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond479) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond479) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond479) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond479) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond479) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond479) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond479) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond479) CFA_SP SP+0
        CFI (cfiCond479) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_15
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_261, ??CrossCallReturnLabel_16
        CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond481) CFA_SP SP+0
        CFI (cfiCond481) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_43
        CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond482) CFA_SP SP+0
        CFI (cfiCond482) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond483 Using cfiCommon0
        CFI (cfiCond483) NoFunction
        CFI (cfiCond483) Conditional ??CrossCallReturnLabel_279, ??CrossCallReturnLabel_262, ??CrossCallReturnLabel_44
        CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond483) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond483) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond483) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond483) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond483) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond483) CFA_SP SP+0
        CFI (cfiCond483) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond484 Using cfiCommon0
        CFI (cfiCond484) NoFunction
        CFI (cfiCond484) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_150
        CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond484) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond484) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond484) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond484) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond484) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond484) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond484) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond484) CFA_SP SP+0
        CFI (cfiCond484) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond485 Using cfiCommon0
        CFI (cfiCond485) NoFunction
        CFI (cfiCond485) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_151
        CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond485) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond485) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond485) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond485) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond485) CFA_SP SP+0
        CFI (cfiCond485) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond486 Using cfiCommon0
        CFI (cfiCond486) NoFunction
        CFI (cfiCond486) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_0
        CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond486) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond486) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond486) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond486) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond486) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond486) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond486) CFA_SP SP+0
        CFI (cfiCond486) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond487 Using cfiCommon0
        CFI (cfiCond487) NoFunction
        CFI (cfiCond487) Conditional ??CrossCallReturnLabel_277, ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_1
        CFI (cfiCond487) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond487) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond487) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond487) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond487) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond487) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond487) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond487) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond487) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond487) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond487) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond487) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond487) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond487) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond487) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond487) CFA_SP SP+0
        CFI (cfiCond487) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond488 Using cfiCommon0
        CFI (cfiCond488) NoFunction
        CFI (cfiCond488) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_148
        CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond488) CFA_SP SP+0
        CFI (cfiCond488) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_149
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond490 Using cfiCommon0
        CFI (cfiCond490) NoFunction
        CFI (cfiCond490) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_15
        CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond490) CFA_SP SP+0
        CFI (cfiCond490) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond491 Using cfiCommon0
        CFI (cfiCond491) NoFunction
        CFI (cfiCond491) Conditional ??CrossCallReturnLabel_278, ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_16
        CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond491) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond491) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond491) CFA_SP SP+0
        CFI (cfiCond491) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_76
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond493 Using cfiCommon0
        CFI (cfiCond493) NoFunction
        CFI (cfiCond493) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_77
        CFI (cfiCond493) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond493) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond493) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond493) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond493) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond493) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond493) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond493) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond493) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond493) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond493) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond493) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond493) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond493) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond493) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond493) CFA_SP SP+0
        CFI (cfiCond493) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond494 Using cfiCommon0
        CFI (cfiCond494) NoFunction
        CFI (cfiCond494) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_41
        CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond494) CFA_SP SP+0
        CFI (cfiCond494) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond495 Using cfiCommon0
        CFI (cfiCond495) NoFunction
        CFI (cfiCond495) Conditional ??CrossCallReturnLabel_276, ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_42
        CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond495) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond495) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond495) CFA_SP SP+0
        CFI (cfiCond495) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker496 Using cfiCommon1
        CFI (cfiPicker496) NoFunction
        CFI (cfiPicker496) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond452
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiCond455
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiCond458
        CFI EndBlock cfiCond459
        CFI EndBlock cfiCond460
        CFI EndBlock cfiCond461
        CFI EndBlock cfiCond462
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiCond465
        CFI EndBlock cfiCond466
        CFI EndBlock cfiCond467
        CFI EndBlock cfiCond468
        CFI EndBlock cfiCond469
        CFI EndBlock cfiCond470
        CFI EndBlock cfiCond471
        CFI EndBlock cfiCond472
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiCond475
        CFI EndBlock cfiCond476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiCond483
        CFI EndBlock cfiCond484
        CFI EndBlock cfiCond485
        CFI EndBlock cfiCond486
        CFI EndBlock cfiCond487
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiCond490
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiCond493
        CFI EndBlock cfiCond494
        CFI EndBlock cfiCond495
        CFI EndBlock cfiPicker496

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond497 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_316
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_317
        CFI (cfiCond498) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond498) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond498) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond498) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond498) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond498) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond498) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond498) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond498) CFA_SP SP+0
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker499 Using cfiCommon1
        CFI (cfiPicker499) NoFunction
        CFI (cfiPicker499) Picker
        LCALL   mymemcpy
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiPicker499
        REQUIRE ?Subroutine114
        ; // Fall through to label ?Subroutine114

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine114:
        CFI Block cfiCond500 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_316
        CFI Block cfiCond501 Using cfiCommon0
        CFI (cfiCond501) NoFunction
        CFI (cfiCond501) Conditional ??CrossCallReturnLabel_317
        CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond501) CFA_SP SP+0
        CFI (cfiCond501) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond502 Using cfiCommon0
        CFI (cfiCond502) NoFunction
        CFI (cfiCond502) Conditional ??CrossCallReturnLabel_313
        CFI (cfiCond502) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond502) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond502) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond502) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond502) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond502) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond502) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond502) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond502) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond502) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond502) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond502) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond502) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond502) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond502) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond502) CFA_SP SP+0
        CFI (cfiCond502) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond503 Using cfiCommon0
        CFI (cfiCond503) NoFunction
        CFI (cfiCond503) Conditional ??CrossCallReturnLabel_314
        CFI (cfiCond503) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond503) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond503) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond503) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond503) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond503) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond503) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond503) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond503) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond503) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond503) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond503) CFA_SP SP+0
        CFI (cfiCond503) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_315
        CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond504) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond504) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond504) CFA_SP SP+0
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker505 Using cfiCommon1
        CFI (cfiPicker505) NoFunction
        CFI (cfiPicker505) Picker
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        RET
        CFI EndBlock cfiCond500
        CFI EndBlock cfiCond501
        CFI EndBlock cfiCond502
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiPicker505
// 1550 /******************************************************************************
// 1551 * Prepare scaling coeff to send
// 1552 ******************************************************************************/
// 1553 /*
// 1554 void prepareSpecial( BYTE tag, BYTE *p ){
// 1555 BYTE *ptr = radioPktBuffer;
// 1556     //tag |= ( ((UINT16)page.netId) << 10 );
// 1557     // *((UINT16 *)(ptr+4)) = tag;
// 1558     *(ptr+5) = 3 | (page.netId << 2);
// 1559     *(ptr+4) = tag;
// 1560     //mymemcpy( ptr+4, (BYTE *)&tag, 2 );
// 1561     copyMac( ptr+6 ); 
// 1562     mymemcpy( ptr,    p,   4 ); 
// 1563     mymemcpy( ptr+12, p+4, 20 );
// 1564 }
// 1565 */

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1566 void prepareSpecial( BYTE tag, BYTE *p ){
prepareSpecial:
        CFI Block cfiBlock506 Using cfiCommon0
        CFI Function prepareSpecial
        FUNCALL prepareSpecial, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareSpecial, copyMac
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareSpecial, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1567 BYTE *ptr = radioPktBuffer;
// 1568     mymemcpy( ptr,    p,   4 ); ptr+=4;
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#(radioPktBuffer & 0xff)
        MOV     R3,#((radioPktBuffer >> 8) & 0xff)
        LCALL   mymemcpy
// 1569     *ptr++ = tag;
        MOV     A,?V0 + 0
        MOV     DPTR,#(radioPktBuffer + 4)
        MOVX    @DPTR,A
// 1570     *ptr++ = 3 | (page.netId << 2);
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        ANL     A,#0xfc
        ORL     A,#0x3
        LCALL   ?Subroutine78
// 1571     copyMac( ptr ); 
// 1572     mymemcpy( ptr+6, p+4, 20 );
??CrossCallReturnLabel_207:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x14
        MOV     A,R6
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#((radioPktBuffer + 12) & 0xff)
        MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
        LCALL   mymemcpy
        CFI EndBlock cfiBlock506
// 1573 }
        REQUIRE ?Subroutine123
        ; // Fall through to label ?Subroutine123

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine123:
        CFI Block cfiBlock507 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock507

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiCond508 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_206
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_207
        CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond509) CFA_SP SP+0
        CFI (cfiCond509) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker510 Using cfiCommon1
        CFI (cfiPicker510) NoFunction
        CFI (cfiPicker510) Picker
        MOV     DPTR,#(radioPktBuffer + 5)
        MOVX    @DPTR,A
        ; Setup parameters for call to function copyMac
        ; Setup parameters for call to function copyMac
        MOV     R2,#((radioPktBuffer + 6) & 0xff)
        MOV     R3,#(((radioPktBuffer + 6) >> 8) & 0xff)
        LCALL   copyMac
        RET
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiPicker510

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1574 void prepareCoeff(void){
prepareCoeff:
        CFI Block cfiBlock511 Using cfiCommon0
        CFI Function prepareCoeff
        FUNCALL prepareCoeff, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, prepareSpecial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
// 1575     BYTE idx;
// 1576     UINT16 *ptrU16 = (UINT16 *)coefficients_buffer;
        MOV     R6,#(coefficients_buffer & 0xff)
        MOV     R7,#((coefficients_buffer >> 8) & 0xff)
// 1577     INT16  *ptrI16 = (INT16 *)&(coefficients_buffer[12]);
// 1578     for( idx = 0;  idx < 7;  idx++) if( idx != 4 ) *ptrU16 ++ = convU( 1E3 * page.linearK[ idx ][0] );  
        MOV     ?V0 + 0,#0x0
        SJMP    ??prepareCoeff_0
??prepareCoeff_1:
        MOV     A,#0x4
        XRL     A,?V0 + 0
        JZ      ??prepareCoeff_2
??prepareCoeff_0:
        ; Setup parameters for call to function convU
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#((page + 40) & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#(((page + 40) >> 8) & 0xff)
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convU
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine112_0
??CrossCallReturnLabel_287:
        MOV     A,R6
        ADD     A,#0x2
        MOV     A,R7
        ADDC    A,#0x0
        INC     R6
        INC     R6
        MOV     R7,A
??prepareCoeff_2:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7
        JC      ??prepareCoeff_1
// 1579     *ptrI16++ = convS( page.linearK[0][1] );
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 44)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 12)
        LCALL   ??Subroutine112_0
// 1580     *ptrI16++ = convS( page.linearK[2][1] );
??CrossCallReturnLabel_288:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 60)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 14)
        LCALL   ??Subroutine112_0
// 1581     *ptrI16++ = convS( page.linearK[5][1] );
??CrossCallReturnLabel_289:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 84)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 16)
        LCALL   ??Subroutine112_0
// 1582     *ptrI16++ = convS( page.linearK[6][1] );
??CrossCallReturnLabel_290:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 92)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 18)
        LCALL   ??Subroutine112_0
// 1583     *ptrI16++ = convS( page.dFk[3] );    
??CrossCallReturnLabel_291:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 24)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 20)
        LCALL   ??Subroutine112_0
// 1584     coefficients_buffer[ 22 ] = (BYTE) T3CC0; 
??CrossCallReturnLabel_292:
        MOV     A,0xcd
        MOV     DPTR,#(coefficients_buffer + 22)
        MOVX    @DPTR,A
// 1585     coefficients_buffer[ 23 ] = (BYTE) theOC;
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        MOV     DPTR,#(coefficients_buffer + 23)
        MOVX    @DPTR,A
// 1586     prepareSpecial( 0xEC, coefficients_buffer ); 
        ; Setup parameters for call to function prepareSpecial
        MOV     R2,#(coefficients_buffer & 0xff)
        MOV     R3,#((coefficients_buffer >> 8) & 0xff)
        MOV     R1,#-0x14
        LCALL   prepareSpecial
// 1587 }
        LJMP    ?Subroutine111
        CFI EndBlock cfiBlock511
        REQUIRE T3CC0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine112:
        CFI Block cfiCond512 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_305
        CFI Block cfiCond513 Using cfiCommon0
        CFI (cfiCond513) NoFunction
        CFI (cfiCond513) Conditional ??CrossCallReturnLabel_306
        CFI Block cfiCond514 Using cfiCommon0
        CFI (cfiCond514) NoFunction
        CFI (cfiCond514) Conditional ??CrossCallReturnLabel_297
        CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond514) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond514) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond514) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond514) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond514) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond514) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond514) CFA_SP SP+0
        CFI (cfiCond514) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond515 Using cfiCommon0
        CFI (cfiCond515) NoFunction
        CFI (cfiCond515) Conditional ??CrossCallReturnLabel_298
        CFI (cfiCond515) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond515) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond515) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond515) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond515) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond515) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond515) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond515) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond515) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond515) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond515) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond515) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond515) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond515) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond515) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond515) CFA_SP SP+0
        CFI (cfiCond515) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker516 Using cfiCommon1
        CFI (cfiPicker516) NoFunction
        CFI (cfiPicker516) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_286
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_287
        CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond518) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond518) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond518) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond518) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond518) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond518) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond518) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond518) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond518) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond518) CFA_SP SP+0
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond519 Using cfiCommon0
        CFI (cfiCond519) NoFunction
        CFI (cfiCond519) Conditional ??CrossCallReturnLabel_288
        CFI (cfiCond519) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond519) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond519) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond519) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond519) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond519) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond519) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond519) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond519) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond519) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond519) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond519) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond519) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond519) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond519) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond519) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond519) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond519) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond519) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond519) CFA_SP SP+0
        CFI (cfiCond519) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond520 Using cfiCommon0
        CFI (cfiCond520) NoFunction
        CFI (cfiCond520) Conditional ??CrossCallReturnLabel_289
        CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond520) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond520) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond520) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond520) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond520) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond520) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond520) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond520) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond520) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond520) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond520) CFA_SP SP+0
        CFI (cfiCond520) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond521 Using cfiCommon0
        CFI (cfiCond521) NoFunction
        CFI (cfiCond521) Conditional ??CrossCallReturnLabel_290
        CFI (cfiCond521) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond521) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond521) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond521) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond521) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond521) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond521) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond521) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond521) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond521) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond521) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond521) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond521) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond521) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond521) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond521) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond521) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond521) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond521) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond521) CFA_SP SP+0
        CFI (cfiCond521) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond522 Using cfiCommon0
        CFI (cfiCond522) NoFunction
        CFI (cfiCond522) Conditional ??CrossCallReturnLabel_291
        CFI (cfiCond522) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond522) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond522) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond522) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond522) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond522) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond522) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond522) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond522) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond522) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond522) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond522) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond522) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond522) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond522) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond522) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond522) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond522) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond522) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond522) CFA_SP SP+0
        CFI (cfiCond522) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond523 Using cfiCommon0
        CFI (cfiCond523) NoFunction
        CFI (cfiCond523) Conditional ??CrossCallReturnLabel_292
        CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond523) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond523) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond523) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond523) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond523) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond523) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond523) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond523) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond523) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond523) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond523) CFA_SP SP+0
        CFI (cfiCond523) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond524 Using cfiCommon0
        CFI (cfiCond524) NoFunction
        CFI (cfiCond524) Conditional ??CrossCallReturnLabel_293
        CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond524) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond524) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond524) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond524) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond524) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond524) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond524) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond524) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond524) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond524) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond524) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond524) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond524) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond524) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond524) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond524) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond524) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond524) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond524) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond524) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond524) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond524) CFA_SP SP+0
        CFI (cfiCond524) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond525 Using cfiCommon0
        CFI (cfiCond525) NoFunction
        CFI (cfiCond525) Conditional ??CrossCallReturnLabel_294
        CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond525) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond525) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond525) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond525) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond525) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond525) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond525) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond525) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond525) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond525) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond525) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond525) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond525) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond525) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond525) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond525) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond525) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond525) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond525) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond525) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond525) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond525) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond525) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond525) CFA_SP SP+0
        CFI (cfiCond525) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond526 Using cfiCommon0
        CFI (cfiCond526) NoFunction
        CFI (cfiCond526) Conditional ??CrossCallReturnLabel_295
        CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond526) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond526) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond526) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond526) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond526) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond526) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond526) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond526) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond526) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond526) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond526) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond526) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond526) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond526) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond526) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond526) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond526) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond526) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond526) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond526) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond526) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond526) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond526) CFA_SP SP+0
        CFI (cfiCond526) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond527 Using cfiCommon0
        CFI (cfiCond527) NoFunction
        CFI (cfiCond527) Conditional ??CrossCallReturnLabel_296
        CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond527) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond527) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond527) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond527) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond527) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond527) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond527) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond527) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond527) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond527) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond527) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond527) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond527) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond527) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond527) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond527) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond527) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond527) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond527) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond527) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond527) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond527) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond527) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond527) CFA_SP SP+0
        CFI (cfiCond527) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond528 Using cfiCommon0
        CFI (cfiCond528) NoFunction
        CFI (cfiCond528) Conditional ??CrossCallReturnLabel_300
        CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond528) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond528) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond528) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond528) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond528) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond528) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond528) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond528) CFA_SP SP+0
        CFI (cfiCond528) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_302
        CFI Block cfiCond530 Using cfiCommon0
        CFI (cfiCond530) NoFunction
        CFI (cfiCond530) Conditional ??CrossCallReturnLabel_299
        CFI (cfiCond530) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond530) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond530) CFA_SP SP+-4
        CFI Block cfiCond531 Using cfiCommon0
        CFI (cfiCond531) NoFunction
        CFI (cfiCond531) Conditional ??CrossCallReturnLabel_301
        CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond531) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond531) CFA_SP SP+0
        CFI (cfiCond531) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_303
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_304
        CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond533) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond533) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond533) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond533) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond533) CFA_SP SP+0
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 15)
??Subroutine112_0:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond512
        CFI EndBlock cfiCond513
        CFI EndBlock cfiCond514
        CFI EndBlock cfiCond515
        CFI EndBlock cfiPicker516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiCond519
        CFI EndBlock cfiCond520
        CFI EndBlock cfiCond521
        CFI EndBlock cfiCond522
        CFI EndBlock cfiCond523
        CFI EndBlock cfiCond524
        CFI EndBlock cfiCond525
        CFI EndBlock cfiCond526
        CFI EndBlock cfiCond527
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiCond530
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
// 1588 /*
// 1589 void prepareFlashCheck(void){
// 1590 static BYTE arr[ 24 ];
// 1591 BYTE k = (reportFlashCheck-1) / calibrationRepeat ;
// 1592 BYTE *flashPtr = (BYTE *)( page.imageAddr & 0xFF00 ) + ( k ) * 0xC00; //24 * 8 * 16;
// 1593 BYTE bytes, bits, cnt;
// 1594     for( bytes = 0; bytes < 24; bytes++ ){
// 1595         arr[ bytes ] = 0xFF;
// 1596         for( bits = 0; bits < 8; bits++ ){
// 1597             cnt = 16; do { if( flashPtr[--cnt] != 0xFF ){ arr[ bytes ] ^= ( 1 << bits );  break; } }while( cnt );
// 1598             flashPtr += 16;
// 1599         }
// 1600     }
// 1601     prepareSpecial( 0xFB + (  k ), arr );
// 1602 }
// 1603 */
// 1604 /*
// 1605 void prepareScaling(void){ 
// 1606 BYTE k = (reportScaling-1) / calibrationRepeat;
// 1607     page.prepAddr = (UINT16)(&prepareScaling);
// 1608     prepareSpecial( 0xED + k, (from_flash ? (BYTE *)PAGEADDR : (BYTE *)&page) + k * 24 ); 
// 1609 }
// 1610 */
// 1611 //________________________________________________________________________________

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1612 void prepareScaling(void){ 
prepareScaling:
        CFI Block cfiBlock534 Using cfiCommon0
        CFI Function prepareScaling
        FUNCALL prepareScaling, prepareSpecial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
// 1613 BYTE k = (reportScaling-1) / calibrationRepeat;
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R0
        MOV     A,#-0x1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     R4,A
// 1614     page.prepAddr = (UINT16)(&prepareScaling);
        MOV     DPTR,#(page + 220)
        MOV     A,#(prepareScaling & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((prepareScaling >> 8) & 0xff)
        MOVX    @DPTR,A
// 1615     prepareSpecial( 0xED + k, base_ptr + k * 24 ); 
        ; Setup parameters for call to function prepareSpecial
        MOV     A,R4
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#-0x13
        ADD     A,R4
        MOV     R1,A
        LCALL   prepareSpecial
// 1616 }
        LJMP    ?Subroutine123
        CFI EndBlock cfiBlock534
// 1617 /*
// 1618 void prepareScaling(void){
// 1619 BYTE *ptr = radioPktBuffer;
// 1620 UINT16 tag = 1000 + reportScaling;
// 1621 //BYTE flg;
// 1622     mymemcpy( ptr+4, (BYTE *)&tag, 2 );
// 1623     copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6);  // mac   
// 1624     switch( reportScaling ){
// 1625         case 7:
// 1626             mymemcpy( ptr, (BYTE *)&page.defCycles2SoftKick, 4 );
// 1627             ptr+=12;
// 1628             page.prepAddr = (UINT16)(&prepareScaling);
// 1629             mymemcpy( ptr, (BYTE *)&page.defCycles2HardKick, 12 );
// 1630         break;
// 1631         case 6:
// 1632             mymemcpy( ptr, (BYTE *)&page.defCyclesToStep10Channel, 4 );                                                     // 4
// 1633             ptr += 12;                                                                                                // 12  
// 1634             // edAddr, gwAddr, repeaterChannel, repeaterPower, flags, showState, Critical500, Critical10, 
// 1635             // version, cyclesTo500, cyclesTo10, cyclesToStep500,  
// 1636             mymemcpy( ptr, (BYTE *)&page.edAddr, 20 );  
// 1637 
// 1638             //ptr += 12; // 4*sizeof(UINT16);
// 1639             //mymemcpy( ptr, (BYTE *)(&page.version),   2);       ptr += 2;                                              // 22
// 1640             //mymemcpy( ptr, (BYTE *)(&page.defCyclesTo500), 8);  ptr += 8;                                              // 30
// 1641         break;
// 1642         case 5:
// 1643             // *ptr++ = page.mpp;     *ptr++ = page.module;      *ptr++ = page.ov;       *ptr++ = page.oc;               // 4
// 1644             mymemcpy( ptr, (BYTE *)&page.mpp, 4 );                                                                      // 4
// 1645             
// 1646             ptr += 12;                                                                                                 // 12
// 1647             *ptr++ = page.channel; *ptr++ = page.radioPower;  *ptr++ = page.azimuth;  *ptr++ = page.positionInString; // 16
// 1648             *ptr++ = page.netId;   *ptr++ = page.myBunch;                                                             // 18
// 1649             mymemcpy( ptr, (BYTE *)(&page.installDate), 4 );  ptr += 4;                                                 // 22
// 1650 
// 1651             mymemcpy( ptr, (BYTE *)(&page.groupId),   2);     ptr += 2;                                                 // 24
// 1652             mymemcpy( ptr, (BYTE *)(&page.elevation), 8);
// 1653         break;
// 1654         case 4: 
// 1655             mymemcpy( ptr, (BYTE * )page.dFk, 4 );    ptr += 12; 
// 1656             mymemcpy( ptr, ((BYTE *)page.dFk)+4, 12); ptr += 12;
// 1657             mymemcpy( ptr, (BYTE * )page.vrefPolynom, 8); 
// 1658         break;
// 1659         case 3:
// 1660             mymemcpy( ptr, ((BYTE * )page.vrefPolynom)+8, 4); ptr += 12;
// 1661             mymemcpy( ptr, (BYTE * )page.linearK,     20); 
// 1662         break;
// 1663         case 2:
// 1664             mymemcpy( ptr, ((BYTE * )page.linearK)+20, 4); ptr+=12;
// 1665             mymemcpy( ptr, ((BYTE * )page.linearK)+24, 20); 
// 1666         break;
// 1667         case 1:
// 1668             mymemcpy( ptr, ((BYTE * )page.linearK)+44, 4);       ptr+= 12;
// 1669             // VinTurnOn, VinShutOff, VinDisableRadio, tkCurrent, tkPower
// 1670             mymemcpy( ptr, ((BYTE * )&page.VinTurnOn), 20); 
// 1671         break;
// 1672     }        
// 1673 }
// 1674 */
// 1675 /******************************************************************************
// 1676 * Prepare request to join network
// 1677 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1678 void prepareJoinRequest(void){  
prepareJoinRequest:
        CFI Block cfiBlock535 Using cfiCommon0
        CFI Function prepareJoinRequest
        FUNCALL prepareJoinRequest, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareJoinRequest, copyMac
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareJoinRequest, prepareTxBuffer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1679 BYTE *ptr  = radioPktBuffer;
// 1680     //mymemset( ptr, 0xFF, 4); ptr+=4; 
// 1681     *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF;
        MOV     A,#-0x1
        MOV     DPTR,#radioPktBuffer
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 1)
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 3)
        MOVX    @DPTR,A
// 1682     //mymemcpy( ptr, (BYTE *)&utc, 4 );     mymemcpy( ptr+4, (BYTE *)&ms, 2 ); 
// 1683     mymemcpy( ptr, (BYTE *)&utc, 6 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utc & 0xff)
        MOV     R5,#((utc >> 8) & 0xff)
        MOV     R2,#((radioPktBuffer + 4) & 0xff)
        MOV     R3,#(((radioPktBuffer + 4) >> 8) & 0xff)
        LCALL   mymemcpy
// 1684     copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6 );
        ; Setup parameters for call to function copyMac
        MOV     R2,#((radioPktBuffer + 10) & 0xff)
        MOV     R3,#(((radioPktBuffer + 10) >> 8) & 0xff)
        LCALL   copyMac
// 1685     prepareTxBuffer();      
        ; Setup parameters for call to function prepareTxBuffer
        LCALL   prepareTxBuffer
// 1686     radioPktBufferTx[0] = PACKET_LENGTH_GW_2;
        MOV     A,#0x12
        MOV     DPTR,#radioPktBufferTx
        LJMP    ?Subroutine116
        CFI EndBlock cfiBlock535
// 1687 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1688 void quartz(void){
quartz:
        CFI Block cfiBlock536 Using cfiCommon0
        CFI Function quartz
        FUNCALL quartz, halWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
// 1689 BYTE counter = 127;
        MOV     R6,#0x7f
// 1690 static BOOL q = 0;
// 1691       if( q ) return; else q = 1;
        MOV     DPTR,#??q
        MOVX    A,@DPTR
        JNZ     ??quartz_0
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1692       if( rcgen ) return;
        MOV     DPTR,#rcgen
        MOVX    A,@DPTR
        JNZ     ??quartz_0
// 1693       SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
        ANL     0xbe,#0xfb
        SJMP    ??quartz_1
// 1694       while(!XOSC_STABLE && counter-- ) halWait(2);      // waiting until the oscillator is stable
??quartz_2:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x2
        LCALL   halWait
??quartz_1:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.6
        JC      ??quartz_3
        MOV     A,R6
        DEC     R6
        JNZ     ??quartz_2
// 1695       asm("NOP");
??quartz_3:
        NOP
// 1696       //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
// 1697       CLKCON = 0x89;  
        MOV     0xc6,#-0x77
// 1698       SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
        ORL     0xbe,#0x4
// 1699 }
??quartz_0:
        LJMP    ?Subroutine123
        CFI EndBlock cfiBlock536
        REQUIRE SLEEP
        REQUIRE CLKCON

        RSEG XDATA_Z:XDATA:NOROOT(0)
??q:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1700 /******************************************************************************
// 1701 * Send the previously prepared data package
// 1702 ******************************************************************************/
// 1703 extern DMA_DESC dmaConfig[3]; 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1704 void sendData(BYTE *buffer, BOOL isRepeater ){  
sendData:
        CFI Block cfiBlock537 Using cfiCommon0
        CFI Function sendData
        FUNCALL sendData, setupRepeater
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1705     //if( page.fuseComm ) return;
// 1706     if( ((buffer[0] != PACKET_LENGTH_ED) && (buffer[0] != PACKET_LENGTH_GW_2)) || txDisabled  )  return; 
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x22
        XRL     A,R4
        JZ      ??sendData_0
        MOV     A,#0x12
        XRL     A,R4
        JNZ     ??sendData_1
??sendData_0:
        MOV     DPTR,#txDisabled
        MOVX    A,@DPTR
        JNZ     ??sendData_1
// 1707     RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
        MOV     0xe1,#0x4
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x10
        MOVX    @DPTR,A
// 1708     //setupTxBuffer( buffer );
// 1709     SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, buffer );
        MOV     A,R3
        MOV     DPTR,#(dmaConfig + 8)
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#(dmaConfig + 9)
        MOVX    @DPTR,A
// 1710     setupRepeater( isRepeater );
        ; Setup parameters for call to function setupRepeater
        LCALL   setupRepeater
// 1711     /*
// 1712     if( page.is500Always || (page.isRelay && isRepeater) ){
// 1713                                                              atomicChange( CheckFlag, 5*TICKS_IN_MS );
// 1714                                                            //if( page.use250kbod ) need_wiggle = TRUE; 
// 1715     }else if( page.use12kbod && page.useFEC )                atomicChange( CheckFlag, 2*_slot - TICKS_IN_MS );
// 1716     else                                                     atomicChange( CheckFlag, _slot   - TICKS_IN_MS );
// 1717     */
// 1718     //quartz();
// 1719     //INT_GLOBAL_ENABLE(INT_OFF);
// 1720         si->radioMode = RADIO_MODE_TX;        
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_96:
        MOV     A,#0x10
        MOVX    @DPTR,A
// 1721         // Send the packet
// 1722         DMAARM = DMAARM_CHANNEL1;     // Arm DMA channel 1
        MOV     0xd6,#0x2
// 1723         RFST   = STROBE_TX;            // Switch radio to TX
        MOV     0xe1,#0x3
// 1724     //INT_GLOBAL_ENABLE(INT_ON); 
// 1725 }
??sendData_1:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock537
        REQUIRE DMAARM
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond538 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond539) CFA_SP SP+0
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker540 Using cfiCommon1
        CFI (cfiPicker540) NoFunction
        CFI (cfiPicker540) Picker
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x5b
        CFI Block cfiCond541 Using cfiCommon0
        CFI (cfiCond541) NoFunction
        CFI (cfiCond541) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond541) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond541) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond541) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond541) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond541) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond541) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond541) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond541) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond541) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond541) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond541) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond541) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond541) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond541) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond541) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond541) CFA_SP SP+0
        CFI (cfiCond541) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond542 Using cfiCommon0
        CFI (cfiCond542) NoFunction
        CFI (cfiCond542) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond542) CFA_SP SP+0
        CFI (cfiCond542) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_91
        CFI Block cfiCond544 Using cfiCommon0
        CFI (cfiCond544) NoFunction
        CFI (cfiCond544) Conditional ??CrossCallReturnLabel_92
        CFI Block cfiCond545 Using cfiCommon0
        CFI (cfiCond545) NoFunction
        CFI (cfiCond545) Conditional ??CrossCallReturnLabel_93
        CFI Block cfiCond546 Using cfiCommon0
        CFI (cfiCond546) NoFunction
        CFI (cfiCond546) Conditional ??CrossCallReturnLabel_95
        CFI Block cfiCond547 Using cfiCommon0
        CFI (cfiCond547) NoFunction
        CFI (cfiCond547) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond547) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond547) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond547) CFA_SP SP+-4
        CFI Block cfiCond548 Using cfiCommon0
        CFI (cfiCond548) NoFunction
        CFI (cfiCond548) Conditional ??CrossCallReturnLabel_97
        CFI (cfiCond548) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond548) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond548) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond548) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond548) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond548) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond548) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond548) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond548) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond548) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond548) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond548) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond548) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond548) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond548) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond548) CFA_SP SP+0
        CFI (cfiCond548) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond549 Using cfiCommon0
        CFI (cfiCond549) NoFunction
        CFI (cfiCond549) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond549) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond549) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond549) CFA_SP SP+-4
        CFI Block cfiCond550 Using cfiCommon0
        CFI (cfiCond550) NoFunction
        CFI (cfiCond550) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond550) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond550) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond550) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond550) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond550) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond550) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond550) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond550) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond550) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond550) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond550) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond550) CFA_SP SP+0
        CFI (cfiCond550) CFA_XSP16 add(XSP16, 11)
??Subroutine47_0:
        LCALL   ?Subroutine90
??CrossCallReturnLabel_246:
        RET
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiPicker540
        CFI EndBlock cfiCond541
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiCond544
        CFI EndBlock cfiCond545
        CFI EndBlock cfiCond546
        CFI EndBlock cfiCond547
        CFI EndBlock cfiCond548
        CFI EndBlock cfiCond549
        CFI EndBlock cfiCond550

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine90:
        CFI Block cfiCond551 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_46
        CFI (cfiCond552) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond552) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond552) CFA_SP SP+-4
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_4
        CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond553) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond553) CFA_SP SP+0
        CFI (cfiCond553) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond554 Using cfiCommon0
        CFI (cfiCond554) NoFunction
        CFI (cfiCond554) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_5
        CFI (cfiCond554) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond554) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond554) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond554) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond554) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond554) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond554) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond554) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond554) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond554) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond554) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond554) CFA_SP SP+0
        CFI (cfiCond554) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond555 Using cfiCommon0
        CFI (cfiCond555) NoFunction
        CFI (cfiCond555) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_6
        CFI (cfiCond555) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond555) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond555) CFA_SP SP+-4
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_7
        CFI (cfiCond556) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond556) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond556) CFA_SP SP+-4
        CFI Block cfiCond557 Using cfiCommon0
        CFI (cfiCond557) NoFunction
        CFI (cfiCond557) Conditional ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_8
        CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond557) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond557) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond557) CFA_SP SP+0
        CFI (cfiCond557) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond558 Using cfiCommon0
        CFI (cfiCond558) NoFunction
        CFI (cfiCond558) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_87
        CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond558) CFA_SP SP+0
        CFI (cfiCond558) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_88
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond560 Using cfiCommon0
        CFI (cfiCond560) NoFunction
        CFI (cfiCond560) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_30
        CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond560) CFA_SP SP+0
        CFI (cfiCond560) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond561 Using cfiCommon0
        CFI (cfiCond561) NoFunction
        CFI (cfiCond561) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_32
        CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond561) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond561) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond561) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond561) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond561) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond561) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond561) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond561) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond561) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond561) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond561) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond561) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond561) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond561) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond561) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond561) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond561) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond561) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond561) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond561) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond561) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond561) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond561) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond561) CFA_SP SP+0
        CFI (cfiCond561) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_31
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_243, ??CrossCallReturnLabel_55
        CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond563) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond563) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond563) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond563) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond563) CFA_SP SP+0
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_243, ??CrossCallReturnLabel_56
        CFI Block cfiCond565 Using cfiCommon0
        CFI (cfiCond565) NoFunction
        CFI (cfiCond565) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_368
        CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond565) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond565) CFA_SP SP+0
        CFI (cfiCond565) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond566 Using cfiCommon0
        CFI (cfiCond566) NoFunction
        CFI (cfiCond566) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_370
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_367
        CFI (cfiCond567) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond567) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond567) CFA_SP SP+-4
        CFI Block cfiCond568 Using cfiCommon0
        CFI (cfiCond568) NoFunction
        CFI (cfiCond568) Conditional ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_369
        CFI Block cfiCond569 Using cfiCommon0
        CFI (cfiCond569) NoFunction
        CFI (cfiCond569) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_94
        CFI Block cfiCond570 Using cfiCommon0
        CFI (cfiCond570) NoFunction
        CFI (cfiCond570) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_100
        CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond570) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond570) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond570) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond570) CFA_SP SP+0
        CFI (cfiCond570) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond571 Using cfiCommon0
        CFI (cfiCond571) NoFunction
        CFI (cfiCond571) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_89
        CFI (cfiCond571) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond571) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond571) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond571) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond571) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond571) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond571) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond571) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond571) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond571) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond571) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond571) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond571) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond571) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond571) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond571) CFA_SP SP+0
        CFI (cfiCond571) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond572 Using cfiCommon0
        CFI (cfiCond572) NoFunction
        CFI (cfiCond572) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_90
        CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond572) CFA_SP SP+0
        CFI (cfiCond572) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond573 Using cfiCommon0
        CFI (cfiCond573) NoFunction
        CFI (cfiCond573) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_91
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_92
        CFI Block cfiCond575 Using cfiCommon0
        CFI (cfiCond575) NoFunction
        CFI (cfiCond575) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_93
        CFI Block cfiCond576 Using cfiCommon0
        CFI (cfiCond576) NoFunction
        CFI (cfiCond576) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_95
        CFI Block cfiCond577 Using cfiCommon0
        CFI (cfiCond577) NoFunction
        CFI (cfiCond577) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_96
        CFI (cfiCond577) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond577) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond577) CFA_SP SP+-4
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_97
        CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond578) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond578) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond578) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond578) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond578) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond578) CFA_SP SP+0
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond579 Using cfiCommon0
        CFI (cfiCond579) NoFunction
        CFI (cfiCond579) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_98
        CFI (cfiCond579) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond579) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond579) CFA_SP SP+-4
        CFI Block cfiCond580 Using cfiCommon0
        CFI (cfiCond580) NoFunction
        CFI (cfiCond580) Conditional ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_99
        CFI (cfiCond580) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond580) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond580) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond580) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond580) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond580) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond580) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond580) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond580) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond580) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond580) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond580) CFA_SP SP+0
        CFI (cfiCond580) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond581 Using cfiCommon0
        CFI (cfiCond581) NoFunction
        CFI (cfiCond581) Conditional ??CrossCallReturnLabel_244, ??CrossCallReturnLabel_83
        CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond581) CFA_SP SP+0
        CFI (cfiCond581) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond582 Using cfiCommon0
        CFI (cfiCond582) NoFunction
        CFI (cfiCond582) Conditional ??CrossCallReturnLabel_244, ??CrossCallReturnLabel_84
        CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond582) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond582) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond582) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond582) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond582) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond582) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond582) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond582) CFA_SP SP+0
        CFI (cfiCond582) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond583 Using cfiCommon0
        CFI (cfiCond583) NoFunction
        CFI (cfiCond583) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_300
        CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond583) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond583) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond583) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond583) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond583) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond583) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond583) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond583) CFA_SP SP+0
        CFI (cfiCond583) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond584 Using cfiCommon0
        CFI (cfiCond584) NoFunction
        CFI (cfiCond584) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_302
        CFI Block cfiCond585 Using cfiCommon0
        CFI (cfiCond585) NoFunction
        CFI (cfiCond585) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_299
        CFI (cfiCond585) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond585) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond585) CFA_SP SP+-4
        CFI Block cfiCond586 Using cfiCommon0
        CFI (cfiCond586) NoFunction
        CFI (cfiCond586) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_301
        CFI (cfiCond586) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond586) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond586) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond586) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond586) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond586) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond586) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond586) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond586) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond586) CFA_SP SP+0
        CFI (cfiCond586) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond587 Using cfiCommon0
        CFI (cfiCond587) NoFunction
        CFI (cfiCond587) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_303
        CFI Block cfiCond588 Using cfiCommon0
        CFI (cfiCond588) NoFunction
        CFI (cfiCond588) Conditional ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_304
        CFI (cfiCond588) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond588) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond588) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond588) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond588) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond588) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond588) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond588) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond588) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond588) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond588) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond588) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond588) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond588) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond588) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond588) CFA_SP SP+0
        CFI (cfiCond588) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker589 Using cfiCommon1
        CFI (cfiPicker589) NoFunction
        CFI (cfiPicker589) Picker
        LCALL   ?Subroutine109
??CrossCallReturnLabel_283:
        RET
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiCond554
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiCond557
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiCond560
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiCond565
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiCond568
        CFI EndBlock cfiCond569
        CFI EndBlock cfiCond570
        CFI EndBlock cfiCond571
        CFI EndBlock cfiCond572
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiCond575
        CFI EndBlock cfiCond576
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiCond579
        CFI EndBlock cfiCond580
        CFI EndBlock cfiCond581
        CFI EndBlock cfiCond582
        CFI EndBlock cfiCond583
        CFI EndBlock cfiCond584
        CFI EndBlock cfiCond585
        CFI EndBlock cfiCond586
        CFI EndBlock cfiCond587
        CFI EndBlock cfiCond588
        CFI EndBlock cfiPicker589

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine109:
        CFI Block cfiCond590 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond591 Using cfiCommon0
        CFI (cfiCond591) NoFunction
        CFI (cfiCond591) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_242, ??CrossCallReturnLabel_46
        CFI (cfiCond591) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond591) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond591) CFA_SP SP+-4
        CFI Block cfiCond592 Using cfiCommon0
        CFI (cfiCond592) NoFunction
        CFI (cfiCond592) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_4
        CFI (cfiCond592) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond592) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond592) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond592) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond592) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond592) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond592) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond592) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond592) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond592) CFA_SP SP+0
        CFI (cfiCond592) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond593 Using cfiCommon0
        CFI (cfiCond593) NoFunction
        CFI (cfiCond593) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_5
        CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond593) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond593) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond593) CFA_SP SP+0
        CFI (cfiCond593) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond594 Using cfiCommon0
        CFI (cfiCond594) NoFunction
        CFI (cfiCond594) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_6
        CFI (cfiCond594) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond594) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond594) CFA_SP SP+-4
        CFI Block cfiCond595 Using cfiCommon0
        CFI (cfiCond595) NoFunction
        CFI (cfiCond595) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_7
        CFI (cfiCond595) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond595) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond595) CFA_SP SP+-4
        CFI Block cfiCond596 Using cfiCommon0
        CFI (cfiCond596) NoFunction
        CFI (cfiCond596) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_239, ??CrossCallReturnLabel_8
        CFI (cfiCond596) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond596) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond596) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond596) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond596) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond596) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond596) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond596) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond596) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond596) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond596) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond596) CFA_SP SP+0
        CFI (cfiCond596) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond597 Using cfiCommon0
        CFI (cfiCond597) NoFunction
        CFI (cfiCond597) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_87
        CFI (cfiCond597) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond597) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond597) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond597) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond597) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond597) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond597) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond597) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond597) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond597) CFA_SP SP+0
        CFI (cfiCond597) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond598 Using cfiCommon0
        CFI (cfiCond598) NoFunction
        CFI (cfiCond598) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_245, ??CrossCallReturnLabel_88
        CFI (cfiCond598) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond598) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond598) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond598) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond598) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond598) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond598) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond598) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond598) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond598) CFA_SP SP+0
        CFI (cfiCond598) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond599 Using cfiCommon0
        CFI (cfiCond599) NoFunction
        CFI (cfiCond599) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_30
        CFI (cfiCond599) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond599) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond599) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond599) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond599) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond599) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond599) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond599) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond599) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond599) CFA_SP SP+0
        CFI (cfiCond599) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond600 Using cfiCommon0
        CFI (cfiCond600) NoFunction
        CFI (cfiCond600) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_32
        CFI (cfiCond600) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond600) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond600) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond600) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond600) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond600) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond600) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond600) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond600) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond600) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond600) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond600) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond600) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond600) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond600) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond600) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond600) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond600) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond600) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond600) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond600) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond600) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond600) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond600) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond600) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond600) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond600) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond600) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond600) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond600) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond600) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond600) CFA_SP SP+0
        CFI (cfiCond600) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond601 Using cfiCommon0
        CFI (cfiCond601) NoFunction
        CFI (cfiCond601) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_31
        CFI Block cfiCond602 Using cfiCommon0
        CFI (cfiCond602) NoFunction
        CFI (cfiCond602) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_243, ??CrossCallReturnLabel_55
        CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond602) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond602) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond602) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond602) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond602) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond602) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond602) CFA_SP SP+0
        CFI (cfiCond602) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond603 Using cfiCommon0
        CFI (cfiCond603) NoFunction
        CFI (cfiCond603) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_243, ??CrossCallReturnLabel_56
        CFI Block cfiCond604 Using cfiCommon0
        CFI (cfiCond604) NoFunction
        CFI (cfiCond604) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_368
        CFI (cfiCond604) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond604) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond604) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond604) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond604) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond604) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond604) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond604) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond604) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond604) CFA_SP SP+0
        CFI (cfiCond604) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond605 Using cfiCommon0
        CFI (cfiCond605) NoFunction
        CFI (cfiCond605) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_370
        CFI Block cfiCond606 Using cfiCommon0
        CFI (cfiCond606) NoFunction
        CFI (cfiCond606) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_367
        CFI (cfiCond606) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond606) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond606) CFA_SP SP+-4
        CFI Block cfiCond607 Using cfiCommon0
        CFI (cfiCond607) NoFunction
        CFI (cfiCond607) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_240, ??CrossCallReturnLabel_369
        CFI Block cfiCond608 Using cfiCommon0
        CFI (cfiCond608) NoFunction
        CFI (cfiCond608) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_94
        CFI Block cfiCond609 Using cfiCommon0
        CFI (cfiCond609) NoFunction
        CFI (cfiCond609) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_100
        CFI (cfiCond609) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond609) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond609) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond609) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond609) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond609) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond609) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond609) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond609) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond609) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond609) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond609) CFA_SP SP+0
        CFI (cfiCond609) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond610 Using cfiCommon0
        CFI (cfiCond610) NoFunction
        CFI (cfiCond610) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_89
        CFI (cfiCond610) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond610) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond610) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond610) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond610) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond610) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond610) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond610) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond610) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond610) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond610) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond610) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond610) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond610) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond610) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond610) CFA_SP SP+0
        CFI (cfiCond610) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond611 Using cfiCommon0
        CFI (cfiCond611) NoFunction
        CFI (cfiCond611) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_90
        CFI (cfiCond611) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond611) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond611) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond611) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond611) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond611) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond611) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond611) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond611) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond611) CFA_SP SP+0
        CFI (cfiCond611) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond612 Using cfiCommon0
        CFI (cfiCond612) NoFunction
        CFI (cfiCond612) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_91
        CFI Block cfiCond613 Using cfiCommon0
        CFI (cfiCond613) NoFunction
        CFI (cfiCond613) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_92
        CFI Block cfiCond614 Using cfiCommon0
        CFI (cfiCond614) NoFunction
        CFI (cfiCond614) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_93
        CFI Block cfiCond615 Using cfiCommon0
        CFI (cfiCond615) NoFunction
        CFI (cfiCond615) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_95
        CFI Block cfiCond616 Using cfiCommon0
        CFI (cfiCond616) NoFunction
        CFI (cfiCond616) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_96
        CFI (cfiCond616) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond616) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond616) CFA_SP SP+-4
        CFI Block cfiCond617 Using cfiCommon0
        CFI (cfiCond617) NoFunction
        CFI (cfiCond617) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_97
        CFI (cfiCond617) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond617) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond617) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond617) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond617) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond617) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond617) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond617) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond617) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond617) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond617) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond617) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond617) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond617) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond617) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond617) CFA_SP SP+0
        CFI (cfiCond617) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond618 Using cfiCommon0
        CFI (cfiCond618) NoFunction
        CFI (cfiCond618) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_98
        CFI (cfiCond618) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond618) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond618) CFA_SP SP+-4
        CFI Block cfiCond619 Using cfiCommon0
        CFI (cfiCond619) NoFunction
        CFI (cfiCond619) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_246, ??CrossCallReturnLabel_99
        CFI (cfiCond619) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond619) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond619) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond619) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond619) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond619) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond619) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond619) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond619) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond619) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond619) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond619) CFA_SP SP+0
        CFI (cfiCond619) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond620 Using cfiCommon0
        CFI (cfiCond620) NoFunction
        CFI (cfiCond620) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_244, ??CrossCallReturnLabel_83
        CFI (cfiCond620) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond620) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond620) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond620) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond620) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond620) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond620) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond620) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond620) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond620) CFA_SP SP+0
        CFI (cfiCond620) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond621 Using cfiCommon0
        CFI (cfiCond621) NoFunction
        CFI (cfiCond621) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_244, ??CrossCallReturnLabel_84
        CFI (cfiCond621) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond621) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond621) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond621) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond621) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond621) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond621) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond621) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond621) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond621) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond621) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond621) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond621) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond621) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond621) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond621) CFA_SP SP+0
        CFI (cfiCond621) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond622 Using cfiCommon0
        CFI (cfiCond622) NoFunction
        CFI (cfiCond622) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_300
        CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond622) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond622) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond622) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond622) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond622) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond622) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond622) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond622) CFA_SP SP+0
        CFI (cfiCond622) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond623 Using cfiCommon0
        CFI (cfiCond623) NoFunction
        CFI (cfiCond623) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_302
        CFI Block cfiCond624 Using cfiCommon0
        CFI (cfiCond624) NoFunction
        CFI (cfiCond624) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_299
        CFI (cfiCond624) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond624) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond624) CFA_SP SP+-4
        CFI Block cfiCond625 Using cfiCommon0
        CFI (cfiCond625) NoFunction
        CFI (cfiCond625) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_301
        CFI (cfiCond625) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond625) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond625) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond625) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond625) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond625) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond625) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond625) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond625) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond625) CFA_SP SP+0
        CFI (cfiCond625) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond626 Using cfiCommon0
        CFI (cfiCond626) NoFunction
        CFI (cfiCond626) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_303
        CFI Block cfiCond627 Using cfiCommon0
        CFI (cfiCond627) NoFunction
        CFI (cfiCond627) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_238, ??CrossCallReturnLabel_304
        CFI (cfiCond627) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond627) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond627) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond627) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond627) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond627) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond627) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond627) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond627) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond627) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond627) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond627) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond627) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond627) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond627) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond627) CFA_SP SP+0
        CFI (cfiCond627) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond628 Using cfiCommon0
        CFI (cfiCond628) NoFunction
        CFI (cfiCond628) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_49
        CFI (cfiCond628) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond628) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond628) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond628) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond628) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond628) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond628) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond628) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond628) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond628) CFA_SP SP+0
        CFI (cfiCond628) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond629 Using cfiCommon0
        CFI (cfiCond629) NoFunction
        CFI (cfiCond629) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_50
        CFI (cfiCond629) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond629) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond629) CFA_SP SP+-4
        CFI Block cfiCond630 Using cfiCommon0
        CFI (cfiCond630) NoFunction
        CFI (cfiCond630) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_234, ??CrossCallReturnLabel_68
        CFI (cfiCond630) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond630) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond630) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond630) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond630) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond630) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond630) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond630) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond630) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond630) CFA_SP SP+0
        CFI (cfiCond630) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond631 Using cfiCommon0
        CFI (cfiCond631) NoFunction
        CFI (cfiCond631) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_234, ??CrossCallReturnLabel_69
        CFI (cfiCond631) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond631) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond631) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond631) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond631) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond631) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond631) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond631) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond631) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond631) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond631) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond631) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond631) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond631) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond631) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond631) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond631) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond631) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond631) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond631) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond631) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond631) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond631) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond631) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond631) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond631) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond631) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond631) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond631) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond631) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond631) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond631) CFA_SP SP+0
        CFI (cfiCond631) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond632 Using cfiCommon0
        CFI (cfiCond632) NoFunction
        CFI (cfiCond632) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_80
        CFI (cfiCond632) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond632) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond632) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond632) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond632) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond632) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond632) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond632) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond632) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond632) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond632) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond632) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond632) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond632) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond632) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond632) CFA_SP SP+0
        CFI (cfiCond632) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond633 Using cfiCommon0
        CFI (cfiCond633) NoFunction
        CFI (cfiCond633) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_81
        CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond633) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond633) CFA_SP SP+0
        CFI (cfiCond633) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond634 Using cfiCommon0
        CFI (cfiCond634) NoFunction
        CFI (cfiCond634) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_82
        CFI (cfiCond634) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond634) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond634) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond634) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond634) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond634) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond634) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond634) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond634) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond634) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond634) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond634) CFA_SP SP+0
        CFI (cfiCond634) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond635 Using cfiCommon0
        CFI (cfiCond635) NoFunction
        CFI (cfiCond635) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_343
        CFI Block cfiCond636 Using cfiCommon0
        CFI (cfiCond636) NoFunction
        CFI (cfiCond636) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_344
        CFI Block cfiCond637 Using cfiCommon0
        CFI (cfiCond637) NoFunction
        CFI (cfiCond637) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_235, ??CrossCallReturnLabel_70
        CFI (cfiCond637) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond637) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond637) CFA_SP SP+-4
        CFI Block cfiCond638 Using cfiCommon0
        CFI (cfiCond638) NoFunction
        CFI (cfiCond638) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_235, ??CrossCallReturnLabel_71
        CFI (cfiCond638) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond638) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond638) CFA_SP SP+-4
        CFI Block cfiPicker639 Using cfiCommon1
        CFI (cfiPicker639) NoFunction
        CFI (cfiPicker639) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond590
        CFI EndBlock cfiCond591
        CFI EndBlock cfiCond592
        CFI EndBlock cfiCond593
        CFI EndBlock cfiCond594
        CFI EndBlock cfiCond595
        CFI EndBlock cfiCond596
        CFI EndBlock cfiCond597
        CFI EndBlock cfiCond598
        CFI EndBlock cfiCond599
        CFI EndBlock cfiCond600
        CFI EndBlock cfiCond601
        CFI EndBlock cfiCond602
        CFI EndBlock cfiCond603
        CFI EndBlock cfiCond604
        CFI EndBlock cfiCond605
        CFI EndBlock cfiCond606
        CFI EndBlock cfiCond607
        CFI EndBlock cfiCond608
        CFI EndBlock cfiCond609
        CFI EndBlock cfiCond610
        CFI EndBlock cfiCond611
        CFI EndBlock cfiCond612
        CFI EndBlock cfiCond613
        CFI EndBlock cfiCond614
        CFI EndBlock cfiCond615
        CFI EndBlock cfiCond616
        CFI EndBlock cfiCond617
        CFI EndBlock cfiCond618
        CFI EndBlock cfiCond619
        CFI EndBlock cfiCond620
        CFI EndBlock cfiCond621
        CFI EndBlock cfiCond622
        CFI EndBlock cfiCond623
        CFI EndBlock cfiCond624
        CFI EndBlock cfiCond625
        CFI EndBlock cfiCond626
        CFI EndBlock cfiCond627
        CFI EndBlock cfiCond628
        CFI EndBlock cfiCond629
        CFI EndBlock cfiCond630
        CFI EndBlock cfiCond631
        CFI EndBlock cfiCond632
        CFI EndBlock cfiCond633
        CFI EndBlock cfiCond634
        CFI EndBlock cfiCond635
        CFI EndBlock cfiCond636
        CFI EndBlock cfiCond637
        CFI EndBlock cfiCond638
        CFI EndBlock cfiPicker639
// 1726 /******************************************************************************
// 1727 * @fn  25*.84
// 1728 WPackage
// 1729 * @brief       This function makes appropriate actions after receiving message from Gateway
// 1730 * Parameters:
// 1731 * @return void
// 1732 ******************************************************************************/
// 1733 #define NDEV_MASK   0x1F
// 1734 #define JOIN_MASK   0x80
// 1735 #define HOP_MASK    0x40
// 1736 

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1737 static UINT32 utcLocal = 0;
utcLocal:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1738 static UINT16 msLocal  = 0;
msLocal:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 1739 
// 1740 extern INT16 perRssiOffset;

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1741 void parseGWPackage(void){
parseGWPackage:
        CFI Block cfiBlock640 Using cfiCommon0
        CFI Function parseGWPackage
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, parseCommands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
// 1742 static BYTE bunch, plen;
// 1743 signed char o = FREQEST, sh = FSCTRL0;
        MOV     DPTR,#-0x20c8
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPTR,#-0x20f8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
// 1744 INT16 shift, networkDelay;
// 1745 BYTE tmp;
// 1746 //UINT16 temperatureProtectionDelay;
// 1747 BOOL goodForCommands = FALSE;
// 1748 //BOOL newProtocol;
// 1749     //if( page.fuseComm ) return;
// 1750     rc(); was_listening =  FALSE;
        CLR     A
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
// 1751     ticks2ProcessCmd = 0;    
        MOV     DPTR,#ticks2ProcessCmd
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1752     plen = radioPktBufferRx[0];
        MOV     DPTR,#radioPktBufferRx
        MOVX    A,@DPTR
        MOV     DPTR,#??plen
        LCALL   ?Subroutine76
// 1753     /*
// 1754     if( ( ( plen != PACKET_LENGTH ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
// 1755         atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
// 1756         return;
// 1757     }
// 1758     */
// 1759     if( ( 0 == ( radioPktBufferRx[ plen + 2 ] & 0x80 ) ) || ( ( plen != PACKET_LENGTH_GW ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
??CrossCallReturnLabel_205:
        ANL     A,#0x60
        MOV     R2,A
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#((radioPktBufferRx + 2) & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#(((radioPktBufferRx + 2) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_0
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        XRL     A,#0x22
        JZ      ??parseGWPackage_1
        MOVX    A,@DPTR
        XRL     A,#0x12
        JZ      ??parseGWPackage_1
// 1760         //atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
// 1761         if( page.isRelay && (!page.is500Always) ) setupRepeater( got_gw );  else setupRepeater( FALSE ); 
??parseGWPackage_0:
        MOV     A,#0x20
        XRL     A,R2
        JNZ     ??parseGWPackage_2
??parseGWPackage_3:
        ; Setup parameters for call to function setupRepeater
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??parseGWPackage_4
??parseGWPackage_2:
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
??parseGWPackage_4:
        LCALL   setupRepeater
// 1762         receive();
        ; Setup parameters for call to function receive
        LCALL   receive
// 1763         return;
        LJMP    ??parseGWPackage_5
// 1764     }
// 1765     
// 1766     if( page.isRelay && (!page.is500Always) && ( radioPktBufferRx[1] == page.gwAddr ) && (ADDR == page.gwAddr) ){ 
??parseGWPackage_1:
        MOV     DPTR,#(radioPktBufferRx + 1)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0x20
        XRL     A,R2
        JNZ     ??parseGWPackage_6
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     R4,A
        XRL     A,R3
        JNZ     ??parseGWPackage_6
        MOV     DPTR,#-0x20fb
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??parseGWPackage_6
// 1767         sendData( radioPktBufferRx, FALSE );  return;
        ; Setup parameters for call to function sendData
        MOV     R1,#0x0
        MOV     R2,#(radioPktBufferRx & 0xff)
        MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
        LCALL   sendData
        LJMP    ??parseGWPackage_5
// 1768     }else if( radioPktBufferRx[1] == page.edAddr ){
??parseGWPackage_6:
        MOV     DPTR,#(page + 190)
        MOVX    A,@DPTR
        XRL     A,R3
        JZ      $+5
        LJMP    ??parseGWPackage_7
// 1769         goodForCommands = ( 0 != (PKTSTATUS&0x80) ); 
        MOV     DPTR,#-0x20c4
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_8
        SETB    B.0
        SJMP    ??parseGWPackage_9
??parseGWPackage_8:
        CLR     B.0
??parseGWPackage_9:
        MOV     C,B.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
// 1770         //P1_1 ^= 1;
// 1771         //decodeDelay = *((BYTE *)0xF538);
// 1772         if( (!page.is500Always) && page.isRelay ) sendData( radioPktBufferRx, TRUE );  
        MOV     A,#0x20
        XRL     A,R2
        JNZ     ??parseGWPackage_10
        ; Setup parameters for call to function sendData
        MOV     R1,#0x1
        MOV     R2,#(radioPktBufferRx & 0xff)
        MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
        LCALL   sendData
// 1773         decodeDelay = *((BYTE *)0xF538);
??parseGWPackage_10:
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     DPTR,#decodeDelay
        LCALL   ?Subroutine120
// 1774         loadIV( page.curIV );  decode( (plen-2), (char *)(radioPktBufferRx+2), (char *)radioPktBuffer );
??CrossCallReturnLabel_357:
        ; Setup parameters for call to function load
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        MOV     R1,#0x6
        LCALL   ??Subroutine81_1
??CrossCallReturnLabel_218:
        ; Setup parameters for call to function code
        MOV     ?V0 + 2,#(radioPktBuffer & 0xff)
        MOV     ?V0 + 3,#((radioPktBuffer >> 8) & 0xff)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#((radioPktBufferRx + 2) & 0xff)
        MOV     R5,#(((radioPktBufferRx + 2) >> 8) & 0xff)
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#-0x2
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   `code`
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
// 1775         
// 1776         // for SDAG debug
// 1777         //mymemcpy( (BYTE *)radioPktBuffer, (BYTE *)(radioPktBufferRx+2), (plen-2));
// 1778         
// 1779         bunch = radioPktBuffer[0]; ndev = radioPktBuffer[1]; 
        MOV     DPTR,#radioPktBuffer
        MOVX    A,@DPTR
        MOV     DPTR,#??bunch
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 1)
        MOVX    A,@DPTR
        MOV     DPTR,#ndev
        MOVX    @DPTR,A
// 1780         //mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 4 );   mymemcpy( (BYTE *)&msLocal, radioPktBuffer+6, 2);
// 1781         mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 6) ; //ndev& 0x20 ? 5 : 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#((radioPktBuffer + 2) & 0xff)
        MOV     R5,#(((radioPktBuffer + 2) >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcpy
// 1782         if( 
// 1783             ((ndev & NDEV_MASK ) <= 16) && ( msLocal < 1000 ) &&
// 1784             //((utcLocal > utcLast) || ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4 )==0 && msLocal>msLast)) // ver G
// 1785             ((utcLocal > utcLast) || ( (mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal != msLast) ) ) //protects ONLY from replay attack
// 1786         ){
        MOVX    A,@DPTR
        ANL     A,#0x1f
        CLR     C
        SUBB    A,#0x11
        JC      $+5
        LJMP    ??parseGWPackage_7
        MOV     DPTR,#msLocal
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x18
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x3
        JC      $+5
        LJMP    ??parseGWPackage_7
        MOV     DPTR,#utcLocal
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPH,#((utcLast >> 8) & 0xff)
        MOV     DPL,#(utcLast & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??parseGWPackage_11
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JZ      $+5
        LJMP    ??parseGWPackage_7
        LCALL   ?Subroutine65
??CrossCallReturnLabel_160:
        MOV     DPTR,#msLast
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??parseGWPackage_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??parseGWPackage_12:
        JNZ     $+5
        LJMP    ??parseGWPackage_7
// 1787             BYTE goodTime = ( (utcLocal > utcLast) || ( ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal > msLast) ) ); 
??parseGWPackage_11:
        MOV     DPTR,#utcLocal
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPH,#((utcLast >> 8) & 0xff)
        MOV     DPL,#(utcLast & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??parseGWPackage_13
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseGWPackage_14
        LCALL   ?Subroutine65
??CrossCallReturnLabel_161:
        MOV     DPH,#((msLast >> 8) & 0xff)
        MOV     DPL,#(msLast & 0xff)
        LCALL   ?Subroutine97
??CrossCallReturnLabel_253:
        JNC     ??parseGWPackage_14
??parseGWPackage_13:
        MOV     R2,#0x1
        SJMP    ??parseGWPackage_15
??parseGWPackage_14:
        MOV     R2,#0x0
??parseGWPackage_15:
        MOV     ?V0 + 2,R2
// 1788             //P1_1 ^= 1;
// 1789             //newProtocol = radioPktBufferRx[ plen ] & 1;
// 1790             //temperatureProtectionDelay = computeTI( si->packetReceived );
// 1791             temperatureProtectionDelay = *((BYTE *)0xF538);
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ?Subroutine120
// 1792             if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
??CrossCallReturnLabel_358:
        LCALL   ?Subroutine16
??CrossCallReturnLabel_29:
        JC      ??parseGWPackage_16
        CLR     A
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    @DPTR,A
// 1793 
// 1794             //lastRssi = convertRssiByte( (radioPktBufferRx[ plen + 1 ]) );
// 1795             tmp = radioPktBufferRx[ plen + 1 ];
??parseGWPackage_16:
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#((radioPktBufferRx + 1) & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#(((radioPktBufferRx + 1) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
// 1796             if(tmp < 128)   lastRssi = (tmp >> 1) - perRssiOffset;
        CLR     C
        SUBB    A,#-0x80
        JNC     ??parseGWPackage_17
        MOV     A,?V0 + 4
        CLR     C
        RRC     A
        MOV     R2,A
        MOV     DPTR,#perRssiOffset
        LCALL   ?Subroutine64
??CrossCallReturnLabel_150:
        MOV     R0,A
        CLR     A
        SUBB    A,R1
        SJMP    ??parseGWPackage_18
// 1797             else            lastRssi =(((UINT16)tmp - 256) >> 1) - perRssiOffset;
??parseGWPackage_17:
        CLR     A
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,#-0x1
        RRC     A
        MOV     A,R0
        RRC     A
        MOV     R0,A
        MOV     DPTR,#perRssiOffset
        LCALL   ??Subroutine53_0
??CrossCallReturnLabel_119:
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        MOV     A,#0x7f
        SUBB    A,R3
??parseGWPackage_18:
        MOV     R1,A
        MOV     DPTR,#lastRssi
        LCALL   ??Subroutine68_0
// 1798 
// 1799             if( !page.is500Always ){
??CrossCallReturnLabel_177:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??parseGWPackage_19
// 1800                 //if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
// 1801                 //else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
// 1802                 if(       (o > 0) && (o >  1) ) o = 1;
        MOV     A,R7
        CLR     C
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     A,R7
        JC      ??parseGWPackage_20
        CLR     C
        SUBB    A,#0x2
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??parseGWPackage_21
        MOV     R7,#0x1
        SJMP    ??parseGWPackage_21
// 1803                 else if(  (o < 0) && (o < -1) ) o = -1;
??parseGWPackage_20:
        CLR     C
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_331:
        JNC     ??parseGWPackage_21
        MOV     A,R7
        CLR     C
        SUBB    A,#-0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??parseGWPackage_21
        MOV     R7,#-0x1
// 1804                 shift = (INT16)sh + (INT16)o;
??parseGWPackage_21:
        MOV     A,?V0 + 0
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R7
        MOV     R2,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V0 + 1,A
// 1805                 if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
        ; Setup parameters for call to function abs
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   abs
        CLR     C
        MOV     A,R2
        SUBB    A,#0x61
        MOV     A,R3
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_332:
        JC      ??parseGWPackage_22
        ; Setup parameters for call to function addDF
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        MOV     R3,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        LCALL   addDF
        SJMP    ??parseGWPackage_19
??parseGWPackage_22:
        MOV     A,?V0 + 0
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
// 1806             }
// 1807 //            INT32 f = 0; ((BYTE *)(&f))[0] = FREQ0; ((BYTE *)(&f))[1] = FREQ1; ((BYTE *)(&f))[2] = FREQ2; decodeDelay = (INT16)( f-defFreq );
// 1808 
// 1809             if( goodForCommands /*&& ( page.is500Always || ( 0!=(LQI & 0x7F) ) )*/ ){
??parseGWPackage_19:
        MOV     A,R6
        JNZ     $+5
        LJMP    ??parseGWPackage_7
// 1810                 if( isOnTestStand ){ isOnTestStand--; /* cmdCount--; */}
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_23
        DEC     A
        MOVX    @DPTR,A
// 1811                 if( alignMPP ){ alignMPP = FALSE; ticks[ MppCycle ] = _mppCycle; }
??parseGWPackage_23:
        MOV     DPTR,#alignMPP
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_359
        CLR     A
        LCALL   ?Subroutine49
??CrossCallReturnLabel_103:
        MOV     A,#0x78
        LCALL   ?Subroutine120
// 1812                 P1_1 ^= 1;
??CrossCallReturnLabel_359:
        XRL     0x90,#0x2
        MOV     A,0x90
// 1813                 bunchCount = 18;
        MOV     A,#0x12
        MOV     DPTR,#bunchCount
        LCALL   ?Subroutine74
// 1814                 mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); //&cyclesDefaults[4], 4 );//(BYTE *)&page.defCycles2SoftKick, 4 );
??CrossCallReturnLabel_199:
        LCALL   mymemcpy
// 1815                 if( goodTime ) mymemcpy( (BYTE *)&utcLast, (BYTE *)&utcLocal, 6 );
        MOV     A,?V0 + 2
        JZ      ??parseGWPackage_24
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
        MOV     R2,#(utcLast & 0xff)
        MOV     R3,#((utcLast >> 8) & 0xff)
        LCALL   mymemcpy
// 1816                 lastCycle = _slot * ( (ndev & NDEV_MASK) + ((ndev & JOIN_MASK)?1:4) ) + _loop_delay;
??parseGWPackage_24:
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_25
        MOV     R2,#0x1
        SJMP    ??parseGWPackage_26
??parseGWPackage_25:
        MOV     R2,#0x4
??parseGWPackage_26:
        MOV     DPTR,#_slot
        LCALL   ?Subroutine28
??CrossCallReturnLabel_52:
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1f
        ANL     A,R0
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#_loop_delay
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#lastCycle
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine49
// 1817                 //if( ( (2+(ndev & NDEV_MASK)) % 3 ) == 0 ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  _mppCycle; cnt = 255; } }
// 1818                 decodeDelay = ticks[ MppCycle ];
??CrossCallReturnLabel_104:
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_162:
        MOV     DPTR,#decodeDelay
        LCALL   ??Subroutine68_0
// 1819                 // if( page.synch_freq && ((2+(ndev & NDEV_MASK)%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  page.synch_phase; cnt = page.synch_freq; } }
// 1820                 if( page.synch_freq && (((2+(ndev & NDEV_MASK))%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ *((INT16 *)0xF500) = page.synch_phase; cnt = page.synch_freq; } }
??CrossCallReturnLabel_178:
        MOV     DPTR,#(page + 162)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_27
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        ANL     A,#0x1f
        ADD     A,#0x2
        MOV     B,#0x3
        LCALL   ?SC_DIV_MOD
        MOV     A,B
        JNZ     ??parseGWPackage_27
        MOV     DPTR,#??cnt
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??parseGWPackage_27
        MOV     DPTR,#(page + 161)
        MOVX    A,@DPTR
        MOV     DPTR,#-0xb00
        LCALL   ?Subroutine120
??CrossCallReturnLabel_360:
        MOV     DPTR,#(page + 162)
        MOVX    A,@DPTR
        MOV     DPTR,#??cnt
        MOVX    @DPTR,A
// 1821                 networkDelay = page.is500Always ? 0 : (2*TICKS_IN_MS);
??parseGWPackage_27:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_28
        MOV     R2,#0x0
        SJMP    ??parseGWPackage_29
??parseGWPackage_28:
        MOV     R2,#0x4
// 1822                 if( bunch == 0 ){ 
??parseGWPackage_29:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ?Subroutine62
??CrossCallReturnLabel_144:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        JNZ     ??parseGWPackage_30
// 1823                     packagePrepared = FALSE;
        CLR     A
        MOV     DPTR,#packagePrepared
        MOVX    @DPTR,A
// 1824                     atomicChange( DelayedPrepareData, 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay ); // was 40, give more time 
        MOV     A,#0xa
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        CLR     A
        LCALL   ?Subroutine1
??CrossCallReturnLabel_0:
        MOVX    @DPTR,A
// 1825                     mymemcpy( (BYTE *)&utc, (BYTE *)&utcLocal, 6 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
        MOV     R2,#(utc & 0xff)
        MOV     R3,#((utc >> 8) & 0xff)
        LCALL   mymemcpy
// 1826                     if( ticks[ DelayedPrepareData ] <= 0 ) ticks[ DelayedPrepareData ] = -1;
        LCALL   ?Subroutine44
??CrossCallReturnLabel_84:
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_333:
        JNC     ??parseGWPackage_31
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??CrossCallReturnLabel_1
// 1827                     //zeroPackageWasNotReceived = FALSE;
// 1828                 } else {
// 1829                     if( page.use12kbod ){
??parseGWPackage_30:
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,#0x0
        MOV     R1,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        MOV     A,R6
        JNC     ??parseGWPackage_32
// 1830                         if( page.gbunch && (page.gbunch - bunch) <= 18 )
        JZ      ??parseGWPackage_31
        CLR     C
        MOV     A,R0
        SUBB    A,#0x13
        LCALL   ??Subroutine0_0
??CrossCallReturnLabel_334:
        JNC     ??parseGWPackage_31
// 1831                             atomicChange( DelayedPrepareData, lastCycle*( page.gbunch - bunch ) + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine28
??CrossCallReturnLabel_53:
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#0xa
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,R1
        SJMP    ??parseGWPackage_33
// 1832                     }else{
// 1833                         if( page.gbunch && (page.gbunch - bunch) == 1 )
??parseGWPackage_32:
        JZ      ??parseGWPackage_31
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??parseGWPackage_34
        MOV     A,R1
??parseGWPackage_34:
        JNZ     ??parseGWPackage_31
// 1834                             atomicChange( DelayedPrepareData, lastCycle + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
??parseGWPackage_33:
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R1
        LCALL   ?Subroutine1
??CrossCallReturnLabel_1:
        MOVX    @DPTR,A
// 1835                     }
// 1836                 }
// 1837                 got_gw = 8;
??parseGWPackage_31:
        MOV     A,#0x8
        MOV     DPTR,#got_gw
        LCALL   ?Subroutine77
// 1838                 atomicChange( ReceiveData, lastCycle - _slot - 9*TICKS_IN_MS - temperatureProtectionDelay );  
??CrossCallReturnLabel_379:
        ADD     A,#0x8
        LCALL   ?Subroutine62
??CrossCallReturnLabel_145:
        MOV     DPTR,#_slot
        LCALL   ??Subroutine53_0
??CrossCallReturnLabel_120:
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R3
        MOV     R3,A
        MOV     A,#-0x12
        ADD     A,R2
        MOV     R4,A
        MOV     A,#-0x1
        LCALL   ?Subroutine2
// 1839                 curBunch = bunch;
??CrossCallReturnLabel_297:
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        MOV     DPTR,#curBunch
        LCALL   ?Subroutine73
// 1840                 //if( bunch != 0xFF && maxBunch < curBunch ) maxBunch = curBunch;
// 1841                 if( !page.is500Always ) {                
??CrossCallReturnLabel_313:
        JC      ??parseGWPackage_35
// 1842                     /*
// 1843                     if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
// 1844                     else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
// 1845                     shift = (INT16)sh + (INT16)o;
// 1846                     if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
// 1847                     */
// 1848                     if( ndev & HOP_MASK ){ 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_36
// 1849                         atomicChange( Hop, ticks[ ReceiveData ] - 0*TICKS_IN_MS /*- temperatureProtectionDelay*/ ); 
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine35
// 1850                         cyclesToHop = 8;
??CrossCallReturnLabel_67:
        MOV     A,#0x8
        MOV     DPTR,#cyclesToHop
        SJMP    ??parseGWPackage_37
// 1851                     }else                { cyclesToHop = 0;    atomicChange( Hop, 0 ); }
??parseGWPackage_36:
        CLR     A
        MOV     DPTR,#cyclesToHop
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
??parseGWPackage_37:
        MOVX    @DPTR,A
// 1852                 }
// 1853     
// 1854                 atomicChange( Cycle, lastCycle + 1 );
??parseGWPackage_35:
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x12
        LCALL   ??Subroutine7_1
// 1855 
// 1856                 if( page.is500Always ){
??CrossCallReturnLabel_304:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        MOV     DPTR,#lastRssi
        JNC     ??parseGWPackage_38
// 1857                       if( lastRssi > -95 ) //page.CriticalLevel500 ) 
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x5e
        LCALL   ?Subroutine67
??CrossCallReturnLabel_341:
        JC      ??parseGWPackage_39
// 1858                           { cyclesToStep500Channel = page.defCyclesToStep500Channel; cyclesTo10 = page.defCyclesTo10; }
        LCALL   ?Subroutine40
??CrossCallReturnLabel_77:
        MOV     DPTR,#(page + 202)
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_163:
        MOV     DPTR,#cyclesTo10
        SJMP    ??CrossCallReturnLabel_149
// 1859                           //{ cyclesToStep500Channel = cyclesDefaults[2]; cyclesTo10 = cyclesDefaults[1]; }
// 1860                       else flags[ Cycle ] = TRUE;
??parseGWPackage_39:
        LCALL   ?Subroutine18
??CrossCallReturnLabel_34:
        SJMP    ??parseGWPackage_40
// 1861                 }else if( lastRssi > -102 ) //page.CriticalLevel10 )  
??parseGWPackage_38:
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x65
        LCALL   ?Subroutine67
??CrossCallReturnLabel_342:
        JC      ??parseGWPackage_39
// 1862                           { cyclesTo500 = page.defCyclesTo500;                       cycles2Step10Channel = page.defCyclesToStep10Channel; }
        MOV     DPTR,#(page + 200)
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_164:
        MOV     DPTR,#cyclesTo500
        LCALL   ??Subroutine68_0
??CrossCallReturnLabel_179:
        LCALL   ?Subroutine63
??CrossCallReturnLabel_149:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??parseGWPackage_40:
        MOVX    @DPTR,A
// 1863                           //{ cyclesTo500 = cyclesDefaults[0];                       cycles2Step10Channel = cyclesDefaults[3]; }
// 1864                       else flags[ Cycle ] = TRUE;
// 1865             
// 1866                 BYTE b = bunch;
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        MOV     R4,A
// 1867                 if( b!=255 && page.rbunch ) b %= page.rbunch;
        MOV     A,#-0x1
        XRL     A,R4
        JZ      ??parseGWPackage_41
        MOV     DPTR,#(page + 157)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_41
        MOV     B,A
        MOV     A,R4
        DIV     AB
        MOV     R4,B
// 1868             
// 1869                 networkDelay = _slot * page.netId + _gw_delay - temperatureProtectionDelay;
??parseGWPackage_41:
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#_slot
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_138:
        MOV     B,R5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,R5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#_gw_delay
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ?Subroutine64
??CrossCallReturnLabel_151:
        MOV     R2,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R3,A
// 1870 
// 1871                 if(    (b!=0xFF) && ( b == page.myBunch ) )
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x6
        LCALL   ?Subroutine62
??CrossCallReturnLabel_146:
        MOV     DPTR,#(page + 3)
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#-0x1
        XRL     A,R4
        JZ      ??parseGWPackage_42
        MOV     A,R6
        XRL     A,R4
        JNZ     ??parseGWPackage_42
// 1872                     atomicChange( SendData, networkDelay );
??parseGWPackage_43:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LJMP    ??parseGWPackage_44
// 1873                 else if( page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)<=18 ) && ((ndev & NDEV_MASK ) > page.netId) )
??parseGWPackage_42:
        MOV     ?V0 + 0,R4
        MOV     A,R6
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 0,A
        CLR     A
        SUBB    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        ANL     A,#0x1f
        MOV     R7,A
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        MOV     A,?V0 + 2
        JNC     ??parseGWPackage_45
        JZ      ??parseGWPackage_46
        MOV     A,#-0x1
        XRL     A,R6
        JZ      ??parseGWPackage_46
        MOV     A,R4
        CLR     C
        SUBB    A,R6
        JC      $+5
        LJMP    ??parseGWPackage_47
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x13
        MOV     A,?V0 + 1
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_335:
        JC      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,R5
        CLR     C
        SUBB    A,R7
        JC      $+5
        LJMP    ??parseGWPackage_47
// 1874                     atomicChange( SendData, (page.myBunch-b)*lastCycle + networkDelay );
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine59
??CrossCallReturnLabel_134:
        XCH     A,R4
        MOV     R6,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,?V0 + 0
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R5
??parseGWPackage_48:
        MOV     R3,A
        SJMP    ??parseGWPackage_43
// 1875                 else if( !page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)==1 ) && ((ndev & NDEV_MASK ) > page.netId) )
??parseGWPackage_45:
        JZ      ??parseGWPackage_46
        MOV     A,#-0x1
        XRL     A,R6
        JZ      ??parseGWPackage_46
        MOV     A,R4
        CLR     C
        SUBB    A,R6
        JC      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??parseGWPackage_49
        MOV     A,?V0 + 1
??parseGWPackage_49:
        JZ      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,R5
        CLR     C
        SUBB    A,R7
        JC      $+5
        LJMP    ??parseGWPackage_47
// 1876                     atomicChange( SendData, lastCycle + networkDelay );
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        SJMP    ??parseGWPackage_48
// 1877                 else if( (page.myBunch == 0xFF) && (page.netId == 0xFF) && ((ndev & JOIN_MASK) == 0) ) {
??parseGWPackage_46:
        MOV     A,#-0x1
        XRL     A,R6
        JZ      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,#-0x1
        XRL     A,R5
        JZ      $+5
        LJMP    ??parseGWPackage_47
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     $+5
        LJMP    ??parseGWPackage_47
// 1878                     ticks[ DelayedPrepareData ] = 0; 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1879                     if( joinRequestWasSend > 0 )  joinRequestWasSend --;    
        MOV     DPTR,#joinRequestWasSend
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_50
        DEC     A
        SJMP    ??parseGWPackage_44
// 1880                     else {
// 1881                         ADCCON1 &= 0xF3; ADCCON1 |= 4;
??parseGWPackage_50:
        ANL     0xb4,#0xf3
        MOV     A,0xb4
        ORL     0xb4,#0x4
// 1882                         joinRequestWasSend = page.network_cnst_1 + RNDH % page.network_cnst_2; 
        MOV     A,0xbd
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 229)
        MOVX    A,@DPTR
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        DIV     AB
        MOV     DPTR,#(page + 228)
        MOV     R2,B
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     DPTR,#joinRequestWasSend
        MOVX    @DPTR,A
// 1883                         atomicChange( SendData, (ndev & NDEV_MASK) * _slot + (RNDL % 5) * _join_slot + _gw_delay - temperatureProtectionDelay );    // 12 * 
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1f
        ANL     A,R2
        MOV     ?V0 + 0,A
        MOV     DPTR,#_slot
        LCALL   ?Subroutine59
??CrossCallReturnLabel_135:
        MOV     R4,A
        MOV     R2,B
        MOV     B,?V0 + 0
        MOV     A,R5
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        MOV     A,0xbc
        MOV     B,#0x5
        DIV     AB
        MOV     ?V0 + 0,B
        MOV     DPTR,#_join_slot
        LCALL   ??Subroutine53_0
??CrossCallReturnLabel_121:
        MOV     A,R2
        MUL     AB
        MOV     R2,A
        MOV     R6,B
        MOV     B,?V0 + 0
        MOV     A,R3
        MUL     AB
        ADD     A,R6
        MOV     R3,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R5
        MOV     R3,A
        MOV     DPTR,#_gw_delay
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine2
// 1884                         flags[ PrepareJoin ] = TRUE; 
??CrossCallReturnLabel_298:
        MOV     DPTR,#flags
        LCALL   ?Subroutine54
??CrossCallReturnLabel_125:
        MOV     A,#0x1
??parseGWPackage_44:
        MOVX    @DPTR,A
// 1885                     }
// 1886                 }            
// 1887 
// 1888                 if( ticks[ SendData ] ){
??parseGWPackage_47:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??parseGWPackage_51
        INC     DPTR
        MOVX    A,@DPTR
??parseGWPackage_51:
        JZ      ??parseGWPackage_52
// 1889                 //signed char adjustment = 5*TICKS_IN_MS; // was 24;
// 1890                 //    if( bunch == 0 )                adjustment -= 8*TICKS_IN_MS;  // was 41;
// 1891                 signed char adjustment = -3*TICKS_IN_MS; 
        MOV     R2,#-0x6
// 1892                     if( plen == PACKET_LENGTH_GW_2) adjustment += 11*TICKS_IN_MS; // was 57; 
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        XRL     A,#0x12
        JNZ     ??parseGWPackage_53
        MOV     R2,#0x10
// 1893                     if( page.is500Always ){
??parseGWPackage_53:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_54
// 1894                         if( page.use250kbod )     adjustment -= 5*TICKS_IN_MS+3; 
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??parseGWPackage_55
        MOV     A,#-0xd
        SJMP    ??parseGWPackage_56
// 1895                         else                      adjustment -= 5*TICKS_IN_MS; // was 22;
??parseGWPackage_55:
        MOV     A,#-0xa
??parseGWPackage_56:
        ADD     A,R2
        MOV     R2,A
// 1896                     }//else if( page.isRelay )        adjustment -= TICKS_IN_MS/2; // 2; // commented 20 Feb 16:45 in order to make sure that repeater works when it is right after slave
// 1897                     ticks[ SendData ] +=  adjustment;
??parseGWPackage_54:
        MOV     A,R2
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOVX    @DPTR,A
// 1898                 }
// 1899 
// 1900                 if( (!page.is500Always) && page.isRelay ) tickWait( 2*TICKS_IN_MS+1 ); // was 12
??parseGWPackage_52:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        JNZ     ??parseGWPackage_57
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x5
        LCALL   tickWait
// 1901                 parseCommands( plen-10 );
??parseGWPackage_57:
        ; Setup parameters for call to function parseCommands
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOV     R1,A
        LCALL   parseCommands
// 1902                 if( page.treatLastByteAsChannel ){ if( !page.is500Always && (cyclesTo500 < 200) ){ curChannel = CHANNR = radioPktBufferRx[ plen ]; } }
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x48
        XRL     A,#0x8
        JNZ     ??parseGWPackage_58
        MOV     DPTR,#cyclesTo500
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x38
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??parseGWPackage_58
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#(radioPktBufferRx & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((radioPktBufferRx >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
// 1903                 
// 1904                 //lastRssi = radioPktBufferRx[ plen ];
// 1905                 //setByte( SET_CUR_CHANNEL, radioPktBuffer[7] );
// 1906                 
// 1907                 if( ticks[ SendData ] < 0 ) ticks[ SendData ] = 0;
??parseGWPackage_58:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x6
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_97:
        CLR     C
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_336:
        JNC     ??parseGWPackage_7
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1908             }
// 1909         }//else ticks[ ReceiveData ] = 2;
// 1910     }
// 1911     setupRepeater( FALSE ); 
??parseGWPackage_7:
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
        LCALL   setupRepeater
// 1912     //if( !enable2SendData ){
// 1913     //    flags[ PrepareData ] = 0; flags[ SendData ] = 0; 
// 1914     //}else 
// 1915 //    if( (!page.is500Always) && page.isRelay ) setupRepeater( got_gw ); 
// 1916     if( (!page.is500Always) && page.isRelay ){ setupRepeater( got_gw ); receive(); }
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        JNZ     $+5
        LJMP    ??parseGWPackage_3
??parseGWPackage_5:
        LJMP    ??Subroutine124_1
        CFI EndBlock cfiBlock640
        REQUIRE _A_P1
        REQUIRE ADCCON1
        REQUIRE RNDL
        REQUIRE RNDH
// 1917 //    receive();  // uncomment to get G+ behaviour
// 1918 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiCond641 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_378
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond642 Using cfiCommon0
        CFI (cfiCond642) NoFunction
        CFI (cfiCond642) Conditional ??CrossCallReturnLabel_379
        CFI (cfiCond642) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond642) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond642) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond642) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond642) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond642) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond642) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond642) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond642) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond642) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond642) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond642) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond642) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond642) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond642) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond642) CFA_SP SP+0
        CFI (cfiCond642) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond643 Using cfiCommon0
        CFI (cfiCond643) NoFunction
        CFI (cfiCond643) Conditional ??CrossCallReturnLabel_380
        CFI (cfiCond643) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond643) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond643) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond643) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond643) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond643) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond643) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond643) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond643) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond643) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond643) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond643) CFA_SP SP+0
        CFI (cfiCond643) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond644 Using cfiCommon0
        CFI (cfiCond644) NoFunction
        CFI (cfiCond644) Conditional ??CrossCallReturnLabel_381
        CFI (cfiCond644) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond644) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond644) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond644) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond644) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond644) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond644) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond644) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond644) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond644) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond644) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond644) CFA_SP SP+0
        CFI (cfiCond644) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker645 Using cfiCommon1
        CFI (cfiPicker645) NoFunction
        CFI (cfiPicker645) Picker
        MOVX    @DPTR,A
        CFI EndBlock cfiCond641
        CFI EndBlock cfiCond642
        CFI EndBlock cfiCond643
        CFI EndBlock cfiCond644
        CFI EndBlock cfiPicker645
        REQUIRE ?Subroutine122
        ; // Fall through to label ?Subroutine122

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine122:
        CFI Block cfiCond646 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_378
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond647 Using cfiCommon0
        CFI (cfiCond647) NoFunction
        CFI (cfiCond647) Conditional ??CrossCallReturnLabel_379
        CFI (cfiCond647) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond647) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond647) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond647) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond647) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond647) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond647) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond647) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond647) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond647) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond647) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond647) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond647) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond647) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond647) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond647) CFA_SP SP+0
        CFI (cfiCond647) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond648 Using cfiCommon0
        CFI (cfiCond648) NoFunction
        CFI (cfiCond648) Conditional ??CrossCallReturnLabel_380
        CFI (cfiCond648) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond648) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond648) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond648) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond648) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond648) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond648) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond648) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond648) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond648) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond648) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond648) CFA_SP SP+0
        CFI (cfiCond648) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond649 Using cfiCommon0
        CFI (cfiCond649) NoFunction
        CFI (cfiCond649) Conditional ??CrossCallReturnLabel_381
        CFI (cfiCond649) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond649) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond649) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond649) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond649) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond649) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond649) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond649) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond649) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond649) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond649) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond649) CFA_SP SP+0
        CFI (cfiCond649) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond650 Using cfiCommon0
        CFI (cfiCond650) NoFunction
        CFI (cfiCond650) Conditional ??CrossCallReturnLabel_383, ??CrossCallReturnLabel_115
        CFI (cfiCond650) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond650) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond650) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond650) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond650) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond650) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond650) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond650) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond650) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond650) CFA_SP SP+0
        CFI (cfiCond650) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond651 Using cfiCommon0
        CFI (cfiCond651) NoFunction
        CFI (cfiCond651) Conditional ??CrossCallReturnLabel_383, ??CrossCallReturnLabel_116
        CFI Block cfiCond652 Using cfiCommon0
        CFI (cfiCond652) NoFunction
        CFI (cfiCond652) Conditional ??CrossCallReturnLabel_382, ??CrossCallReturnLabel_300
        CFI (cfiCond652) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond652) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond652) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond652) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond652) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond652) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond652) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond652) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond652) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond652) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond652) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond652) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond652) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond652) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond652) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond652) CFA_SP SP+0
        CFI (cfiCond652) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond653 Using cfiCommon0
        CFI (cfiCond653) NoFunction
        CFI (cfiCond653) Conditional ??CrossCallReturnLabel_382, ??CrossCallReturnLabel_302
        CFI Block cfiCond654 Using cfiCommon0
        CFI (cfiCond654) NoFunction
        CFI (cfiCond654) Conditional ??CrossCallReturnLabel_382, ??CrossCallReturnLabel_299
        CFI (cfiCond654) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond654) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond654) CFA_SP SP+-4
        CFI Block cfiPicker655 Using cfiCommon1
        CFI (cfiPicker655) NoFunction
        CFI (cfiPicker655) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond646
        CFI EndBlock cfiCond647
        CFI EndBlock cfiCond648
        CFI EndBlock cfiCond649
        CFI EndBlock cfiCond650
        CFI EndBlock cfiCond651
        CFI EndBlock cfiCond652
        CFI EndBlock cfiCond653
        CFI EndBlock cfiCond654
        CFI EndBlock cfiPicker655

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond656 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_198
        CFI Block cfiCond657 Using cfiCommon0
        CFI (cfiCond657) NoFunction
        CFI (cfiCond657) Conditional ??CrossCallReturnLabel_199
        CFI (cfiCond657) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond657) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond657) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond657) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond657) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond657) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond657) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond657) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond657) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond657) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond657) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond657) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond657) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond657) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond657) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond657) CFA_SP SP+0
        CFI (cfiCond657) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker658 Using cfiCommon1
        CFI (cfiPicker658) NoFunction
        CFI (cfiPicker658) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function mymemcpy
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#((page + 208) & 0xff)
        MOV     R5,#(((page + 208) >> 8) & 0xff)
        MOV     R2,#(cycles2SoftKick & 0xff)
        MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
        RET
        CFI EndBlock cfiCond656
        CFI EndBlock cfiCond657
        CFI EndBlock cfiPicker658

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine120:
        CFI Block cfiCond659 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_354
        CFI Block cfiCond660 Using cfiCommon0
        CFI (cfiCond660) NoFunction
        CFI (cfiCond660) Conditional ??CrossCallReturnLabel_355
        CFI Block cfiCond661 Using cfiCommon0
        CFI (cfiCond661) NoFunction
        CFI (cfiCond661) Conditional ??CrossCallReturnLabel_356
        CFI (cfiCond661) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond661) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond661) CFA_SP SP+-4
        CFI Block cfiCond662 Using cfiCommon0
        CFI (cfiCond662) NoFunction
        CFI (cfiCond662) Conditional ??CrossCallReturnLabel_357
        CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond662) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond662) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond662) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond662) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond662) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond662) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond662) CFA_SP SP+0
        CFI (cfiCond662) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond663 Using cfiCommon0
        CFI (cfiCond663) NoFunction
        CFI (cfiCond663) Conditional ??CrossCallReturnLabel_358
        CFI (cfiCond663) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond663) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond663) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond663) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond663) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond663) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond663) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond663) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond663) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond663) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond663) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond663) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond663) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond663) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond663) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond663) CFA_SP SP+0
        CFI (cfiCond663) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond664 Using cfiCommon0
        CFI (cfiCond664) NoFunction
        CFI (cfiCond664) Conditional ??CrossCallReturnLabel_359
        CFI (cfiCond664) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond664) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond664) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond664) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond664) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond664) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond664) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond664) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond664) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond664) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond664) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond664) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond664) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond664) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond664) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond664) CFA_SP SP+0
        CFI (cfiCond664) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond665 Using cfiCommon0
        CFI (cfiCond665) NoFunction
        CFI (cfiCond665) Conditional ??CrossCallReturnLabel_360
        CFI (cfiCond665) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond665) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond665) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond665) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond665) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond665) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond665) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond665) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond665) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond665) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond665) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond665) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond665) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond665) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond665) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond665) CFA_SP SP+0
        CFI (cfiCond665) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond666 Using cfiCommon0
        CFI (cfiCond666) NoFunction
        CFI (cfiCond666) Conditional ??CrossCallReturnLabel_361
        CFI (cfiCond666) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond666) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond666) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond666) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond666) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond666) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond666) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond666) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond666) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond666) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond666) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond666) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond666) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond666) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond666) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond666) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond666) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond666) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond666) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond666) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond666) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond666) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond666) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond666) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond666) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond666) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond666) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond666) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond666) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond666) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond666) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond666) CFA_SP SP+0
        CFI (cfiCond666) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond667 Using cfiCommon0
        CFI (cfiCond667) NoFunction
        CFI (cfiCond667) Conditional ??CrossCallReturnLabel_362
        CFI (cfiCond667) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond667) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond667) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond667) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond667) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond667) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond667) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond667) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond667) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond667) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond667) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond667) CFA_SP SP+0
        CFI (cfiCond667) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond668 Using cfiCommon0
        CFI (cfiCond668) NoFunction
        CFI (cfiCond668) Conditional ??CrossCallReturnLabel_363
        CFI (cfiCond668) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond668) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond668) CFA_SP SP+-4
        CFI Block cfiCond669 Using cfiCommon0
        CFI (cfiCond669) NoFunction
        CFI (cfiCond669) Conditional ??CrossCallReturnLabel_364
        CFI (cfiCond669) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond669) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond669) CFA_SP SP+-4
        CFI Block cfiCond670 Using cfiCommon0
        CFI (cfiCond670) NoFunction
        CFI (cfiCond670) Conditional ??CrossCallReturnLabel_365
        CFI (cfiCond670) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond670) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond670) CFA_SP SP+-4
        CFI Block cfiCond671 Using cfiCommon0
        CFI (cfiCond671) NoFunction
        CFI (cfiCond671) Conditional ??CrossCallReturnLabel_366
        CFI (cfiCond671) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond671) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond671) CFA_SP SP+-4
        CFI Block cfiPicker672 Using cfiCommon1
        CFI (cfiPicker672) NoFunction
        CFI (cfiPicker672) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond659
        CFI EndBlock cfiCond660
        CFI EndBlock cfiCond661
        CFI EndBlock cfiCond662
        CFI EndBlock cfiCond663
        CFI EndBlock cfiCond664
        CFI EndBlock cfiCond665
        CFI EndBlock cfiCond666
        CFI EndBlock cfiCond667
        CFI EndBlock cfiCond668
        CFI EndBlock cfiCond669
        CFI EndBlock cfiCond670
        CFI EndBlock cfiCond671
        CFI EndBlock cfiPicker672

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond673 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_341
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond674 Using cfiCommon0
        CFI (cfiCond674) NoFunction
        CFI (cfiCond674) Conditional ??CrossCallReturnLabel_342
        CFI (cfiCond674) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond674) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond674) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond674) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond674) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond674) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond674) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond674) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond674) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond674) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond674) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond674) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond674) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond674) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond674) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond674) CFA_SP SP+0
        CFI (cfiCond674) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker675 Using cfiCommon1
        CFI (cfiPicker675) NoFunction
        CFI (cfiPicker675) Picker
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        LJMP    ?Subroutine117
        CFI EndBlock cfiCond673
        CFI EndBlock cfiCond674
        CFI EndBlock cfiPicker675

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond676 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_150
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond677 Using cfiCommon0
        CFI (cfiCond677) NoFunction
        CFI (cfiCond677) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond677) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond677) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond677) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond677) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond677) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond677) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond677) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond677) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond677) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond677) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond677) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond677) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond677) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond677) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond677) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond677) CFA_SP SP+0
        CFI (cfiCond677) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker678 Using cfiCommon1
        CFI (cfiPicker678) NoFunction
        CFI (cfiPicker678) Picker
        LCALL   ?Subroutine98
??CrossCallReturnLabel_257:
        RET
        CFI EndBlock cfiCond676
        CFI EndBlock cfiCond677
        CFI EndBlock cfiPicker678

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine98:
        CFI Block cfiCond679 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_150
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond680 Using cfiCommon0
        CFI (cfiCond680) NoFunction
        CFI (cfiCond680) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_151
        CFI (cfiCond680) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond680) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond680) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond680) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond680) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond680) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond680) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond680) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond680) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond680) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond680) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond680) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond680) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond680) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond680) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond680) CFA_SP SP+0
        CFI (cfiCond680) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond681 Using cfiCommon0
        CFI (cfiCond681) NoFunction
        CFI (cfiCond681) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_0
        CFI (cfiCond681) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond681) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond681) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond681) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond681) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond681) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond681) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond681) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond681) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond681) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond681) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond681) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond681) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond681) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond681) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond681) CFA_SP SP+0
        CFI (cfiCond681) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond682 Using cfiCommon0
        CFI (cfiCond682) NoFunction
        CFI (cfiCond682) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_1
        CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond682) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond682) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond682) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond682) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond682) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond682) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond682) CFA_SP SP+0
        CFI (cfiCond682) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker683 Using cfiCommon1
        CFI (cfiPicker683) NoFunction
        CFI (cfiPicker683) Picker
        LCALL   ?Subroutine107
??CrossCallReturnLabel_277:
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        RET
        CFI EndBlock cfiCond679
        CFI EndBlock cfiCond680
        CFI EndBlock cfiCond681
        CFI EndBlock cfiCond682
        CFI EndBlock cfiPicker683

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond684 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_148
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond685 Using cfiCommon0
        CFI (cfiCond685) NoFunction
        CFI (cfiCond685) Conditional ??CrossCallReturnLabel_149
        CFI (cfiCond685) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond685) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond685) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond685) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond685) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond685) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond685) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond685) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond685) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond685) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond685) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond685) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond685) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond685) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond685) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond685) CFA_SP SP+0
        CFI (cfiCond685) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker686 Using cfiCommon1
        CFI (cfiPicker686) NoFunction
        CFI (cfiPicker686) Picker
        LCALL   ?Subroutine99
??CrossCallReturnLabel_259:
        RET
        CFI EndBlock cfiCond684
        CFI EndBlock cfiCond685
        CFI EndBlock cfiPicker686

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine99:
        CFI Block cfiCond687 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_148
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond688 Using cfiCommon0
        CFI (cfiCond688) NoFunction
        CFI (cfiCond688) Conditional ??CrossCallReturnLabel_259, ??CrossCallReturnLabel_149
        CFI (cfiCond688) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond688) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond688) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond688) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond688) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond688) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond688) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond688) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond688) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond688) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond688) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond688) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond688) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond688) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond688) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond688) CFA_SP SP+0
        CFI (cfiCond688) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond689 Using cfiCommon0
        CFI (cfiCond689) NoFunction
        CFI (cfiCond689) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_15
        CFI (cfiCond689) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond689) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond689) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond689) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond689) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond689) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond689) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond689) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond689) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond689) CFA_SP SP+0
        CFI (cfiCond689) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond690 Using cfiCommon0
        CFI (cfiCond690) NoFunction
        CFI (cfiCond690) Conditional ??CrossCallReturnLabel_258, ??CrossCallReturnLabel_16
        CFI (cfiCond690) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond690) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond690) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond690) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond690) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond690) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond690) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond690) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond690) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond690) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond690) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond690) CFA_SP SP+0
        CFI (cfiCond690) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker691 Using cfiCommon1
        CFI (cfiPicker691) NoFunction
        CFI (cfiPicker691) Picker
        MOV     DPTR,#(page + 206)
        LCALL   ?Subroutine107
??CrossCallReturnLabel_278:
        MOV     DPTR,#cycles2Step10Channel
        RET
        CFI EndBlock cfiCond687
        CFI EndBlock cfiCond688
        CFI EndBlock cfiCond689
        CFI EndBlock cfiCond690
        CFI EndBlock cfiPicker691

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond692 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_141
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond693 Using cfiCommon0
        CFI (cfiCond693) NoFunction
        CFI (cfiCond693) Conditional ??CrossCallReturnLabel_142
        CFI Block cfiCond694 Using cfiCommon0
        CFI (cfiCond694) NoFunction
        CFI (cfiCond694) Conditional ??CrossCallReturnLabel_143
        CFI Block cfiCond695 Using cfiCommon0
        CFI (cfiCond695) NoFunction
        CFI (cfiCond695) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond695) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond695) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond695) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond695) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond695) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond695) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond695) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond695) CFA_SP SP+0
        CFI (cfiCond695) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond696 Using cfiCommon0
        CFI (cfiCond696) NoFunction
        CFI (cfiCond696) Conditional ??CrossCallReturnLabel_145
        CFI (cfiCond696) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond696) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond696) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond696) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond696) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond696) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond696) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond696) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond696) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond696) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond696) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond696) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond696) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond696) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond696) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond696) CFA_SP SP+0
        CFI (cfiCond696) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond697 Using cfiCommon0
        CFI (cfiCond697) NoFunction
        CFI (cfiCond697) Conditional ??CrossCallReturnLabel_146
        CFI (cfiCond697) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond697) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond697) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond697) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond697) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond697) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond697) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond697) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond697) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond697) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond697) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond697) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond697) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond697) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond697) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond697) CFA_SP SP+0
        CFI (cfiCond697) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond698 Using cfiCommon0
        CFI (cfiCond698) NoFunction
        CFI (cfiCond698) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond698) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond698) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond698) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond698) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond698) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond698) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond698) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond698) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond698) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond698) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond698) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond698) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond698) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond698) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond698) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond698) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond698) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond698) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond698) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond698) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond698) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond698) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond698) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond698) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond698) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond698) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond698) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond698) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond698) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond698) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond698) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond698) CFA_SP SP+0
        CFI (cfiCond698) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker699 Using cfiCommon1
        CFI (cfiPicker699) NoFunction
        CFI (cfiPicker699) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond692
        CFI EndBlock cfiCond693
        CFI EndBlock cfiCond694
        CFI EndBlock cfiCond695
        CFI EndBlock cfiCond696
        CFI EndBlock cfiCond697
        CFI EndBlock cfiCond698
        CFI EndBlock cfiPicker699

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond700 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_134
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond701 Using cfiCommon0
        CFI (cfiCond701) NoFunction
        CFI (cfiCond701) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond701) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond701) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond701) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond701) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond701) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond701) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond701) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond701) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond701) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond701) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond701) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond701) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond701) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond701) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond701) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond701) CFA_SP SP+0
        CFI (cfiCond701) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker702 Using cfiCommon1
        CFI (cfiPicker702) NoFunction
        CFI (cfiPicker702) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        MOV     B,?V0 + 0
        MUL     AB
        RET
        CFI EndBlock cfiCond700
        CFI EndBlock cfiCond701
        CFI EndBlock cfiPicker702

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond703 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond704 Using cfiCommon0
        CFI (cfiCond704) NoFunction
        CFI (cfiCond704) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond704) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond704) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond704) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond704) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond704) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond704) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond704) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond704) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond704) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond704) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond704) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond704) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond704) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond704) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond704) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond704) CFA_SP SP+0
        CFI (cfiCond704) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker705 Using cfiCommon1
        CFI (cfiPicker705) NoFunction
        CFI (cfiPicker705) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond703
        CFI EndBlock cfiCond704
        CFI EndBlock cfiPicker705

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond706 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_122
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond707 Using cfiCommon0
        CFI (cfiCond707) NoFunction
        CFI (cfiCond707) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond707) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond707) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond707) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond707) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond707) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond707) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond707) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond707) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond707) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond707) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond707) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond707) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond707) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond707) CFA_SP SP+0
        CFI (cfiCond707) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker708 Using cfiCommon1
        CFI (cfiPicker708) NoFunction
        CFI (cfiPicker708) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI Block cfiCond709 Using cfiCommon0
        CFI (cfiCond709) NoFunction
        CFI (cfiCond709) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond709) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond709) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond709) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond709) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond709) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond709) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond709) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond709) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond709) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond709) CFA_SP SP+0
        CFI (cfiCond709) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond710 Using cfiCommon0
        CFI (cfiCond710) NoFunction
        CFI (cfiCond710) Conditional ??CrossCallReturnLabel_118
        CFI Block cfiCond711 Using cfiCommon0
        CFI (cfiCond711) NoFunction
        CFI (cfiCond711) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond711) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond711) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond711) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond711) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond711) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond711) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond711) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond711) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond711) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond711) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond711) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond711) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond711) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond711) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond711) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond711) CFA_SP SP+0
        CFI (cfiCond711) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond712 Using cfiCommon0
        CFI (cfiCond712) NoFunction
        CFI (cfiCond712) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond712) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond712) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond712) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond712) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond712) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond712) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond712) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond712) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond712) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond712) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond712) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond712) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond712) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond712) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond712) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond712) CFA_SP SP+0
        CFI (cfiCond712) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond713 Using cfiCommon0
        CFI (cfiCond713) NoFunction
        CFI (cfiCond713) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond713) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond713) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond713) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond713) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond713) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond713) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond713) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond713) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond713) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond713) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond713) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond713) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond713) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond713) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond713) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond713) CFA_SP SP+0
        CFI (cfiCond713) CFA_XSP16 add(XSP16, 15)
??Subroutine53_0:
        LCALL   ??Subroutine96_0
??CrossCallReturnLabel_348:
        RET
        CFI EndBlock cfiCond706
        CFI EndBlock cfiCond707
        CFI EndBlock cfiPicker708
        CFI EndBlock cfiCond709
        CFI EndBlock cfiCond710
        CFI EndBlock cfiCond711
        CFI EndBlock cfiCond712
        CFI EndBlock cfiCond713

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond714 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond715 Using cfiCommon0
        CFI (cfiCond715) NoFunction
        CFI (cfiCond715) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond715) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond715) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond715) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond715) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond715) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond715) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond715) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond715) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond715) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond715) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond715) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond715) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond715) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond715) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond715) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond715) CFA_SP SP+0
        CFI (cfiCond715) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker716 Using cfiCommon1
        CFI (cfiPicker716) NoFunction
        CFI (cfiPicker716) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ?Subroutine90
??CrossCallReturnLabel_244:
        RET
        CFI EndBlock cfiCond714
        CFI EndBlock cfiCond715
        CFI EndBlock cfiPicker716

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond717 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond718 Using cfiCommon0
        CFI (cfiCond718) NoFunction
        CFI (cfiCond718) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond718) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond718) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond718) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond718) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond718) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond718) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond718) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond718) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond718) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond718) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond718) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond718) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond718) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond718) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond718) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond718) CFA_SP SP+0
        CFI (cfiCond718) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker719 Using cfiCommon1
        CFI (cfiPicker719) NoFunction
        CFI (cfiPicker719) Picker
        LCALL   ?Subroutine94
??CrossCallReturnLabel_325:
        RET
        CFI EndBlock cfiCond717
        CFI EndBlock cfiCond718
        CFI EndBlock cfiPicker719

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine94:
        CFI Block cfiCond720 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond721 Using cfiCommon0
        CFI (cfiCond721) NoFunction
        CFI (cfiCond721) Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_77
        CFI (cfiCond721) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond721) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond721) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond721) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond721) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond721) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond721) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond721) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond721) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond721) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond721) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond721) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond721) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond721) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond721) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond721) CFA_SP SP+0
        CFI (cfiCond721) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond722 Using cfiCommon0
        CFI (cfiCond722) NoFunction
        CFI (cfiCond722) Conditional ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_41
        CFI (cfiCond722) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond722) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond722) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond722) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond722) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond722) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond722) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond722) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond722) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond722) CFA_SP SP+0
        CFI (cfiCond722) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond723 Using cfiCommon0
        CFI (cfiCond723) NoFunction
        CFI (cfiCond723) Conditional ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_42
        CFI (cfiCond723) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond723) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond723) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond723) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond723) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond723) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond723) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond723) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond723) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond723) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond723) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond723) CFA_SP SP+0
        CFI (cfiCond723) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker724 Using cfiCommon1
        CFI (cfiPicker724) NoFunction
        CFI (cfiPicker724) Picker
        MOV     DPTR,#(page + 204)
        LCALL   ?Subroutine107
??CrossCallReturnLabel_276:
        MOV     DPTR,#cyclesToStep500Channel
        CFI EndBlock cfiCond720
        CFI EndBlock cfiCond721
        CFI EndBlock cfiCond722
        CFI EndBlock cfiCond723
        CFI EndBlock cfiPicker724
        REQUIRE ?Subroutine115
        ; // Fall through to label ?Subroutine115

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine115:
        CFI Block cfiCond725 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond726 Using cfiCommon0
        CFI (cfiCond726) NoFunction
        CFI (cfiCond726) Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_77
        CFI (cfiCond726) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond726) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond726) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond726) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond726) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond726) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond726) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond726) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond726) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond726) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond726) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond726) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond726) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond726) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond726) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond726) CFA_SP SP+0
        CFI (cfiCond726) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond727 Using cfiCommon0
        CFI (cfiCond727) NoFunction
        CFI (cfiCond727) Conditional ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_41
        CFI (cfiCond727) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond727) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond727) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond727) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond727) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond727) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond727) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond727) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond727) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond727) CFA_SP SP+0
        CFI (cfiCond727) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond728 Using cfiCommon0
        CFI (cfiCond728) NoFunction
        CFI (cfiCond728) Conditional ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_42
        CFI (cfiCond728) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond728) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond728) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond728) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond728) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond728) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond728) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond728) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond728) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond728) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond728) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond728) CFA_SP SP+0
        CFI (cfiCond728) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond729 Using cfiCommon0
        CFI (cfiCond729) NoFunction
        CFI (cfiCond729) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_74
        CFI (cfiCond729) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond729) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond729) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond729) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond729) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond729) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond729) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond729) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond729) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond729) CFA_SP SP+0
        CFI (cfiCond729) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond730 Using cfiCommon0
        CFI (cfiCond730) NoFunction
        CFI (cfiCond730) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_75
        CFI Block cfiCond731 Using cfiCommon0
        CFI (cfiCond731) NoFunction
        CFI (cfiCond731) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_66
        CFI (cfiCond731) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond731) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond731) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond731) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond731) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond731) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond731) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond731) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond731) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond731) CFA_SP SP+0
        CFI (cfiCond731) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond732 Using cfiCommon0
        CFI (cfiCond732) NoFunction
        CFI (cfiCond732) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_67
        CFI (cfiCond732) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond732) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond732) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond732) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond732) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond732) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond732) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond732) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond732) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond732) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond732) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond732) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond732) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond732) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond732) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond732) CFA_SP SP+0
        CFI (cfiCond732) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond733 Using cfiCommon0
        CFI (cfiCond733) NoFunction
        CFI (cfiCond733) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_182
        CFI (cfiCond733) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond733) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond733) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond733) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond733) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond733) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond733) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond733) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond733) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond733) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond733) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond733) CFA_SP SP+0
        CFI (cfiCond733) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond734 Using cfiCommon0
        CFI (cfiCond734) NoFunction
        CFI (cfiCond734) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_183
        CFI (cfiCond734) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond734) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond734) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond734) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond734) V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond734) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond734) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond734) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond734) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond734) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond734) CFA_SP SP+0
        CFI (cfiCond734) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond735 Using cfiCommon0
        CFI (cfiCond735) NoFunction
        CFI (cfiCond735) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_171
        CFI (cfiCond735) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond735) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond735) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond735) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond735) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond735) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond735) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond735) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond735) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond735) CFA_SP SP+0
        CFI (cfiCond735) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond736 Using cfiCommon0
        CFI (cfiCond736) NoFunction
        CFI (cfiCond736) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_172
        CFI (cfiCond736) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond736) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond736) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond736) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond736) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond736) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond736) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond736) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond736) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond736) CFA_SP SP+0
        CFI (cfiCond736) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond737 Using cfiCommon0
        CFI (cfiCond737) NoFunction
        CFI (cfiCond737) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_173
        CFI Block cfiCond738 Using cfiCommon0
        CFI (cfiCond738) NoFunction
        CFI (cfiCond738) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_174
        CFI Block cfiCond739 Using cfiCommon0
        CFI (cfiCond739) NoFunction
        CFI (cfiCond739) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_175
        CFI Block cfiCond740 Using cfiCommon0
        CFI (cfiCond740) NoFunction
        CFI (cfiCond740) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_176
        CFI (cfiCond740) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond740) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond740) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond740) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond740) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond740) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond740) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond740) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond740) CFA_SP SP+0
        CFI (cfiCond740) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond741 Using cfiCommon0
        CFI (cfiCond741) NoFunction
        CFI (cfiCond741) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_177
        CFI (cfiCond741) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond741) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond741) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond741) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond741) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond741) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond741) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond741) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond741) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond741) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond741) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond741) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond741) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond741) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond741) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond741) CFA_SP SP+0
        CFI (cfiCond741) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond742 Using cfiCommon0
        CFI (cfiCond742) NoFunction
        CFI (cfiCond742) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_178
        CFI (cfiCond742) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond742) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond742) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond742) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond742) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond742) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond742) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond742) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond742) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond742) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond742) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond742) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond742) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond742) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond742) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond742) CFA_SP SP+0
        CFI (cfiCond742) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond743 Using cfiCommon0
        CFI (cfiCond743) NoFunction
        CFI (cfiCond743) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_179
        CFI (cfiCond743) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond743) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond743) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond743) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond743) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond743) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond743) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond743) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond743) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond743) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond743) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond743) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond743) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond743) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond743) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond743) CFA_SP SP+0
        CFI (cfiCond743) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond744 Using cfiCommon0
        CFI (cfiCond744) NoFunction
        CFI (cfiCond744) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_180
        CFI (cfiCond744) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond744) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond744) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond744) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond744) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond744) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond744) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond744) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond744) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond744) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond744) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond744) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond744) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond744) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond744) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond744) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond744) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond744) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond744) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond744) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond744) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond744) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond744) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond744) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond744) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond744) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond744) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond744) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond744) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond744) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond744) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond744) CFA_SP SP+0
        CFI (cfiCond744) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond745 Using cfiCommon0
        CFI (cfiCond745) NoFunction
        CFI (cfiCond745) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_181
        CFI (cfiCond745) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond745) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond745) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond745) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond745) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond745) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond745) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond745) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond745) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond745) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond745) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond745) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond745) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond745) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond745) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond745) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond745) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond745) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond745) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond745) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond745) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond745) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond745) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond745) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond745) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond745) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond745) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond745) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond745) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond745) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond745) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond745) CFA_SP SP+0
        CFI (cfiCond745) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond746 Using cfiCommon0
        CFI (cfiCond746) NoFunction
        CFI (cfiCond746) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_184
        CFI (cfiCond746) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond746) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond746) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond746) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond746) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond746) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond746) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond746) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond746) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond746) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond746) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond746) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond746) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond746) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond746) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond746) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond746) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond746) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond746) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond746) CFA_SP SP+0
        CFI (cfiCond746) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond747 Using cfiCommon0
        CFI (cfiCond747) NoFunction
        CFI (cfiCond747) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_185
        CFI (cfiCond747) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond747) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond747) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond747) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond747) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond747) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond747) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond747) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond747) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond747) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond747) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond747) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond747) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond747) CFA_SP SP+0
        CFI (cfiCond747) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond748 Using cfiCommon0
        CFI (cfiCond748) NoFunction
        CFI (cfiCond748) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_186
        CFI (cfiCond748) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond748) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond748) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond748) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond748) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond748) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond748) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond748) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond748) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond748) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond748) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond748) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond748) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond748) CFA_SP SP+0
        CFI (cfiCond748) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond749 Using cfiCommon0
        CFI (cfiCond749) NoFunction
        CFI (cfiCond749) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_187
        CFI (cfiCond749) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond749) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond749) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond749) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond749) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond749) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond749) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond749) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond749) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond749) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond749) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond749) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond749) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond749) CFA_SP SP+0
        CFI (cfiCond749) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond750 Using cfiCommon0
        CFI (cfiCond750) NoFunction
        CFI (cfiCond750) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_188
        CFI (cfiCond750) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond750) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond750) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond750) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond750) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond750) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond750) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond750) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond750) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond750) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond750) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond750) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond750) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond750) CFA_SP SP+0
        CFI (cfiCond750) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond751 Using cfiCommon0
        CFI (cfiCond751) NoFunction
        CFI (cfiCond751) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_78
        CFI (cfiCond751) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond751) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond751) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond751) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond751) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond751) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond751) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond751) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond751) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond751) CFA_SP SP+0
        CFI (cfiCond751) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond752 Using cfiCommon0
        CFI (cfiCond752) NoFunction
        CFI (cfiCond752) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_79
        CFI (cfiCond752) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond752) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond752) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond752) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond752) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond752) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond752) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond752) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond752) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond752) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond752) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond752) CFA_SP SP+0
        CFI (cfiCond752) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond753 Using cfiCommon0
        CFI (cfiCond753) NoFunction
        CFI (cfiCond753) Conditional ??CrossCallReturnLabel_318, ??CrossCallReturnLabel_15
        CFI (cfiCond753) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond753) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond753) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond753) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond753) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond753) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond753) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond753) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond753) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond753) CFA_SP SP+0
        CFI (cfiCond753) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond754 Using cfiCommon0
        CFI (cfiCond754) NoFunction
        CFI (cfiCond754) Conditional ??CrossCallReturnLabel_318, ??CrossCallReturnLabel_16
        CFI (cfiCond754) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond754) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond754) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond754) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond754) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond754) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond754) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond754) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond754) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond754) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond754) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond754) CFA_SP SP+0
        CFI (cfiCond754) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond755 Using cfiCommon0
        CFI (cfiCond755) NoFunction
        CFI (cfiCond755) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_15
        CFI (cfiCond755) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond755) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond755) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond755) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond755) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond755) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond755) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond755) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond755) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond755) CFA_SP SP+0
        CFI (cfiCond755) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond756 Using cfiCommon0
        CFI (cfiCond756) NoFunction
        CFI (cfiCond756) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_16
        CFI (cfiCond756) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond756) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond756) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond756) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond756) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond756) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond756) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond756) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond756) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond756) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond756) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond756) CFA_SP SP+0
        CFI (cfiCond756) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker757 Using cfiCommon1
        CFI (cfiPicker757) NoFunction
        CFI (cfiPicker757) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond725
        CFI EndBlock cfiCond726
        CFI EndBlock cfiCond727
        CFI EndBlock cfiCond728
        CFI EndBlock cfiCond729
        CFI EndBlock cfiCond730
        CFI EndBlock cfiCond731
        CFI EndBlock cfiCond732
        CFI EndBlock cfiCond733
        CFI EndBlock cfiCond734
        CFI EndBlock cfiCond735
        CFI EndBlock cfiCond736
        CFI EndBlock cfiCond737
        CFI EndBlock cfiCond738
        CFI EndBlock cfiCond739
        CFI EndBlock cfiCond740
        CFI EndBlock cfiCond741
        CFI EndBlock cfiCond742
        CFI EndBlock cfiCond743
        CFI EndBlock cfiCond744
        CFI EndBlock cfiCond745
        CFI EndBlock cfiCond746
        CFI EndBlock cfiCond747
        CFI EndBlock cfiCond748
        CFI EndBlock cfiCond749
        CFI EndBlock cfiCond750
        CFI EndBlock cfiCond751
        CFI EndBlock cfiCond752
        CFI EndBlock cfiCond753
        CFI EndBlock cfiCond754
        CFI EndBlock cfiCond755
        CFI EndBlock cfiCond756
        CFI EndBlock cfiPicker757

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond758 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond759 Using cfiCommon0
        CFI (cfiCond759) NoFunction
        CFI (cfiCond759) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond759) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond759) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond759) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond759) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond759) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond759) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond759) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond759) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond759) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond759) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond759) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond759) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond759) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond759) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond759) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond759) CFA_SP SP+0
        CFI (cfiCond759) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker760 Using cfiCommon1
        CFI (cfiPicker760) NoFunction
        CFI (cfiPicker760) Picker
        LCALL   ?Subroutine100
??CrossCallReturnLabel_263:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine115
??CrossCallReturnLabel_320:
        RET
        CFI EndBlock cfiCond758
        CFI EndBlock cfiCond759
        CFI EndBlock cfiPicker760

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond761 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond762 Using cfiCommon0
        CFI (cfiCond762) NoFunction
        CFI (cfiCond762) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond762) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond762) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond762) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond762) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond762) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond762) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond762) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond762) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond762) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond762) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond762) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond762) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond762) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond762) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond762) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond762) CFA_SP SP+0
        CFI (cfiCond762) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond763 Using cfiCommon0
        CFI (cfiCond763) NoFunction
        CFI (cfiCond763) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond763) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond763) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond763) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond763) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond763) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond763) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond763) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond763) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond763) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond763) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond763) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond763) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond763) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond763) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond763) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond763) CFA_SP SP+0
        CFI (cfiCond763) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond764 Using cfiCommon0
        CFI (cfiCond764) NoFunction
        CFI (cfiCond764) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond764) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond764) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond764) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond764) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond764) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond764) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond764) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond764) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond764) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond764) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond764) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond764) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond764) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond764) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond764) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond764) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond764) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond764) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond764) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond764) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond764) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond764) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond764) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond764) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond764) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond764) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond764) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond764) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond764) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond764) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond764) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond764) CFA_SP SP+0
        CFI (cfiCond764) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker765 Using cfiCommon1
        CFI (cfiPicker765) NoFunction
        CFI (cfiPicker765) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond761
        CFI EndBlock cfiCond762
        CFI EndBlock cfiCond763
        CFI EndBlock cfiCond764
        CFI EndBlock cfiPicker765

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond766 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond767 Using cfiCommon0
        CFI (cfiCond767) NoFunction
        CFI (cfiCond767) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond767) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond767) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond767) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond767) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond767) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond767) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond767) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond767) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond767) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond767) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond767) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond767) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond767) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond767) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond767) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond767) CFA_SP SP+0
        CFI (cfiCond767) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker768 Using cfiCommon1
        CFI (cfiPicker768) NoFunction
        CFI (cfiPicker768) Picker
        MOV     DPTR,#flags
        LCALL   ??Subroutine92_0
??CrossCallReturnLabel_250:
        INC     DPTR
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond766
        CFI EndBlock cfiCond767
        CFI EndBlock cfiPicker768

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond769 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond770 Using cfiCommon0
        CFI (cfiCond770) NoFunction
        CFI (cfiCond770) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond770) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond770) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond770) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond770) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond770) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond770) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond770) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond770) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond770) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond770) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond770) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond770) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond770) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond770) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond770) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond770) CFA_SP SP+0
        CFI (cfiCond770) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker771 Using cfiCommon1
        CFI (cfiPicker771) NoFunction
        CFI (cfiPicker771) Picker
        MOV     DPTR,#cyclesFromStart
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPTR,#cyclesFromStart
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x33
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond769
        CFI EndBlock cfiCond770
        CFI EndBlock cfiPicker771

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond772 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_300
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond773 Using cfiCommon0
        CFI (cfiCond773) NoFunction
        CFI (cfiCond773) Conditional ??CrossCallReturnLabel_302
        CFI Block cfiPicker774 Using cfiCommon1
        CFI (cfiPicker774) NoFunction
        CFI (cfiPicker774) Picker
        MOV     DPTR,#(page + 142)
        CFI Block cfiCond775 Using cfiCommon0
        CFI (cfiCond775) NoFunction
        CFI (cfiCond775) Conditional ??CrossCallReturnLabel_299
        CFI (cfiCond775) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond775) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond775) CFA_SP SP+-4
??Subroutine7_0:
        LCALL   ?Subroutine95
??CrossCallReturnLabel_382:
        ADD     A,#0xe
        CFI Block cfiCond776 Using cfiCommon0
        CFI (cfiCond776) NoFunction
        CFI (cfiCond776) Conditional ??CrossCallReturnLabel_301
        CFI (cfiCond776) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond776) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond776) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond776) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond776) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond776) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond776) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond776) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond776) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond776) CFA_SP SP+0
        CFI (cfiCond776) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond777 Using cfiCommon0
        CFI (cfiCond777) NoFunction
        CFI (cfiCond777) Conditional ??CrossCallReturnLabel_303
        CFI Block cfiCond778 Using cfiCommon0
        CFI (cfiCond778) NoFunction
        CFI (cfiCond778) Conditional ??CrossCallReturnLabel_304
        CFI (cfiCond778) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond778) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond778) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond778) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond778) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond778) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond778) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond778) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond778) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond778) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond778) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond778) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond778) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond778) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond778) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond778) CFA_SP SP+0
        CFI (cfiCond778) CFA_XSP16 add(XSP16, 15)
??Subroutine7_1:
        LCALL   ?Subroutine90
??CrossCallReturnLabel_238:
        LJMP    ??Subroutine112_0
        CFI EndBlock cfiCond772
        CFI EndBlock cfiCond773
        CFI EndBlock cfiPicker774
        CFI EndBlock cfiCond775
        CFI EndBlock cfiCond776
        CFI EndBlock cfiCond777
        CFI EndBlock cfiCond778

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine95:
        CFI Block cfiCond779 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_383, ??CrossCallReturnLabel_115
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond780 Using cfiCommon0
        CFI (cfiCond780) NoFunction
        CFI (cfiCond780) Conditional ??CrossCallReturnLabel_383, ??CrossCallReturnLabel_116
        CFI Block cfiCond781 Using cfiCommon0
        CFI (cfiCond781) NoFunction
        CFI (cfiCond781) Conditional ??CrossCallReturnLabel_382, ??CrossCallReturnLabel_300
        CFI (cfiCond781) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond781) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond781) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond781) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond781) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond781) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond781) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond781) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond781) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond781) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond781) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond781) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond781) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond781) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond781) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond781) CFA_SP SP+0
        CFI (cfiCond781) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond782 Using cfiCommon0
        CFI (cfiCond782) NoFunction
        CFI (cfiCond782) Conditional ??CrossCallReturnLabel_382, ??CrossCallReturnLabel_302
        CFI Block cfiCond783 Using cfiCommon0
        CFI (cfiCond783) NoFunction
        CFI (cfiCond783) Conditional ??CrossCallReturnLabel_382, ??CrossCallReturnLabel_299
        CFI (cfiCond783) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond783) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond783) CFA_SP SP+-4
        CFI Block cfiPicker784 Using cfiCommon1
        CFI (cfiPicker784) NoFunction
        CFI (cfiPicker784) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LJMP    ?Subroutine122
        CFI EndBlock cfiCond779
        CFI EndBlock cfiCond780
        CFI EndBlock cfiCond781
        CFI EndBlock cfiCond782
        CFI EndBlock cfiCond783
        CFI EndBlock cfiPicker784

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond785 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_297
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond786 Using cfiCommon0
        CFI (cfiCond786) NoFunction
        CFI (cfiCond786) Conditional ??CrossCallReturnLabel_298
        CFI (cfiCond786) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond786) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond786) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond786) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond786) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond786) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond786) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond786) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond786) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond786) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond786) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond786) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond786) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond786) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond786) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond786) CFA_SP SP+0
        CFI (cfiCond786) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker787 Using cfiCommon1
        CFI (cfiPicker787) NoFunction
        CFI (cfiPicker787) Picker
        ADDC    A,R3
        MOV     R5,A
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ??Subroutine96_0
??CrossCallReturnLabel_345:
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R5
        SUBB    A,R3
        MOV     R3,A
        LJMP    ?Subroutine112
        CFI EndBlock cfiCond785
        CFI EndBlock cfiCond786
        CFI EndBlock cfiPicker787

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond788 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond789 Using cfiCommon0
        CFI (cfiCond789) NoFunction
        CFI (cfiCond789) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond789) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond789) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond789) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond789) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond789) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond789) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond789) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond789) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond789) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond789) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond789) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond789) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond789) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond789) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond789) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond789) CFA_SP SP+0
        CFI (cfiCond789) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker790 Using cfiCommon1
        CFI (cfiPicker790) NoFunction
        CFI (cfiPicker790) Picker
        SUBB    A,#0x0
        MOV     R3,A
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ?Subroutine98
??CrossCallReturnLabel_256:
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
        CFI EndBlock cfiCond788
        CFI EndBlock cfiCond789
        CFI EndBlock cfiPicker790

        RSEG XDATA_Z:XDATA:NOROOT(0)
??bunch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??plen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??cnt:
        DS 1
        REQUIRE `?<Initializer for cnt>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_3f800000:
        DS 4
        REQUIRE `?<Initializer for __Constant_3f800000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_447a0000:
        DS 4
        REQUIRE `?<Initializer for __Constant_447a0000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_42c80000:
        DS 4
        REQUIRE `?<Initializer for __Constant_42c80000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_c1c80000:
        DS 4
        REQUIRE `?<Initializer for __Constant_c1c80000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_38d1b717:
        DS 4
        REQUIRE `?<Initializer for __Constant_38d1b717>`
        REQUIRE __INIT_XDATA_I
// 1919 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1920 BYTE *nextSlot(){
nextSlot:
        CFI Block cfiBlock791 Using cfiCommon0
        CFI Function nextSlot
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1921     BYTE *ptr = (BYTE *)(PAGEADDR + PAGESIZE); 
        MOV     R2,#-0xe
        MOV     R3,#0x5c
        SJMP    ??nextSlot_0
// 1922     while( ptr && ( ptr <= (BYTE *)(PAGEADDR+0x3FF) ) ){ 
// 1923         BYTE i = 4; 
// 1924         do{ if( ptr[--i] != 0xFF ) break; }while(i);
// 1925         if( i ) ptr += 4; else return ptr; 
??nextSlot_1:
        LCALL   ?Subroutine87
??CrossCallReturnLabel_228:
        MOV     A,R2
        JNZ     ??nextSlot_2
        MOV     A,R3
??nextSlot_2:
        JZ      ??nextSlot_3
??nextSlot_0:
        CLR     C
        MOV     A,R3
        SUBB    A,#0x60
        JNC     ??nextSlot_3
        MOV     R4,#0x4
??nextSlot_4:
        DEC     R4
        MOV     ?V0 + 0,R4
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??nextSlot_5
        MOV     A,R4
        JNZ     ??nextSlot_4
??nextSlot_5:
        MOV     A,R4
        JNZ     ??nextSlot_1
        SJMP    ??nextSlot_6
// 1926     }
// 1927     return NULL;
??nextSlot_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??nextSlot_6:
        LJMP    ??Subroutine125_0
        CFI EndBlock cfiBlock791
// 1928 }
// 1929 /******************************************************************************
// 1930 * @fn  receive
// 1931 * @brief       This function switch radio into receiving radioMode
// 1932 * Parameters:
// 1933 * @return void
// 1934 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1935 void receive(void){
receive:
        CFI Block cfiBlock792 Using cfiCommon0
        CFI Function receive
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1936     //if( page.fuseComm ) return;
// 1937     if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( ReceiveData, 1 ); return; }
        LCALL   ?Subroutine27
??CrossCallReturnLabel_50:
        JNZ     ??receive_0
        LCALL   ?Subroutine6
??CrossCallReturnLabel_365:
        SJMP    ??receive_1
// 1938     RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
??receive_0:
        MOV     0xe1,#0x4
        MOV     A,#-0x10
        LCALL   ??Subroutine70_0
// 1939     //INT_GLOBAL_ENABLE( INT_OFF );
// 1940         si->packetReceived = 0;
??CrossCallReturnLabel_196:
        ADD     A,#0x5f
        LCALL   ??Subroutine8_1
// 1941         radioPktBufferRx[0] = 0;    radioPktBufferRx[1] = 0;
??CrossCallReturnLabel_7:
        MOV     DPTR,#radioPktBufferRx
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBufferRx + 1)
        LCALL   ??Subroutine70_0
// 1942         //quartz();
// 1943         si->radioMode = RADIO_MODE_RX;
??CrossCallReturnLabel_197:
        ADD     A,#0x3a
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_98:
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1944         PKTLEN = PACKET_LENGTH_GW;  
        MOV     A,#0x22
        MOV     DPTR,#-0x20fe
        MOVX    @DPTR,A
// 1945         DMAARM = DMAARM_CHANNEL0;             // Arm DMA channel 0
        MOV     0xd6,#0x1
// 1946 //        P1_1 = 0;        
// 1947         RFST = STROBE_RX;                     // Switch radio to RX
        MOV     0xe1,#0x2
// 1948     //INT_GLOBAL_ENABLE( INT_ON );
// 1949 }
??receive_1:
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock792
        REQUIRE DMAARM
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond793 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_191
        CFI Block cfiCond794 Using cfiCommon0
        CFI (cfiCond794) NoFunction
        CFI (cfiCond794) Conditional ??CrossCallReturnLabel_192
        CFI Block cfiPicker795 Using cfiCommon1
        CFI (cfiPicker795) NoFunction
        CFI (cfiPicker795) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        CFI Block cfiCond796 Using cfiCommon0
        CFI (cfiCond796) NoFunction
        CFI (cfiCond796) Conditional ??CrossCallReturnLabel_193
        CFI Block cfiCond797 Using cfiCommon0
        CFI (cfiCond797) NoFunction
        CFI (cfiCond797) Conditional ??CrossCallReturnLabel_194
        CFI Block cfiCond798 Using cfiCommon0
        CFI (cfiCond798) NoFunction
        CFI (cfiCond798) Conditional ??CrossCallReturnLabel_195
        CFI Block cfiCond799 Using cfiCommon0
        CFI (cfiCond799) NoFunction
        CFI (cfiCond799) Conditional ??CrossCallReturnLabel_196
        CFI (cfiCond799) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond799) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond799) CFA_SP SP+-4
        CFI Block cfiCond800 Using cfiCommon0
        CFI (cfiCond800) NoFunction
        CFI (cfiCond800) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond800) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond800) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond800) CFA_SP SP+-4
??Subroutine70_0:
        MOVX    @DPTR,A
        MOV     DPTR,#si
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond793
        CFI EndBlock cfiCond794
        CFI EndBlock cfiPicker795
        CFI EndBlock cfiCond796
        CFI EndBlock cfiCond797
        CFI EndBlock cfiCond798
        CFI EndBlock cfiCond799
        CFI EndBlock cfiCond800

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond801 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond802 Using cfiCommon0
        CFI (cfiCond802) NoFunction
        CFI (cfiCond802) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond802) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond802) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond802) CFA_SP SP+-4
        CFI Block cfiPicker803 Using cfiCommon1
        CFI (cfiPicker803) NoFunction
        CFI (cfiPicker803) Picker
        LCALL   ?Subroutine89
??CrossCallReturnLabel_233:
        XRL     A,#0x10
        RET
        CFI EndBlock cfiCond801
        CFI EndBlock cfiCond802
        CFI EndBlock cfiPicker803

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond804 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_363
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond805 Using cfiCommon0
        CFI (cfiCond805) NoFunction
        CFI (cfiCond805) Conditional ??CrossCallReturnLabel_364
        CFI (cfiCond805) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond805) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond805) CFA_SP SP+-4
        CFI Block cfiCond806 Using cfiCommon0
        CFI (cfiCond806) NoFunction
        CFI (cfiCond806) Conditional ??CrossCallReturnLabel_365
        CFI (cfiCond806) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond806) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond806) CFA_SP SP+-4
        CFI Block cfiCond807 Using cfiCommon0
        CFI (cfiCond807) NoFunction
        CFI (cfiCond807) Conditional ??CrossCallReturnLabel_366
        CFI (cfiCond807) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond807) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond807) CFA_SP SP+-4
        CFI Block cfiPicker808 Using cfiCommon1
        CFI (cfiPicker808) NoFunction
        CFI (cfiPicker808) Picker
        LCALL   ?Subroutine92
??CrossCallReturnLabel_249:
        MOV     A,#0x1
        LJMP    ?Subroutine120
        CFI EndBlock cfiCond804
        CFI EndBlock cfiCond805
        CFI EndBlock cfiCond806
        CFI EndBlock cfiCond807
        CFI EndBlock cfiPicker808
// 1950 /******************************************************************************
// 1951 * @fn  computeADCs
// 1952 * @brief       This function makes all the regular computations
// 1953 * Parameters:  
// 1954 * @return void
// 1955 ******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1956 float vref, t;
vref:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
t:
        DS 4
        REQUIRE __INIT_XDATA_Z
// 1957 //static float p1, c1, corrP, corrC;

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1958 float computeAdjustment( float *k ){ return 1.0 + t*(*k); } 
computeAdjustment:
        CFI Block cfiBlock809 Using cfiCommon0
        CFI Function computeAdjustment
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     DPTR,#t
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_3f800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        LJMP    ?Subroutine127
        CFI EndBlock cfiBlock809

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1959 float multSaver( INT32 *p32, float *fptr ){ return ((float) *p32) * invRef * (*fptr); }
multSaver:
        CFI Block cfiBlock810 Using cfiCommon0
        CFI Function multSaver
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        LJMP    ?Subroutine127
        CFI EndBlock cfiBlock810
// 1960 
// 1961 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1962 void computeADCs(BOOL timeout, BOOL accumulateEnergy){
computeADCs:
        CFI Block cfiBlock811 Using cfiCommon0
        CFI Function computeADCs
        FUNCALL computeADCs, substractGround
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, lin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, lin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, cube_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, computeAdjustment
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, computeAdjustment
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, checkVin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x1f
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        ; Saved register size: 31
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
// 1963 BYTE i, counter;
// 1964 // static is a way to reduce stack usage 
// 1965 INT32  *accptr;
// 1966 UINT16  *adcptr;
// 1967 static INT32  acc, df;//, thirtyThree_mV; 
// 1968 static float mV, rOff;
// 1969 #ifndef MidString
// 1970 static float tin;
// 1971 #endif
// 1972 static float temp[N_CHANNELS];
// 1973 float *coeff;
// 1974 signed char off = FSCTRL0;
        MOV     DPTR,#-0x20f8
        MOVX    A,@DPTR
// 1975 
// 1976     lastOff  = (INT32)off; 
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     DPTR,#lastOff
        LCALL   ??Subroutine68_0
// 1977     accptr = adcs;
??CrossCallReturnLabel_180:
        MOV     R2,#(adcs & 0xff)
        MOV     R3,#((adcs >> 8) & 0xff)
// 1978     adcptr = adcBuf[0]; // using the fact that one buffer is defined right after another
        MOV     ?V0 + 0,#(adcBuf & 0xff)
        MOV     ?V0 + 1,#((adcBuf >> 8) & 0xff)
// 1979                         // in general it is a VERY DANGEROUS ASSUMPTION, but with this C compiler it works
// 1980     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??computeADCs_0
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x2
        LCALL   ?Subroutine62
??CrossCallReturnLabel_147:
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??computeADCs_1
??computeADCs_0:
        LCALL   ?Subroutine17
??CrossCallReturnLabel_32:
        LJMP    ??computeADCs_2
// 1981     if( accumulateEnergy ){
??computeADCs_1:
        MOV     A,?V0 + 3
        JZ      ??computeADCs_3
// 1982         adcptr += (bufferCount - 1) & ( BUFFER_SIZE-1 );
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        MOV     R0,A
        DEC     R0
        MOV     A,#0x7
        ANL     A,R0
        CLR     C
        RLC     A
        ADD     A,#(adcBuf & 0xff)
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#((adcBuf >> 8) & 0xff)
        MOV     ?V0 + 1,A
// 1983         for( i = 0; i < N_CHANNELS; i++, adcptr+=BUFFER_SIZE )
        MOV     R1,#0x9
// 1984             *accptr++ = *adcptr; 
??computeADCs_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine120
??CrossCallReturnLabel_361:
        INC     DPTR
        MOVX    @DPTR,A
        LCALL   ?Subroutine87
??CrossCallReturnLabel_229:
        MOV     A,?V0 + 0
        ADD     A,#0x10
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        DEC     R1
        MOV     A,R1
        JNZ     ??computeADCs_4
// 1985         adcs[ 3 ] += gnd_shift/8;
        MOV     DPTR,#gnd_shift
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_165:
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 8,R0
        MOV     A,R1
        LJMP    ??computeADCs_5
// 1986     }else{
// 1987         for( i = 0; i < N_CHANNELS; i++ ){ // 128 averaging
??computeADCs_3:
        MOV     ?V0 + 8,#0x0
// 1988             counter = BUFFER_SIZE;
??computeADCs_6:
        MOV     R4,#0x8
// 1989             acc = 0; while( counter-- )  acc += *adcptr++;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPTR,#??acc
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
        SJMP    ??computeADCs_7
??computeADCs_8:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,#0x0
        MOV     ?V0 + 15,#0x0
        MOV     DPTR,#??acc
        MOV     R0,#?V0 + 12
        LCALL   ?L_ADD_TO_X
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??computeADCs_7:
        MOV     A,R4
        DEC     R4
        JNZ     ??computeADCs_8
// 1990             if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 6
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 1991            *accptr++ = acc;
        MOV     DPTR,#??acc
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
        LCALL   ?Subroutine87
// 1992         }
??CrossCallReturnLabel_230:
        INC     ?V0 + 8
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,#0x9
        JC      ??computeADCs_6
// 1993         adcs[ 3 ] += gnd_shift;
        MOV     DPTR,#gnd_shift
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 8,?V0 + 0
??computeADCs_5:
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     DPTR,#(adcs + 12)
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_TO_X
// 1994     }
// 1995     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 1996     /*
// 1997     if( page.thirty_three_mv ){
// 1998         thirtyThree_mV = (INT32) ( 33 * ( adcs[ REF ] - adcs[ EXT_GND ] ) / ( page.vrefPolynom[0] - 33 ) );
// 1999         adcs[ EXT_GND ] -= thirtyThree_mV;
// 2000     }
// 2001     */
// 2002     substractGround( adcs, 0, N_CHANNELS );
        ; Setup parameters for call to function substractGround
        MOV     R4,#0x9
        MOV     R1,#0x0
        MOV     R2,#(adcs & 0xff)
        MOV     R3,#((adcs >> 8) & 0xff)
        LCALL   substractGround
// 2003     //if( page.thirty_three_mv ) adcs[ EXT_GND ] += thirtyThree_mV;
// 2004     
// 2005     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        LCALL   ?Subroutine20
??CrossCallReturnLabel_37:
        JNZ     ??computeADCs_9
        LCALL   ?Subroutine21
??CrossCallReturnLabel_39:
        JZ      ??computeADCs_10
??computeADCs_9:
        LJMP    ??computeADCs_0
// 2006     if( adcs[ REF ] == 0 ) return; 
??computeADCs_10:
        MOV     DPTR,#(adcs + 16)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_EQ_X
        JNZ     $+5
        LJMP    ??computeADCs_2
// 2007     invRef = 1.0 / (float)adcs[ REF ];
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#-0x80
        MOV     ?V0 + 11,#0x3f
        MOV     R0,#?V0 + 4
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 2008     // compute correct temperature, correct vref, coeffcient to convert sum of counts to physical values
// 2009     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??computeADCs_9
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JNZ     ??computeADCs_9
// 2010     _coeff = page.linearK[4];    t   = lin(  TEXT );
        MOV     DPTR,#_coeff
        MOV     A,#((page + 72) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 72) >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function lin
        MOV     R1,#0x6
        LCALL   ?Subroutine88
??CrossCallReturnLabel_231:
        MOV     ?V0 + 7,R5
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2011 #ifndef MidString
// 2012     _coeff = page.linearK[5];    tin = -lin( TINT );
        MOV     DPTR,#_coeff
        MOV     A,#((page + 80) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 80) >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function lin
        MOV     R1,#0x7
        LCALL   ?Subroutine88
??CrossCallReturnLabel_232:
        MOV     A,R5
        CPL     0xE0 /* A   */.7
        MOV     ?V0 + 7,A
        MOV     DPTR,#??tin
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2013 #endif
// 2014     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2015     adcs16[ 4 ]  = (INT16)mult(t,   100);
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPTR,#(adcs16 + 8)
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
// 2016 #ifndef MidString
// 2017     adcs16[ 5 ] = ((INT16)mult(tin, 100));
        MOV     DPTR,#??tin
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPTR,#(adcs16 + 10)
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
// 2018 #endif
// 2019     
// 2020     _coeff = page.dFk;
        MOV     DPTR,#_coeff
        MOV     A,#((page + 12) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 12) >> 8) & 0xff)
        LCALL   ?Subroutine103
// 2021     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??CrossCallReturnLabel_272:
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2022     /*
// 2023     if( abs( t - tin ) > 20.0 ){
// 2024              rOff = cube_coeff( 0.5*( tin+t ) );
// 2025     }else    rOff = cube_coeff( t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
// 2026     */
// 2027     //if( abs( adcs16[ 4 ] - adcs16[ 5 ] ) > 2000 ) t = 0.5*( tin+t );
// 2028     rOff = cube_coeff( &t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
        ; Setup parameters for call to function cube_coeff
        MOV     R2,#(t & 0xff)
        MOV     R3,#((t >> 8) & 0xff)
        LCALL   cube_coeff
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#??rOff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2029     
// 2030     df = (INT32) rOff;
        MOV     DPTR,#??rOff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPTR,#??df
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2031     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2032     theRealOffset = (INT8)( (delta + (lastOff<<2) - ( df )) >> 2 );
        MOV     DPTR,#delta
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#lastOff
        LCALL   ?Subroutine28
??CrossCallReturnLabel_54:
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 5
        MOV     R3,A
        MOV     DPTR,#??df
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     A,R3
        SUBB    A,?V0 + 5
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,?V0 + 0
        MOV     DPTR,#theRealOffset
        MOVX    @DPTR,A
// 2033 
// 2034     // adjust frequency by temperature
// 2035     if( timeout && ( si->radioMode == RADIO_MODE_UNDEF ) ) addDF( df /*+ page.theDelta*/ - delta ); 
        MOV     A,?V0 + 2
        JZ      ??computeADCs_11
        LCALL   ?Subroutine36
??CrossCallReturnLabel_69:
        XRL     A,#0xf0
        JNZ     ??computeADCs_11
        ; Setup parameters for call to function addDF
        MOV     DPTR,#??df
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#delta
        MOV     R0,#?V0 + 4
        LCALL   ?L_SUB_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   addDF
// 2036     //RFST = STROBE_CAL; 
// 2037 
// 2038     coeff = page.vrefPolynom;
// 2039     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??computeADCs_11:
        LCALL   ?Subroutine20
??CrossCallReturnLabel_38:
        JNZ     ??computeADCs_12
        LCALL   ?Subroutine21
??CrossCallReturnLabel_40:
        JZ      ??computeADCs_13
??computeADCs_12:
        LJMP    ??computeADCs_0
// 2040     vref  = coeff[0] * ( 1.0 - coeff[1]*sqr( t - coeff[2] ) );
??computeADCs_13:
        MOV     DPTR,#t
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#(page + 36)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     ?V0 + 16,#0x0
        MOV     ?V0 + 17,#0x0
        MOV     ?V0 + 18,#-0x80
        MOV     ?V0 + 19,#0x3f
        MOV     DPTR,#(page + 32)
        MOV     R0,#?V0 + 20
        LCALL   ?L_MOV_X
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
        MOV     ?V0 + 6,?V0 + 10
        MOV     ?V0 + 7,?V0 + 11
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 20
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 16
        MOV     R1,#?V0 + 20
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 16
        LCALL   ?FLT_MUL
        MOV     DPTR,#vref
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2041     t -= 25.0;
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_c1c80000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_ADD
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2042     invRef  *= vref; // / ((float)adcs[ REF ]);  
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#vref
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2043     // scale everything to physical units
// 2044     // Vout  0      Pin   1     Iout  2      Gnd ext 3        Ref 4      Vin  5       Text  6     Tin 7
// 2045     for( i = 0; i<N_CHANNELS; i++) 
        MOV     ?V0 + 8,#0x0
// 2046         /*if( indices[ i ] != 0xFF )*/ {
// 2047             mV = invRef * ((float)adcs[i]); //temp[i]; // adcs values (all but REF) should be scaled to fit into UINT16 - k should be accordingly set
??computeADCs_14:
        MOV     DPL,?V0 + 8
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 10
        LCALL   ?S_SHL
        MOV     ?V0 + 4,?V0 + 10
        MOV     ?V0 + 5,?V0 + 11
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 4
        ADD     A,#(adcs & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,#((adcs >> 8) & 0xff)
        MOV     DPH,A
        MOV     R0,#?V0 + 16
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 16
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 16
        LCALL   ?FLT_MUL
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2048             if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2049 #ifdef MidString
// 2050             if( (i == 8) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
// 2051             if( (i == 7) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
// 2052 #else
// 2053             if( i == 1 )  mV *= computeAdjustment( &page.tkPower );   // t - 25
        MOV     A,#0x1
        XRL     A,?V0 + 8
        JNZ     ??computeADCs_15
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        ; Setup parameters for call to function computeAdjustment
        MOV     R2,#((page + 181) & 0xff)
        MOV     R3,#(((page + 181) >> 8) & 0xff)
        SJMP    ??computeADCs_16
// 2054 #endif
// 2055             if( i == 2 )  mV *= computeAdjustment( &page.tkCurrent ); // t - 25
??computeADCs_15:
        MOV     A,#0x2
        XRL     A,?V0 + 8
        JNZ     ??computeADCs_17
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        ; Setup parameters for call to function computeAdjustment
        MOV     R2,#((page + 177) & 0xff)
        MOV     R3,#(((page + 177) >> 8) & 0xff)
??computeADCs_16:
        LCALL   computeAdjustment
        MOV     ?V0 + 16,R2
        MOV     ?V0 + 17,R3
        MOV     ?V0 + 18,R4
        MOV     ?V0 + 19,R5
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 16
        LCALL   ?FLT_MUL
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2056             if( indices[ i ] == 0xFF ){ temp[i] = mV; continue; }
??computeADCs_17:
        MOV     A,?V0 + 4
        ADD     A,#(??temp & 0xff)
        MOV     R0,A
        MOV     A,?V0 + 5
        ADDC    A,#((??temp >> 8) & 0xff)
        MOV     R1,A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        MOV     A,?V0 + 6
        ADD     A,#(indices & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((indices >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,#-0x1
        XRL     A,?V0 + 6
        JNZ     ??computeADCs_18
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,?V0 + 4
        MOV     DPH,R1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
        SJMP    ??computeADCs_19
// 2057             _coeff = page.linearK[  indices[i] ];
??computeADCs_18:
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,#((page + 40) & 0xff)
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#(((page + 40) >> 8) & 0xff)
        MOV     R1,A
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine68_0
// 2058             temp[i] = lin_coeff( mV );
??CrossCallReturnLabel_181:
        ; Setup parameters for call to function lin_coeff
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        LCALL   lin_coeff
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     ?V0 + 14,R4
        MOV     ?V0 + 15,R5
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2059             if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2060         }
??computeADCs_19:
        INC     ?V0 + 8
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,#0x9
        JNC     $+5
        LJMP    ??computeADCs_14
// 2061 
// 2062     //temp[ 1 ] *= vref * invVref0;               // power correction
// 2063     // crosstalk   Istr
// 2064 
// 2065     //temp[ 0 ] -= mult( temp[2]*0.0001,  page.shunt );                  // Vout
// 2066     //                  Power           Vin
// 2067     //temp[ 5 ] += mult( temp[1]/temp[5], page.shunt );      // Vin
// 2068     
// 2069     #ifdef MidString    
// 2070         adcs16[ 0 ] = convU( temp[ 0 ] ); // temp[ 0 ] ); 
// 2071         adcs16[ 1 ] = convU( temp[ 1 ] ); // temp[ 1 ] ); 
// 2072         if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
// 2073         adcs16[ 3 ] = convU( temp[ 5 ] ); // temp[ 5 ] );
// 2074         adcs16[ 5 ] = convS( temp[ 8 ] ); // Iin2 
// 2075         //adcs16[ 7 ] = (INT16)(adcs[7]+adcs[3]);  //temp.debug stuff
// 2076         adcs16[ 6 ] = convS( temp[ 7 ] );
// 2077     #else
// 2078         adcs16[ 0 ] = convU( temp[ 0 ] - mult( temp[2]*0.0001,  page.shunt ) ); //temp[ 0 ] ); 
        ; Setup parameters for call to function convU
        MOV     DPTR,#??temp
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#(??temp + 8)
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_38d1b717
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        LCALL   ?Subroutine38
??CrossCallReturnLabel_72:
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_SUB
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   convU
        MOV     DPTR,#adcs16
        LCALL   ??Subroutine112_0
// 2079         adcs16[ 1 ] = convU( temp[ 1 ] *= vref * invVref0 );   //temp[ 1 ] ); 
??CrossCallReturnLabel_293:
        MOV     DPTR,#(??temp + 4)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#vref
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#invVref0
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     DPTR,#(??temp + 4)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function convU
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convU
        MOV     DPTR,#(adcs16 + 2)
        LCALL   ??Subroutine112_0
// 2080         adcs16[ 3 ] = convU( temp[ 5 ] + mult( temp[1]/temp[5], page.shunt ) );// temp[ 5 ] );
??CrossCallReturnLabel_294:
        MOV     DPTR,#(??temp + 20)
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        ; Setup parameters for call to function convU
        MOV     DPTR,#(??temp + 4)
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        LCALL   ?Subroutine38
??CrossCallReturnLabel_73:
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_ADD
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   convU
        MOV     DPTR,#(adcs16 + 6)
        LCALL   ??Subroutine112_0
// 2081     #endif    
// 2082     adcs16[ 2 ] = convS( temp[ 2 ] );
??CrossCallReturnLabel_295:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(??temp + 8)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convS
        MOV     DPTR,#(adcs16 + 4)
        LCALL   ??Subroutine112_0
// 2083     
// 2084     //adcs16[ 6 ] = (UINT16)adcs[ EXT_GND ];
// 2085     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??CrossCallReturnLabel_296:
        LCALL   ?Subroutine10
??CrossCallReturnLabel_14:
        JNZ     ??computeADCs_20
        LCALL   ?Subroutine12
??CrossCallReturnLabel_22:
        JZ      ??computeADCs_21
??computeADCs_20:
        LJMP    ??computeADCs_0
// 2086     
// 2087     if( accumulateEnergy ){    
??computeADCs_21:
        MOV     A,?V0 + 3
        JZ      ??computeADCs_2
// 2088         //static BYTE _history = 0;
// 2089         checkVin();
        ; Setup parameters for call to function checkVin
        LCALL   checkVin
??computeADCs_2:
        MOV     R7,#0x18
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock811
// 2090         /*_history <<= 1; 
// 2091         if( ((INT16)adcs16[ 2 ]) > 15000 ){ //page.cur_noise ){ 
// 2092             deltaEnergy += (double) ( temp[2] * temp[0] * KE ); // W*h
// 2093             _history |= 1;
// 2094         }else{
// 2095             if( _history == 0xFE ){
// 2096                 //BYTE *ptr = nextSlot();
// 2097                 energy += deltaEnergy; 
// 2098                 zerofill( (BYTE *)&deltaEnergy, 4 ); 
// 2099                 //if(      ptr > ENERGY_WRITE_LIMIT ) savePB();
// 2100                 //else if( ptr ) initiateTransfer( (BYTE *)&energy, ptr, 4 );
// 2101             }
// 2102         }*/
// 2103     }
// 2104 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine88:
        CFI Block cfiCond812 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_231
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond813 Using cfiCommon0
        CFI (cfiCond813) NoFunction
        CFI (cfiCond813) Conditional ??CrossCallReturnLabel_232
        CFI (cfiCond813) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond813) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond813) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond813) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond813) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond813) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond813) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond813) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond813) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond813) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond813) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond813) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond813) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond813) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond813) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond813) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond813) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond813) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond813) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond813) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond813) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond813) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond813) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond813) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond813) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond813) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond813) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond813) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond813) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond813) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond813) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond813) CFA_SP SP+0
        CFI (cfiCond813) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker814 Using cfiCommon1
        CFI (cfiPicker814) NoFunction
        CFI (cfiPicker814) Picker
        LCALL   lin
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        RET
        CFI EndBlock cfiCond812
        CFI EndBlock cfiCond813
        CFI EndBlock cfiPicker814

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine87:
        CFI Block cfiCond815 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_228
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond816 Using cfiCommon0
        CFI (cfiCond816) NoFunction
        CFI (cfiCond816) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond816) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond816) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond816) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond816) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond816) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond816) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond816) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond816) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond816) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond816) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond816) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond816) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond816) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond816) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond816) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond816) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond816) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond816) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond816) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond816) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond816) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond816) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond816) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond816) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond816) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond816) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond816) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond816) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond816) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond816) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond816) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond816) CFA_SP SP+0
        CFI (cfiCond816) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond817 Using cfiCommon0
        CFI (cfiCond817) NoFunction
        CFI (cfiCond817) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond817) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond817) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond817) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond817) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond817) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond817) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond817) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond817) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond817) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond817) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond817) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond817) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond817) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond817) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond817) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond817) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond817) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond817) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond817) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond817) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond817) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond817) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond817) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond817) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond817) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond817) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond817) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond817) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond817) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond817) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond817) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond817) CFA_SP SP+0
        CFI (cfiCond817) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker818 Using cfiCommon1
        CFI (cfiPicker818) NoFunction
        CFI (cfiPicker818) Picker
        MOV     A,R2
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond815
        CFI EndBlock cfiCond816
        CFI EndBlock cfiCond817
        CFI EndBlock cfiPicker818

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond819 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_182
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond820 Using cfiCommon0
        CFI (cfiCond820) NoFunction
        CFI (cfiCond820) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond820) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond820) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond820) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond820) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond820) V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond820) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond820) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond820) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond820) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond820) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond820) CFA_SP SP+0
        CFI (cfiCond820) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker821 Using cfiCommon1
        CFI (cfiPicker821) NoFunction
        CFI (cfiPicker821) Picker
        MOV     R1,A
        MOV     DPTR,#base_ptr
        CFI Block cfiCond822 Using cfiCommon0
        CFI (cfiCond822) NoFunction
        CFI (cfiCond822) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond822) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond822) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond822) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond822) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond822) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond822) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond822) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond822) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond822) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond822) CFA_SP SP+0
        CFI (cfiCond822) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond823 Using cfiCommon0
        CFI (cfiCond823) NoFunction
        CFI (cfiCond823) Conditional ??CrossCallReturnLabel_172
        CFI (cfiCond823) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond823) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond823) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond823) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond823) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond823) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond823) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond823) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond823) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond823) CFA_SP SP+0
        CFI (cfiCond823) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond824 Using cfiCommon0
        CFI (cfiCond824) NoFunction
        CFI (cfiCond824) Conditional ??CrossCallReturnLabel_173
        CFI Block cfiCond825 Using cfiCommon0
        CFI (cfiCond825) NoFunction
        CFI (cfiCond825) Conditional ??CrossCallReturnLabel_174
        CFI Block cfiCond826 Using cfiCommon0
        CFI (cfiCond826) NoFunction
        CFI (cfiCond826) Conditional ??CrossCallReturnLabel_175
        CFI Block cfiCond827 Using cfiCommon0
        CFI (cfiCond827) NoFunction
        CFI (cfiCond827) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond827) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond827) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond827) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond827) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond827) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond827) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond827) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond827) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond827) CFA_SP SP+0
        CFI (cfiCond827) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond828 Using cfiCommon0
        CFI (cfiCond828) NoFunction
        CFI (cfiCond828) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond828) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond828) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond828) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond828) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond828) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond828) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond828) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond828) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond828) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond828) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond828) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond828) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond828) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond828) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond828) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond828) CFA_SP SP+0
        CFI (cfiCond828) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond829 Using cfiCommon0
        CFI (cfiCond829) NoFunction
        CFI (cfiCond829) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond829) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond829) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond829) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond829) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond829) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond829) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond829) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond829) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond829) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond829) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond829) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond829) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond829) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond829) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond829) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond829) CFA_SP SP+0
        CFI (cfiCond829) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond830 Using cfiCommon0
        CFI (cfiCond830) NoFunction
        CFI (cfiCond830) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond830) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond830) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond830) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond830) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond830) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond830) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond830) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond830) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond830) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond830) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond830) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond830) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond830) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond830) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond830) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond830) CFA_SP SP+0
        CFI (cfiCond830) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond831 Using cfiCommon0
        CFI (cfiCond831) NoFunction
        CFI (cfiCond831) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond831) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond831) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond831) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond831) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond831) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond831) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond831) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond831) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond831) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond831) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond831) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond831) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond831) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond831) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond831) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond831) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond831) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond831) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond831) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond831) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond831) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond831) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond831) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond831) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond831) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond831) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond831) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond831) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond831) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond831) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond831) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond831) CFA_SP SP+0
        CFI (cfiCond831) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond832 Using cfiCommon0
        CFI (cfiCond832) NoFunction
        CFI (cfiCond832) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond832) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond832) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond832) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond832) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond832) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond832) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond832) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond832) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond832) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond832) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond832) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond832) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond832) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond832) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond832) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond832) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond832) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond832) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond832) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond832) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond832) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond832) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond832) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond832) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond832) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond832) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond832) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond832) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond832) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond832) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond832) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond832) CFA_SP SP+0
        CFI (cfiCond832) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond833 Using cfiCommon0
        CFI (cfiCond833) NoFunction
        CFI (cfiCond833) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond833) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond833) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond833) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond833) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond833) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond833) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond833) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond833) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond833) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond833) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond833) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond833) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond833) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond833) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond833) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond833) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond833) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond833) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond833) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond833) CFA_SP SP+0
        CFI (cfiCond833) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond834 Using cfiCommon0
        CFI (cfiCond834) NoFunction
        CFI (cfiCond834) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond834) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond834) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond834) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond834) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond834) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond834) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond834) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond834) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond834) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond834) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond834) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond834) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond834) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond834) CFA_SP SP+0
        CFI (cfiCond834) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond835 Using cfiCommon0
        CFI (cfiCond835) NoFunction
        CFI (cfiCond835) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond835) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond835) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond835) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond835) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond835) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond835) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond835) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond835) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond835) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond835) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond835) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond835) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond835) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond835) CFA_SP SP+0
        CFI (cfiCond835) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond836 Using cfiCommon0
        CFI (cfiCond836) NoFunction
        CFI (cfiCond836) Conditional ??CrossCallReturnLabel_187
        CFI (cfiCond836) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond836) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond836) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond836) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond836) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond836) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond836) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond836) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond836) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond836) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond836) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond836) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond836) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond836) CFA_SP SP+0
        CFI (cfiCond836) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond837 Using cfiCommon0
        CFI (cfiCond837) NoFunction
        CFI (cfiCond837) Conditional ??CrossCallReturnLabel_188
        CFI (cfiCond837) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond837) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond837) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond837) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond837) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond837) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond837) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond837) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond837) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond837) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond837) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond837) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond837) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond837) CFA_SP SP+0
        CFI (cfiCond837) CFA_XSP16 add(XSP16, 13)
??Subroutine68_0:
        LCALL   ?Subroutine115
??CrossCallReturnLabel_323:
        RET
        CFI EndBlock cfiCond819
        CFI EndBlock cfiCond820
        CFI EndBlock cfiPicker821
        CFI EndBlock cfiCond822
        CFI EndBlock cfiCond823
        CFI EndBlock cfiCond824
        CFI EndBlock cfiCond825
        CFI EndBlock cfiCond826
        CFI EndBlock cfiCond827
        CFI EndBlock cfiCond828
        CFI EndBlock cfiCond829
        CFI EndBlock cfiCond830
        CFI EndBlock cfiCond831
        CFI EndBlock cfiCond832
        CFI EndBlock cfiCond833
        CFI EndBlock cfiCond834
        CFI EndBlock cfiCond835
        CFI EndBlock cfiCond836
        CFI EndBlock cfiCond837

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond838 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond839 Using cfiCommon0
        CFI (cfiCond839) NoFunction
        CFI (cfiCond839) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond839) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond839) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond839) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond839) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond839) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond839) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond839) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond839) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond839) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond839) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond839) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond839) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond839) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond839) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond839) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond839) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond839) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond839) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond839) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond839) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond839) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond839) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond839) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond839) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond839) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond839) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond839) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond839) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond839) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond839) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond839) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond839) CFA_SP SP+0
        CFI (cfiCond839) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker840 Using cfiCommon1
        CFI (cfiPicker840) NoFunction
        CFI (cfiPicker840) Picker
        MOV     DPTR,#(page + 235)
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond838
        CFI EndBlock cfiCond839
        CFI EndBlock cfiPicker840

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond841 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond842 Using cfiCommon0
        CFI (cfiCond842) NoFunction
        CFI (cfiCond842) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond842) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond842) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond842) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond842) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond842) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond842) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond842) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond842) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond842) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond842) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond842) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond842) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond842) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond842) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond842) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond842) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond842) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond842) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond842) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond842) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond842) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond842) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond842) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond842) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond842) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond842) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond842) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond842) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond842) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond842) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond842) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond842) CFA_SP SP+0
        CFI (cfiCond842) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker843 Using cfiCommon1
        CFI (cfiPicker843) NoFunction
        CFI (cfiPicker843) Picker
        LCALL   ?Subroutine89
??CrossCallReturnLabel_234:
        RET
        CFI EndBlock cfiCond841
        CFI EndBlock cfiCond842
        CFI EndBlock cfiPicker843

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine89:
        CFI Block cfiCond844 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond845 Using cfiCommon0
        CFI (cfiCond845) NoFunction
        CFI (cfiCond845) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_50
        CFI (cfiCond845) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond845) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond845) CFA_SP SP+-4
        CFI Block cfiCond846 Using cfiCommon0
        CFI (cfiCond846) NoFunction
        CFI (cfiCond846) Conditional ??CrossCallReturnLabel_234, ??CrossCallReturnLabel_68
        CFI (cfiCond846) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond846) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond846) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond846) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond846) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond846) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond846) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond846) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond846) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond846) CFA_SP SP+0
        CFI (cfiCond846) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond847 Using cfiCommon0
        CFI (cfiCond847) NoFunction
        CFI (cfiCond847) Conditional ??CrossCallReturnLabel_234, ??CrossCallReturnLabel_69
        CFI (cfiCond847) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond847) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond847) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond847) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond847) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond847) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond847) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond847) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond847) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond847) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond847) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond847) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond847) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond847) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond847) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond847) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond847) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond847) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond847) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond847) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond847) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond847) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond847) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond847) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond847) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond847) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond847) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond847) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond847) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond847) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond847) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond847) CFA_SP SP+0
        CFI (cfiCond847) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker848 Using cfiCommon1
        CFI (cfiPicker848) NoFunction
        CFI (cfiPicker848) Picker
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        CFI Block cfiCond849 Using cfiCommon0
        CFI (cfiCond849) NoFunction
        CFI (cfiCond849) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_80
        CFI (cfiCond849) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond849) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond849) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond849) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond849) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond849) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond849) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond849) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond849) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond849) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond849) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond849) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond849) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond849) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond849) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond849) CFA_SP SP+0
        CFI (cfiCond849) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond850 Using cfiCommon0
        CFI (cfiCond850) NoFunction
        CFI (cfiCond850) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_81
        CFI (cfiCond850) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond850) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond850) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond850) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond850) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond850) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond850) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond850) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond850) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond850) CFA_SP SP+0
        CFI (cfiCond850) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond851 Using cfiCommon0
        CFI (cfiCond851) NoFunction
        CFI (cfiCond851) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_82
        CFI (cfiCond851) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond851) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond851) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond851) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond851) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond851) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond851) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond851) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond851) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond851) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond851) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond851) CFA_SP SP+0
        CFI (cfiCond851) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond852 Using cfiCommon0
        CFI (cfiCond852) NoFunction
        CFI (cfiCond852) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_343
        CFI Block cfiCond853 Using cfiCommon0
        CFI (cfiCond853) NoFunction
        CFI (cfiCond853) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_344
        CFI Block cfiCond854 Using cfiCommon0
        CFI (cfiCond854) NoFunction
        CFI (cfiCond854) Conditional ??CrossCallReturnLabel_235, ??CrossCallReturnLabel_70
        CFI (cfiCond854) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond854) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond854) CFA_SP SP+-4
        CFI Block cfiCond855 Using cfiCommon0
        CFI (cfiCond855) NoFunction
        CFI (cfiCond855) Conditional ??CrossCallReturnLabel_235, ??CrossCallReturnLabel_71
        CFI (cfiCond855) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond855) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond855) CFA_SP SP+-4
??Subroutine89_0:
        LCALL   ?Subroutine109
??CrossCallReturnLabel_282:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond844
        CFI EndBlock cfiCond845
        CFI EndBlock cfiCond846
        CFI EndBlock cfiCond847
        CFI EndBlock cfiPicker848
        CFI EndBlock cfiCond849
        CFI EndBlock cfiCond850
        CFI EndBlock cfiCond851
        CFI EndBlock cfiCond852
        CFI EndBlock cfiCond853
        CFI EndBlock cfiCond854
        CFI EndBlock cfiCond855

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond856 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond857 Using cfiCommon0
        CFI (cfiCond857) NoFunction
        CFI (cfiCond857) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond857) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond857) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond857) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond857) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond857) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond857) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond857) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond857) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond857) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond857) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond857) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond857) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond857) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond857) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond857) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond857) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond857) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond857) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond857) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond857) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond857) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond857) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond857) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond857) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond857) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond857) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond857) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond857) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond857) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond857) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond857) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond857) CFA_SP SP+0
        CFI (cfiCond857) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker858 Using cfiCommon1
        CFI (cfiPicker858) NoFunction
        CFI (cfiPicker858) Picker
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x2
        INC     R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond856
        CFI EndBlock cfiCond857
        CFI EndBlock cfiPicker858

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond859 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond860 Using cfiCommon0
        CFI (cfiCond860) NoFunction
        CFI (cfiCond860) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond860) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond860) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond860) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond860) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond860) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond860) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond860) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond860) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond860) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond860) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond860) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond860) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond860) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond860) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond860) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond860) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond860) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond860) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond860) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond860) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond860) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond860) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond860) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond860) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond860) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond860) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond860) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond860) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond860) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond860) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond860) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond860) CFA_SP SP+0
        CFI (cfiCond860) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker861 Using cfiCommon1
        CFI (cfiPicker861) NoFunction
        CFI (cfiPicker861) Picker
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond859
        CFI EndBlock cfiCond860
        CFI EndBlock cfiPicker861

        RSEG XDATA_Z:XDATA:NOROOT(0)
??acc:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??df:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??mV:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??rOff:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??tin:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??temp:
        DS 36
        REQUIRE __INIT_XDATA_Z
// 2105 //______________________________________________________________________________________________________________________________
// 2106 //BOOL checkPage( BYTE val ){ return val && val != 0x1F && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ); }
// 2107 //______________________________________________________________________________________________________________________________
// 2108 /******************************************************************************
// 2109 * @fn  setByte
// 2110 * @brief       set the byte value to register
// 2111 * Parameters:  byte reg - register, byte val - value
// 2112 * @return      void
// 2113 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2114 void setByte( BYTE reg, BYTE val ){
setByte:
        CFI Block cfiBlock862 Using cfiCommon0
        CFI Function setByte
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, refreshTheFlash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R1,A
// 2115 BYTE *ptr; BYTE *pptr = (BYTE *)&page;
        MOV     R6,#(page & 0xff)
        MOV     R7,#((page >> 8) & 0xff)
// 2116     /*
// 2117     if(page.isRelay && !page.is500Always ) switch(reg){
// 2118         case SET_CUR_CHANNEL: case SET_CHANNEL:     case RADIO_POWER:
// 2119         case IS_RELAY:        case IS_500_ALWAYS:   case REPEATER_POWER:
// 2120             tickWait( 3+2*TICKS_IN_MS );  // give repeater chance to finish transmission
// 2121         break;
// 2122     }*/
// 2123     switch(reg){
        MOV     DPL,?V0 + 0
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#(page & 0xff)
        MOV     R4,A
        CLR     A
        ADDC    A,#((page >> 8) & 0xff)
        MOV     R5,A
        MOV     A,?V0 + 0
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setByte>_0`:
        DATA
        DB        8
        DB        6
        DB        9
        DW        ??setByte_0
        DB        16
        DB        21
        DW        ??setByte_1
        DB        46
        DB        48
        DW        ??setByte_2
        DB        61
        DB        70
        DW        ??setByte_3
        DB        73
        DB        78
        DW        ??setByte_3
        DB        79
        DB        82
        DW        ??setByte_4
        DB        85
        DB        86
        DW        ??setByte_5
        DB        87
        DB        88
        DW        ??setByte_6
        DB        39
        DB        1
        DW        ??setByte_7
        DB        4
        DW        ??setByte_8
        DB        5
        DW        ??setByte_9
        DB        11
        DW        ??setByte_10
        DB        12
        DW        ??setByte_11
        DB        13
        DW        ??setByte_12
        DB        14
        DW        ??setByte_13
        DB        22
        DW        ??setByte_14
        DB        23
        DW        ??setByte_15
        DB        26
        DW        ??setByte_16
        DB        28
        DW        ??setByte_17
        DB        29
        DW        ??setByte_18
        DB        31
        DW        ??setByte_19
        DB        32
        DW        ??setByte_20
        DB        33
        DW        ??setByte_21
        DB        35
        DW        ??setByte_22
        DB        37
        DW        ??setByte_23
        DB        40
        DW        ??setByte_24
        DB        41
        DW        ??setByte_25
        DB        42
        DW        ??setByte_26
        DB        43
        DW        ??setByte_27
        DB        44
        DW        ??setByte_28
        DB        45
        DW        ??setByte_29
        DB        49
        DW        ??setByte_30
        DB        51
        DW        ??setByte_31
        DB        53
        DW        ??setByte_32
        DB        54
        DW        ??setByte_33
        DB        56
        DW        ??setByte_34
        DB        57
        DW        ??setByte_35
        DB        58
        DW        ??setByte_36
        DB        59
        DW        ??setByte_37
        DB        92
        DW        ??setByte_38
        DB        93
        DW        ??setByte_39
        DB        94
        DW        ??setByte_40
        DB        95
        DW        ??setByte_41
        DB        96
        DW        ??setByte_42
        DB        97
        DW        ??setByte_43
        DB        100
        DW        ??setByte_44
        DB        113
        DW        ??setByte_45
        DW        ??setByte_46
        CODE
// 2124         case MPP:  // MPP
// 2125             if( val > 1 ) break;
??setByte_8:
        MOV     A,R1
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??setByte_46
// 2126             if( val )  P1_3 = 1;   else P1_3 = 0;
        MOV     A,R1
        JZ      ??setByte_47
        SETB    0x90.3
// 2127             if( val ) { 
// 2128                 atomicChange( BypassMode, 0 ); // do not need that delayed mpp off anymore
        LCALL   ?Subroutine19
??CrossCallReturnLabel_35:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2129                 if( turnOnFlag || ticks[ TurnOn ] ) { ov_startup(); turnOnFlag = FALSE;  ticks[ TurnOn ] = 0; } //P1 |= 0x10; }
        MOV     DPTR,#turnOnFlag
        MOVX    A,@DPTR
        JNZ     ??setByte_48
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine43
??CrossCallReturnLabel_82:
        JNZ     ??setByte_49
        INC     DPTR
        MOVX    A,@DPTR
??setByte_49:
        JNZ     $+5
        LJMP    ??setByte_46
??setByte_48:
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        CLR     A
        MOV     DPTR,#turnOnFlag
        LCALL   ?Subroutine77
??CrossCallReturnLabel_380:
        ADD     A,#0x14
??setByte_50:
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_99:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LJMP    ??setByte_51
// 2130             }
??setByte_47:
        CLR     0x90.3
        LJMP    ??setByte_46
// 2131         break;
// 2132         case MODULE: // Module on / off
// 2133             if( val > 1 ) 
??setByte_9:
        MOV     A,R1
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??setByte_46
// 2134               break;
// 2135             if (val == 1) // If Module on, then set FET failure check appropriately
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??setByte_52
// 2136             {
// 2137               *ModuleOffRememberedPtr = ModuleStatusCanTurnOn; // Module On command resets this
        MOV     DPTR,#ModuleStatusCanTurnOn
        MOVX    A,@DPTR
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
// 2138               fetFailure = FALSE; // Module On command resets this
        CLR     A
        MOV     DPTR,#fetFailure
        MOVX    @DPTR,A
// 2139               netValue = MainNetValueStandard;  // Set base value back for main image
        MOV     DPTR,#netValue
        MOV     A,#0x32
        LCALL   ?Subroutine120
// 2140               if (page.fetFailureCount != 0)
??CrossCallReturnLabel_362:
        MOV     DPTR,#(page + 128)
        MOVX    A,@DPTR
        JNZ     ??setByte_53
        INC     DPTR
        MOVX    A,@DPTR
??setByte_53:
        JZ      ??setByte_54
// 2141                 checkForFETFailure = TRUE; // Re-enable check
        MOV     A,#0x1
??setByte_55:
        MOV     DPTR,#checkForFETFailure
        MOVX    @DPTR,A
        SJMP    ??setByte_56
// 2142               else
// 2143                 checkForFETFailure = FALSE; // PB indicates don't check
??setByte_54:
        CLR     A
        SJMP    ??setByte_55
// 2144             }
// 2145             if( val && ((P1 & 0x18)==0) ) { P1_3 = 1; ov_startup(); /*P1 |= 0x18;*/ atomicChange( BypassMode, TICKS_IN_SEC );            } // bypass mode with delay
??setByte_52:
        MOV     A,R1
        JZ      ??setByte_57
??setByte_56:
        MOV     A,#0x18
        ANL     A,0x90
        JNZ     ??setByte_58
        SETB    0x90.3
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        LCALL   ?Subroutine19
??CrossCallReturnLabel_36:
        LCALL   ??Subroutine104_0
??CrossCallReturnLabel_376:
        LJMP    ??setByte_51
// 2146             //else                         { if( val ) P1 |= 0x10; else P1 &= ~0x10; }
// 2147             else 
// 2148             { 
// 2149               if( val ){ 
// 2150                 if( P1_4 == 0 ) 
// 2151                   ov_startup(); 
// 2152               }
// 2153               else 
// 2154               { 
// 2155                 P1_4 = 0; 
??setByte_57:
        CLR     0x90.4
// 2156                 *ModuleOffRememberedPtr = ModuleStatusOff; 
        MOV     DPTR,#ModuleStatusOff
        MOVX    A,@DPTR
        MOV     DPTR,#-0x3
        LJMP    ??setByte_51
// 2157               } 
??setByte_58:
        MOV     C,0x90.4
        JNC     $+5
        LJMP    ??setByte_46
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        LJMP    ??setByte_46
// 2158             }
// 2159         break;
// 2160         case SET_T3CH0:  
// 2161             //if( !page.fuseOVOC ){ 
// 2162                 T3CC0 = val;                                      
??setByte_14:
        MOV     0xcd,R1
        LJMP    ??setByte_46
// 2163 //                #ifdef MidString
// 2164 //                compute98();
// 2165 //                #endif
// 2166             //}
// 2167         break;
// 2168         case SET_T3CH1:  
// 2169           //if( !page.fuseOVOC ){
// 2170               T3CC1 = oc2timer( theOC = ( setOC = val ) );      
??setByte_15:
        MOV     A,R1
        MOV     DPTR,#setOC
        MOVX    @DPTR,A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        LCALL   ?Subroutine113
??CrossCallReturnLabel_312:
        LJMP    ??setByte_46
// 2171 //              #ifdef MidString
// 2172 //              compute98();
// 2173 //              #endif
// 2174           //}
// 2175         break;
// 2176 
// 2177         case MAC0: case MAC1: case MAC2: case MAC3: case MAC4: case MAC5:   page.myMac[ reg-MAC0 ] = val;         break;
??setByte_1:
        MOV     A,R4
        ADD     A,#-0xa
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x1
??setByte_59:
        MOV     DPH,A
        MOV     A,R1
        LJMP    ??setByte_51
// 2178         /*
// 2179         case SET_CUR_CHANNEL:
// 2180             if( !page.is500Always && (cyclesTo500 < 200) ){ RFST = STROBE_IDLE; curChannel = CHANNR = val;  }
// 2181         break;
// 2182         */
// 2183         case SET_CHANNEL:    
// 2184             page.channel = val;  setup_hopper( page.channel );   
??setByte_16:
        MOV     A,R1
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
        ; Setup parameters for call to function setup_hopper
        LCALL   setup_hopper
// 2185             if( !page.is500Always ){
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??setByte_11
// 2186                 //P1_1 ^= 1;
// 2187                 curChannel = CHANNR = page.channel;
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        LCALL   ?Subroutine8
// 2188                 ticks[ Hop ] = 0; 
// 2189                 cycles2Step10Channel = cyclesTo500 = 300;
??CrossCallReturnLabel_5:
        MOV     DPTR,#cyclesTo500
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#cycles2Step10Channel
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2190                 RFST = STROBE_IDLE; 
        MOV     0xe1,#0x4
// 2191                 softKick(); 
        ; Setup parameters for call to function softKick
        LCALL   softKick
// 2192             }
// 2193         case RANDOMIZE:
// 2194             RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
??setByte_11:
        LCALL   ?Subroutine31
??CrossCallReturnLabel_60:
        LJMP    ??setByte_46
// 2195             //srand( page.myMac[4]*256 + page.myMac[5] ); 
// 2196         break;
// 2197 
// 2198         case FLASH_REFRESH2:   refreshTheFlash();   break;
??setByte_10:
        ; Setup parameters for call to function refreshTheFlash
        LCALL   refreshTheFlash
        LJMP    ??setByte_46
// 2199   
// 2200         //case FUSE_Comm:  page.fuseComm = 1; savePB();   break;
// 2201         //case FUSE_OVOC:  if( !page.fuseOVOC ){ page.fuseOVOC = 1; page.ov = T3CC0; page.oc = setOC; savePB(); }  break;
// 2202 
// 2203         case FLASH_AVAILABLE: 
// 2204             page.mpp    = P1_3;
??setByte_17:
        MOV     C,0x90.3
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#(page + 185)
        MOVX    @DPTR,A
// 2205             page.module = P1_4;
        MOV     C,0x90.4
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#(page + 186)
        MOVX    @DPTR,A
// 2206             //if( !page.fuseOVOC ){ page.ov = T3CC0; page.oc = setOC; }
// 2207             page.ov = T3CC0; page.oc = setOC;
        MOV     A,0xcd
        MOV     DPTR,#(page + 187)
        MOVX    @DPTR,A
        MOV     DPTR,#setOC
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 188)
        MOVX    @DPTR,A
// 2208             // go through
// 2209         case COEFFICIENTS_AVAILABLE:  
// 2210             savePB();
??setByte_21:
        ; Setup parameters for call to function savePB
        LCALL   savePB
        LJMP    ??setByte_46
// 2211         break;
// 2212         /*
// 2213         case CW_MODE:   
// 2214             //HAL_INT_ENABLE(INUM_RF,  INT_OFF);    // Disable RF general interrupt
// 2215             real_cw_mode = TRUE;
// 2216             //ticks[ SendData ] = 1; ticks[ ReceiveData ] = 0;
// 2217         break;
// 2218         */
// 2219         //case RESTART_MEASUREMENT:   bufferCount = 0; adcCount = 0xFF; tempAdcsCount = 0; enable2SendData = FALSE;    break;
// 2220         case DISSOLVE_NETWORK:      
// 2221           RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
??setByte_19:
        LCALL   ?Subroutine31
// 2222           //srand( page.myMac[4]*256 + page.myMac[5] );
// 2223           page.netId = page.myBunch =  0xFF;  
??CrossCallReturnLabel_61:
        MOV     A,#-0x1
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 2)
        LCALL   ?Subroutine77
// 2224           //savePB();
// 2225           //maxBunch = 0;  
// 2226           ticks[ DelayedPrepareData ] = 0; ticks[ SendData ] = 0; 
??CrossCallReturnLabel_381:
        ADD     A,#0x1a
        LCALL   ??Subroutine8_1
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine33
??CrossCallReturnLabel_63:
        LJMP    ??CrossCallReturnLabel_99
// 2227         break;
// 2228 
// 2229         case CALIBRATION_FROM_FLASH:   pptr = (BYTE *)PAGEADDR; //0x400;        /* go through */
??setByte_35:
        MOV     R6,#0x0
        MOV     R7,#0x5c
// 2230         case REPORT_SCALING:   
// 2231           if( !reportScaling ){
??setByte_20:
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??setByte_46
// 2232                 if( base_ptr==NULL ){
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        JNZ     ??setByte_60
        INC     DPTR
        MOVX    A,@DPTR
??setByte_60:
        JNZ     ??setByte_61
// 2233                     base_ptr = pptr; //(BYTE *)&page;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine68
// 2234                     reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
??CrossCallReturnLabel_182:
        MOV     B,#0xa
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
??setByte_62:
        MUL     AB
        MOV     DPTR,#reportScaling
        LJMP    ??setByte_51
// 2235                 }else reportScaling    = val * calibrationRepeat;
??setByte_61:
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R1
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        SJMP    ??setByte_62
// 2236           }
// 2237         break;
// 2238         case READ_COEFFICIENTS: reportScaling = val; base_ptr = coefficients_buffer; if( reportScaling == 0 ) reportScaling = 1; break;
??setByte_45:
        MOV     A,R1
        MOV     DPTR,#reportScaling
        MOVX    @DPTR,A
        MOV     DPTR,#base_ptr
        MOV     A,#(coefficients_buffer & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((coefficients_buffer >> 8) & 0xff)
        MOVX    @DPTR,A
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??setByte_46
        MOV     A,#0x1
        LJMP    ??setByte_51
// 2239 
// 2240         //case CHECK_FLASH:            reportFlashCheck = calibrationRepeat*5 + 1; /* 5*4-1 */;    break;
// 2241         
// 2242         case RADIO_POWER: page.radioPower = val;      PA_TABLE0 = val;  break;
??setByte_22:
        MOV     A,R1
        MOV     DPTR,#(page + 189)
        MOVX    @DPTR,A
        MOV     DPTR,#-0x20d2
        LJMP    ??setByte_51
// 2243         
// 2244 //        case PRODUCTION:       page.production = val;                   break;
// 2245         case ENSURE_WD_RESET:  page.ensureWDReset = val;                break;
??setByte_23:
        MOV     DPTR,#(page + 194)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        LJMP    ??setByte_51
// 2246         //case USE_12_kBod:   
// 2247         //  page.use12kbod = val;  
// 2248           //savePB();
// 2249           //tickWait(8*TICKS_IN_MS); 
// 2250         //  softKick(); 
// 2251         //break; /* write to flash as well */
// 2252         
// 2253         //case USE_FEC:          page.useFEC = val;     if( page.useFEC ) MDMCFG1 |= 0x80; else MDMCFG1 &= 0x7F;     break;
// 2254         case ENABLE_HOPPING:   page.hoppingAllowed  = val; break;     
??setByte_24:
        MOV     DPTR,#(page + 194)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.4,C
        LJMP    ??setByte_51
// 2255         case REPEATER_CHANNEL: page.repeaterChannel = val; break;     
??setByte_27:
        MOV     A,R1
        MOV     DPTR,#(page + 192)
        LJMP    ??setByte_51
// 2256         case IS_RELAY:         page.isRelay = val;   
??setByte_25:
        MOV     DPTR,#(page + 194)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.5,C
        MOVX    @DPTR,A
// 2257                                if( !val ) setupRadio( curChannel );     
        MOV     A,R1
        JZ      $+5
        LJMP    ??setByte_46
??setByte_63:
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#curChannel
??setByte_64:
        LCALL   ??Subroutine56_0
??CrossCallReturnLabel_130:
        LJMP    ??setByte_46
// 2258         break;   
// 2259         case USE250:           page.use250kbod = val; 
??setByte_37:
        MOV     DPTR,#(page + 219)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        MOVX    @DPTR,A
// 2260                                // go through
// 2261         case IS_500_ALWAYS:    
// 2262             if( reg == IS_500_ALWAYS ) page.is500Always = val;     
??setByte_26:
        MOV     A,#0x2a
        XRL     A,?V0 + 0
        JNZ     ??setByte_65
        MOV     DPTR,#(page + 194)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.6,C
        MOVX    @DPTR,A
// 2263             if( page.is500Always ){ 
??setByte_65:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??setByte_66
// 2264                  cyclesTo10 = page.defCyclesTo10; //cyclesDefaults[1]; //page.defCyclesTo10; 
        LCALL   ?Subroutine41
// 2265                  cyclesTo500 = 0;             
??CrossCallReturnLabel_79:
        MOV     DPTR,#cyclesTo500
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine22
// 2266                  cyclesToStep500Channel =  page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
// 2267                  setupRadio( curChannel = page.starting500Channel );
??CrossCallReturnLabel_42:
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
        MOV     R1,A
        LCALL   setupRadio
// 2268                  atomicChange( Hop, 0 );                  
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        LJMP    ??setByte_50
// 2269             }else{      
// 2270                  cyclesTo10 = 0;                  
??setByte_66:
        MOV     DPTR,#cyclesTo10
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2271                  cyclesTo500 = page.defCyclesTo500; 
        LCALL   ?Subroutine11
// 2272                  cycles2Step10Channel   = page.defCyclesToStep10Channel;//cyclesDefaults[3]; //page.defCyclesToStep10Channel;
// 2273                  curChannel = page.channel;
??CrossCallReturnLabel_16:
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        LJMP    ??setByte_51
// 2274                  //setupRadio( curChannel = page.channel ); 
// 2275             }    
// 2276             //softKick();
// 2277         break;     
// 2278         case REPEATER_POWER:           page.repeaterPower = val;   if( page.is500Always ) setupRadio( page.channel ); break;
??setByte_28:
        MOV     A,R1
        MOV     DPTR,#(page + 193)
        LCALL   ?Subroutine73
??CrossCallReturnLabel_314:
        JC      $+5
        LJMP    ??setByte_46
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#(page + 164)
        SJMP    ??setByte_64
// 2279         case SEARCH_FOR_COMMUNICATION: page.searchCommunication = search_stat = val;  break;
??setByte_29:
        MOV     A,R1
        MOV     DPTR,#search_stat
        MOVX    @DPTR,A
        MOV     C,0xE0 /* A   */.0
        MOV     DPH,#(((page + 194) >> 8) & 0xff)
        MOV     DPL,#((page + 194) & 0xff)
??setByte_67:
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.7,C
        LJMP    ??setByte_51
// 2280 
// 2281         // win 7 bytes. 
// 2282         case SET_SHOW_STATE:  case SetCriticalLevel500:   case SetCriticalLevel10:
// 2283             (&page.showState)[ reg-SET_SHOW_STATE ]  = (signed char)val;            
??setByte_2:
        MOV     A,R4
        ADD     A,#-0x6b
??setByte_68:
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#0x0
        LJMP    ??setByte_59
// 2284         break;
// 2285         
// 2286         case END_OF_TEST: 
// 2287             page.channel = 0;
??setByte_30:
        CLR     A
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
// 2288             page.myBunch = 0xFF; page.netId = 0xFF;  page.groupId = 0xFFFF;
        MOV     A,#-0x1
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 4)
        LCALL   ?Subroutine69
// 2289             page.edAddr = 2; page.gwAddr = 1;
// 2290             savePB();
??CrossCallReturnLabel_190:
        ; Setup parameters for call to function savePB
        LCALL   savePB
// 2291         // go through ...
// 2292         //case CLEAR_MAX_BUNCH:             maxBunch = 0;                         break;
// 2293         case SYNCHRONIZE_MPP_CYCLES:      ticks[ MppCycle ]        = _mppCycle; break; 
??setByte_31:
        LCALL   ??Subroutine49_0
??CrossCallReturnLabel_109:
        MOV     A,#0x78
??setByte_69:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LJMP    ??setByte_51
// 2294         case SET_START500_CHANNEL:
// 2295             page.starting500Channel = val; if( page.is500Always ) setupRadio( curChannel = val );
??setByte_32:
        MOV     A,R1
        MOV     DPTR,#(page + 218)
        LCALL   ?Subroutine73
??CrossCallReturnLabel_315:
        JC      $+5
        LJMP    ??setByte_46
        MOV     A,R1
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        LJMP    ??setByte_63
// 2296         break;
// 2297         /*
// 2298         case CLEAR_THE_PAGE:
// 2299           val <<= 1;  
// 2300           if( !P1_4 && ( val > 48 ) && ( val < 64 ) ){
// 2301              tickWait( 8 * TICKS_IN_MS );
// 2302              clearAndHop( val );
// 2303              //clearThePage( val );
// 2304              ticks[ ReceiveData ] = 25*TICKS_IN_MS;
// 2305              //ticks[ ClearThePage ] = 12*TICKS_IN_MS;
// 2306              //page2clear = val;
// 2307           }
// 2308             //val <<= 1;  if( val && (val < 0x3E) && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ) ) clearThePage( val );
// 2309         break;
// 2310         */
// 2311         case TRY_OTHER_IMAGE:            page.tryOtherImageFirst = val;        break;
??setByte_33:
        MOV     DPTR,#(page + 219)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.0,C
        LJMP    ??setByte_51
// 2312         case SWITCH_SECURITY:
// 2313             mymemcpy( (BYTE *)page.curKey, nextKey, 16 ); mymemcpy( (BYTE *)page.curIV, nextIV, 16 );
??setByte_34:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(nextKey & 0xff)
        MOV     R5,#((nextKey >> 8) & 0xff)
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        LCALL   mymemcpy
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(nextIV & 0xff)
        MOV     R5,#((nextIV >> 8) & 0xff)
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        LCALL   mymemcpy
// 2314             zerofill( nextKey, 32 );
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x20
        MOV     R2,#(nextKey & 0xff)
        MOV     R3,#((nextKey >> 8) & 0xff)
        LCALL   zerofill
// 2315             loadKey(  page.curKey );
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
??CrossCallReturnLabel_214:
        LJMP    ??setByte_46
// 2316         break;
// 2317         case CALIBRATION_REPEAT:
// 2318             if( val > 0 && val < 32 ) calibrationRepeat = val; else calibrationRepeat = 4;
??setByte_36:
        MOV     A,R1
        JZ      ??setByte_70
        CLR     C
        SUBB    A,#0x20
        JNC     ??setByte_70
        MOV     A,R1
??setByte_71:
        MOV     DPTR,#calibrationRepeat
        LJMP    ??setByte_51
??setByte_70:
        MOV     A,#0x4
        SJMP    ??setByte_71
// 2319         break;
// 2320         //case SPECULATIVE_REPORT: page.speculative_report = val;                  break;
// 2321         case STAY_IN_RX:         page.stay_in_rx  = val;                         break;
??setByte_12:
        MOV     DPTR,#(page + 219)
??setByte_72:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.3,C
        LJMP    ??setByte_51
// 2322         //case THIRTY_THREE_MV:    page.thirty_three_mv = val;                     break;        
// 2323         
// 2324         case TEST_1:  case TEST_2:   case TEST_3:   case TEST_4:
// 2325             ptr = (BYTE *)&page.tests[reg-TEST_1]; 
??setByte_0:
        MOV     A,R4
        ADD     A,#-0x76
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R3,A
// 2326             *ptr++ = val; 
        MOV     A,R1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2327         // go through
// 2328         case INSTALL_DATE:
// 2329             if( reg == INSTALL_DATE ) ptr = (BYTE *)&page.installDate;
??setByte_13:
        MOV     A,#0xe
        XRL     A,?V0 + 0
        JNZ     ??setByte_73
        MOV     R2,#((page + 148) & 0xff)
        MOV     R3,#(((page + 148) >> 8) & 0xff)
// 2330             mymemcpy( ptr, (BYTE *)&utcLocal, 4); 
??setByte_73:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
??setByte_74:
        LCALL   mymemcpy
        SJMP    ??setByte_46
// 2331         break;
// 2332         
// 2333         case REP_STEP:   if( val < 5 && val >50 )  break;  // else go through
// 2334         
// 2335         case OV_STEP:  case T_OC_JUMP: case OV_STARTUP: 
// 2336             //if( page.fuseOVOC )       break;
// 2337         // go through 
// 2338         case T_SUPERHOT:              case T_HOT:          
// 2339         case T_COLD:                  case T_TIME:
// 2340         case NETWORK_CNST_1:          case NETWORK_CNST_2:  
// 2341         case OC_STEP:                 case SHUNT:  
// 2342         case MAX_OFF:                 case VIN_LIMIT: 
// 2343         case VIN_TURN_ON:             case VIN_SWITCH_OFF:
// 2344             ptr = (BYTE *)&page.repStep; ptr[ reg-REP_STEP ] = val; break;
??setByte_3:
        MOV     A,R4
        ADD     A,#-0x5f
        LJMP    ??setByte_68
// 2345             
// 2346         case SHORT_CIRCUIT_LEVEL: 
// 2347             #ifdef MidString
// 2348                 if( val == 0 )
// 2349                     { ocShortCircuitLimit = 255; T3CC1 = oc2timer( theOC ); }
// 2350                 else if( ocShortCircuitLimit < 255 )
// 2351                     { ocShortCircuitLimit = val; T3CC1 = oc2timer( theOC ); }
// 2352             #endif
// 2353             /*go through */
// 2354         case VIN_DISABLE_RADIO: case SET_RBUNCH: case SET_GBUNCH: //DEV250:
// 2355             ptr = (BYTE *)&page.vin_disable_radio; ptr[ reg-VIN_DISABLE_RADIO ] = val; 
??setByte_4:
        MOV     A,R4
        ADD     A,#0x4d
        LJMP    ??setByte_68
// 2356         break;
// 2357         case LOW_UTC: case HIGH_UTC: 
// 2358             mymemcpy( ((BYTE *)(&page.utcLow))+4*(reg-LOW_UTC), (BYTE *)&utcLast, 4);
??setByte_5:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#((page + 85) & 0xff)
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,#(((page - 171) >> 8) & 0xff)
        MOV     R3,A
        SJMP    ??setByte_74
// 2359         break;
// 2360 
// 2361         //case TEST_STAND: if( val == 1 ) isOnTestStand = 11; break; 
// 2362         
// 2363         case REPORT_UTC: page.reportUTC = val; break;
??setByte_18:
        MOV     DPTR,#(page + 219)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        LJMP    ??setByte_67
// 2364         case BANDWIDTH_500:  mdm_rate1[0] = val; softKick(); break;
??setByte_44:
        MOV     A,R1
        MOV     DPTR,#mdm_rate1
        MOVX    @DPTR,A
// 2365         case TREAT_LB_AS_CHAN : page.treatLastByteAsChannel = val; break;
// 2366         case SYNCH_PHASE:   page.synch_phase = val;  break;
// 2367         case SYNCH_FREQ:    page.synch_freq = val;   break;              
// 2368         case BANDWIDTH250:  page.bandwidth250 = val; break;
// 2369         case TEMP_CALIBRATE:softKick(); break;
??setByte_42:
        ; Setup parameters for call to function softKick
        LCALL   softKick
        SJMP    ??setByte_46
??setByte_7:
        MOV     DPTR,#(page + 194)
        SJMP    ??setByte_72
??setByte_39:
        MOV     A,R1
        MOV     DPTR,#(page + 161)
        SJMP    ??setByte_51
??setByte_40:
        MOV     A,R1
        MOV     DPTR,#(page + 162)
        SJMP    ??setByte_51
??setByte_41:
        MOV     A,R1
        MOV     DPTR,#(page + 163)
        SJMP    ??setByte_51
// 2370         case SET_MPPF:  si->mppCycle = val;  break;
??setByte_43:
        LCALL   ?Subroutine47
??CrossCallReturnLabel_100:
        MOV     A,R2
        LJMP    ??setByte_69
// 2371        
// 2372         case K_OV_VOLT:  case K_OC_CUR:
// 2373             ptr = (BYTE *)&page.k_ov_volt; ptr[ reg - K_OV_VOLT ] = val; 
??setByte_6:
        MOV     A,R4
        ADD     A,#0x41
        LJMP    ??setByte_68
// 2374         break;
// 2375         
// 2376         case XTAL_OFF: if( val == 1 ){
??setByte_38:
        MOV     A,#0x1
        XRL     A,R1
        JNZ     ??setByte_46
// 2377           //BYTE counter = 127;
// 2378           //CLKCON |= OSC_BIT;                    // starting the RC Oscillator
// 2379           //while(!HIGH_FREQUENCY_RC_OSC_STABLE && counter-- ) halWait(2); 
// 2380           //SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
// 2381           rcgen = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#rcgen
??setByte_51:
        MOVX    @DPTR,A
// 2382         }break;
// 2383     }
// 2384 }
??setByte_46:
        LJMP    ?Subroutine126
        CFI EndBlock cfiBlock862
        REQUIRE _A_P1
        REQUIRE RNDL
        REQUIRE T3CC0
        REQUIRE T3CC1
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond863 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_313
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond864 Using cfiCommon0
        CFI (cfiCond864) NoFunction
        CFI (cfiCond864) Conditional ??CrossCallReturnLabel_314
        CFI (cfiCond864) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond864) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond864) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond864) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond864) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond864) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond864) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond864) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond864) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond864) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond864) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond864) CFA_SP SP+0
        CFI (cfiCond864) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond865 Using cfiCommon0
        CFI (cfiCond865) NoFunction
        CFI (cfiCond865) Conditional ??CrossCallReturnLabel_315
        CFI (cfiCond865) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond865) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond865) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond865) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond865) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond865) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond865) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond865) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond865) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond865) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond865) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond865) CFA_SP SP+0
        CFI (cfiCond865) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker866 Using cfiCommon1
        CFI (cfiPicker866) NoFunction
        CFI (cfiPicker866) Picker
        MOVX    @DPTR,A
        LJMP    ?Subroutine114
        CFI EndBlock cfiCond863
        CFI EndBlock cfiCond864
        CFI EndBlock cfiCond865
        CFI EndBlock cfiPicker866

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond867 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_189
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond868 Using cfiCommon0
        CFI (cfiCond868) NoFunction
        CFI (cfiCond868) Conditional ??CrossCallReturnLabel_190
        CFI (cfiCond868) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond868) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond868) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond868) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond868) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond868) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond868) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond868) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond868) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond868) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond868) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond868) CFA_SP SP+0
        CFI (cfiCond868) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker869 Using cfiCommon1
        CFI (cfiPicker869) NoFunction
        CFI (cfiPicker869) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x2
        MOV     DPTR,#(page + 190)
        MOVX    @DPTR,A
        MOV     A,#0x1
        MOV     DPTR,#(page + 191)
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond867
        CFI EndBlock cfiCond868
        CFI EndBlock cfiPicker869

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond870 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond871 Using cfiCommon0
        CFI (cfiCond871) NoFunction
        CFI (cfiCond871) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond871) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond871) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond871) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond871) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond871) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond871) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond871) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond871) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond871) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond871) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond871) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond871) CFA_SP SP+0
        CFI (cfiCond871) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker872 Using cfiCommon1
        CFI (cfiPicker872) NoFunction
        CFI (cfiPicker872) Picker
        MOV     DPTR,#(page + 202)
        LCALL   ?Subroutine100
??CrossCallReturnLabel_265:
        MOV     DPTR,#cyclesTo10
        LCALL   ?Subroutine115
??CrossCallReturnLabel_322:
        RET
        CFI EndBlock cfiCond870
        CFI EndBlock cfiCond871
        CFI EndBlock cfiPicker872

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond873 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond874 Using cfiCommon0
        CFI (cfiCond874) NoFunction
        CFI (cfiCond874) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond874) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond874) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond874) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond874) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond874) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond874) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond874) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond874) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond874) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond874) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond874) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond874) CFA_SP SP+0
        CFI (cfiCond874) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker875 Using cfiCommon1
        CFI (cfiPicker875) NoFunction
        CFI (cfiPicker875) Picker
        LCALL   ?Subroutine93
??CrossCallReturnLabel_349:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond873
        CFI EndBlock cfiCond874
        CFI EndBlock cfiPicker875

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond876 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI Block cfiCond877 Using cfiCommon0
        CFI (cfiCond877) NoFunction
        CFI (cfiCond877) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond877) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond877) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond877) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond877) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond877) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond877) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond877) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond877) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond877) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond877) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond877) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond877) CFA_SP SP+0
        CFI (cfiCond877) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond878 Using cfiCommon0
        CFI (cfiCond878) NoFunction
        CFI (cfiCond878) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond878) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond878) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond878) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond878) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond878) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond878) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond878) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond878) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond878) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond878) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond878) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond878) CFA_SP SP+0
        CFI (cfiCond878) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker879 Using cfiCommon1
        CFI (cfiPicker879) NoFunction
        CFI (cfiPicker879) Picker
        MOV     DPTR,#(page + 10)
        MOVX    A,@DPTR
        MOV     0xbc,A
        MOV     DPTR,#(page + 11)
        MOVX    A,@DPTR
        MOV     0xbc,A
        RET
        CFI EndBlock cfiCond876
        CFI EndBlock cfiCond877
        CFI EndBlock cfiCond878
        CFI EndBlock cfiPicker879

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond880 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond881 Using cfiCommon0
        CFI (cfiCond881) NoFunction
        CFI (cfiCond881) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond881) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond881) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond881) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond881) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond881) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond881) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond881) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond881) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond881) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond881) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond881) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond881) CFA_SP SP+0
        CFI (cfiCond881) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker882 Using cfiCommon1
        CFI (cfiPicker882) NoFunction
        CFI (cfiPicker882) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine94
??CrossCallReturnLabel_324:
        MOV     DPTR,#(page + 218)
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond880
        CFI EndBlock cfiCond881
        CFI EndBlock cfiPicker882

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond883 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond884 Using cfiCommon0
        CFI (cfiCond884) NoFunction
        CFI (cfiCond884) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond884) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond884) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond884) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond884) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond884) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond884) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond884) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond884) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond884) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond884) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond884) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond884) CFA_SP SP+0
        CFI (cfiCond884) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker885 Using cfiCommon1
        CFI (cfiPicker885) NoFunction
        CFI (cfiPicker885) Picker
        LCALL   ?Subroutine91
??CrossCallReturnLabel_248:
        RET
        CFI EndBlock cfiCond883
        CFI EndBlock cfiCond884
        CFI EndBlock cfiPicker885

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine91:
        CFI Block cfiCond886 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_371
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond887 Using cfiCommon0
        CFI (cfiCond887) NoFunction
        CFI (cfiCond887) Conditional ??CrossCallReturnLabel_247, ??CrossCallReturnLabel_372
        CFI (cfiCond887) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond887) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond887) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond887) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond887) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond887) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond887) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond887) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond887) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond887) CFA_SP SP+0
        CFI (cfiCond887) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond888 Using cfiCommon0
        CFI (cfiCond888) NoFunction
        CFI (cfiCond888) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_35
        CFI (cfiCond888) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond888) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond888) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond888) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond888) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond888) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond888) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond888) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond888) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond888) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond888) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond888) CFA_SP SP+0
        CFI (cfiCond888) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond889 Using cfiCommon0
        CFI (cfiCond889) NoFunction
        CFI (cfiCond889) Conditional ??CrossCallReturnLabel_248, ??CrossCallReturnLabel_36
        CFI (cfiCond889) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond889) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond889) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond889) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond889) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond889) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond889) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond889) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond889) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond889) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond889) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond889) CFA_SP SP+0
        CFI (cfiCond889) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker890 Using cfiCommon1
        CFI (cfiPicker890) NoFunction
        CFI (cfiPicker890) Picker
        MOV     DPTR,#ticks
        LCALL   ?Subroutine106
??CrossCallReturnLabel_352:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond886
        CFI EndBlock cfiCond887
        CFI EndBlock cfiCond888
        CFI EndBlock cfiCond889
        CFI EndBlock cfiPicker890

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond891 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond892 Using cfiCommon0
        CFI (cfiCond892) NoFunction
        CFI (cfiCond892) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond892) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond892) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond892) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond892) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond892) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond892) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond892) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond892) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond892) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond892) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond892) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond892) CFA_SP SP+0
        CFI (cfiCond892) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker893 Using cfiCommon1
        CFI (cfiPicker893) NoFunction
        CFI (cfiPicker893) Picker
        MOV     DPTR,#(page + 200)
        LCALL   ?Subroutine100
??CrossCallReturnLabel_261:
        MOV     DPTR,#cyclesTo500
        LCALL   ?Subroutine115
??CrossCallReturnLabel_318:
        LCALL   ?Subroutine99
??CrossCallReturnLabel_258:
        LCALL   ?Subroutine115
??CrossCallReturnLabel_319:
        RET
        CFI EndBlock cfiCond891
        CFI EndBlock cfiCond892
        CFI EndBlock cfiPicker893
// 2385 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2386 void savePB(){
savePB:
        CFI Block cfiBlock894 Using cfiCommon0
        CFI Function savePB
        FUNCALL savePB, reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, tickWait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, initiateTransfer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, tickWait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 2387 //new   rc();
// 2388   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2389   asm( "NOP" );
        NOP
// 2390   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2391   asm( "NOP" );
        NOP
// 2392   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2393   asm( "NOP" );
        NOP
// 2394   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2395   asm( "NOP" );
        NOP
// 2396   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2397   asm( "NOP" );
        NOP
// 2398   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2399   asm( "NOP" );
        NOP
// 2400   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2401   asm( "NOP" );
        NOP
// 2402   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2403   asm( "NOP" );
        NOP
// 2404   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2405   asm( "NOP" );
        NOP
// 2406 //  if( !isOnTestStand ) return;
// 2407   //if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; return; }
// 2408   if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" );  return; }  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??savePB_0
        LCALL   ?Subroutine50
??CrossCallReturnLabel_110:
        SJMP    ??savePB_1
// 2409   if( *((BYTE *)0xF53B) != 0xAA ) reset(); 
??savePB_0:
        MOV     DPTR,#-0xac5
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JZ      ??savePB_2
        ; Setup parameters for call to function reset
        LCALL   reset
// 2410   //clearAndHop( 2 ); 
// 2411   //clearThePage( 2 );
// 2412   //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
// 2413   //P1_4 = 1; // debug statement for measuring save PB time
// 2414   asm("CLR  0xA8.7");
??savePB_2:
        CLR  0xA8.7
// 2415   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2416   asm( "NOP" );
        NOP
// 2417   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2418   asm( "NOP" );
        NOP
// 2419   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2420   asm( "NOP" );
        NOP
// 2421   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2422   asm( "NOP" );
        NOP
// 2423   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2424   asm( "NOP" );
        NOP
// 2425   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2426   asm( "NOP" );
        NOP
// 2427   if( !isOnTestStand ) reset();  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??savePB_3
        ; Setup parameters for call to function reset
        LCALL   reset
// 2428   FADDRH = 0x2E; FWT = 0x21; FCTL = 1; asm("NOP"); // this line actually clears the page
??savePB_3:
        MOV     0xad,#0x2e
        MOV     0xab,#0x21
        MOV     0xae,#0x1
        NOP
// 2429   FADDRH = 0;   
        MOV     0xad,#0x0
// 2430   asm("SETB 0xA8.7");
        SETB 0xA8.7
// 2431   tickWait( 25*TICKS_IN_MS );
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x32
        LCALL   tickWait
// 2432 //  if( !isOnTestStand ) return;
// 2433   initiateTransfer( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+8 );
        ; Setup parameters for call to function initiateTransfer
        MOV     R1,#-0xe
        MOV     R4,#0x0
        MOV     R5,#0x5c
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   initiateTransfer
// 2434   tickWait( 11*TICKS_IN_MS );  // was 5 ms
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x16
        LCALL   tickWait
// 2435   //softKick();
// 2436   //FADDRH = 0; 
// 2437   restoreRadio();
        LCALL   ?Subroutine6
// 2438   isOnTestStand = 0;
??CrossCallReturnLabel_366:
        MOV     DPTR,#isOnTestStand
        MOVX    @DPTR,A
// 2439   //P1_4 = 0; // debug statement for measuring save PB time
// 2440   CLKCON = 0x89;  asm( "NOP" );
        MOV     0xc6,#-0x77
        NOP
// 2441    asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" );
        NOP
        NOP
        NOP
        NOP
??savePB_1:
        NOP
// 2442 }
        LJMP    ??Subroutine116_0
        CFI EndBlock cfiBlock894
        REQUIRE FWT
        REQUIRE FADDRH
        REQUIRE FCTL
        REQUIRE CLKCON
// 2443 /*
// 2444 BYTE clearAndHop( BYTE p ){
// 2445    clearThePage( p );
// 2446    if( ticks[ Hop ] && page.hoppingAllowed && !page.is500Always ){
// 2447        CHANNR = curChannel; hop(); curChannel = CHANNR; 
// 2448        atomicChange( Hop, lastCycle ); //- _slot );  
// 2449    }
// 2450    return 1;
// 2451 }
// 2452 */
// 2453 /******************************************************************************
// 2454 * @fn  setInt
// 2455 * @brief       set the int16 value to register
// 2456 * Parameters:  byte reg - register, int val - value
// 2457 * @return      void
// 2458 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2459 void setInt( BYTE reg, UINT16 val ){
setInt:
        CFI Block cfiBlock895 Using cfiCommon0
        CFI Function setInt
        FUNCALL setInt, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2460 UINT16 *ptr = &page.defCyclesTo500;
// 2461 BYTE *pptr = (BYTE *)&page;
        MOV     ?V0 + 0,#(page & 0xff)
        MOV     ?V0 + 1,#((page >> 8) & 0xff)
// 2462 INT16 *ptr_int16 = NULL;
// 2463 
// 2464     switch(reg){     
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,R2
        ADD     A,#(page & 0xff)
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#((page >> 8) & 0xff)
        MOV     R5,A
        MOV     A,R6
        ANL     A,#0xf
        MOV     ?V0 + 2,A
        MOV     A,R7
        MOV     R3,A
        CLR     A
        XCH     A,R3
        MOV     R2,A
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setInt>_0`:
        DATA
        DB        2
        DB        4
        DB        12
        DW        ??setInt_0
        DB        19
        DB        23
        DW        ??setInt_1
        DB        12
        DB        1
        DW        ??setInt_2
        DB        2
        DW        ??setInt_3
        DB        3
        DW        ??setInt_4
        DB        13
        DW        ??setInt_5
        DB        14
        DW        ??setInt_6
        DB        16
        DW        ??setInt_7
        DB        17
        DW        ??setInt_8
        DB        24
        DW        ??setInt_9
        DB        25
        DW        ??setInt_10
        DB        26
        DW        ??setInt_11
        DB        27
        DW        ??setInt_12
        DB        28
        DW        ??setInt_13
        DW        ??setInt_14
        CODE
// 2465         case SET_GROUP_ID: page.groupId = val; break;
??setInt_2:
        MOV     DPTR,#(page + 4)
??setInt_15:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LJMP    ??setInt_16
// 2466         case JOIN: page.netId = (val & 0xF); page.myBunch = ( val >> 8 ) & 0xFF;  break;
??setInt_3:
        MOV     A,?V0 + 2
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#(page + 3)
        LJMP    ??setInt_16
// 2467         case SET_ED_GW:
// 2468             // this check for not 0 is a mistake, because it prohibits setting addr to 0, was a big issue on Remington Hi-Volts !!!
// 2469             //if( val & 0xFF   ) page.edAddr = val & 0xFF;
// 2470             //if( val & 0xFF00 ) page.gwAddr = ( val >> 8 ) & 0xFF;
// 2471             page.edAddr = val & 0xFF;
??setInt_4:
        MOV     A,R6
        MOV     DPTR,#(page + 190)
        MOVX    @DPTR,A
// 2472             page.gwAddr = ( val >> 8 ) & 0xFF;
        MOV     A,R2
        MOV     DPTR,#(page + 191)
        LCALL   ?Subroutine79
// 2473             ADDR = page.edAddr;
??CrossCallReturnLabel_209:
        LJMP    ??setInt_16
// 2474         break;
// 2475         case FetFailureCount:
// 2476           // The following if is meant to use = (not ==), set value
// 2477           // and then compare if fetFailureCount to 0 to set check logic
// 2478           if ((page.fetFailureCount = val) != 0)
??setInt_11:
        MOV     DPTR,#(page + 128)
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 128)
        MOVX    A,@DPTR
        JNZ     ??setInt_17
        INC     DPTR
        MOVX    A,@DPTR
??setInt_17:
        JZ      ??setInt_18
// 2479             checkForFETFailure = TRUE;
        MOV     A,#0x1
??setInt_19:
        MOV     DPTR,#checkForFETFailure
        LJMP    ??setInt_16
// 2480           else
// 2481             checkForFETFailure = FALSE;
??setInt_18:
        CLR     A
        SJMP    ??setInt_19
// 2482           break;
// 2483         case FetCurrentThreshold:                                                                          
// 2484           page.fetCurrentThreshold = val;
??setInt_12:
        MOV     DPTR,#(page + 130)
        SJMP    ??setInt_15
// 2485         break;
// 2486         case FetDeltaCurrent:
// 2487 	  page.fetDeltaCurrent = val;
??setInt_13:
        MOV     DPTR,#(page + 132)
        SJMP    ??setInt_15
// 2488         break;
// 2489         case BootImage: // try before buy
// 2490             tickWait( 12 * TICKS_IN_MS);
??setInt_5:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x18
        LCALL   tickWait
// 2491             // changing timers to boot (old) values
// 2492             /*if( val == 0x603F ){
// 2493                 T1CTL &= 0xFC;
// 2494                 SET_WORD(T1CNTH, T1CNTL, 0);
// 2495                 SET_WORD(T1CC0H, T1CC0L, 600 - 1);
// 2496                 T1CTL |= 0x04  | 0x02;
// 2497                 T1CCTL0 = 0x44;
// 2498                 si->mppCycle = 300;   // change when we change 8k image and Boot
// 2499             }*/
// 2500             if( val == 0x83F ) break;
        MOV     A,#0x3f
        XRL     A,R6
        JNZ     ??setInt_20
        MOV     A,#0x8
        XRL     A,R7
??setInt_20:
        JNZ     $+5
        LJMP    ??setInt_14
// 2501             {void (*f)( void ) = ( void (*)( void ) )val;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}          
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?CALL_IND
        LJMP    ??setInt_14
// 2502         break;
// 2503         case SyncWord: 
// 2504           SYNC0 = val & 0xFF;    SYNC1 = ( val >> 8 ) & 0xFF;
??setInt_6:
        MOV     A,R6
        MOV     DPTR,#-0x20ff
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#-0x2100
        MOVX    @DPTR,A
// 2505           page.syncword = val; 
        MOV     DPTR,#(page + 154)
        SJMP    ??setInt_15
// 2506         break;
// 2507         /*
// 2508         case SetCyclesTo500:            page.defCyclesTo500 = val;            break;
// 2509         case SetCyclesTo10:             page.defCyclesTo10  = val;            break;
// 2510         case SetCyclesToStep500Channel: page.defCyclesToStep500Channel = val; break;
// 2511         case SetCyclesToStep10Channel:  page.defCyclesToStep10Channel  = val; break;
// 2512         case SetCyclesToLightKick:      page.defCycles2LightKick = val;       break;
// 2513         case SetCyclesToSoftKick:       page.defCycles2SoftKick = val;        break;
// 2514         case SetCyclesToHardKick:       page.defCycles2HardKick =val;         break;
// 2515         */
// 2516         
// 2517         case SetCyclesTo500:                    case SetCyclesTo10:             
// 2518         case SetCyclesToStep500Channel:         case SetCyclesToStep10Channel:  
// 2519         case SetCyclesToSoftKick:               case SetCyclesToHardKick:   
// 2520         case SetImageAddr:
// 2521         case SetVersionLow:                     case SetVersionHigh:
// 2522         //default:
// 2523             //if( (reg > (SetCyclesTo500-1) ) && ( reg < (SetVersionHigh+1) ) ){
// 2524                 //UINT16 *ptr = &page.defCyclesTo500;
// 2525                 ptr[ reg - SetCyclesTo500 ] = val;
??setInt_0:
        MOV     A,R4
        ADD     A,#-0x40
??setInt_21:
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     DPH,A
        LJMP    ??setInt_15
// 2526             //}
// 2527         break;
// 2528         case SetBasePtr:
// 2529             if( (base_ptr == NULL) && (((UINT16)val) > 0x3FF) && (((UINT16)val) < 0x800) )  base_ptr = (BYTE *)val;
??setInt_7:
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        JNZ     ??setInt_22
        INC     DPTR
        MOVX    A,@DPTR
??setInt_22:
        JNZ     ??setInt_14
        CLR     C
        MOV     A,R7
        SUBB    A,#0x4
        JC      ??setInt_14
        CLR     C
        MOV     A,R7
        SUBB    A,#0x8
        JNC     ??setInt_14
        MOV     DPTR,#base_ptr
        LJMP    ??setInt_15
// 2530         break;  
// 2531         case SetCurNoise: page.cur_noise = val; break;
??setInt_8:
        MOV     DPTR,#(page + 232)
        LJMP    ??setInt_15
// 2532         //case GndShift:    gnd_shift = val;      break;
// 2533         case SetOscLowCurrentLimitInmA:
// 2534         case SetOscDeltaV:
// 2535         case SetOscOVStartupDelay:
// 2536         case SetOscAfterStartupDelay:
// 2537         case SetOscLowCurrentOnlyDelay:
// 2538           ptr_int16 = &page.oscLowCurrentLimitInmA;
// 2539           ptr_int16[reg - SetOscLowCurrentLimitInmA] = val;
??setInt_1:
        MOV     A,R4
        ADD     A,#0x60
        SJMP    ??setInt_21
// 2540         break;
// 2541         case ReadPBOneCommand: 
// 2542             if( (val>>12)&0xF ) pptr = (BYTE *)0x5C00; 
??setInt_9:
        MOV     A,#-0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??setInt_23
        MOV     A,R1
??setInt_23:
        JZ      ??setInt_24
        MOV     ?V0 + 0,R3
        MOV     ?V0 + 1,#0x5c
// 2543             base_ptr = pptr + 24*((val>>8)&0xF);
??setInt_24:
        MOV     A,#0xf
        ANL     A,R2
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        LCALL   ?Subroutine68
// 2544             calibrationRepeat = (val>>4)&0xF;
??CrossCallReturnLabel_183:
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        MOV     DPTR,#calibrationRepeat
        MOVX    @DPTR,A
// 2545             reportScaling  = (val&0xF) * calibrationRepeat; 
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 2
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        MUL     AB
        MOV     DPTR,#reportScaling
        SJMP    ??setInt_16
// 2546         break;
// 2547         case SetPBByte: pptr[ ( val >> 8 )&0xFF ] = val & 0xFF; break;
??setInt_10:
        MOV     A,R2
        ADD     A,#(page & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((page >> 8) & 0xff)
        MOV     DPH,A
        MOV     A,R6
??setInt_16:
        MOVX    @DPTR,A
// 2548     }
// 2549 }
??setInt_14:
        MOV     R7,#0x3
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock895

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiCond896 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_208
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond897 Using cfiCommon0
        CFI (cfiCond897) NoFunction
        CFI (cfiCond897) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond897) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond897) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond897) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond897) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond897) V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond897) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond897) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond897) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond897) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond897) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond897) CFA_SP SP+0
        CFI (cfiCond897) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker898 Using cfiCommon1
        CFI (cfiPicker898) NoFunction
        CFI (cfiPicker898) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 190)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fb
        RET
        CFI EndBlock cfiCond896
        CFI EndBlock cfiCond897
        CFI EndBlock cfiPicker898
// 2550 /******************************************************************************
// 2551 * @fn  setLong
// 2552 * @brief       set the long value to register
// 2553 * Parameters:  byte reg - register, long val - value
// 2554 * @return      void
// 2555 ******************************************************************************/
// 2556 //void setLong( BYTE reg, UINT32 val ){  if( reg == SET_DF_TOLERANCE ){ page.dF_Tolerance = val;  } }
// 2557 /******************************************************************************
// 2558 * @fn  setFloat
// 2559 * @brief       set the float value to register
// 2560 * Parameters:  byte reg - register, float val - value
// 2561 * @return      void
// 2562 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2563 void setFloat( BYTE reg, float *ptr){
setFloat:
        CFI Block cfiBlock899 Using cfiCommon0
        CFI Function setFloat
        FUNCALL setFloat, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setFloat, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setFloat, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2564 //BYTE oc = 0;
// 2565 //float val = *ptr;
// 2566 BYTE *dst = NULL;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
// 2567 BOOL recomputeOC2Timer = FALSE;
        MOV     ?V0 + 3,#0x0
// 2568     switch(reg){     
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#(page & 0xff)
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,#((page >> 8) & 0xff)
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setFloat>_0`:
        DATA
        DB        4
        DB        1
        DB        4
        DW        ??setFloat_0
        DB        5
        DB        6
        DW        ??setFloat_1
        DB        10
        DB        23
        DW        ??setFloat_2
        DB        25
        DB        26
        DW        ??setFloat_3
        DB        1
        DB        24
        DW        ??setFloat_4
        DW        ??setFloat_5
        CODE
// 2569         case SET_DFK0:  case SET_DFK1:  case SET_DFK2:  case SET_DFK3:     
// 2570             //page.dFk[reg-SET_DFK0] = val;    
// 2571             dst = (BYTE *) &page.dFk[reg-SET_DFK0];
??setFloat_0:
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
// 2572             if( reg == SET_DFK3 ) page.pureOffset = ((INT16) (*ptr))+20;
        MOV     A,#0x4
        XRL     A,?V0 + 2
        JZ      $+5
        LJMP    ??setFloat_5
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     A,#0x14
        ADD     A,?V0 + 4
        MOV     R0,A
        CLR     A
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     DPTR,#(page + 198)
        LCALL   ??Subroutine68_0
??CrossCallReturnLabel_184:
        SJMP    ??setFloat_5
// 2573         break;
// 2574         //case SET_VIN_TURN_ON: case SET_VIN_SHUT_OFF: (&page.VinTurnOn)[reg-SET_VIN_TURN_ON]  = val;      return;
// 2575         
// 2576         case SET_TK_CUR: case SET_TK_POW:          
// 2577             //(&page.tkCurrent)[reg-SET_TK_CUR] = val;   
// 2578             dst = (BYTE *) &( (&page.tkCurrent)[reg-SET_TK_CUR] );
??setFloat_1:
        MOV     A,R2
        ADD     A,#-0x63
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        SJMP    ??setFloat_6
// 2579         break;
// 2580         
// 2581         //case SET_VIN_DISABLE_RADIO:                                        page.VinDisableRadio  = val;  return;
// 2582 
// 2583         case SET_LC00:  case SET_LC01:  case SET_LC10:  case SET_LC11:  
// 2584         case SET_LC20:  case SET_LC21:  case SET_LC30:  case SET_LC31:  
// 2585         case SET_LC40:  case SET_LC41:  case SET_LC50:  case SET_LC51:  // linearK [6][2]  
// 2586         case SET_LC60:  case SET_LC61:
// 2587             if( reg == 14 ){ zerofill( (BYTE *)&k_oc2timer, 4 );  recomputeOC2Timer = TRUE; }
??setFloat_2:
        MOV     A,#0xe
        XRL     A,?V0 + 2
        JNZ     ??setFloat_7
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x4
        MOV     R2,#(k_oc2timer & 0xff)
        MOV     R3,#((k_oc2timer >> 8) & 0xff)
        LCALL   zerofill
        MOV     ?V0 + 3,#0x1
// 2588             reg -= SET_LC00;
??setFloat_7:
        MOV     A,#-0xa
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
// 2589             //page.linearK[reg>>1][reg&1]     = val; 
// 2590             dst = (BYTE *) &page.linearK[reg>>1][reg&1]; 
        CLR     C
        RRC     A
        MOV     ?V0 + 0,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#((page + 40) & 0xff)
        MOV     R0,A
        CLR     A
        ADDC    A,#(((page + 40) >> 8) & 0xff)
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        SJMP    ??setFloat_6
// 2591 //            if( reg == 4 ){
// 2592 //                T3CC1 = oc2timer( theOC ); // lin coeff for 
// 2593 //                #ifdef MidString
// 2594 //                compute98();
// 2595 //                #endif
// 2596 //            }
// 2597         break;
// 2598         case SET_VREF0:                   invVref0 = 1 / (*ptr);                    // go through
??setFloat_4:
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#-0x80
        MOV     ?V0 + 11,#0x3f
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#invVref0
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 2599         case SET_VREF1: case SET_VREF2:   
// 2600             //mymemcpy( (BYTE *) &page.vrefPolynom[reg-SET_VREF0], (BYTE *) ptr, 4 );
// 2601             dst = (BYTE *) &page.vrefPolynom[reg-SET_VREF0];
??setFloat_3:
        MOV     A,R2
        ADD     A,#-0x44
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#-0x1
??setFloat_6:
        MOV     ?V0 + 1,A
// 2602         break;
// 2603     }
// 2604     if( dst ) mymemcpy( dst, (BYTE *) ptr, 4 );
??setFloat_5:
        MOV     A,?V0 + 0
        JNZ     ??setFloat_8
        MOV     A,?V0 + 1
??setFloat_8:
        JZ      ??setFloat_9
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   mymemcpy
// 2605     if( recomputeOC2Timer ) T3CC1 = oc2timer( theOC );
??setFloat_9:
        MOV     A,?V0 + 3
        JZ      ??CrossCallReturnLabel_311
        ; Setup parameters for call to function oc2timer
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        LCALL   ?Subroutine85
// 2606 }
??CrossCallReturnLabel_311:
        LJMP    ?Subroutine111
        CFI EndBlock cfiBlock899
        REQUIRE T3CC1
// 2607 /******************************************************************************/
// 2608 #define NULLOP          0
// 2609 #define SETREG          0x10
// 2610 #define RESET           0x20
// 2611 #define SILENCE         0x30
// 2612 #define CALIBRATE_R     0x40
// 2613 #define SET_MAC_CMD     0x50
// 2614 #define BOOT_OVER_AIR   0x60
// 2615 #define SET_NEXT_KEY    0x70
// 2616 #define SET_NEXT_IV     0x80
// 2617 #define ASVOL_NETCMD    0x90
// 2618 #define SHORT_NETJOIN   0xF0
// 2619 
// 2620 #define BROADCAST       0
// 2621 #define STRINGADDR      1
// 2622 #define NIADDR          2
// 2623 #define MACADDR         3
// 2624 
// 2625 #define FLOAT_VAL       0
// 2626 #define BYTE_VAL        (1<<2)
// 2627 #define SHORT_VAL       (2<<2)
// 2628 #define LONG_VAL        (3<<2)
// 2629 
// 2630 /******************************************************************************
// 2631 * @fn  parseCommands
// 2632 * @brief       This function parses commands and sets global flags
// 2633 * Parameters:
// 2634 * @return void
// 2635 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2636 void parseCommands(BYTE l){
parseCommands:
        CFI Block cfiBlock900 Using cfiCommon0
        CFI Function parseCommands
        FUNCALL parseCommands, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setFloat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 4,R1
// 2637 BYTE *ptr     = radioPktBuffer + 8;
        MOV     R6,#((radioPktBuffer + 8) & 0xff)
        MOV     R7,#(((radioPktBuffer + 8) >> 8) & 0xff)
// 2638 BYTE cmd, reg;
// 2639 BOOL flag = TRUE, /*addrFlag = FALSE,*/ individualAddr = FALSE;
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        SJMP    ??parseCommands_0
// 2640 static UINT16 cmdCnt = 0; //, i;
// 2641     while( *ptr && (l--) ){
// 2642         cmd = *ptr++; 
// 2643         if( (cmd & 0xF0) == SHORT_NETJOIN ){
// 2644             reg = *ptr++;
??parseCommands_1:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
// 2645             if( mymemcmp( page.myMac, ptr, 6 ) == 0 ){ page.netId = (cmd & 0xF); page.myBunch = reg; }
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseCommands_2
        MOV     A,#0xf
        ANL     A,?V0 + 5
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     A,?V0 + 0
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
// 2646             ptr += 6;
??parseCommands_2:
        MOV     A,R6
        ADD     A,#0x6
??parseCommands_3:
        MOV     R6,A
??parseCommands_4:
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 2647         }else{
??parseCommands_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_215
        MOV     R3,?V0 + 4
        MOV     A,#-0x1
        ADD     A,R3
        MOV     ?V0 + 4,A
        MOV     A,R3
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_215
        MOV     ?V0 + 5,R2
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,#-0x10
        ANL     A,?V0 + 5
        MOV     ?V0 + 0,A
        MOV     A,#-0x10
        XRL     A,?V0 + 0
        JZ      ??parseCommands_1
// 2648             if( search_stat == 2 ) search_stat = page.searchCommunication;
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??CrossCallReturnLabel_133
        LCALL   ?Subroutine58
// 2649             //mymemcpy( (BYTE *)&cmdCnt, ptr, 2 ); 
// 2650             cmdCnt = *((UINT16 *)ptr);
??CrossCallReturnLabel_133:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_166:
        MOV     DPTR,#??cmdCnt
        LCALL   ??Subroutine68_0
// 2651             ptr+=2;
??CrossCallReturnLabel_185:
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 2652             switch( cmd & 0x3 ){ 
        MOV     A,R6
        ADD     A,#0x2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x3
        ANL     A,?V0 + 5
        MOV     ?V0 + 1,A
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for parseCommands>_0`:
        DATA
        DB        0
        DB        3
        DW        ??parseCommands_5
        DW        ??parseCommands_6
        DW        ??parseCommands_7
        DW        ??parseCommands_8
        DW        ??parseCommands_9
        CODE
// 2653                 case BROADCAST:                                                             flag = TRUE; break;
??parseCommands_6:
        MOV     ?V0 + 2,#0x1
        SJMP    ??parseCommands_5
// 2654                 case STRINGADDR: flag = ( *((UINT16 *) ptr) == page.groupId );              ptr += 2;    break;
??parseCommands_7:
        LCALL   ?Subroutine53
??CrossCallReturnLabel_122:
        MOV     DPTR,#(page + 4)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??parseCommands_10:
        JNZ     ??parseCommands_11
        MOV     R2,#0x1
        SJMP    ??parseCommands_12
??parseCommands_11:
        MOV     R2,#0x0
??parseCommands_12:
        MOV     ?V0 + 2,R2
??parseCommands_13:
        INC     R6
        INC     R6
        MOV     A,R1
        SJMP    ??parseCommands_14
// 2655                 case NIADDR:     flag = ( ptr[0] == page.myBunch && ptr[1] == page.netId ); individualAddr = flag; ptr += 2;    break;
??parseCommands_8:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 3)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_15
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_15
        MOV     R2,#0x1
        SJMP    ??parseCommands_16
??parseCommands_15:
        MOV     R2,#0x0
??parseCommands_16:
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,?V0 + 2
        SJMP    ??parseCommands_13
// 2656                 case MACADDR:    
// 2657                     flag = ( mymemcmp( page.myMac, ptr, 6 ) == 0 );// flag = TRUE; else flag = FALSE;
??parseCommands_9:
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseCommands_17
        MOV     R2,#0x1
        SJMP    ??parseCommands_18
??parseCommands_17:
        MOV     R2,#0x0
??parseCommands_18:
        MOV     ?V0 + 2,R2
// 2658                     individualAddr = flag;
        MOV     ?V0 + 3,?V0 + 2
// 2659                     ptr += 6;
        MOV     A,R6
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
??parseCommands_14:
        MOV     R7,A
// 2660                 break;
// 2661             }
// 2662             //addrFlag = flag;
// 2663             if( cmdCnt ){
??parseCommands_5:
        MOV     DPTR,#??cmdCnt
        MOVX    A,@DPTR
        JNZ     ??parseCommands_19
        INC     DPTR
        MOVX    A,@DPTR
??parseCommands_19:
        JZ      ??parseCommands_20
// 2664                 if( cmdCount > 0xFF00 &&  cmdCnt < 0x100 ) cmdCount = cmdCnt;
        MOV     DPTR,#cmdCount
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        JC      ??parseCommands_21
        CLR     C
        MOV     DPTR,#(??cmdCnt + 1)
        MOVX    A,@DPTR
        SUBB    A,#0x1
        JNC     ??parseCommands_21
        MOV     DPTR,#??cmdCnt
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_167:
        MOV     DPTR,#cmdCount
        LCALL   ??Subroutine68_0
??CrossCallReturnLabel_186:
        SJMP    ??parseCommands_20
// 2665                 else                                       flag = flag && (cmdCnt > cmdCount);
??parseCommands_21:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_22
        LCALL   ?Subroutine23
??CrossCallReturnLabel_43:
        JNC     ??parseCommands_22
        MOV     R2,#0x1
        SJMP    ??parseCommands_23
??parseCommands_22:
        MOV     R2,#0x0
??parseCommands_23:
        MOV     ?V0 + 2,R2
// 2666             }
// 2667             if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
??parseCommands_20:
        LCALL   ?Subroutine23
??CrossCallReturnLabel_44:
        JNC     ??CrossCallReturnLabel_187
        MOV     DPTR,#cmdCount
        LCALL   ??Subroutine68_0
// 2668             switch( cmd & 0xF0 ){
??CrossCallReturnLabel_187:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,?V0 + 0
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for parseCommands>_1`:
        DATA
        DB        0
        DB        6
        DB        16
        DW        ??parseCommands_24
        DB        32
        DW        ??parseCommands_25
        DB        80
        DW        ??parseCommands_26
        DB        112
        DW        ??parseCommands_27
        DB        128
        DW        ??parseCommands_27
        DB        144
        DW        ??parseCommands_28
        DW        ??parseCommands_0
        CODE
// 2669                 case SET_MAC_CMD:
// 2670                   if( flag && ( ( cmd & 0x3 ) == MACADDR ) ) {
??parseCommands_26:
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??parseCommands_2
        MOV     A,#0x3
        XRL     A,?V0 + 1
        JZ      $+5
        LJMP    ??parseCommands_2
// 2671                       mymemcpy( page.myMac, ptr, 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcpy
        LJMP    ??parseCommands_2
// 2672                       //savePB();
// 2673                   }
// 2674                   ptr += 6;
// 2675                 break;
// 2676                 case SETREG:
// 2677                     if( search_stat != page.searchCommunication ) page.searchCommunication = search_stat;
??parseCommands_24:
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        XRL     A,R2
        JZ      ??parseCommands_29
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     DPH,#(((page + 194) >> 8) & 0xff)
        MOV     DPL,#((page + 194) & 0xff)
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.7,C
        MOVX    @DPTR,A
// 2678                     reg = *ptr++;
??parseCommands_29:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 2679                     switch( cmd&0xC ){
        MOV     A,#0xc
        ANL     A,?V0 + 5
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for parseCommands>_2`:
        DATA
        DB        0
        DB        3
        DB        0
        DW        ??parseCommands_30
        DB        4
        DW        ??parseCommands_31
        DB        8
        DW        ??parseCommands_32
        DW        ??parseCommands_0
        CODE
// 2680                         case FLOAT_VAL:  if( flag ) setFloat( reg, (float *)ptr );       ptr+=4;  break;
??parseCommands_30:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_33
        ; Setup parameters for call to function setFloat
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   setFloat
??parseCommands_33:
        MOV     A,R6
        ADD     A,#0x4
        LJMP    ??parseCommands_3
// 2681                         case BYTE_VAL:   if( flag ) setByte ( reg, *ptr );               ptr++;   break;
??parseCommands_31:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_34
        ; Setup parameters for call to function setByte
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 0
        LCALL   setByte
??parseCommands_34:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        LJMP    ??parseCommands_0
// 2682                         case SHORT_VAL:  if( flag ) setInt  ( reg, *((UINT16*)ptr) );    ptr+=2;  break;
??parseCommands_32:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_35
        ; Setup parameters for call to function setInt
        LCALL   ?Subroutine53
??CrossCallReturnLabel_123:
        MOV     R1,?V0 + 0
        LCALL   setInt
??parseCommands_35:
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        LJMP    ??parseCommands_4
// 2683                     }
// 2684                 break;
// 2685                 case RESET: if( flag ){ tickWait( 12 * TICKS_IN_MS ); reset(); }else break; // ticks[ Reset ] = TICKS_IN_SEC; else break;
??parseCommands_25:
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??parseCommands_0
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x18
        LCALL   tickWait
        ; Setup parameters for call to function reset
        LCALL   reset
// 2686                 /*
// 2687                 case BOOT_OVER_AIR: if( addrFlag && !P1_4 ) {
// 2688                 UINT16 addr;  
// 2689                     page.searchCommunication = FALSE;
// 2690                     reg = *ptr++; addr = *((UINT16*)ptr);  
// 2691                     if( ( addr > 0x3FF ) && ( 0x4000 & ( addr ^ page.imageAddr ) ) && ( addr < PAGEADDR ) ){
// 2692                     //static BYTE bootBuf[18];
// 2693                         ptr += 2;
// 2694                         //for( cmd = 0; cmd < reg; cmd++ ) bootBuf[ cmd ] = *ptr++;
// 2695                         //mymemcpy( bootBuf, ptr, reg );
// 2696                         if( reg & 1 ) reg++;
// 2697                         tickWait( 12 * TICKS_IN_MS );
// 2698                         initiateTransfer( ptr, (BYTE *)addr, reg );
// 2699                     }
// 2700                 }return;
// 2701                 */
// 2702                 case SET_NEXT_KEY: case SET_NEXT_IV: 
// 2703                     if( individualAddr ){ 
??parseCommands_27:
        MOV     A,?V0 + 3
        JZ      ??CrossCallReturnLabel_215
// 2704                         loadKey( (char *)0x3E0 ); loadIV( (char *)0x3F0 ); 
        ; Setup parameters for call to function load
        MOV     R2,#-0x20
        MOV     R3,#0x3
        LCALL   ??Subroutine81_0
??CrossCallReturnLabel_216:
        ; Setup parameters for call to function load
        MOV     R2,#-0x10
        MOV     R3,#0x3
        MOV     R1,#0x6
        LCALL   ??Subroutine81_1
// 2705                         decode( 16, (char *)ptr, ((cmd&0xF0)==SET_NEXT_IV) ? (char *)nextIV : (char *)nextKey ); 
??CrossCallReturnLabel_219:
        MOV     A,#-0x80
        XRL     A,?V0 + 0
        JNZ     ??parseCommands_36
        MOV     ?V0 + 0,#(nextIV & 0xff)
        MOV     ?V0 + 1,#((nextIV >> 8) & 0xff)
        SJMP    ??parseCommands_37
??parseCommands_36:
        MOV     ?V0 + 0,#(nextKey & 0xff)
        MOV     ?V0 + 1,#((nextKey >> 8) & 0xff)
??parseCommands_37:
        ; Setup parameters for call to function code
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x10
        MOV     R1,#0x2
        LCALL   `code`
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
// 2706                         loadKey( page.curKey );
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
??CrossCallReturnLabel_215:
        MOV     R7,#0x6
        LJMP    ?FUNC_LEAVE_XDATA
// 2707                     }
// 2708                 return;
// 2709                 case ASVOL_NETCMD:
// 2710                     if( individualAddr ){
??parseCommands_28:
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 3
        JZ      ??parseCommands_38
// 2711                         BYTE *saved_ptr = ptr;
// 2712                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2713                         asm( "NOP" );
        NOP
// 2714                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2715                         asm( "NOP" );
        NOP
// 2716                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2717                         asm( "NOP" );
        NOP
// 2718                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2719                         asm( "NOP" );
        NOP
// 2720                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2721                         asm( "NOP" );
        NOP
// 2722                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2723                         asm( "NOP" );
        NOP
// 2724                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2725                         asm( "NOP" );
        NOP
// 2726                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2727                         asm( "NOP" );
        NOP
// 2728                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2729                         asm( "NOP" );
        NOP
// 2730                         if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" ); ptr += 7; break; }  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??parseCommands_39
        LCALL   ?Subroutine50
??CrossCallReturnLabel_111:
        NOP
// 2731                       
// 2732                         cmd = *ptr++;
// 2733                         page.channel = page.starting500Channel = *ptr++;                // 7 bytes so far, 1 bit free
// 2734                         page.edAddr  =                           *ptr++;
// 2735                         page.gwAddr  =                           *ptr++;
// 2736                         page.myBunch =                           *ptr++;
// 2737                         page.groupId =                           *((UINT16 *) ptr);  ptr += 2;
// 2738 
// 2739                         page.netId   =     0xF & cmd;
// 2740                         page.use12kbod  = (0!=(0x10 & cmd ) )?1:0;
// 2741                         page.useFEC     = (0!=(0x20 & cmd ) )?1:0;
// 2742                         page.use250kbod = (0!=(0x40 & cmd ) )?1:0;
// 2743                         
// 2744                         mymemcpy( (BYTE *)(&page.installDate), (BYTE *)&utcLast, 4);
// 2745                         savePB();
// 2746                         ptr = saved_ptr+7;
// 2747                         setup_hopper( page.channel );
// 2748                         setupRadio(   page.channel ); //page.is500Always ? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
// 2749                     }else ptr+=7;
??parseCommands_38:
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        LJMP    ??parseCommands_0
??parseCommands_39:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     DPTR,#(page + 218)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 164)
        LCALL   ?Subroutine103
??CrossCallReturnLabel_273:
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 190)
        LCALL   ?Subroutine75
??CrossCallReturnLabel_200:
        MOV     DPTR,#(page + 191)
        LCALL   ?Subroutine75
??CrossCallReturnLabel_201:
        MOV     DPTR,#(page + 3)
        LCALL   ?Subroutine103
??CrossCallReturnLabel_274:
        INC     DPTR
        LCALL   ??Subroutine65_0
??CrossCallReturnLabel_168:
        MOV     DPTR,#(page + 4)
        LCALL   ??Subroutine68_0
??CrossCallReturnLabel_188:
        MOV     A,#0xf
        ANL     A,?V0 + 5
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 194)
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.4
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.2,C
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 219)
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.5
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.4,C
        MOVX    @DPTR,A
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.6
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        MOVX    @DPTR,A
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     R2,#((page + 148) & 0xff)
        MOV     R3,#(((page + 148) >> 8) & 0xff)
        LCALL   mymemcpy
        ; Setup parameters for call to function savePB
        LCALL   savePB
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        ; Setup parameters for call to function setup_hopper
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setup_hopper
        ; Setup parameters for call to function setupRadio
        LCALL   ??Subroutine56_0
??CrossCallReturnLabel_131:
        LJMP    ??parseCommands_0
        CFI EndBlock cfiBlock900
        REQUIRE CLKCON
// 2750                 break;
// 2751             }
// 2752             //if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
// 2753         }
// 2754     }
// 2755 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine103:
        CFI Block cfiCond901 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_272
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond902 Using cfiCommon0
        CFI (cfiCond902) NoFunction
        CFI (cfiCond902) Conditional ??CrossCallReturnLabel_273
        CFI (cfiCond902) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond902) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond902) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond902) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond902) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond902) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond902) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond902) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond902) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond902) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond902) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond902) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond902) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond902) CFA_SP SP+0
        CFI (cfiCond902) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond903 Using cfiCommon0
        CFI (cfiCond903) NoFunction
        CFI (cfiCond903) Conditional ??CrossCallReturnLabel_274
        CFI (cfiCond903) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond903) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond903) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond903) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond903) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond903) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond903) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond903) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond903) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond903) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond903) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond903) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond903) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond903) CFA_SP SP+0
        CFI (cfiCond903) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond904 Using cfiCommon0
        CFI (cfiCond904) NoFunction
        CFI (cfiCond904) Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_200
        CFI (cfiCond904) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond904) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond904) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond904) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond904) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond904) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond904) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond904) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond904) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond904) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond904) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond904) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond904) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond904) CFA_SP SP+0
        CFI (cfiCond904) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond905 Using cfiCommon0
        CFI (cfiCond905) NoFunction
        CFI (cfiCond905) Conditional ??CrossCallReturnLabel_275, ??CrossCallReturnLabel_201
        CFI (cfiCond905) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond905) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond905) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond905) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond905) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond905) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond905) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond905) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond905) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond905) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond905) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond905) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond905) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond905) CFA_SP SP+0
        CFI (cfiCond905) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker906 Using cfiCommon1
        CFI (cfiPicker906) NoFunction
        CFI (cfiPicker906) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond901
        CFI EndBlock cfiCond902
        CFI EndBlock cfiCond903
        CFI EndBlock cfiCond904
        CFI EndBlock cfiCond905
        CFI EndBlock cfiPicker906

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond907 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_200
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond908 Using cfiCommon0
        CFI (cfiCond908) NoFunction
        CFI (cfiCond908) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond908) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond908) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond908) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond908) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond908) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond908) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond908) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond908) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond908) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond908) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond908) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond908) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond908) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond908) CFA_SP SP+0
        CFI (cfiCond908) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker909 Using cfiCommon1
        CFI (cfiPicker909) NoFunction
        CFI (cfiPicker909) Picker
        LCALL   ?Subroutine103
??CrossCallReturnLabel_275:
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond907
        CFI EndBlock cfiCond908
        CFI EndBlock cfiPicker909

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond910 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_132
        CFI Block cfiCond911 Using cfiCommon0
        CFI (cfiCond911) NoFunction
        CFI (cfiCond911) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond911) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond911) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond911) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond911) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond911) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond911) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond911) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond911) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond911) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond911) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond911) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond911) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond911) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond911) CFA_SP SP+0
        CFI (cfiCond911) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker912 Using cfiCommon1
        CFI (cfiPicker912) NoFunction
        CFI (cfiPicker912) Picker
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#search_stat
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond910
        CFI EndBlock cfiCond911
        CFI EndBlock cfiPicker912

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond913 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond914 Using cfiCommon0
        CFI (cfiCond914) NoFunction
        CFI (cfiCond914) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond914) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond914) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond914) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond914) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond914) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond914) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond914) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond914) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond914) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond914) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond914) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond914) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond914) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond914) CFA_SP SP+0
        CFI (cfiCond914) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker915 Using cfiCommon1
        CFI (cfiPicker915) NoFunction
        CFI (cfiPicker915) Picker
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     DPTR,#cmdCount
        LCALL   ?Subroutine102
??CrossCallReturnLabel_270:
        MOVX    @DPTR,A
        MOV     0xc6,#-0x77
        RET
        CFI EndBlock cfiCond913
        CFI EndBlock cfiCond914
        CFI EndBlock cfiPicker915

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond916 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond917 Using cfiCommon0
        CFI (cfiCond917) NoFunction
        CFI (cfiCond917) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond917) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond917) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond917) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond917) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond917) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond917) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond917) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond917) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond917) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond917) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond917) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond917) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond917) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond917) CFA_SP SP+0
        CFI (cfiCond917) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker918 Using cfiCommon1
        CFI (cfiPicker918) NoFunction
        CFI (cfiPicker918) Picker
        MOV     DPTR,#??cmdCnt
        LCALL   ?Subroutine100
??CrossCallReturnLabel_262:
        MOV     DPH,#((cmdCount >> 8) & 0xff)
        MOV     DPL,#(cmdCount & 0xff)
        LCALL   ?Subroutine97
??CrossCallReturnLabel_254:
        RET
        CFI EndBlock cfiCond916
        CFI EndBlock cfiCond917
        CFI EndBlock cfiPicker918

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine97:
        CFI Block cfiCond919 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_252
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond920 Using cfiCommon0
        CFI (cfiCond920) NoFunction
        CFI (cfiCond920) Conditional ??CrossCallReturnLabel_255, ??CrossCallReturnLabel_339
        CFI (cfiCond920) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond920) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond920) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond920) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond920) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond920) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond920) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond920) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond920) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond920) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond920) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond920) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond920) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond920) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond920) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond920) CFA_SP SP+0
        CFI (cfiCond920) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond921 Using cfiCommon0
        CFI (cfiCond921) NoFunction
        CFI (cfiCond921) Conditional ??CrossCallReturnLabel_255, ??CrossCallReturnLabel_340
        CFI (cfiCond921) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond921) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond921) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond921) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond921) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond921) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond921) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond921) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond921) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond921) CFA_SP SP+0
        CFI (cfiCond921) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond922 Using cfiCommon0
        CFI (cfiCond922) NoFunction
        CFI (cfiCond922) Conditional ??CrossCallReturnLabel_253
        CFI (cfiCond922) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond922) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond922) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond922) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond922) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond922) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond922) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond922) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond922) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond922) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond922) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond922) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond922) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond922) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond922) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond922) CFA_SP SP+0
        CFI (cfiCond922) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond923 Using cfiCommon0
        CFI (cfiCond923) NoFunction
        CFI (cfiCond923) Conditional ??CrossCallReturnLabel_254, ??CrossCallReturnLabel_43
        CFI (cfiCond923) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond923) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond923) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond923) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond923) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond923) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond923) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond923) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond923) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond923) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond923) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond923) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond923) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond923) CFA_SP SP+0
        CFI (cfiCond923) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond924 Using cfiCommon0
        CFI (cfiCond924) NoFunction
        CFI (cfiCond924) Conditional ??CrossCallReturnLabel_254, ??CrossCallReturnLabel_44
        CFI (cfiCond924) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond924) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond924) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond924) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond924) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond924) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond924) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond924) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond924) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond924) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond924) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond924) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond924) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond924) CFA_SP SP+0
        CFI (cfiCond924) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker925 Using cfiCommon1
        CFI (cfiPicker925) NoFunction
        CFI (cfiPicker925) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond919
        CFI EndBlock cfiCond920
        CFI EndBlock cfiCond921
        CFI EndBlock cfiCond922
        CFI EndBlock cfiCond923
        CFI EndBlock cfiCond924
        CFI EndBlock cfiPicker925

        RSEG XDATA_Z:XDATA:NOROOT(0)
??cmdCnt:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _slot>`:
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _join_slot>`:
        DW 48

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _gw_delay>`:
        DW 60

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _loop_delay>`:
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _datarate>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for search_stat>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for lastCycle>`:
        DW 1680

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesTo500>`:
        DW 120

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesTo10>`:
        DW 220

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesToStep500Channel>`:
        DW 20

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2Step10Channel>`:
        DW 30

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2SoftKick>`:
        DW 8

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2HardKick>`:
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for calibrationRepeat>`:
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for oscWhatToWaitFor>`:
        DB 23

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ocShortCircuitLimit>`:
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ModuleOffRememberedPtr>`:
        DW 0FFFDH

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ModuleStatusOff>`:
        DB 231

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ModuleStatusOffFetFailure>`:
        DB 126

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for alignMPP>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for gnd_shift>`:
        DW -600

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for checkForFETFailure>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for netValue>`:
        DW 50

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for si>`:
        DW 0F500H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for adcChannels>`:
        DB 113, 114, 115, 124, 118, 112, 117, 116, 118

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for indices>`:
        DB 0, 1, 2, 255, 255, 3, 255, 6, 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for theKey>`:
        DB 65, 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7
        DB 65, 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for defFreq>`:
        DD 6580906

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for the_frequency>`:
        DB 100, 106, 170

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for sleepCounter>`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for wasAHardResetOrPowerOn>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for xored>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for theShift>`:
        DW 50

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cnt>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_3f800000>`:
        DD 3F800000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_447a0000>`:
        DD 447A0000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_0>`:
        DD 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_42c80000>`:
        DD 42C80000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_c1c80000>`:
        DD 0C1C80000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_38d1b717>`:
        DD 38D1B717H

        END
// 2756 inline void rc(void){
// 2757 //    CLKCON |= OSC_BIT;                    // starting the RC Oscillator
// 2758 //    asm( "NOP" );
// 2759 //    SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
// 2760 }
// 2761 /*==== END OF FILE ==========================================================*/
// 
// 12 898 bytes in segment NEAR_CODE
//     40 bytes in segment SFR_AN
//    126 bytes in segment XDATA_I
//    126 bytes in segment XDATA_ID
//    242 bytes in segment XDATA_ROM_C
//    715 bytes in segment XDATA_Z
// 
// 13 000 bytes of CODE  memory (+ 24 bytes shared)
//    242 bytes of CONST memory
//      0 bytes of DATA  memory (+ 40 bytes shared)
//    817 bytes of XDATA memory (+ 24 bytes shared)
//
//Errors: none
//Warnings: 3
