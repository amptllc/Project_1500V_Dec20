///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   06/Apr/2017  13:54:51 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\1500V_Test2\ED\code\AndStackED\source\radio_24 /
//                          00.c                                              /
//    Command line       =  E:\1500V_Test2\ED\code\AndStackED\source\radio_24 /
//                          00.c -D NDEBUG -D chip=2510 -D LOWER_IMAGE -lA    /
//                          "E:\1500V_Test2\ED\iar\Build .hex for             /
//                          CC2510\List\" -o "E:\1500V_Test2\ED\iar\Build     /
//                          .hex for CC2510\Obj\" -e -z9 --core=plain         /
//                          --dptr=16,1 --data_model=large --code_model=near  /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\1500V_Test2\ED\iar\..\CODE\AndStackED\INCLUDE\ /
//                           -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HAL\INC /
//                          LUDE\ -I E:\1500V_Test2\ED\iar\..\CODE\LIBRARY\HA /
//                          L_BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\ /
//    List file          =  E:\1500V_Test2\ED\iar\Build .hex for              /
//                          CC2510\List\radio_2400.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME radio_2400

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC foc_bs_agc_rate12
        PUBLIC mdm_rate1
        PUBLIC perRssiOffset
        PUBLIC radioConfigure
        FUNCTION radioConfigure,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN mymemcpy
        FUNCTION mymemcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zerofill
        FUNCTION zerofill,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _gw_delay
        EXTERN _join_slot
        EXTERN _loop_delay
        EXTERN _slot
        EXTERN page

// E:\1500V_Test2\ED\code\AndStackED\source\radio_2400.c
//    1 /*
//    2 +------------------------------------------------------------------------------
//    3 | Purpose:    Functions for radio and packet handling
//    4 +------------------------------------------------------------------------------
//    5 | Decription: All functions related to radio configuration and packet
//    6 |             handling for the packet error rate test application.
//    7 +----------------------------------------------------------------------------*/
//    8 
//    9 /*==== DECLARATION CONTROL ===================================================*/
//   10 /*==== INCLUDES ==============================================================*/
//   11 //#include <string.h>
//   12 #include "hal_main.h"
//   13 #include "main.h"
//   14 #include "parameter_block.h"
//   15 
//   16 /*==== GLOBAL VARS ===========================================================*/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   17 INT16 perRssiOffset;             // RSSI offset for receiver, depends on chip model and data rate
perRssiOffset:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   18 /*==== PUBLIC FUNCTIONS ======================================================*/
//   19 /******************************************************************************
//   20 * @fn  radioConfigure
//   21 * @brief
//   22 *        Configures the radio, either CC1110 or CC2510, supporting a set
//   23 *        of preset data rates and frequency options. Also, the transmitter's
//   24 *        transmit power level and receiver's RSSI offset is set.
//   25 * Parameters:
//   26 * @param  UINT32 dataRate            Data rate in bits per second (bps)
//   27 * @param  UINT32 frequency           RX/TX radio frequency to use (kHz)
//   28 * @return void
//   29 ******************************************************************************/
//   30 //                                              0x0E  
//   31 // DF0C-DF11                                   MDMCFG4 MDMCFG3 MDMCFG2  MDMCFG1  MDMCFG0  DEVIATN
//   32 //static const 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   33 BYTE mdm_rate1[6]                           = { 0x0E,   0x55,   0x73,    0x43,    0x59,    0 };
mdm_rate1:
        DS 6
        REQUIRE `?<Initializer for mdm_rate1>`
        REQUIRE __INIT_XDATA_I
//   34 
//   35                                              // 0x69                    0xC3?
//   36 // DF0C-DF11                                   MDMCFG4 MDMCFG3 MDMCFG2  MDMCFG1  MDMCFG0  DEVIATN

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   37 static const BYTE mdm_rate3[20]             = { 0x79,   0x7,    0x01,   0x23,    0x59,     0x45, //};   
mdm_rate3:
        DS 20
        REQUIRE `?<Initializer for mdm_rate3>`
        REQUIRE __INIT_XDATA_I
//   38 //                                               *        *
//   39 // 12000                                        0x69    0x7
//   40 // 2400                                         0x76    0xA3            0x33               0x51
//   41 // 1200                                         0x75    0xA3
//   42 // DF12-DF1F                                   MCSM2 MCSM1  MCSM0  FOCCFG  BSCFG  AGCCTRL2  AGCCTRL1  AGCCTRL0  FREND1  FREND0  
//   43                                                 0x7,  0x00, 0x14,  0x16,   0x6C,  0x43,     0x40,     0x91,     0x56,   0x10,  
//   44 //                                                    0x20         0x16,   0x6C     *
//   45 // 2400                                                                           0x03
//   46 //                                             FSCAL3  FSCAL2  FSCAL1  FSCAL0
//   47                                                 0xA9,   0x0A,   0x00,   0x11 };
//   48 /*
//   49 // DF0C-DF11                                   MDMCFG4 MDMCFG3 MDMCFG2  MDMCFG1  MDMCFG0  DEVIATN
//   50 static const BYTE mdm_rate3_2400[20]        = { 0x76,   0xA3,   0x01,   0x23,    0x59,     0x51, //};   
//   51 //                                               *        *
//   52 // 12000                                        0x69    0x7
//   53 // 2400                                         0x76    0xA3            0x33               0x51
//   54 // 1200                                         0x75    0xA3
//   55 // DF12-DF1F                                   MCSM2 MCSM1  MCSM0  FOCCFG  BSCFG  AGCCTRL2  AGCCTRL1  AGCCTRL0  FREND1  FREND0  
//   56                                                 0x7,  0x00, 0x14,  0x16,   0x6C,  0x03,     0x40,     0x91,     0x56,   0x10,  
//   57 //                                                    0x20         0x16,   0x6C     *
//   58 // 2400                                                                           0x03
//   59 //                                             FSCAL3  FSCAL2  FSCAL1  FSCAL0
//   60                                                 0xA9,   0x0A,   0x00,   0x11 };
//   61 */
//   62 //                                             TEST2 TEST1 TEST0

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   63 static const BYTE tst20_defvals[3]          = { 0x81, 0x35, 0x09 }; 
tst20_defvals:
        DS 3
        REQUIRE `?<Initializer for tst20_defvals>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   64 static const BYTE tst1_defvals[3]           = { 0x88, 0x31, 0x09 }; 
tst1_defvals:
        DS 3
        REQUIRE `?<Initializer for tst1_defvals>`
        REQUIRE __INIT_XDATA_I
//   65 //                                              0x1D           0xC7                0xB2
//   66 //                                              FOCCFG  BSCFG  AGCCTRL2  AGCCTRL1  AGCCTRL0  FREND1 FREND0 FSCAL3

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   67 /*static const*/ BYTE foc_bs_agc_rate12[8]  = { 0x1D,   0x1C,  0xC7,     0x40,     0xB2,     0xB6,  0x10,  0xEA };
foc_bs_agc_rate12:
        DS 8
        REQUIRE `?<Initializer for foc_bs_agc_rate12>`
        REQUIRE __INIT_XDATA_I
//   68 //                                                                                 0x91      0x56
//   69 //  DF02-     DF04                              PKTLEN          PKTCTRL1  PKTCTRL0

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   70 static const BYTE pkt_defvals[3]            = { PACKET_LENGTH,  0x85,     0x45 };
pkt_defvals:
        DS 3
        REQUIRE `?<Initializer for pkt_defvals>`
        REQUIRE __INIT_XDATA_I
//   71 //                                                              0x80      
//   72 // 2400                                                         0xA0      0x40
//   73 
//   74 
//   75 extern ParameterBlock page;
//   76 // was 200, 5000, 5
//   77 #define MKS_IN_TICK     500
//   78 #define TICKS_IN_SEC    2000
//   79 #define TICKS_IN_MS     2
//   80 extern INT16  _slot;
//   81 extern INT16  _join_slot;
//   82 extern INT16  _gw_delay;
//   83 extern INT16  _loop_delay;
//   84 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   85 void radioConfigure( BYTE dataRate ) {
radioConfigure:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function radioConfigure
        FUNCALL radioConfigure, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL radioConfigure, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL radioConfigure, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL radioConfigure, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL radioConfigure, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL radioConfigure, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL radioConfigure, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   86     // Set modulation and other radio parameters
//   87     //if( page.use12kbod ){   
//   88         mymemcpy( (BYTE *)0xDF0C, (BYTE *)mdm_rate3,      20 );  
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x14
        MOV     R4,#(mdm_rate3 & 0xff)
        MOV     R5,#((mdm_rate3 >> 8) & 0xff)
        MOV     R2,#0xc
        MOV     R3,#-0x21
        LCALL   mymemcpy
//   89         _slot         = ( 40 * TICKS_IN_MS );
        MOV     DPTR,#_slot
        LCALL   ?Subroutine0
//   90         _join_slot    = ( 24 * TICKS_IN_MS );
??CrossCallReturnLabel_0:
        MOV     DPTR,#_join_slot
        MOV     A,#0x30
        LCALL   ??Subroutine0_0
//   91         _gw_delay     = ( 30 * TICKS_IN_MS );
??CrossCallReturnLabel_1:
        MOV     DPTR,#_gw_delay
        MOV     A,#0x3c
        LCALL   ??Subroutine0_0
//   92         _loop_delay   = ( 40 * TICKS_IN_MS );
??CrossCallReturnLabel_2:
        MOV     DPTR,#_loop_delay
        LCALL   ?Subroutine0
//   93     /*}else{
//   94         mymemcpy( (BYTE *)0xDF0C, (BYTE *)mdm_rate3_2400, 20 );
//   95         _slot         = ( 5 * 40 * TICKS_IN_MS );
//   96         _join_slot    = ( 5 * 24 * TICKS_IN_MS );
//   97         _gw_delay     = ( 5 * 30 * TICKS_IN_MS );
//   98         _loop_delay   = ( 5 * 40 * TICKS_IN_MS );
//   99     }*/
//  100     perRssiOffset = 74; FSCTRL1  = 0x0A;  // Frequency synthesizer control.
??CrossCallReturnLabel_3:
        MOV     DPTR,#perRssiOffset
        MOV     A,#0x4a
        LCALL   ??Subroutine0_0
??CrossCallReturnLabel_4:
        MOV     A,#0xa
        MOV     DPTR,#-0x20f9
        MOVX    @DPTR,A
//  101     if(dataRate > DATA_RATE_3_CC2511 ){
        MOV     A,R6
        CLR     C
        SUBB    A,#0xd
        JC      ??radioConfigure_0
//  102         // Settings from SmartRFStudio for CC2511, VERSION == 0x04
//  103         // 500 kBaud, MSK modulation, 812 kHz RX filter bandwidth.
//  104         mymemcpy( (BYTE *) 0xDF0C, (BYTE *) mdm_rate1, 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(mdm_rate1 & 0xff)
        MOV     R5,#((mdm_rate1 >> 8) & 0xff)
        MOV     R2,#0xc
        MOV     R3,#-0x21
        LCALL   mymemcpy
//  105         FSCTRL1  = 0x10;   // Frequency synthesizer control.
        MOV     A,#0x10
        MOVX    @DPTR,A
//  106         perRssiOffset = 72;// Set proper RSSI offset for receiver
        MOV     DPTR,#perRssiOffset
        MOV     A,#0x48
        LCALL   ??Subroutine0_0
//  107         mymemcpy( (BYTE *)0xDF23, (BYTE *)tst1_defvals, 3 );
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x3
        MOV     R4,#(tst1_defvals & 0xff)
        MOV     R5,#((tst1_defvals >> 8) & 0xff)
        MOV     R2,#0x23
        MOV     R3,#-0x21
        LCALL   mymemcpy
//  108         mymemcpy( (BYTE *)0xDF15, (BYTE *)foc_bs_agc_rate12, 8 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x8
        MOV     R4,#(foc_bs_agc_rate12 & 0xff)
        MOV     R5,#((foc_bs_agc_rate12 >> 8) & 0xff)
        MOV     R2,#0x15
        MOV     R3,#-0x21
        LCALL   mymemcpy
//  109         if( dataRate == DATA_RATE_2_CC2511 ){
        MOV     A,#0x19
        XRL     A,R6
        JNZ     ??radioConfigure_1
//  110             FSCTRL1  = 0x0A;
        MOV     A,#0xa
        MOV     DPTR,#-0x20f9
        MOVX    @DPTR,A
//  111             FSCAL3   = 0xA9;
        MOV     A,#-0x57
        MOV     DPTR,#-0x20e4
        MOVX    @DPTR,A
//  112             MDMCFG4  = page.bandwidth250; 
        MOV     DPTR,#(page + 163)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20f4
        MOVX    @DPTR,A
        SJMP    ??radioConfigure_1
//  113         }
//  114     }else mymemcpy( (BYTE *)0xDF23, (BYTE *)tst20_defvals, 3 );
??radioConfigure_0:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x3
        MOV     R4,#(tst20_defvals & 0xff)
        MOV     R5,#((tst20_defvals >> 8) & 0xff)
        MOV     R2,#0x23
        MOV     R3,#-0x21
        LCALL   mymemcpy
//  115     // We use P1_6, P1_7 for our timers, we do not have radio amplifiers 
//  116     zerofill( (BYTE *)0xDF2F, 3 );
??radioConfigure_1:
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x3
        MOV     R2,#0x2f
        MOV     R3,#-0x21
        LCALL   zerofill
//  117     mymemcpy( (BYTE *)0xDF02, (BYTE *)pkt_defvals, 3 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x3
        MOV     R4,#(pkt_defvals & 0xff)
        MOV     R5,#((pkt_defvals >> 8) & 0xff)
        MOV     R2,#0x2
        MOV     R3,#-0x21
        LCALL   mymemcpy
//  118     /*
//  119     if( datarate == DATA_RATE_4_CC2511 ){
//  120         MDMCFG4  = 0x76;
//  121         MDMCFG3  = 0xA3;  
//  122         MDMCFG1  = 0x33;  // 6 bytes preamble
//  123         AGCCTRL2 = 0x03;
//  124         PKTCTRL1 = 0xA0;  //
//  125         PKTCTRL0 = 0x40;  // fixed packed length mode
//  126         PKTLEN   = 32;
//  127         DEVIATN  = 0x53;  // 64.453125 kHz
//  128     }
//  129     */
//  130     //return;
//  131 }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     A,#0x50
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 8)
??Subroutine0_0:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for mdm_rate1>`:
        DB 14, 85, 115, 67, 89, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for mdm_rate3>`:
        DB 121, 7, 1, 35, 89, 69, 7, 0, 20, 22, 108, 67, 64, 145, 86, 16, 169
        DB 10, 0, 17

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for tst20_defvals>`:
        DB 129, 53, 9

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for tst1_defvals>`:
        DB 136, 49, 9

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for foc_bs_agc_rate12>`:
        DB 29, 28, 199, 64, 178, 182, 16, 234

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for pkt_defvals>`:
        DB 34, 133, 69

        END
//  132 /*==== END OF FILE ==========================================================*/
// 
// 192 bytes in segment NEAR_CODE
//  43 bytes in segment XDATA_I
//  43 bytes in segment XDATA_ID
//   2 bytes in segment XDATA_Z
// 
// 235 bytes of CODE  memory
//  45 bytes of XDATA memory
//
//Errors: none
//Warnings: none
