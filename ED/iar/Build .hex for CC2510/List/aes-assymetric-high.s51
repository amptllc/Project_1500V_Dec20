///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   02/Apr/2018  11:06:25 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\Project_1500V_dec20\ED\code\AndStackED\source\ /
//                          aes-assymetric-high.c                             /
//    Command line       =  E:\Project_1500V_dec20\ED\code\AndStackED\source\ /
//                          aes-assymetric-high.c -D NDEBUG -D chip=2510 -D   /
//                          MidString -D MIDSTRING -D ASSYMETRIC_HIGH -lA     /
//                          "E:\Project_1500V_dec20\ED\iar\Build .hex for     /
//                          CC2510\List\" -o "E:\Project_1500V_dec20\ED\iar\B /
//                          uild .hex for CC2510\Obj\" -e -z9 --core=plain    /
//                          --dptr=16,1 --data_model=large --code_model=near  /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\Project_1500V_dec20\ED\iar\..\CODE\AndStackED\ /
//                          INCLUDE\ -I E:\Project_1500V_dec20\ED\iar\..\CODE /
//                          \LIBRARY\HAL\INCLUDE\ -I                          /
//                          E:\Project_1500V_dec20\ED\iar\..\CODE\LIBRARY\HAL /
//                          _BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\  /
//    List file          =  E:\Project_1500V_dec20\ED\iar\Build .hex for      /
//                          CC2510\List\aes-assymetric-high.s51               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME `aes-assymetric-high`

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        PUBWEAK ENCCS
        PUBWEAK ENCDI
        PUBWEAK ENCDO
        PUBLIC `code`
        FUNCTION `code`,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC load
        FUNCTION load,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC wait_aes
        FUNCTION wait_aes,080203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
// E:\Project_1500V_dec20\ED\code\AndStackED\source\aes-assymetric-high.c
//    1 #include "hal_main.h"

        ASEGN SFR_AN:DATA:NOROOT,0b1H
// unsigned char volatile __sfr ENCDI
ENCDI:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b2H
// unsigned char volatile __sfr ENCDO
ENCDO:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b3H
// unsigned char volatile __sfr ENCCS
ENCCS:
        DS 1
//    2 
//    3 #define AES_SIZE 16
//    4 #define NOPS     12
//    5 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//    6 void load(const unsigned char what, char *ptr){
load:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function load
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//    7 unsigned char i;
//    8     ENCCS = what | 0x01;
        MOV     A,#0x1
        ORL     A,R1
        MOV     0xb3,A
//    9     i = AES_SIZE; while( i-- ) ENCDI = *ptr++;
        MOV     R4,#0x10
        SJMP    ??load_0
??load_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     0xb1,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
??load_0:
        MOV     A,R4
        DEC     R4
        JNZ     ??load_1
        CFI EndBlock cfiBlock0
//   10 }
        REQUIRE ?Subroutine0
        REQUIRE ENCDI
        REQUIRE ENCCS
        ; // Fall through to label ?Subroutine0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        POP     DPH
        CFI CFA_SP SP+-3
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-2
        CFI DPL0 SameValue
        RET
        CFI EndBlock cfiBlock1
//   11 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   12 void wait_aes(void){ 
wait_aes:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function wait_aes
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??wait_aes_0
//   13     while((ENCCS & 0x08) == 0) asm("NOP"); 
??wait_aes_1:
        NOP
??wait_aes_0:
        MOV     A,0xb3
        MOV     C,0xE0 /* A   */.3
        JNC     ??wait_aes_1
//   14     //asm( "WC2: MOV A, 0xB3" );
//   15     //asm( "ANL  A, #8h" );
//   16     //asm( "JZ   WC2" );  
//   17 }
        RET
        CFI EndBlock cfiBlock2
        REQUIRE ENCCS
//   18 
//   19 //void wait_aes( void );
//   20 //void wait_nops( void );

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   21 void code(    unsigned char what, char *from, char *to ){
`code`:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function `code`
        FUNCALL `code`, load
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `code`, wait_aes
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R4
        MOV     DPH,R5
//   22     unsigned char i;//, cnt;
//   23     //if( (size % AES_SIZE) == 0 ){
//   24         //for( cnt = size / AES_SIZE; cnt; cnt--, from+=AES_SIZE ){
//   25             load( what, from );
        ; Setup parameters for call to function load
        LCALL   load
//   26             i = NOPS;     while( i-- ) asm("NOP"); 
        MOV     R2,#0xc
        SJMP    ??code_0
??code_1:
        NOP
??code_0:
        MOV     A,R2
        DEC     R2
        JNZ     ??code_1
//   27             //asm( "MOV R1, #0x20"); asm("WAIT_NOPS: NOP"); asm( "DJNZ R1, WAIT_NOPS" );
//   28             //wait_nops();
//   29             i = AES_SIZE; while( i-- ) *to++ = ENCDO;
        MOV     R2,#0x10
        SJMP    ??code_2
??code_3:
        MOV     A,0xb2
        MOVX    @DPTR,A
        INC     DPTR
??code_2:
        MOV     A,R2
        DEC     R2
        JNZ     ??code_3
//   30             wait_aes();
        ; Setup parameters for call to function wait_aes
        LCALL   wait_aes
//   31         //}
//   32     //}
//   33 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
        REQUIRE ENCDO

        END
//   34 /*
//   35 void loadKey( char *key ){ load( 0x04, key ); wait(); }
//   36 void loadIV(  char *iv ){  load( 0x06, iv  ); wait(); }
//   37 void encode( unsigned char size,  char *from, char *to ){ code( 0x00, size, from, to ); }
//   38 void decode( unsigned char size,  char *from, char *to ){ code( 0x02, size, from, to ); }
//   39 */
// 
// 81 bytes in segment NEAR_CODE
//  3 bytes in segment SFR_AN
// 
// 81 bytes of CODE memory
//  0 bytes of DATA memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
