###############################################################################
#                                                                             #
# IAR 8051 C/C++ Compiler V7.30B/W32                    02/Apr/2018  11:06:32 #
# Copyright 2004-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\Project_1500V_dec20\ED\code\AndStackED\source\d #
#                          ma.c                                               #
#    Command line       =  E:\Project_1500V_dec20\ED\code\AndStackED\source\d #
#                          ma.c -D NDEBUG -D chip=2510 -D LOWER_IMAGE -D      #
#                          MidString -D MIDSTRING -lCN                        #
#                          "E:\Project_1500V_dec20\ED\iar\Build .hex for      #
#                          CC2510\List\" -lA "E:\Project_1500V_dec20\ED\iar\B #
#                          uild .hex for CC2510\List\" -o                     #
#                          "E:\Project_1500V_dec20\ED\iar\Build .hex for      #
#                          CC2510\Obj\" -e -z9 --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 32 -I     #
#                          E:\Project_1500V_dec20\ED\iar\..\CODE\AndStackED\I #
#                          NCLUDE\ -I E:\Project_1500V_dec20\ED\iar\..\CODE\L #
#                          IBRARY\HAL\INCLUDE\ -I E:\Project_1500V_dec20\ED\i #
#                          ar\..\CODE\LIBRARY\HAL_BUI\INCLUDE\ -I             #
#                          C:\IARSystems-CD-730B\8051\INC\                    #
#    List file          =  E:\Project_1500V_dec20\ED\iar\Build .hex for       #
#                          CC2510\List\dma.lst                                #
#    Object file        =  E:\Project_1500V_dec20\ED\iar\Build .hex for       #
#                          CC2510\Obj\dma.r51                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\Project_1500V_dec20\ED\code\AndStackED\source\dma.c
      1          /*-----------------------------------------------------------------------------
      2          | Purpose:    Functions for setup of DMA used with radio.
      3          +------------------------------------------------------------------------------
      4          | Decription: Functions to configure the DMA channel 0 for transport of data
      5          |             either to or from the radio. For use by packet error rate test
      6          |             application.
      7          +----------------------------------------------------------------------------*/
      8          
      9          /*==== DECLARATION CONTROL ===================================================*/
     10          /*==== INCLUDES ==============================================================*/
     11          
     12          #include "hal_main.h"

   \                                 In  segment SFR_AN, at 0xd2
   \   unsigned char volatile __sfr DMA1CFGL
   \                     DMA1CFGL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd3
   \   unsigned char volatile __sfr DMA1CFGH
   \                     DMA1CFGH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd4
   \   unsigned char volatile __sfr DMA0CFGL
   \                     DMA0CFGL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd5
   \   unsigned char volatile __sfr DMA0CFGH
   \                     DMA0CFGH:
   \   000000                DS 1
     13          #include "dma.h"
     14          #include "main.h"
     15          
     16          
     17          /*==== GLOBAL VARS============================================================*/
     18          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          BYTE radioPktBuffer[  PACKET_LENGTH_ED + 3];
   \                     radioPktBuffer:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          BYTE radioPktBufferRx[PACKET_LENGTH_GW + 3];  // to accomodate maximum possible package
   \                     radioPktBufferRx:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          BYTE radioPktBufferTx[PACKET_LENGTH_ED + 3];
   \                     radioPktBufferTx:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     22          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     23          DMA_DESC dmaConfig[3];                  // Struct for the DMA configuration
   \                     dmaConfig:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
     24          
     25          /*==== PUBLIC FUNCTIONS ======================================================*/
     26          
     27          /******************************************************************************
     28          * @fn  dmaRadioSetup
     29          *
     30          * @brief
     31          *      This funtion configures the static dmaConfig struct with the correct
     32          *      values for receiving or transmitting data using the DMA.
     33          *
     34          * Parameters:
     35          *
     36          * @param  BYTE mode
     37          *           Either RADIO_MODE_TX or RADIO_MODE_RX to select transmitter or
     38          *           receiver settings
     39          *
     40          * @return void
     41          *
     42          ******************************************************************************/
     43          
     44          extern BYTE *pagePtr;
     45          
     46          #define PAGESIZE 248
     47          
     48          //void setupTxBuffer( BYTE *ptr ){ SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, ptr); }
     49          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     50          void dmaRadioSetup(void){
   \                     dmaRadioSetup:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     51              // Some configuration that are common for both TX and RX:
     52          /*
     53              // CPU has priority over DMA
     54              // Use 8 bits for transfer count
     55              // No DMA interrupt when done
     56              // DMA triggers on radio
     57              // Single transfer per trigger.
     58              // One byte is transferred each time.
     59              dmaConfig.PRIORITY       = DMA_PRI_LOW;
     60              dmaConfig.M8             = DMA_M8_USE_8_BITS;
     61              dmaConfig.IRQMASK        = DMA_IRQMASK_DISABLE;
     62              dmaConfig.TRIG           = DMA_TRIG_RADIO;
     63              dmaConfig.TMODE          = DMA_TMODE_SINGLE;
     64              dmaConfig.WORDSIZE       = DMA_WORDSIZE_BYTE;
     65          */
     66              //}else if (mode == RADIO_MODE_RX) {
     67          
     68                  dmaConfig[0].PRIORITY       = DMA_PRI_LOW;
     69                  dmaConfig[0].M8             = DMA_M8_USE_8_BITS;
     70                  dmaConfig[0].IRQMASK        = DMA_IRQMASK_DISABLE;
   \   000004   90....       MOV     DPTR,#(dmaConfig + 7)
   \   000007   E0           MOVX    A,@DPTR
   \   000008   54F0         ANL     A,#0xf0
   \   00000A   F0           MOVX    @DPTR,A
     71                  dmaConfig[0].TRIG           = DMA_TRIG_RADIO;
     72                  dmaConfig[0].TMODE          = DMA_TMODE_SINGLE;
     73                  dmaConfig[0].WORDSIZE       = DMA_WORDSIZE_BYTE;
   \   00000B   7413         MOV     A,#0x13
   \   00000D   90....       MOV     DPTR,#(dmaConfig + 6)
   \   000010   F0           MOVX    @DPTR,A
     74                  // Receiver specific DMA settings:
     75          
     76                  // Source: RFD register
     77                  // Destination: radioPktBuffer
     78                  // Use the first byte read + 3 (incl. 2 status bytes)
     79                  // Sets maximum transfer count allowed (length byte + data + 2 status bytes)
     80                  // Data source address is constant
     81                  // Destination address is incremented by 1 byte for each write
     82                  SET_WORD(dmaConfig[0].SRCADDRH,  dmaConfig[0].SRCADDRL, &X_RFD);
   \   000011   74DF         MOV     A,#-0x21
   \   000013   90....       MOV     DPTR,#dmaConfig
   \   000016   F0           MOVX    @DPTR,A
   \   000017   74D9         MOV     A,#-0x27
   \   000019   90....       MOV     DPTR,#(dmaConfig + 1)
   \   00001C   F0           MOVX    @DPTR,A
     83                  SET_WORD(dmaConfig[0].DESTADDRH, dmaConfig[0].DESTADDRL, radioPktBufferRx);
   \   00001D   74..         MOV     A,#((radioPktBufferRx >> 8) & 0xff)
   \   00001F   90....       MOV     DPTR,#(dmaConfig + 2)
   \   000022   F0           MOVX    @DPTR,A
   \   000023   74..         MOV     A,#(radioPktBufferRx & 0xff)
   \   000025   90....       MOV     DPTR,#(dmaConfig + 3)
   \   000028   F0           MOVX    @DPTR,A
     84                  dmaConfig[0].VLEN           = DMA_VLEN_FIRST_BYTE_P_3;
     85                  SET_WORD(dmaConfig[0].LENH, dmaConfig[0].LENL, (PACKET_LENGTH_GW + 3));
   \   000029   7480         MOV     A,#-0x80
   \   00002B   90....       MOV     DPTR,#(dmaConfig + 4)
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   7425         MOV     A,#0x25
   \   000031   90....       MOV     DPTR,#(dmaConfig + 5)
   \   000034   F0           MOVX    @DPTR,A
     86                  dmaConfig[0].SRCINC         = DMA_SRCINC_0;
     87                  dmaConfig[0].DESTINC        = DMA_DESTINC_1;
   \   000035   7410         MOV     A,#0x10
   \   000037   90....       MOV     DPTR,#(dmaConfig + 7)
   \   00003A   F0           MOVX    @DPTR,A
     88                  
     89              //if (mode == RADIO_MODE_TX) {
     90                  
     91                  SET_WORD(DMA0CFGH, DMA0CFGL, &dmaConfig);
   \   00003B   74..         MOV     A,#((dmaConfig >> 8) & 0xff)
   \   00003D   F5D5         MOV     0xd5,A
   \   00003F   75D4..       MOV     0xd4,#(dmaConfig & 0xff)
     92                  // Transmitter specific DMA settings
     93          
     94                  // Source: radioPktBuffer
     95                  // Destination: RFD register
     96                  // Use the first byte read + 1
     97                  // Sets the maximum transfer count allowed (length byte + data)
     98                  // Data source address is incremented by 1 byte
     99                  // Destination address is constant
    100                  dmaConfig[1].PRIORITY       = DMA_PRI_LOW;
    101                  dmaConfig[1].M8             = DMA_M8_USE_8_BITS;
    102                  dmaConfig[1].IRQMASK        = DMA_IRQMASK_DISABLE;
   \   000042   90....       MOV     DPTR,#(dmaConfig + 15)
   \   000045   E0           MOVX    A,@DPTR
   \   000046   54F0         ANL     A,#0xf0
   \   000048   F0           MOVX    @DPTR,A
    103                  dmaConfig[1].TRIG           = DMA_TRIG_RADIO;
    104                  dmaConfig[1].TMODE          = DMA_TMODE_SINGLE;
    105                  dmaConfig[1].WORDSIZE       = DMA_WORDSIZE_BYTE;
   \   000049   7413         MOV     A,#0x13
   \   00004B   90....       MOV     DPTR,#(dmaConfig + 14)
   \   00004E   F0           MOVX    @DPTR,A
    106                  
    107                  SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, radioPktBufferTx);
   \   00004F   74..         MOV     A,#((radioPktBufferTx >> 8) & 0xff)
   \   000051   90....       MOV     DPTR,#(dmaConfig + 8)
   \   000054   F0           MOVX    @DPTR,A
   \   000055   74..         MOV     A,#(radioPktBufferTx & 0xff)
   \   000057   90....       MOV     DPTR,#(dmaConfig + 9)
   \   00005A   F0           MOVX    @DPTR,A
    108                  SET_WORD(dmaConfig[1].DESTADDRH, dmaConfig[1].DESTADDRL, &X_RFD);
   \   00005B   74DF         MOV     A,#-0x21
   \   00005D   90....       MOV     DPTR,#(dmaConfig + 10)
   \   000060   F0           MOVX    @DPTR,A
   \   000061   74D9         MOV     A,#-0x27
   \   000063   90....       MOV     DPTR,#(dmaConfig + 11)
   \   000066   F0           MOVX    @DPTR,A
    109                  dmaConfig[1].VLEN           = DMA_VLEN_FIRST_BYTE_P_1;
    110                  SET_WORD(dmaConfig[1].LENH, dmaConfig[1].LENL, (PACKET_LENGTH_ED + 1));
   \   000067   7420         MOV     A,#0x20
   \   000069   90....       MOV     DPTR,#(dmaConfig + 12)
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   7423         MOV     A,#0x23
   \   00006F   90....       MOV     DPTR,#(dmaConfig + 13)
   \   000072   F0           MOVX    @DPTR,A
    111                  dmaConfig[1].SRCINC         = DMA_SRCINC_1;
    112                  dmaConfig[1].DESTINC        = DMA_DESTINC_0;
   \   000073   7440         MOV     A,#0x40
   \   000075   90....       MOV     DPTR,#(dmaConfig + 15)
   \   000078   F0           MOVX    @DPTR,A
    113                  
    114                  dmaConfig[2].PRIORITY       = DMA_PRI_LOW;                    // DMA has priority over CPU - as recommended
    115                  dmaConfig[2].M8             = DMA_M8_USE_8_BITS;               // Use 8 bits for transfer count
    116                  dmaConfig[2].IRQMASK        = DMA_IRQMASK_ENABLE;              // DMA interrupt when done
   \   000079   90....       MOV     DPTR,#(dmaConfig + 23)
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   54F8         ANL     A,#0xf8
   \   00007F   4408         ORL     A,#0x8
   \   000081   FA           MOV     R2,A
   \   000082   F0           MOVX    @DPTR,A
    117                  dmaConfig[2].TRIG           = DMA_TRIG_FLASH;                  // DMA triggers on flash
    118                  dmaConfig[2].TMODE          = DMA_TMODE_SINGLE;                // Single transfer per trigger.
    119                  dmaConfig[2].WORDSIZE       = DMA_WORDSIZE_BYTE;               // One byte is transferred each time.
   \   000083   7412         MOV     A,#0x12
   \   000085   90....       MOV     DPTR,#(dmaConfig + 22)
   \   000088   F0           MOVX    @DPTR,A
    120          
    121                  //SET_WORD(dmaConfig[2].SRCADDRH,  dmaConfig[2].SRCADDRL,  pagePtr);     // Source: ptr
    122                  dmaConfig[2].VLEN           = DMA_VLEN_USE_LEN;
   \   000089   90....       MOV     DPTR,#(dmaConfig + 20)
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   541F         ANL     A,#0x1f
   \   00008F   F0           MOVX    @DPTR,A
    123                  SET_WORD(dmaConfig[2].DESTADDRH, dmaConfig[2].DESTADDRL, 0xDFAF );   // Destination: FWDATA register
   \   000090   74DF         MOV     A,#-0x21
   \   000092   90....       MOV     DPTR,#(dmaConfig + 18)
   \   000095   F0           MOVX    @DPTR,A
   \   000096   74AF         MOV     A,#-0x51
   \   000098   90....       MOV     DPTR,#(dmaConfig + 19)
   \   00009B   F0           MOVX    @DPTR,A
    124                  dmaConfig[2].LENH = 0;
   \   00009C   E4           CLR     A
   \   00009D   90....       MOV     DPTR,#(dmaConfig + 20)
   \   0000A0   F0           MOVX    @DPTR,A
    125                  dmaConfig[2].LENL = PAGESIZE;      // Sets the maximum transfer count allowed (length byte + data)
   \   0000A1   74F8         MOV     A,#-0x8
   \   0000A3   90....       MOV     DPTR,#(dmaConfig + 21)
   \   0000A6   F0           MOVX    @DPTR,A
    126                  dmaConfig[2].SRCINC         = DMA_SRCINC_1;                    // Data source address is incremented by 1 byte
    127                  dmaConfig[2].DESTINC        = DMA_DESTINC_0;                   // Destination address is constant
   \   0000A7   740F         MOV     A,#0xf
   \   0000A9   5A           ANL     A,R2
   \   0000AA   4440         ORL     A,#0x40
   \   0000AC   90....       MOV     DPTR,#(dmaConfig + 23)
   \   0000AF   F0           MOVX    @DPTR,A
    128                  
    129              //}
    130              // Save pointer to the DMA configuration struct into DMA-channel 0
    131              // configuration registers
    132                  
    133                  SET_WORD(DMA1CFGH, DMA1CFGL, &dmaConfig[1]);
   \   0000B0   74..         MOV     A,#(((dmaConfig + 8) >> 8) & 0xff)
   \   0000B2   F5D3         MOV     0xd3,A
   \   0000B4   75D2..       MOV     0xd2,#((dmaConfig + 8) & 0xff)
    134                  
    135              return;
   \   0000B7   D083         POP     DPH
   \   0000B9   D082         POP     DPL
   \   0000BB   22           RET
   \   0000BC                REQUIRE DMA1CFGL
   \   0000BC                REQUIRE DMA1CFGH
   \   0000BC                REQUIRE DMA0CFGL
   \   0000BC                REQUIRE DMA0CFGH
    136          }
    137          
    138          
    139          /*==== END OF FILE ==========================================================*/

   Maximum stack usage in bytes:

     Function      ISTACK PSTACK XSTACK
     --------      ------ ------ ------
     dmaRadioSetup     2      0      0


   Segment part sizes:

     Function/Label   Bytes
     --------------   -----
     DMA1CFGL            1
     DMA1CFGH            1
     DMA0CFGL            1
     DMA0CFGH            1
     radioPktBuffer     37
     radioPktBufferRx   37
     radioPktBufferTx   37
     dmaConfig          24
     dmaRadioSetup     188

 
 188 bytes in segment NEAR_CODE
   4 bytes in segment SFR_AN
 135 bytes in segment XDATA_Z
 
 188 bytes of CODE  memory
   0 bytes of DATA  memory (+ 4 bytes shared)
 135 bytes of XDATA memory

Errors: none
Warnings: none
