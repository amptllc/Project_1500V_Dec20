///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   28/Dec/2013  14:41:50 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\ProjectsE\ED\code\AndStackED\source\dummy.c    /
//    Command line       =  E:\ProjectsE\ED\code\AndStackED\source\dummy.c    /
//                          -D NDEBUG -D chip=2510 -lA                        /
//                          "E:\ProjectsE\ED\iar\Build .hex for               /
//                          CC2510\List\" -o "E:\ProjectsE\ED\iar\Build .hex  /
//                          for CC2510\Obj\" -e -z9 --core=plain --dptr=16,1  /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 32   /
//                          -I E:\ProjectsE\ED\iar\..\CODE\AndStackED\INCLUDE /
//                          \ -I E:\ProjectsE\ED\iar\..\CODE\LIBRARY\HAL\INCL /
//                          UDE\ -I E:\ProjectsE\ED\iar\..\CODE\LIBRARY\HAL_B /
//                          UI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\    /
//    List file          =  E:\ProjectsE\ED\iar\Build .hex for                /
//                          CC2510\List\dummy.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME dummy

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        PUBWEAK CLKCON
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK P2SEL
        PUBWEAK PERCFG
        PUBWEAK SLEEP
        PUBWEAK T3CC0
        PUBWEAK T3CC1
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CTL
        PUBWEAK WDCTL
        PUBWEAK _A_P1
        PUBLIC main
        FUNCTION main,080a03H
        ARGFRAME XSTACK, 0, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
// E:\ProjectsE\ED\code\AndStackED\source\dummy.c
//    1 #include "hal_main.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEP
SLEEP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCON
CLKCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cdH
// unsigned char volatile __sfr T3CC0
T3CC0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cfH
// unsigned char volatile __sfr T3CC1
T3CC1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1

        RSEG NEAR_CODE:CODE:NOROOT(0)
//    2 void main(void){
main:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function main
        ; Auto size: 0
//    3     // 2 top pins are secial function - timer 3 channels
//    4     P1SEL   = 0xC0;                          
        MOV     0xf4,#-0x40
//    5     // pins 7(oc) 6(ov) 4(on/off), 3(mpp), 1(LED), 0(mpp cycle) are for output
//    6     P1DIR   = 0xDB;   // 1101 1011
        MOV     0xfe,#-0x25
//    7 
//    8     T3CTL   = 0x50; // was 0x70, prescaler 1/4, normal operation, mode - free running
        MOV     0xcb,#0x50
//    9     T3CCTL0 = 0x24; // clear output on compare up, set on 0, enabled
        MOV     0xcc,#0x24
//   10     T3CCTL1 = 0x24; // clear output on compare up, set on 0, enabled
        MOV     0xce,#0x24
//   11     PERCFG  = 0x20; // Timer3 has alternate 2 location - P1_6 & P1_7
        MOV     0xf1,#0x20
//   12     P2SEL   = 0x20; // Timer3 has priority over USART1
        MOV     0xf5,#0x20
//   13     
//   14     T3CC0 = 128; T3CC1 = 64;
        MOV     0xcd,#-0x80
        MOV     0xcf,#0x40
//   15     P1_4 = 1;
        SETB    0x90.4
//   16 
//   17     { //BYTE counter = 127, i, j;
//   18       SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
        SJMP    ??main_0
//   19       /*
//   20       while(!XOSC_STABLE && counter-- )       // waiting until the oscillator is stable
//   21           for( i = 0; i<127; i++ )
//   22               for( j = 0; j<127; j++ )
//   23                    P1_1 ^= 1;
//   24       */
//   25       asm("NOP");
//   26       //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
//   27       CLKCON = 0x80;  // was 0x89  
//   28       SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
//   29     }
//   30     
//   31     while( TRUE ){ 
//   32         if( PARTNUM != 0x81 ){ WDCTL = 0x8; while( TRUE ) P1_2 ^= 1; }//PARTNUM = 0x81; //break;
//   33         P1_1 ^= 1; 
??main_1:
        XRL     0x90,#0x2
        MOV     A,0x90
//   34         //if( CLKCON != 0x80 ) {
//   35           SLEEP &= 0xFC;
        ANL     0xbe,#0xfc
        MOV     A,0xbe
//   36           SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
??main_0:
        ANL     0xbe,#0xfb
//   37           asm("NOP");
        NOP
//   38           //CLKCON &= ~MAIN_OSC_BITS; // starting the Crystal Oscillator
//   39           CLKCON = 0x80;  // was 0x89  
        MOV     0xc6,#-0x80
//   40           SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
        ORL     0xbe,#0x4
        MOV     DPTR,#-0x20ca
        MOVX    A,@DPTR
        XRL     A,#0x81
        JZ      ??main_1
        MOV     0xc9,#0x8
??main_2:
        XRL     0x90,#0x4
        MOV     A,0x90
        SJMP    ??main_2
        CFI EndBlock cfiBlock0
        REQUIRE _A_P1
        REQUIRE SLEEP
        REQUIRE CLKCON
        REQUIRE WDCTL
        REQUIRE T3CTL
        REQUIRE T3CCTL0
        REQUIRE T3CC0
        REQUIRE T3CCTL1
        REQUIRE T3CC1
        REQUIRE PERCFG
        REQUIRE P1SEL
        REQUIRE P2SEL
        REQUIRE P1DIR
//   41         
//   42         //}
//   43     }
//   44 }

        END
// 
// 69 bytes in segment NEAR_CODE
// 13 bytes in segment SFR_AN
// 
// 69 bytes of CODE memory
//  0 bytes of DATA memory (+ 13 bytes shared)
//
//Errors: none
//Warnings: none
