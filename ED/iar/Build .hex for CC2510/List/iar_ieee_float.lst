###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

      1    000000          ;       TITL    '8051 - IEEE Floating point
                            arithmetics'
      2    000000          ;---------------------------------------------------
                           --------------------------
      3    000000          ;
      4    000000          ;   Revision control system
      5    000000          ;       $Id: iar_ieee_float.s51 1.28 2007/06/07
                            09:21:52Z larssu Exp $
      6    000000          ;
      7    000000          ;
      8    000000          ;       File:           iar_ieee_float.s51
      9    000000          ;
     10    000000          ;       Version:        1.00
     11    000000          ;
     12    000000          ;       Created:        2003 by IANB for version 6
                            of the 8051 C-compiler.
     13    000000          ;
     14    000000          ;       Description:    This file contain the
                            floating point arithmetics
     15    000000          ;                       and cast operations.
                            
     16    000000          ;
     17    000000          ;       Entries:        ?FLT_ADD               
                            ?FLT_ADD_REW
     18    000000          ;                       ?FLT_DIV               
                            ?FLT_DIV_REW
     19    000000          ;                       ?FLT_MUL               
                            ?FLT_MUL_REW
     20    000000          ;                       ?FLT_SUB               
                            ?FLT_SUB_REW
     21    000000          ;
     22    000000          ;                       ?FLT_EQ                
                            ?FLT_EQ_REW
     23    000000          ;                       ?FLT_GE                
                            ?FLT_GE_REW
     24    000000          ;                       ?FLT_LT                
                            ?FLT_LT_REW
     25    000000          ;
     26    000000          ;                       ?FLT_TO_L              
                            ?FLT_TO_L_REW
     27    000000          ;                       ?FLT_TO_UL             
                            ?FLT_TO_UL_REW
     28    000000          ;                       ?L_TO_FLT              
                            ?L_TO_FLT_REW
     29    000000          ;                       ?UL_TO_FLT             
                            ?UL_TO_FLT_REW
     30    000000          ;
     31    000000          ;                       ?FLT_TEST_INF          
                            ?FLT_TEST_INF_REW
     32    000000          ;                       ?FLT_TEST_NAN          
                            ?FLT_TEST_NAN_REW
     33    000000          ;                       ?FLT_TEST_ZERO         
                            ?FLT_TEST_ZERO_REW
     34    000000          ;
     35    000000          ;                       ?FLT_TEST_INF_R1       
                            ?FLT_TEST_INF_R1_REW
     36    000000          ;                       ?FLT_TEST_NAN_R1       
                            ?FLT_TEST_NAN_R1_REW
     37    000000          ;                       ?FLT_TEST_ZERO_R1      
                            ?FLT_TEST_ZERO_R1_REW
     38    000000          ;
     39    000000          ;---------------------------------------------------
                           --------------------------
     40    000000          
     41    000000          #include "iar_common.h"
     42    000000          
     43    000000          #define Bias 127
     44    000000          
     45    000000          ;---------------------------------------------------
                           --------------------------
     46    000000          ;
     47    000000          ;       Functions: Cast operations
     48    000000          ;
     49    000000          ;- - - - - - - - - - - - - - - - - - - - - - - - - -
                            - - - - - - - - - - - - -
     50    000000          ;
     51    000000          ;       Function: ?L_TO_FLT
     52    000000          ;       Function: ?UL_TO_FLT
     53    000000          ;
     54    000000          ;       Description: Cast signed/unsigned long to a
                            float.
     55    000000          ;
     56    000000          ;       Register input:
     57    000000          ;               R0 Points to LSB in the source/desti
                           nation object
     58    000000          ;
     59    000000          ;       Register output:
     60    000000          ;               A    = R1
     61    000000          ;               R0   = R0
     62    000000          ;               CY   = Undefined
     63    000000          ;
     64    000000          ;       Stack usage: 2/4
     65    000000          ;
     66    000000          ;---------------------------------------------------
                           --------------------------
     67    000000                  MODULE  ?L_TO_FLT
     68    000000                  RSEG    RCODE:CODE:NOROOT       
     69    000000                  PUBLIC  ?L_TO_FLT
     70    000000                  PUBLIC  ?L_TO_FLT_REW
     71    000000                  PUBLIC  ?UL_TO_FLT
     72    000000                  PUBLIC  ?UL_TO_FLT_REW
     73    000000                  EXTERN  ?L_NEG_REW
     74    000000              cfi BLOCK ?L_TO_FLT USING cfi_common
     75    000000              cfi NOFUNCTION
     76    000000          
     77    000000              cfi A undefined
     78    000000              cfi R0 undefined
     79    000000          
     80    000000          ?L_TO_FLT:
     81    000000          
     82    000000 08               INC     R0
     83    000001 08               INC     R0
     84    000002 08               INC     R0
     85    000003          
     86    000003              cfi ENDBLOCK ?L_TO_FLT
     87    000003                  REQUIRE x
     88    000003          
     89    000003          ;---------------------------------------------------
                           --
     90    000003          ;
     91    000000                  RSEG    RCODE:CODE:NOROOT
     92    000000              cfi BLOCK ?L_TO_FLT_REW USING cfi_common
     93    000000              cfi NOFUNCTION
     94    000000              cfi A undefined
     95    000000              cfi R0 undefined
     96    000000          
     97    000000          x:
     98    000000          ?L_TO_FLT_REW:
     99    000000          
    100    000000 E6               MOV     A,@R0
    101    000001 30E7..           JNB     ACC.7,?UL_TO_FLT_REW
    102    000004 12....           LCALL   ?L_NEG_REW
    103    000007 12....           LCALL   ?UL_TO_FLT_REW
    104    00000A 08               INC     R0
    105    00000B 08               INC     R0
    106    00000C 08               INC     R0
    107    00000D C6               XCH     A,@R0
    108    00000E 4480             ORL     A,#128
    109    000010 C6               XCH     A,@R0
    110    000011 18               DEC     R0
    111    000012 18               DEC     R0
    112    000013 18               DEC     R0
    113    000014 22               RET
    114    000015          
    115    000015              cfi ENDBLOCK ?L_TO_FLT_REW
    116    000015                  REQUIRE y
    117    000015          
    118    000015          ;---------------------------------------------------
                           --
    119    000015          ;
    120    000000                  RSEG    RCODE:CODE:NOROOT
    121    000000              cfi BLOCK ?UL_TO_FLT_REW USING cfi_common
    122    000000              cfi NOFUNCTION
    123    000000              cfi A undefined
    124    000000              cfi R0 undefined
    125    000000              cfi R1 undefined
    126    000000              cfi R2 undefined
    127    000000              cfi R3 undefined
    128    000000              cfi R4 undefined
    129    000000          
    130    000000          ?UL_TO_FLT_REW:
    131    000000          
    132    000000 18               DEC     R0
    133    000001 18               DEC     R0
    134    000002 18               DEC     R0
    135    000003          
    136    000003              cfi ENDBLOCK ?UL_TO_FLT_REW
    137    000003                  REQUIRE y
    138    000003          
    139    000003          ;---------------------------------------------------
                           --
    140    000003          ;
    141    000000                  RSEG    RCODE:CODE:NOROOT
    142    000000              cfi BLOCK ?UL_TO_FLT USING cfi_common
    143    000000              cfi NOFUNCTION
    144    000000              cfi A undefined
    145    000000              cfi R0 undefined
    146    000000              cfi R1 undefined
    147    000000              cfi R2 undefined
    148    000000              cfi R3 undefined
    149    000000              cfi R4 undefined
    150    000000          
    151    000000          y:
    152    000000          ?UL_TO_FLT:
    153    000000          
    154    000000          ;
    155    000000          ; Read up the unsigned long value into
    156    000000          ; registers and save the registers
    157    000000          ; original values at the same time
    158    000000          ;
    159    000000          ;  Order of saved registers:
    160    000000          ;  +----+----+----+----+
    161    000000          ;  | R4 | R3 | R2 | R1 |
    162    000000          ;  +----+----+----+----+
    163    000000          ;
    164    000000          ;  The unsigned long value:
    165    000000          ;  +----+----+----+----+
    166    000000          ;  |  A | R4 | R3 | R2 |
    167    000000          ;  +----+----+----+----+
    168    000000          ;
    169    000000          ;
    170    000000 E9               MOV     A,R1
    171    000001 799E             MOV     R1,#Bias+32-1
    172    000003 C6               XCH     A,@R0                   ; Read LSB
                                                                    and save R1
                                                                    at its
                                                                    location
    173    000004 08               INC     R0
    174    000005 CA               XCH     A,R2
    175    000006 C6               XCH     A,@R0
    176    000007 08               INC     R0
    177    000008 CB               XCH     A,R3
    178    000009 C6               XCH     A,@R0
    179    00000A 08               INC     R0
    180    00000B CC               XCH     A,R4
    181    00000C C6               XCH     A,@R0
    182    00000D C3               CLR     C
    183    00000E 7020             JNZ     enter32
    184    000010           
    185    000010 7996     just24: MOV     R1,#Bias+24-1
    186    000012 CA               XCH     A,R2                    ; Shift up a
                                                                    byte
    187    000013 CB               XCH     A,R3
    188    000014 CC               XCH     A,R4
    189    000015 7019             JNZ     enter32
    190    000017          
    191    000017 798E             MOV     R1,#Bias+16-1
    192    000019 CB               XCH     A,R3                    ; Shift up
                                                                    an other
                                                                    byte
    193    00001A CC               XCH     A,R4
    194    00001B 7013             JNZ     enter32
    195    00001D          
    196    00001D 7986             MOV     R1,#Bias+8-1
    197    00001F CC               XCH     A,R4                    ; Shift up
                                                                    an other
                                                                    byte
                                                                    again
    198    000020 700E             JNZ     enter32
    199    000022          
    200    000022 F9               MOV     R1,A                    ; Ok it is
                                                                    zero so
                                                                    zero out
                                                                    the
    201    000023 802A             SJMP    Zero                    ; exxponent
                                                                    as well and
                                                                    end
                                                                    this.
    202    000025          
    203    000025          
    204    000025          ; Shift left until the most significant bit is
                            set
    205    000025          ;
    206    000025          shift32:
    207    000025 CA               XCH     A,R2
    208    000026 33               RLC     A
    209    000027 CA               XCH     A,R2
    210    000028 CB               XCH     A,R3
    211    000029 33               RLC     A
    212    00002A CB               XCH     A,R3
    213    00002B CC               XCH     A,R4
    214    00002C 33               RLC     A
    215    00002D CC               XCH     A,R4
    216    00002E 33               RLC     A
    217    00002F 19               DEC     R1
    218    000030          enter32:
    219    000030 30E7F2           JNB     ACC.7,shift32
    220    000033          
    221    000033 CC               XCH     A,R4                    ; Rotate the
                                                                    value one
                                                                    byte left
                                                                    in
    222    000034 CB               XCH     A,R3                    ; order to
                                                                    make R4
                                                                    MSB
    223    000035 CA               XCH     A,R2
    224    000036 33               RLC     A                       ; Move the
                                                                    guard bit
                                                                    to
                                                                    carry
    225    000037 5014             JNC     no_overflow
    226    000039 7004             JNZ     round_up                ; Round up
                                                                    if there
                                                                    are sticky
                                                                    bits
    227    00003B EA               MOV     A,R2
    228    00003C 30E00D           JNB     ACC.0,no_round
    229    00003F          
    230    00003F          round_up:
    231    00003F E4               CLR     A
    232    000040 CA               XCH     A,R2
    233    000041 3A               ADDC    A,R2
    234    000042 CA               XCH     A,R2
    235    000043 CB               XCH     A,R3
    236    000044 3B               ADDC    A,R3
    237    000045 CB               XCH     A,R3
    238    000046 CC               XCH     A,R4
    239    000047 3C               ADDC    A,R4
    240    000048 CC               XCH     A,R4
    241    000049 5002             JNC     no_overflow
    242    00004B 09               INC     R1
    243    00004C          
    244    00004C          no_round:
    245    00004C C3               CLR     C
    246    00004D          no_overflow:
    247    00004D E9               MOV     A,R1
    248    00004E 13               RRC     A
    249    00004F C6       Zero:   XCH     A,@R0                   ; Store the
                                                                    MSB of the
                                                                    result
                                                                    and
    250    000050 CC               XCH     A,R4                    ; restore
                                                                    register
                                                                    R4.
    251    000051 18               DEC     R0
    252    000052          
    253    000052 23               RL      A
    254    000053 13               RRC     A
    255    000054 C6               XCH     A,@R0                   ; Store the
                                                                    next byte
                                                                    of the
                                                                    result
    256    000055 CB               XCH     A,R3                    ; and
                                                                    restore
                                                                    register
                                                                    R3.
    257    000056 18               DEC     R0
    258    000057          
    259    000057 C6               XCH     A,@R0                   ; Store the
                                                                    next byte
                                                                    of the
                                                                    result
    260    000058 CA               XCH     A,R2                    ; and
                                                                    restore
                                                                    register
                                                                    R3.
    261    000059 18               DEC     R0
    262    00005A          
    263    00005A C6               XCH     A,@R0                   ; Store the
                                                                    LSB of the
                                                                    result
                                                                    and
    264    00005B F9               MOV     R1,A                    ; restore
                                                                    register
                                                                    R1.
    265    00005C 22               RET
    266    00005D          
    267    00005D              cfi ENDBLOCK ?UL_TO_FLT
    268    00005D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?L_NEG_REW          ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?L_TO_FLT           REL    CONST PUB UNTYP.       RCODE      0 
?L_TO_FLT_REW       REL    CONST PUB UNTYP.       RCODE      0 
?RET                ABS    CONST UNTYP.           ASEG       Not solved 
?RET_EXT            ABS    CONST UNTYP.           ASEG       Not solved 
?RET_HIGH           ABS    CONST UNTYP.           ASEG       Not solved 
?RET_LOW            ABS    CONST UNTYP.           ASEG       Not solved 
?UL_TO_FLT          REL    CONST PUB UNTYP.       RCODE      0 
?UL_TO_FLT_REW      REL    CONST PUB UNTYP.       RCODE      0 
?V_START            ABS    CONST UNTYP.           ASEG       Not solved 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BASEADDRESS         ABS    CONST UNTYP.           ASEG       Not solved 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
Base                ABS    CONST UNTYP.           ASEG       Not solved 
CFA_PSP16           ABS    CONST UNTYP.           ASEG       Not solved 
CFA_SP              ABS    CONST UNTYP.           ASEG       Not solved 
CFA_XSP16           ABS    CONST UNTYP.           ASEG       Not solved 
CODEALIGN           ABS    CONST UNTYP.           ASEG       Not solved 
COMMON              ABS    CONST UNTYP.           ASEG       Not solved 
CONCAT              ABS    CONST UNTYP.           ASEG       Not solved 
DATAALIGN           ABS    CONST UNTYP.           ASEG       Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                ABS    CONST UNTYP.           ASEG       Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                ABS    CONST UNTYP.           ASEG       Not solved 
DPTR0               ABS    CONST UNTYP.           ASEG       Not solved 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
ENDCOMMON           ABS    CONST UNTYP.           ASEG       Not solved 
ENDNAMES            ABS    CONST UNTYP.           ASEG       Not solved 
EXTENDS             ABS    CONST UNTYP.           ASEG       Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
FRAMECELL           ABS    CONST UNTYP.           ASEG       Not solved 
Frame               ABS    CONST UNTYP.           ASEG       Not solved 
NAMES               ABS    CONST UNTYP.           ASEG       Not solved 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSP16               ABS    CONST UNTYP.           ASEG       Not solved 
PSPH                ABS    CONST UNTYP.           ASEG       Not solved 
PSPL                ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RETH_CELL           ABS    CONST UNTYP.           ASEG       Not solved 
RETL_CELL           ABS    CONST UNTYP.           ASEG       Not solved 
RETURNADDRESS       ABS    CONST UNTYP.           ASEG       Not solved 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
Resource            ABS    CONST UNTYP.           ASEG       Not solved 
ResourceParts       ABS    CONST UNTYP.           ASEG       Not solved 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
SameValue           ABS    CONST UNTYP.           ASEG       Not solved 
StackFrame          ABS    CONST UNTYP.           ASEG       Not solved 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               ABS    CONST UNTYP.           ASEG       Not solved 
Undefined           ABS    CONST UNTYP.           ASEG       Not solved 
V0                  ABS    CONST UNTYP.           ASEG       Not solved 
V1                  ABS    CONST UNTYP.           ASEG       Not solved 
V10                 ABS    CONST UNTYP.           ASEG       Not solved 
V11                 ABS    CONST UNTYP.           ASEG       Not solved 
V12                 ABS    CONST UNTYP.           ASEG       Not solved 
V13                 ABS    CONST UNTYP.           ASEG       Not solved 
V14                 ABS    CONST UNTYP.           ASEG       Not solved 
V15                 ABS    CONST UNTYP.           ASEG       Not solved 
V16                 ABS    CONST UNTYP.           ASEG       Not solved 
V17                 ABS    CONST UNTYP.           ASEG       Not solved 
V18                 ABS    CONST UNTYP.           ASEG       Not solved 
V19                 ABS    CONST UNTYP.           ASEG       Not solved 
V2                  ABS    CONST UNTYP.           ASEG       Not solved 
V20                 ABS    CONST UNTYP.           ASEG       Not solved 
V21                 ABS    CONST UNTYP.           ASEG       Not solved 
V22                 ABS    CONST UNTYP.           ASEG       Not solved 
V23                 ABS    CONST UNTYP.           ASEG       Not solved 
V24                 ABS    CONST UNTYP.           ASEG       Not solved 
V25                 ABS    CONST UNTYP.           ASEG       Not solved 
V26                 ABS    CONST UNTYP.           ASEG       Not solved 
V27                 ABS    CONST UNTYP.           ASEG       Not solved 
V28                 ABS    CONST UNTYP.           ASEG       Not solved 
V29                 ABS    CONST UNTYP.           ASEG       Not solved 
V3                  ABS    CONST UNTYP.           ASEG       Not solved 
V30                 ABS    CONST UNTYP.           ASEG       Not solved 
V31                 ABS    CONST UNTYP.           ASEG       Not solved 
V4                  ABS    CONST UNTYP.           ASEG       Not solved 
V5                  ABS    CONST UNTYP.           ASEG       Not solved 
V6                  ABS    CONST UNTYP.           ASEG       Not solved 
V7                  ABS    CONST UNTYP.           ASEG       Not solved 
V8                  ABS    CONST UNTYP.           ASEG       Not solved 
V9                  ABS    CONST UNTYP.           ASEG       Not solved 
VB                  ABS    CONST UNTYP.           ASEG       Not solved 
VirtualResource     ABS    CONST UNTYP.           ASEG       Not solved 
XSP16               ABS    CONST UNTYP.           ASEG       Not solved 
XSPH                ABS    CONST UNTYP.           ASEG       Not solved 
XSPL                ABS    CONST UNTYP.           ASEG       Not solved 
Zero                REL    CONST UNTYP.           RCODE      4F 
cfi_banked_common   ABS    CONST UNTYP.           ASEG       Not solved 
cfi_banked_names    ABS    CONST UNTYP.           ASEG       Not solved 
cfi_common          ABS    CONST UNTYP.           ASEG       Not solved 
cfi_names           ABS    CONST UNTYP.           ASEG       Not solved 
cfi_pdata_enter_commonABS    CONST UNTYP.           ASEG       Not solved 
cfi_pdata_enter_namesABS    CONST UNTYP.           ASEG       Not solved 
enter32             REL    CONST UNTYP.           RCODE      30 
just24              REL    CONST UNTYP.           RCODE      10 
no_overflow         REL    CONST UNTYP.           RCODE      4D 
no_round            REL    CONST UNTYP.           RCODE      4C 
round_up            REL    CONST UNTYP.           RCODE      3F 
samevalue           ABS    CONST UNTYP.           ASEG       Not solved 
shift32             REL    CONST UNTYP.           RCODE      25 
sub                 ABS    CONST UNTYP.           ASEG       Not solved 
undefined           ABS    CONST UNTYP.           ASEG       Not solved 
x                   REL    CONST UNTYP.           RCODE      0 
y                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:AA3           #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 120         #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    269    000000          
    270    000000          
    271    000000          
    272    000000          ;---------------------------------------------------
                           --------------------------
    273    000000          ;
    274    000000          ;       Function: ?FLT_TO_L
    275    000000          ;       Function: ?FLT_TO_UL
    276    000000          ;
    277    000000          ;       Description: Cast a float to a signed/unsign
                           ed long.
    278    000000          ;
    279    000000          ;       Register input:
    280    000000          ;               R0 Points to LSB in the source/desti
                           nation object
    281    000000          ;
    282    000000          ;       Register output:
    283    000000          ;               A    = Undefined
    284    000000          ;               B.0  = The sign bit of the floating
                            point value
    285    000000          ;               R0   = R0
    286    000000          ;               CY   = Undefined
    287    000000          ;
    288    000000          ;       Stack usage: 4
    289    000000          ;
    290    000000          ;---------------------------------------------------
                           --------------------------
    291    000000                  MODULE  ?FLT_TO_L
    292    000000                  RSEG    RCODE:CODE:NOROOT       
    293    000000                  PUBLIC  ?FLT_TO_L
    294    000000                  PUBLIC  ?FLT_TO_L_REW
    295    000000                  PUBLIC  ?FLT_TO_UL
    296    000000                  PUBLIC  ?FLT_TO_UL_REW
    297    000000              cfi BLOCK ?FLT_TO_UL_REW USING cfi_common
    298    000000              cfi NOFUNCTION
    299    000000          
    300    000000              cfi R0 undefined
    301    000000          
    302    000000          ?FLT_TO_UL_REW:
    303    000000          
    304    000000 18               DEC     R0
    305    000001 18               DEC     R0
    306    000002 18               DEC     R0
    307    000003          
    308    000003              cfi ENDBLOCK ?FLT_TO_UL_REW
    309    000003                  REQUIRE x
    310    000003          
    311    000003          ;------
    312    000003          
    313    000000                  RSEG    RCODE:CODE:NOROOT
    314    000000              cfi BLOCK ?FLT_TO_UL USING cfi_common
    315    000000              cfi NOFUNCTION
    316    000000          
    317    000000          x:
    318    000000          ?FLT_TO_UL:
    319    000000 12....           LCALL   Extract
    320    000003 30F0..           JNB     B.0,WriteBack
    321    000006 12....           LCALL   Zero
    322    000009 80..             SJMP    WriteBack
    323    00000B           
    324    00000B              cfi ENDBLOCK ?FLT_TO_UL
    325    00000B          
    326    00000B          ;------
    327    00000B          
    328    000000                  RSEG    RCODE:CODE:NOROOT
    329    000000              cfi BLOCK ?FLT_TO_L_REW USING cfi_common
    330    000000              cfi NOFUNCTION
    331    000000          
    332    000000              cfi R0 undefined
    333    000000              cfi A undefined
    334    000000              cfi R2 undefined
    335    000000              cfi R3 undefined
    336    000000              cfi R4 undefined
    337    000000          
    338    000000          ?FLT_TO_L_REW:
    339    000000          
    340    000000 18               DEC     R0
    341    000001 18               DEC     R0
    342    000002 18               DEC     R0
    343    000003          
    344    000003              cfi ENDBLOCK ?FLT_TO_L_REW
    345    000003                  REQUIRE y
    346    000003          
    347    000003          ;------
    348    000003          
    349    000000                  RSEG    RCODE:CODE:NOROOT
    350    000000              cfi BLOCK ?FLT_TO_L USING cfi_common
    351    000000              cfi NOFUNCTION
    352    000000          
    353    000000              cfi A undefined
    354    000000              cfi R2 undefined
    355    000000              cfi R3 undefined
    356    000000              cfi R4 undefined
    357    000000          
    358    000000          y:
    359    000000          ?FLT_TO_L:
    360    000000 12....           LCALL   Extract
    361    000003 20F014           JB      B.0,Negative
    362    000006 30E7..           JNB     ACC.7,WriteBack
    363    000009          
    364    000009 74FF             MOV     A,#255
    365    00000B FC               MOV     R4,A
    366    00000C FB               MOV     R3,A
    367    00000D FA               MOV     R2,A
    368    00000E 747F             MOV     A,#127
    369    000010 80..             SJMP    WriteBack
    370    000012                          
    371    000012          UnderFlow:
    372    000012 E4               CLR     A
    373    000013 FC               MOV     R4,A
    374    000014 FB               MOV     R3,A
    375    000015 FA               MOV     R2,A
    376    000016 7480             MOV     A,#128
    377    000018 80..             SJMP    WriteBack
    378    00001A                  
    379    00001A          Negative:
    380    00001A B48008           CJNE    A,#128,NoMaxNeg
    381    00001D BC00F2           CJNE    R4,#0,UnderFlow
    382    000020 BB00EF           CJNE    R3,#0,UnderFlow
    383    000023 80..             SJMP    WriteBack
    384    000025          
    385    000025          NoMaxNeg:
    386    000025 50EB             JNC     UnderFlow
    387    000027 F9               MOV     R1,A
    388    000028 E4               CLR     A
    389    000029 C3               CLR     C
    390    00002A 9A               SUBB    A,R2
    391    00002B FA               MOV     R2,A
    392    00002C E4               CLR     A
    393    00002D 9B               SUBB    A,R3
    394    00002E FB               MOV     R3,A
    395    00002F E4               CLR     A
    396    000030 9C               SUBB    A,R4
    397    000031 FC               MOV     R4,A
    398    000032 E4               CLR     A
    399    000033 99               SUBB    A,R1
    400    000034          
    401    000034              cfi ENDBLOCK ?FLT_TO_L
    402    000034          
    403    000034          ;------
    404    000034          
    405    000000                  RSEG    RCODE:CODE:NOROOT
    406    000000              cfi BLOCK WriteBack USING cfi_common
    407    000000              cfi NOFUNCTION
    408    000000          
    409    000000              cfi A undefined
    410    000000              cfi R0 undefined
    411    000000              cfi R1 undefined
    412    000000              cfi R2 undefined
    413    000000              cfi R3 undefined
    414    000000              cfi R4 undefined
    415    000000          
    416    000000          WriteBack:
    417    000000 C6               XCH     A,@R0
    418    000001 CC               XCH     A,R4
    419    000002 18               DEC     R0
    420    000003          
    421    000003 C6               XCH     A,@R0
    422    000004 CB               XCH     A,R3
    423    000005 18               DEC     R0
    424    000006          
    425    000006 C6               XCH     A,@R0
    426    000007 CA               XCH     A,R2
    427    000008 18               DEC     R0
    428    000009          
    429    000009 C6               XCH     A,@R0
    430    00000A F9               MOV     R1,A
    431    00000B 22               RET
    432    00000C          
    433    00000C              cfi ENDBLOCK WriteBack
    434    00000C          
    435    00000C          
    436    00000C          ;-----------------------------------------
    437    00000C          ;
    438    00000C          ; Read up the floating point value into
    439    00000C          ; registers and save the registers
    440    00000C          ; original values at the same time
    441    00000C          ;
    442    00000C          ;  Order of saved registers:
    443    00000C          ;  +----+----+----+----+
    444    00000C          ;  | R4 | R3 | R2 | R1 |
    445    00000C          ;  +----+----+----+----+
    446    00000C          ;
    447    00000C          ;  The floating point value as an
    448    00000C          ;  appropriate unsigned long value:
    449    00000C          ;  +----+----+----+----+
    450    00000C          ;  |  A | R4 | R3 | R2 |
    451    00000C          ;  +----+----+----+----+
    452    00000C          ;
    453    00000C          ;  B.0 = Sign-bit
    454    00000C          ;
    455    000000                  RSEG    RCODE:CODE:NOROOT
    456    000000              cfi BLOCK Extract USING cfi_common
    457    000000              cfi NOFUNCTION
    458    000000          
    459    000000              cfi A undefined
    460    000000              cfi R0 undefined
    461    000000              cfi R1 undefined
    462    000000              cfi R2 undefined
    463    000000              cfi R3 undefined
    464    000000              cfi R4 undefined
    465    000000          
    466    000000          Extract:
    467    000000 E4               CLR     A
    468    000001 C9               XCH     A,R1
    469    000002 C6               XCH     A,@R0                   ; Read LSB
                                                                    and save R1
                                                                    at its
                                                                    location
    470    000003 08               INC     R0
    471    000004 CA               XCH     A,R2
    472    000005 C6               XCH     A,@R0                   ; Read next
                                                                    byte and
                                                                    save
                                                                    R2
    473    000006 08               INC     R0
    474    000007 CB               XCH     A,R3
    475    000008 C6               XCH     A,@R0                   ; Read next
                                                                    byte and
                                                                    save
                                                                    R3
    476    000009          
    477    000009 D3               SETB    C                       ; Set MS bit
                                                                    in the
                                                                    mantissa
                                                                    and
    478    00000A 33               RLC     A                       ; shift out
                                                                    the LS bit
                                                                    of the
                                                                    
    479    00000B 03               RR      A                       ; exponent
                                                                    into carry
                                                                    flag.
    480    00000C 08               INC     R0
    481    00000D CC               XCH     A,R4
    482    00000E C6               XCH     A,@R0                   ; Read MSB
                                                                    and save R4
                                                                    at its
                                                                    location
    483    00000F 33               RLC     A
    484    000010 92F0             MOV     B.0,C                   ; Store the
                                                                    sign bit in
                                                                    B.0
    485    000012 C3               CLR     C
    486    000013 947F             SUBB    A,#Bias
    487    000015 402E             JC      Zero
    488    000017                  
    489    000017 9418             SUBB    A,#24
    490    000019 4019             JC      ShiftDown
    491    00001B C9               XCH     A,R1
    492    00001C B90704           CJNE    R1,#7,ShiftUp
    493    00001F          
    494    00001F CA               XCH     A,R2
    495    000020 CB               XCH     A,R3
    496    000021 CC               XCH     A,R4
    497    000022 22               RET
    498    000023          
    499    000023          ShiftUp:
    500    000023 5025             JNC     TooLarge
    501    000025 C3               CLR     C
    502    000026 09               INC     R1
    503    000027          
    504    000027          shift32:
    505    000027 CA               XCH     A,R2
    506    000028 33               RLC     A
    507    000029 CA               XCH     A,R2
    508    00002A CB               XCH     A,R3
    509    00002B 33               RLC     A
    510    00002C CB               XCH     A,R3
    511    00002D CC               XCH     A,R4
    512    00002E 33               RLC     A
    513    00002F CC               XCH     A,R4
    514    000030 33               RLC     A
    515    000031 D9F4             DJNZ    R1,shift32
    516    000033 22               RET
    517    000034          
    518    000034          ;------
    519    000034          ShiftDown:
    520    000034 F4               CPL     A
    521    000035 600D             JZ      NoShift
    522    000037          
    523    000037 C9               XCH     A,R1
    524    000038 CC               XCH     A,R4
    525    000039          shift24:
    526    000039 C3               CLR     C
    527    00003A 13               RRC     A
    528    00003B CB               XCH     A,R3
    529    00003C 13               RRC     A
    530    00003D CB               XCH     A,R3
    531    00003E CA               XCH     A,R2
    532    00003F 13               RRC     A
    533    000040 CA               XCH     A,R2
    534    000041 D9F6             DJNZ    R1,shift24
    535    000043          
    536    000043 CC               XCH     A,R4
    537    000044          NoShift:
    538    000044 22               RET
    539    000045          
    540    000045          ;------
    541    000045 E4       Zero:   CLR     A
    542    000046 FC               MOV     R4,A
    543    000047 FB               MOV     R3,A
    544    000048 FA               MOV     R2,A
    545    000049 22               RET
    546    00004A          
    547    00004A          ;------
    548    00004A          TooLarge:
    549    00004A 14               DEC     A
    550    00004B FC               MOV     R4,A
    551    00004C FB               MOV     R3,A
    552    00004D FA               MOV     R2,A
    553    00004E 22               RET
    554    00004F          
    555    00004F              cfi ENDBLOCK Extract
    556    00004F                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TO_L           REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TO_L_REW       REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TO_UL          REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TO_UL_REW      REL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
Extract             REL    CONST UNTYP.           RCODE      0 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
Negative            REL    CONST UNTYP.           RCODE      1A 
NoMaxNeg            REL    CONST UNTYP.           RCODE      25 
NoShift             REL    CONST UNTYP.           RCODE      44 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
ShiftDown           REL    CONST UNTYP.           RCODE      34 
ShiftUp             REL    CONST UNTYP.           RCODE      23 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
TooLarge            REL    CONST UNTYP.           RCODE      4A 
USING               REL    CONST UNTYP.           RCODE      Not solved 
UnderFlow           REL    CONST UNTYP.           RCODE      12 
WriteBack           REL    CONST UNTYP.           RCODE      0 
Zero                REL    CONST UNTYP.           RCODE      45 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
shift24             REL    CONST UNTYP.           RCODE      39 
shift32             REL    CONST UNTYP.           RCODE      27 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 
y                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:C526          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 160         #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    557    000000          
    558    000000          
    559    000000          ;---------------------------------------------------
                           --------------------------
    560    000000          ;
    561    000000          ;       Functions: Test operations
    562    000000          ;
    563    000000          ;- - - - - - - - - - - - - - - - - - - - - - - - - -
                            - - - - - - - - - - - - -
    564    000000          ;
    565    000000          ;       Function: ?FLT_TEST_ZERO
    566    000000          ;
    567    000000          ;       Description: Test if a float is zero
    568    000000          ;
    569    000000          ;       Register input:
    570    000000          ;               R0 Points to LSB of the float
                            object
    571    000000          ;
    572    000000          ;       Register output:
    573    000000          ;               A    = 0 if Zero else set
    574    000000          ;               R0   = R0
    575    000000          ;               CY   = The sign bit
    576    000000          ;
    577    000000          ;       Stack usage: 2
    578    000000          ;
    579    000000          ;---------------------------------------------------
                           --------------------------
    580    000000                  MODULE  ?FLT_TEST_ZERO
    581    000000                  RSEG    RCODE:CODE:NOROOT       
    582    000000                  PUBLIC  ?FLT_TEST_ZERO
    583    000000                  PUBLIC  ?FLT_TEST_ZERO_REW
    584    000000              cfi BLOCK ?FLT_TEST_ZERO USING cfi_common
    585    000000              cfi NOFUNCTION
    586    000000          
    587    000000              cfi A undefined
    588    000000              cfi R0 undefined
    589    000000          
    590    000000          ?FLT_TEST_ZERO:
    591    000000          
    592    000000 08               INC     R0
    593    000001 08               INC     R0
    594    000002 08               INC     R0
    595    000003          
    596    000003              cfi ENDBLOCK ?FLT_TEST_ZERO
    597    000003                  REQUIRE x
    598    000003          
    599    000003          ;------
    600    000003          
    601    000000                  RSEG    RCODE:CODE:NOROOT
    602    000000              cfi BLOCK ?FLT_TEST_ZERO_REW USING cfi_common
    603    000000              cfi NOFUNCTION
    604    000000          
    605    000000              cfi A undefined
    606    000000              cfi R0 undefined
    607    000000          
    608    000000          x:
    609    000000          ?FLT_TEST_ZERO_REW:
    610    000000          
    611    000000 E6               MOV     A,@R0
    612    000001 C3               CLR     C
    613    000002 33               RLC     A
    614    000003 18               DEC     R0
    615    000004 46               ORL     A,@R0
    616    000005 18               DEC     R0
    617    000006 46               ORL     A,@R0
    618    000007 18               DEC     R0
    619    000008 46               ORL     A,@R0
    620    000009 22               RET
    621    00000A                  
    622    00000A              cfi ENDBLOCK ?FLT_TEST_ZERO_REW
    623    00000A                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TEST_ZERO      REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_ZERO_REW  REL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:FCAD          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    624    000000          
    625    000000          
    626    000000          ;---------------------------------------------------
                           --------------------------
    627    000000          ;
    628    000000          ;       Function: ?FLT_TEST_ZERO_R1
    629    000000          ;
    630    000000          ;       Description: Test if a float is zero
    631    000000          ;
    632    000000          ;       Register input:
    633    000000          ;               R1 Points to LSB of the float
                            object
    634    000000          ;
    635    000000          ;       Register output:
    636    000000          ;               A    = 0 if Zero else set
    637    000000          ;               R1   = R1
    638    000000          ;               CY   = The sign bit
    639    000000          ;
    640    000000          ;       Stack usage: 2
    641    000000          ;
    642    000000          ;---------------------------------------------------
                           --------------------------
    643    000000                  MODULE  ?FLT_TEST_ZERO_R1
    644    000000                  RSEG    RCODE:CODE:NOROOT       
    645    000000                  PUBLIC  ?FLT_TEST_ZERO_R1
    646    000000                  PUBLIC  ?FLT_TEST_ZERO_R1_REW
    647    000000              cfi BLOCK ?FLT_TEST_ZERO_R1 USING cfi_common
    648    000000              cfi NOFUNCTION
    649    000000          
    650    000000              cfi A undefined
    651    000000              cfi R1 undefined
    652    000000          
    653    000000          ?FLT_TEST_ZERO_R1:
    654    000000          
    655    000000 09               INC     R1
    656    000001 09               INC     R1
    657    000002 09               INC     R1
    658    000003          
    659    000003              cfi ENDBLOCK ?FLT_TEST_ZERO_R1
    660    000003                  REQUIRE x
    661    000003          
    662    000003          ;------
    663    000003          
    664    000000                  RSEG    RCODE:CODE:NOROOT
    665    000000              cfi BLOCK ?FLT_TEST_ZERO_R1_REW USING cfi_common
    666    000000              cfi NOFUNCTION
    667    000000          
    668    000000              cfi A undefined
    669    000000              cfi R1 undefined
    670    000000          
    671    000000          x:
    672    000000          ?FLT_TEST_ZERO_R1_REW:
    673    000000 E7               MOV     A,@R1
    674    000001 C3               CLR     C
    675    000002 33               RLC     A
    676    000003 19               DEC     R1
    677    000004 47               ORL     A,@R1
    678    000005 19               DEC     R1
    679    000006 47               ORL     A,@R1
    680    000007 19               DEC     R1
    681    000008 47               ORL     A,@R1
    682    000009 22               RET
    683    00000A                  
    684    00000A              cfi ENDBLOCK ?FLT_TEST_ZERO_R1_REW
    685    00000A                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TEST_ZERO_R1   REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_ZERO_R1_REWREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:E60C          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    686    000000          
    687    000000          
    688    000000          ;---------------------------------------------------
                           --------------------------
    689    000000          ;
    690    000000          ;       Function: ?FLT_TEST_INF
    691    000000          ;
    692    000000          ;       Description: Test if a float is Infinite.
    693    000000          ;
    694    000000          ;                    x == s1111111 10000000 00000000
                            00000000
    695    000000          ;
    696    000000          ;                    The sign bit is ignored in the
                            compare operation.
    697    000000          ;
    698    000000          ;       Register input:
    699    000000          ;               R0 Points to LSB in the source/desti
                           nation object
    700    000000          ;
    701    000000          ;       Register output:
    702    000000          ;               A    = 0 if INF else set
    703    000000          ;               R0   = R0 + 3
    704    000000          ;               CY   = The sign bit of the INF else
                            undefined.
    705    000000          ;
    706    000000          ;       Stack usage: 2
    707    000000          ;
    708    000000          ;---------------------------------------------------
                           --------------------------
    709    000000                  MODULE  ?FLT_TEST_INF
    710    000000                  RSEG    RCODE:CODE:NOROOT       
    711    000000                  PUBLIC  ?FLT_TEST_INF
    712    000000                  PUBLIC  ?FLT_TEST_INF_REW
    713    000000              cfi BLOCK ?FLT_TEST_INF_REW USING cfi_common
    714    000000              cfi NOFUNCTION
    715    000000          
    716    000000              cfi A  undefined
    717    000000              cfi R0 undefined
    718    000000          
    719    000000          ?FLT_TEST_INF_REW:
    720    000000          
    721    000000 18               DEC     R0
    722    000001 18               DEC     R0
    723    000002 18               DEC     R0
    724    000003          
    725    000003              cfi ENDBLOCK ?FLT_TEST_INF_REW
    726    000003                  REQUIRE x
    727    000003          
    728    000003          ;------
    729    000003          
    730    000000                  RSEG    RCODE:CODE:NOROOT
    731    000000              cfi BLOCK ?FLT_TEST_INF USING cfi_common
    732    000000              cfi NOFUNCTION
    733    000000          
    734    000000              cfi A undefined
    735    000000              cfi R0 undefined
    736    000000          
    737    000000          x:
    738    000000          ?FLT_TEST_INF:
    739    000000                  
    740    000000 E6               MOV     A,@R0
    741    000001 08               INC     R0
    742    000002 46               ORL     A,@R0
    743    000003 08               INC     R0
    744    000004 700A             JNZ     NoMatch
    745    000006          
    746    000006 E6               MOV     A,@R0
    747    000007 08               INC     R0
    748    000008 C3               CLR     C
    749    000009 33               RLC     A
    750    00000A 7005             JNZ     NoMatchRet
    751    00000C          
    752    00000C E6               MOV     A,@R0
    753    00000D 33               RLC     A
    754    00000E F4               CPL     A
    755    00000F 22               RET
    756    000010          
    757    000010          NoMatch:
    758    000010 08               INC     R0
    759    000011          NoMatchRet:
    760    000011 22               RET
    761    000012                  
    762    000012              cfi ENDBLOCK ?FLT_TEST_INF
    763    000012                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TEST_INF       REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_INF_REW   REL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoMatch             REL    CONST UNTYP.           RCODE      10 
NoMatchRet          REL    CONST UNTYP.           RCODE      11 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:3074          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 21          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    764    000000          
    765    000000          
    766    000000          
    767    000000          ;---------------------------------------------------
                           --------------------------
    768    000000          ;
    769    000000          ;       Function: ?FLT_TEST_INF_R1
    770    000000          ;
    771    000000          ;       Description: Test if a float is Infinite.
    772    000000          ;
    773    000000          ;                    x == s1111111 10000000 00000000
                            00000000
    774    000000          ;
    775    000000          ;                    The sign bit is ignored in the
                            compare operation.
    776    000000          ;
    777    000000          ;       Register input:
    778    000000          ;               R1 Points to LSB in the source/desti
                           nation object
    779    000000          ;
    780    000000          ;       Register output:
    781    000000          ;               A    = 0 if INF else set
    782    000000          ;               R1   = R1 + 3
    783    000000          ;               CY   = The sign bit of the INF else
                            undefined.
    784    000000          ;
    785    000000          ;       Stack usage: 2
    786    000000          ;
    787    000000          ;---------------------------------------------------
                           --------------------------
    788    000000                  MODULE  ?FLT_TEST_INF_R1
    789    000000                  RSEG    RCODE:CODE:NOROOT       
    790    000000                  PUBLIC  ?FLT_TEST_INF_R1
    791    000000                  PUBLIC  ?FLT_TEST_INF_R1_REW
    792    000000              cfi BLOCK ?FLT_TEST_INF_R1_REW USING cfi_common
    793    000000              cfi NOFUNCTION
    794    000000          
    795    000000              cfi A undefined
    796    000000              cfi R1 undefined
    797    000000                  
    798    000000          ?FLT_TEST_INF_R1_REW:
    799    000000          
    800    000000 19               DEC     R1
    801    000001 19               DEC     R1
    802    000002 19               DEC     R1
    803    000003          
    804    000003              cfi ENDBLOCK ?FLT_TEST_INF_R1_REW
    805    000003                  REQUIRE x
    806    000003          
    807    000003          ;------
    808    000003          
    809    000000                  RSEG    RCODE:CODE:NOROOT
    810    000000              cfi BLOCK ?FLT_TEST_INF_R1 USING cfi_common
    811    000000              cfi NOFUNCTION
    812    000000          
    813    000000              cfi A undefined
    814    000000              cfi R1 undefined
    815    000000          
    816    000000          x:
    817    000000          ?FLT_TEST_INF_R1:
    818    000000                  
    819    000000 E7               MOV     A,@R1
    820    000001 09               INC     R1
    821    000002 47               ORL     A,@R1
    822    000003 09               INC     R1
    823    000004 700A             JNZ     NoMatch
    824    000006          
    825    000006 E7               MOV     A,@R1
    826    000007 09               INC     R1
    827    000008 C3               CLR     C
    828    000009 33               RLC     A
    829    00000A 7005             JNZ     NoMatchRet
    830    00000C          
    831    00000C E7               MOV     A,@R1
    832    00000D 33               RLC     A
    833    00000E F4               CPL     A
    834    00000F 22               RET
    835    000010          
    836    000010          NoMatch:
    837    000010 09               INC     R1
    838    000011          NoMatchRet:
    839    000011 22               RET
    840    000012                  
    841    000012              cfi ENDBLOCK ?FLT_TEST_INF_R1
    842    000012                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TEST_INF_R1    REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_INF_R1_REWREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoMatch             REL    CONST UNTYP.           RCODE      10 
NoMatchRet          REL    CONST UNTYP.           RCODE      11 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:89CD          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 21          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    843    000000          
    844    000000          
    845    000000          
    846    000000          ;---------------------------------------------------
                           --------------------------
    847    000000          ;
    848    000000          ;       Function: ?FLT_TEST_NAN
    849    000000          ;
    850    000000          ;       Description: Test if a float is Not A
                            Number
    851    000000          ;
    852    000000          ;                    x > s1111111 10000000 00000000
                            00000000
    853    000000          ;
    854    000000          ;                    The sign bit is ignored in the
                            compare operation.
    855    000000          ;
    856    000000          ;       Register input:
    857    000000          ;               R0 Points to LSB in the source/desti
                           nation object
    858    000000          ;
    859    000000          ;       Register output:
    860    000000          ;               A    = 0 if NAN else set
    861    000000          ;               R0   = R0 + 3
    862    000000          ;               CY   = The sign bit of the NAN else
                            undefined.
    863    000000          ;
    864    000000          ;       Stack usage: 2
    865    000000          ;
    866    000000          ;---------------------------------------------------
                           --------------------------
    867    000000                  MODULE  ?FLT_TEST_NAN
    868    000000                  RSEG    RCODE:CODE:NOROOT       
    869    000000                  PUBLIC  ?FLT_TEST_NAN
    870    000000                  PUBLIC  ?FLT_TEST_NAN_REW
    871    000000              cfi BLOCK ?FLT_TEST_NAN_REW USING cfi_common
    872    000000              cfi NOFUNCTION
    873    000000          
    874    000000              cfi A undefined
    875    000000              cfi R0 undefined
    876    000000          
    877    000000          ?FLT_TEST_NAN_REW:
    878    000000          
    879    000000 18               DEC     R0
    880    000001 18               DEC     R0
    881    000002 18               DEC     R0
    882    000003          
    883    000003              cfi ENDBLOCK ?FLT_TEST_NAN_REW
    884    000003                  REQUIRE x
    885    000003          
    886    000003          ;------
    887    000003          
    888    000000                  RSEG    RCODE:CODE:NOROOT
    889    000000              cfi BLOCK ?FLT_TEST_NAN USING cfi_common
    890    000000              cfi NOFUNCTION
    891    000000          
    892    000000              cfi A undefined
    893    000000              cfi R0 undefined
    894    000000          
    895    000000          x:
    896    000000          ?FLT_TEST_NAN:
    897    000000                  
    898    000000 E6               MOV     A,@R0
    899    000001 08               INC     R0
    900    000002 46               ORL     A,@R0
    901    000003 08               INC     R0
    902    000004          
    903    000004 C3               CLR     C
    904    000005 13               RRC     A
    905    000006 46               ORL     A,@R0
    906    000007 08               INC     R0
    907    000008 33               RLC     A
    908    000009 6002             JZ      NoMatch
    909    00000B          
    910    00000B E6               MOV     A,@R0
    911    00000C 33               RLC     A
    912    00000D          NoMatch:
    913    00000D F4               CPL     A
    914    00000E 22               RET
    915    00000F          
    916    00000F              cfi ENDBLOCK ?FLT_TEST_NAN
    917    00000F                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TEST_NAN       REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_NAN_REW   REL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoMatch             REL    CONST UNTYP.           RCODE      D 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:DF47          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 18          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    918    000000          
    919    000000          
    920    000000          ;---------------------------------------------------
                           --------------------------
    921    000000          ;
    922    000000          ;       Function: ?FLT_TEST_NAN_R1
    923    000000          ;
    924    000000          ;       Description: Test if a float is Not A
                            Number
    925    000000          ;
    926    000000          ;                    x > s1111111 10000000 00000000
                            00000000
    927    000000          ;
    928    000000          ;                    The sign bit is ignored in the
                            compare operation.
    929    000000          ;
    930    000000          ;       Register input:
    931    000000          ;               R1 Points to LSB in the source/desti
                           nation object
    932    000000          ;
    933    000000          ;       Register output:
    934    000000          ;               A    = 0 if NAN else set
    935    000000          ;               R1   = R1 + 3
    936    000000          ;               CY   = The sign bit of the NAN else
                            undefined.
    937    000000          ;
    938    000000          ;       Stack usage: 2
    939    000000          ;
    940    000000          ;---------------------------------------------------
                           --------------------------
    941    000000                  MODULE  ?FLT_TEST_NAN_R1
    942    000000                  RSEG    RCODE:CODE:NOROOT       
    943    000000                  PUBLIC  ?FLT_TEST_NAN_R1
    944    000000                  PUBLIC  ?FLT_TEST_NAN_R1_REW
    945    000000              cfi BLOCK ?FLT_TEST_NAN_R1_REW USING cfi_common
    946    000000              cfi NOFUNCTION
    947    000000          
    948    000000              cfi A undefined
    949    000000              cfi R1 undefined
    950    000000                  
    951    000000          ?FLT_TEST_NAN_R1_REW:
    952    000000          
    953    000000 19               DEC     R1
    954    000001 19               DEC     R1
    955    000002 19               DEC     R1
    956    000003          
    957    000003              cfi ENDBLOCK ?FLT_TEST_NAN_R1_REW
    958    000003                  REQUIRE x
    959    000003          
    960    000003          ;------
    961    000003          
    962    000000                  RSEG    RCODE:CODE:NOROOT
    963    000000              cfi BLOCK ?FLT_TEST_NAN_R1 USING cfi_common
    964    000000              cfi NOFUNCTION
    965    000000          
    966    000000              cfi A undefined
    967    000000              cfi R1 undefined
    968    000000          
    969    000000          x:
    970    000000          ?FLT_TEST_NAN_R1:
    971    000000                  
    972    000000 E7               MOV     A,@R1
    973    000001 09               INC     R1
    974    000002 47               ORL     A,@R1
    975    000003 09               INC     R1
    976    000004          
    977    000004 C3               CLR     C
    978    000005 13               RRC     A
    979    000006 47               ORL     A,@R1
    980    000007 09               INC     R1
    981    000008 33               RLC     A
    982    000009 6002             JZ      NoMatch
    983    00000B          
    984    00000B E7               MOV     A,@R1
    985    00000C 33               RLC     A
    986    00000D          NoMatch:
    987    00000D F4               CPL     A
    988    00000E 22               RET
    989    00000F          
    990    00000F              cfi ENDBLOCK ?FLT_TEST_NAN_R1
    991    00000F                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_TEST_NAN_R1    REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_NAN_R1_REWREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoMatch             REL    CONST UNTYP.           RCODE      D 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:8FEC          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 18          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    992    000000          
    993    000000          
    994    000000          ;---------------------------------------------------
                           --------------------------
    995    000000          ;
    996    000000          ;       Functions: Floating point compare operations
    997    000000          ;
    998    000000          ;- - - - - - - - - - - - - - - - - - - - - - - - - -
                            - - - - - - - - - - - - -
    999    000000          ;
   1000    000000          ;       Function: ?FLT_EQ
   1001    000000          ;
   1002    000000          ;       Description: Test if two floats are
                            equal
   1003    000000          ;
   1004    000000          ;       Register input:
   1005    000000          ;               R0 Points to LSB in object
                            #1
   1006    000000          ;               R1 Points to LSB in object
                            #2
   1007    000000          ;
   1008    000000          ;       Register output:
   1009    000000          ;               A    = Is zero if equal.
   1010    000000          ;               R0   = Is undefined
   1011    000000          ;               R1   = Is undefined
   1012    000000          ;               CY   = Is undefined
   1013    000000          ;
   1014    000000          ;       Stack usage: 4
   1015    000000          ;
   1016    000000          ;---------------------------------------------------
                           --------------------------
   1017    000000                  MODULE  ?FLT_EQ
   1018    000000                  RSEG    RCODE:CODE:NOROOT       
   1019    000000                  PUBLIC  ?FLT_EQ
   1020    000000                  PUBLIC  ?FLT_EQ_REW
   1021    000000                  EXTERN  ?FLT_TEST_NAN
   1022    000000                  EXTERN  ?FLT_TEST_NAN_R1
   1023    000000                  EXTERN  ?FLT_TEST_ZERO_REW
   1024    000000                  EXTERN  ?FLT_TEST_ZERO_R1_REW
   1025    000000              cfi BLOCK ?FLT_EQ_REW USING cfi_common
   1026    000000              cfi NOFUNCTION
   1027    000000          
   1028    000000              cfi A undefined
   1029    000000              cfi R0 undefined
   1030    000000              cfi R1 undefined
   1031    000000          
   1032    000000          ?FLT_EQ_REW:
   1033    000000          
   1034    000000 18               DEC     R0
   1035    000001 18               DEC     R0
   1036    000002 18               DEC     R0
   1037    000003          
   1038    000003              cfi ENDBLOCK ?FLT_EQ_REW
   1039    000003                  REQUIRE x
   1040    000003          
   1041    000003          ;------
   1042    000003          
   1043    000000                  RSEG    RCODE:CODE:NOROOT
   1044    000000              cfi BLOCK ?FLT_EQ USING cfi_common
   1045    000000              cfi NOFUNCTION
   1046    000000          
   1047    000000              cfi A undefined
   1048    000000              cfi R0 undefined
   1049    000000              cfi R1 undefined
   1050    000000          
   1051    000000          x:
   1052    000000          ?FLT_EQ:
   1053    000000 12....           LCALL   ?FLT_TEST_NAN
   1054    000003 6025             JZ      NotEqual
   1055    000005 12....           LCALL   ?FLT_TEST_NAN_R1
   1056    000008 6020             JZ      NotEqual
   1057    00000A          
   1058    00000A 12....           LCALL   ?FLT_TEST_ZERO_REW
   1059    00000D 7003             JNZ     NoZero
   1060    00000F 02....           LJMP    ?FLT_TEST_ZERO_R1_REW
   1061    000012          
   1062    000012 08       NoZero: INC     R0
   1063    000013 08               INC     R0
   1064    000014 08               INC     R0
   1065    000015 E7               MOV     A,@R1
   1066    000016 66               XRL     A,@R0
   1067    000017 7010             JNZ     noz
   1068    000019          
   1069    000019 18               DEC     R0
   1070    00001A 19               DEC     R1
   1071    00001B E7               MOV     A,@R1
   1072    00001C 66               XRL     A,@R0
   1073    00001D 700A             JNZ     noz
   1074    00001F          
   1075    00001F 18               DEC     R0
   1076    000020 19               DEC     R1
   1077    000021 E7               MOV     A,@R1
   1078    000022 66               XRL     A,@R0
   1079    000023 7004             JNZ     noz
   1080    000025          
   1081    000025 18               DEC     R0
   1082    000026 19               DEC     R1
   1083    000027 E7               MOV     A,@R1
   1084    000028 66               XRL     A,@R0
   1085    000029 22       noz:    RET
   1086    00002A          
   1087    00002A          NotEqual:
   1088    00002A F4               CPL     A
   1089    00002B 22               RET
   1090    00002C                  
   1091    00002C              cfi ENDBLOCK ?FLT_EQ
   1092    00002C                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_EQ             REL    CONST PUB UNTYP.       RCODE      0 
?FLT_EQ_REW         REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_NAN       ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN_R1    ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_R1_REWABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_REW  ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoZero              REL    CONST UNTYP.           RCODE      12 
NotEqual            REL    CONST UNTYP.           RCODE      2A 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
noz                 REL    CONST UNTYP.           RCODE      29 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:EAAA          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 47          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1093    000000          
   1094    000000          
   1095    000000          ;---------------------------------------------------
                           --------------------------
   1096    000000          ;
   1097    000000          ;       Function: ?FLT_GE
   1098    000000          ;
   1099    000000          ;       Description: Test if a float is greater or
                            equal to an other float.
   1100    000000          ;
   1101    000000          ;       Register input:
   1102    000000          ;               R0 Points to LSB in object
                            #1
   1103    000000          ;               R1 Points to LSB in object
                            #2
   1104    000000          ;
   1105    000000          ;       Register output:
   1106    000000          ;               A    = Is undefined.
   1107    000000          ;               R0   = R0 + 3
   1108    000000          ;               R1   = R1 + 3
   1109    000000          ;               CY   = 1 if @R0 >= @R1
   1110    000000          ;               CY   = 0 if @R0 <  @R1 or if one or
                            both operands are NAN
   1111    000000          ;
   1112    000000          ;       Stack usage: 5
   1113    000000          ;
   1114    000000          ;---------------------------------------------------
                           --------------------------
   1115    000000                  MODULE  ?FLT_GE
   1116    000000                  RSEG    RCODE:CODE:NOROOT       
   1117    000000                  PUBLIC  ?FLT_GE
   1118    000000                  PUBLIC  ?FLT_GE_REW
   1119    000000                  EXTERN  ?FLT_TEST_NAN
   1120    000000                  EXTERN  ?FLT_TEST_NAN_R1
   1121    000000                  EXTERN  ?FLT_TEST_ZERO_REW
   1122    000000                  EXTERN  ?FLT_TEST_ZERO_R1_REW
   1123    000000              cfi BLOCK ?FLT_GE_REW USING cfi_common
   1124    000000              cfi NOFUNCTION
   1125    000000                  
   1126    000000              cfi A undefined
   1127    000000              cfi R0 undefined
   1128    000000              cfi R1 undefined
   1129    000000          
   1130    000000          ?FLT_GE_REW:
   1131    000000          
   1132    000000 18               DEC     R0
   1133    000001 18               DEC     R0
   1134    000002 18               DEC     R0
   1135    000003          
   1136    000003              cfi ENDBLOCK ?FLT_GE_REW
   1137    000003                  REQUIRE x
   1138    000003          
   1139    000003          ;------
   1140    000003          
   1141    000000                  RSEG    RCODE:CODE:NOROOT
   1142    000000              cfi BLOCK ?FLT_GE USING cfi_common
   1143    000000              cfi NOFUNCTION
   1144    000000          
   1145    000000              cfi A undefined
   1146    000000              cfi R0 undefined
   1147    000000              cfi R1 undefined
   1148    000000          
   1149    000000          x:
   1150    000000          ?FLT_GE:
   1151    000000 12....           LCALL   ?FLT_TEST_NAN           ; Test if
                                                                    NAN and
                                                                    count up R0
                                                                    with
                                                                    3
   1152    000003 601C             JZ      NotGE
   1153    000005 12....           LCALL   ?FLT_TEST_NAN_R1        ; Test if
                                                                    NAN and
                                                                    count up R1
                                                                    with
                                                                    3
   1154    000008 6017             JZ      NotGE
   1155    00000A          
   1156    00000A 12....           LCALL   ?FLT_TEST_ZERO_REW
   1157    00000D 7007             JNZ     NoZero
   1158    00000F 12....           LCALL   ?FLT_TEST_ZERO_R1_REW   ; CY=Signbit
                                                                    of
                                                                    @R1
   1159    000012 7001             JNZ     Skip
   1160    000014          
   1161    000014 D3       IsGE:   SETB    C
   1162    000015 22       Skip:   RET
   1163    000016          
   1164    000016          ;------
   1165    000016          
   1166    000016 C0D0     NoZero: PUSH    PSW
   1167    000018              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 1)
   1168    000018 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   1169    00001B 7006             JNZ     DoCmp
   1170    00001D D0D0             POP     PSW
   1171    00001F              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   1172    00001F B3               CPL     C
   1173    000020 22               RET
   1174    000021          
   1175    000021 C3       NotGE:  CLR     C
   1176    000022 22               RET
   1177    000023          
   1178    000023          ;------
   1179    000023              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 1)
   1180    000023          
   1181    000023 33       DoCmp:  RLC     A
   1182    000024 D0D0             POP     PSW
   1183    000026              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   1184    000026 5014             JNC     NoSwap
   1185    000028          
   1186    000028 30E0F6           JNB     ACC.0,NotGE             ; @R0 <
                                                                    @R1
   1187    00002B          
   1188    00002B          ;------
   1189    00002B          
   1190    00002B C3       Swap:   CLR     C
   1191    00002C E7               MOV     A,@R1
   1192    00002D 96               SUBB    A,@R0
   1193    00002E 08               INC     R0
   1194    00002F 09               INC     R1
   1195    000030 E7               MOV     A,@R1
   1196    000031 96               SUBB    A,@R0
   1197    000032 08               INC     R0
   1198    000033 09               INC     R1
   1199    000034 E7               MOV     A,@R1
   1200    000035 96               SUBB    A,@R0
   1201    000036 08               INC     R0
   1202    000037 09               INC     R1
   1203    000038 E7               MOV     A,@R1
   1204    000039 96               SUBB    A,@R0
   1205    00003A B3               CPL     C
   1206    00003B 22               RET
   1207    00003C          
   1208    00003C          ;------
   1209    00003C          
   1210    00003C 20E0D5   NoSwap: JB      ACC.0,IsGE              ; @R0 >
                                                                    @R1
   1211    00003F          
   1212    00003F E6               MOV     A,@R0
   1213    000040 97               SUBB    A,@R1
   1214    000041 08               INC     R0
   1215    000042 09               INC     R1
   1216    000043 E6               MOV     A,@R0
   1217    000044 97               SUBB    A,@R1
   1218    000045 08               INC     R0
   1219    000046 09               INC     R1
   1220    000047 E6               MOV     A,@R0
   1221    000048 97               SUBB    A,@R1
   1222    000049 08               INC     R0
   1223    00004A 09               INC     R1
   1224    00004B E6               MOV     A,@R0
   1225    00004C 97               SUBB    A,@R1
   1226    00004D B3               CPL     C
   1227    00004E 22               RET
   1228    00004F                  
   1229    00004F          
   1230    00004F              cfi ENDBLOCK ?FLT_GE
   1231    00004F                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3     1167     1171
                                                                     1179     1183
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3     1167
                                                                     1171     1179     1183
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3     1167
                                                                     1171     1179     1183
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_GE             REL    CONST PUB UNTYP.       RCODE      0 
?FLT_GE_REW         REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_NAN       ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN_R1    ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_R1_REWABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_REW  ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DoCmp               REL    CONST UNTYP.           RCODE      23 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
IsGE                REL    CONST UNTYP.           RCODE      14 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoSwap              REL    CONST UNTYP.           RCODE      3C 
NoZero              REL    CONST UNTYP.           RCODE      16 
NotGE               REL    CONST UNTYP.           RCODE      21 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
Skip                REL    CONST UNTYP.           RCODE      15 
Swap                REL    CONST UNTYP.           RCODE      2B 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:AECA          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 82          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1232    000000          
   1233    000000          
   1234    000000          ;---------------------------------------------------
                           --------------------------
   1235    000000          ;
   1236    000000          ;       Function: ?FLT_LT
   1237    000000          ;
   1238    000000          ;       Description: Test if a float is greater or
                            equal to an other float.
   1239    000000          ;
   1240    000000          ;       Register input:
   1241    000000          ;               R0 Points to LSB in object
                            #1
   1242    000000          ;               R1 Points to LSB in object
                            #2
   1243    000000          ;
   1244    000000          ;       Register output:
   1245    000000          ;               A    = Is undefined.
   1246    000000          ;               R0   = R0 + 3
   1247    000000          ;               R1   = R1 + 3
   1248    000000          ;               CY   = 1 if @R0 <  @R1
   1249    000000          ;               CY   = 0 if @R0 >= @R1 or if one or
                            both operands are NAN
   1250    000000          ;
   1251    000000          ;       Stack usage: 5
   1252    000000          ;
   1253    000000          ;---------------------------------------------------
                           --------------------------
   1254    000000                  MODULE  ?FLT_LT
   1255    000000                  RSEG    RCODE:CODE:NOROOT       
   1256    000000                  PUBLIC  ?FLT_LT
   1257    000000                  PUBLIC  ?FLT_LT_REW
   1258    000000                  EXTERN  ?FLT_TEST_NAN
   1259    000000                  EXTERN  ?FLT_TEST_NAN_R1
   1260    000000                  EXTERN  ?FLT_TEST_ZERO_REW
   1261    000000                  EXTERN  ?FLT_TEST_ZERO_R1_REW
   1262    000000              cfi BLOCK ?FLT_LT_REW USING cfi_common
   1263    000000              cfi NOFUNCTION
   1264    000000          
   1265    000000              cfi A undefined
   1266    000000              cfi R0 undefined
   1267    000000              cfi R1 undefined
   1268    000000          
   1269    000000          ?FLT_LT_REW:
   1270    000000          
   1271    000000 18               DEC     R0
   1272    000001 18               DEC     R0
   1273    000002 18               DEC     R0
   1274    000003          
   1275    000003              cfi ENDBLOCK ?FLT_LT_REW
   1276    000003                  REQUIRE x
   1277    000003          
   1278    000003          ;------
   1279    000003          
   1280    000000                  RSEG    RCODE:CODE:NOROOT
   1281    000000              cfi BLOCK ?FLT_LT USING cfi_common
   1282    000000              cfi NOFUNCTION
   1283    000000          
   1284    000000              cfi A undefined
   1285    000000              cfi B undefined
   1286    000000              cfi R0 undefined
   1287    000000              cfi R1 undefined
   1288    000000          
   1289    000000          x:
   1290    000000          ?FLT_LT:
   1291    000000 12....           LCALL   ?FLT_TEST_NAN           ; Test if
                                                                    NAN and
                                                                    count up R0
                                                                    with
                                                                    3
   1292    000003 601B             JZ      NotLT
   1293    000005 12....           LCALL   ?FLT_TEST_NAN_R1        ; Test if
                                                                    NAN and
                                                                    count up R1
                                                                    with
                                                                    3
   1294    000008 6016             JZ      NotLT
   1295    00000A          
   1296    00000A 12....           LCALL   ?FLT_TEST_ZERO_REW
   1297    00000D 7007             JNZ     NoZero
   1298    00000F 12....           LCALL   ?FLT_TEST_ZERO_R1_REW   ; CY=Signbit
                                                                    of
                                                                    @R1
   1299    000012 600C             JZ      NotLT
   1300    000014 B3               CPL     C
   1301    000015 22       IsLT:   RET
   1302    000016          
   1303    000016          ;------
   1304    000016          
   1305    000016 C0D0     NoZero: PUSH    PSW
   1306    000018              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 1)
   1307    000018 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   1308    00001B 7005             JNZ     DoCmp
   1309    00001D D0D0             POP     PSW
   1310    00001F              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   1311    00001F 22               RET
   1312    000020          
   1313    000020 C3       NotLT:  CLR     C
   1314    000021 22       NotLT2: RET
   1315    000022          
   1316    000022          ;------
   1317    000022              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 1)
   1318    000022          
   1319    000022 33       DoCmp:  RLC     A
   1320    000023 D0D0             POP     PSW
   1321    000025              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   1322    000025 5013             JNC     NoSwap
   1323    000027          
   1324    000027 30E0EB           JNB     ACC.0,IsLT              ; @R0 <
                                                                    @R1
   1325    00002A          
   1326    00002A          ;------
   1327    00002A          
   1328    00002A C3       Swap:   CLR     C
   1329    00002B E7               MOV     A,@R1
   1330    00002C 96               SUBB    A,@R0
   1331    00002D 08               INC     R0
   1332    00002E 09               INC     R1
   1333    00002F E7               MOV     A,@R1
   1334    000030 96               SUBB    A,@R0
   1335    000031 08               INC     R0
   1336    000032 09               INC     R1
   1337    000033 E7               MOV     A,@R1
   1338    000034 96               SUBB    A,@R0
   1339    000035 08               INC     R0
   1340    000036 09               INC     R1
   1341    000037 E7               MOV     A,@R1
   1342    000038 96               SUBB    A,@R0
   1343    000039 22               RET
   1344    00003A          
   1345    00003A          ;------
   1346    00003A          
   1347    00003A 20E0E4   NoSwap: JB      ACC.0,NotLT2            ; @R0 >
                                                                    @R1
   1348    00003D          
   1349    00003D E6               MOV     A,@R0
   1350    00003E 97               SUBB    A,@R1
   1351    00003F 08               INC     R0
   1352    000040 09               INC     R1
   1353    000041 E6               MOV     A,@R0
   1354    000042 97               SUBB    A,@R1
   1355    000043 08               INC     R0
   1356    000044 09               INC     R1
   1357    000045 E6               MOV     A,@R0
   1358    000046 97               SUBB    A,@R1
   1359    000047 08               INC     R0
   1360    000048 09               INC     R1
   1361    000049 E6               MOV     A,@R0
   1362    00004A 97               SUBB    A,@R1
   1363    00004B 22               RET
   1364    00004C                  
   1365    00004C          
   1366    00004C              cfi ENDBLOCK ?FLT_LT
   1367    00004C                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3     1167     1171
                                                                     1179     1183     1306     1310
                                                                     1317     1321
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_LT             REL    CONST PUB UNTYP.       RCODE      0 
?FLT_LT_REW         REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_NAN       ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN_R1    ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_R1_REWABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_REW  ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DoCmp               REL    CONST UNTYP.           RCODE      22 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
IsLT                REL    CONST UNTYP.           RCODE      15 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoSwap              REL    CONST UNTYP.           RCODE      3A 
NoZero              REL    CONST UNTYP.           RCODE      16 
NotLT               REL    CONST UNTYP.           RCODE      20 
NotLT2              REL    CONST UNTYP.           RCODE      21 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
Swap                REL    CONST UNTYP.           RCODE      2A 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:E4A           #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 79          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1368    000000          
   1369    000000          
   1370    000000          ;---------------------------------------------------
                           --------------------------
   1371    000000          ;
   1372    000000          ;       Functions: Floating point arithmetic
                            operations
   1373    000000          ;
   1374    000000          ;- - - - - - - - - - - - - - - - - - - - - - - - - -
                            - - - - - - - - - - - - -
   1375    000000          ;
   1376    000000          ;       Function: ?FLT_MUL
   1377    000000          ;
   1378    000000          ;       Description: Multiply two floats (@R0 = @R0
                            * @R1)
   1379    000000          ;
   1380    000000          ;       Register input:
   1381    000000          ;               R0 Points to LSB in object #1
                            (destination)
   1382    000000          ;               R1 Points to LSB in object
                            #2
   1383    000000          ;
   1384    000000          ;       Register output:
   1385    000000          ;               A    = Is undefined.           
                            
   1386    000000          ;               B    = Is undefined.           
                            
   1387    000000          ;               R0   = R0
   1388    000000          ;               R1   = R1 + 3
   1389    000000          ;               CY   = Is undefined
   1390    000000          ;
   1391    000000          ;       Stack usage: 6
   1392    000000          ;
   1393    000000          ;---------------------------------------------------
                           --------------------------
   1394    000000                  MODULE  ?FLT_MUL
   1395    000000                  RSEG    RCODE:CODE:NOROOT       
   1396    000000                  PUBLIC  ?FLT_MUL
   1397    000000                  PUBLIC  ?FLT_MUL_REW
   1398    000000                  EXTERN  ?FLT_TEST_INF
   1399    000000                  EXTERN  ?FLT_TEST_INF_REW
   1400    000000                  EXTERN  ?FLT_TEST_INF_R1
   1401    000000                  EXTERN  ?FLT_TEST_INF_R1_REW
   1402    000000                  EXTERN  ?FLT_TEST_NAN
   1403    000000                  EXTERN  ?FLT_TEST_NAN_R1
   1404    000000                  EXTERN  ?FLT_TEST_ZERO_REW
   1405    000000                  EXTERN  ?FLT_TEST_ZERO_R1_REW
   1406    000000              cfi BLOCK ?FLT_MUL_REW USING cfi_common
   1407    000000              cfi NOFUNCTION
   1408    000000          
   1409    000000              cfi A undefined
   1410    000000              cfi B undefined
   1411    000000              cfi R0 undefined
   1412    000000              cfi R1 undefined
   1413    000000          
   1414    000000          ?FLT_MUL_REW:
   1415    000000          
   1416    000000 18               DEC     R0
   1417    000001 18               DEC     R0
   1418    000002 18               DEC     R0
   1419    000003          
   1420    000003              cfi ENDBLOCK ?FLT_MUL_REW
   1421    000003                  REQUIRE x
   1422    000003          
   1423    000003          ;------
   1424    000003          
   1425    000000                  RSEG    RCODE:CODE:NOROOT
   1426    000000          
   1427    000000              cfi BLOCK ?FLT_MUL USING cfi_common
   1428    000000              cfi NOFUNCTION
   1429    000000              cfi A undefined
   1430    000000              cfi B undefined
   1431    000000              cfi R0 undefined
   1432    000000              cfi R1 undefined
   1433    000000          x:
   1434    000000          ?FLT_MUL:
   1435    000000          
   1436    000000          ; Skip the operation if one of the operands is
                            NAN
   1437    000000 00               NOP
   1438    000001 12....           LCALL   ?FLT_TEST_NAN
   1439    000004 604F             JZ      AdjustAndReturn
   1440    000006 12....           LCALL   ?FLT_TEST_NAN_R1
   1441    000009 6012             JZ      ReturnNAN
   1442    00000B          
   1443    00000B          ; Combine the sign bits and store in destination
                            (@R0)
   1444    00000B          
   1445    00000B E7               MOV     A,@R1
   1446    00000C 5480             ANL     A,#128
   1447    00000E 66               XRL     A,@R0
   1448    00000F F6               MOV     @R0,A
   1449    000010          
   1450    000010          ; Test if destination is an infinite value
   1451    000010          
   1452    000010 12....           LCALL   ?FLT_TEST_INF_REW
   1453    000013 7011             JNZ     TestSrc
   1454    000015                  
   1455    000015 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   1456    000018 703B             JNZ     AdjustAndReturn
   1457    00001A          
   1458    00001A 09               INC     R1
   1459    00001B 09               INC     R1
   1460    00001C 09               INC     R1
   1461    00001D          
   1462    00001D          ReturnNAN:
   1463    00001D F4               CPL     A
   1464    00001E F6               MOV     @R0,A
   1465    00001F 18               DEC     R0
   1466    000020 F6               MOV     @R0,A
   1467    000021 18               DEC     R0
   1468    000022 F6               MOV     @R0,A
   1469    000023 18               DEC     R0
   1470    000024 F6               MOV     @R0,A
   1471    000025 22               RET
   1472    000026          
   1473    000026          ; Test if source is an infinite value
   1474    000026          
   1475    000026          TestSrc:
   1476    000026 12....           LCALL   ?FLT_TEST_INF_R1_REW
   1477    000029 7015             JNZ     NoINF
   1478    00002B          
   1479    00002B 12....           LCALL   ?FLT_TEST_ZERO_REW
   1480    00002E 08               INC     R0
   1481    00002F 08               INC     R0
   1482    000030 08               INC     R0
   1483    000031 60EA             JZ      ReturnNAN
   1484    000033 E6               MOV     A,@R0
   1485    000034 447F             ORL     A,#127
   1486    000036 F6               MOV     @R0,A
   1487    000037 18               DEC     R0
   1488    000038 7680             MOV     @R0,#128
   1489    00003A 18               DEC     R0
   1490    00003B E4               CLR     A
   1491    00003C F6               MOV     @R0,A
   1492    00003D 18               DEC     R0
   1493    00003E F6               MOV     @R0,A
   1494    00003F 22               RET
   1495    000040          
   1496    000040          ;------
   1497    000040          ; Test if one of the operands is zero
   1498    000040          
   1499    000040 12....   NoINF:  LCALL   ?FLT_TEST_ZERO_REW
   1500    000043 6016             JZ      JustReturn
   1501    000045 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   1502    000048 7012             JNZ     DoMul
   1503    00004A          
   1504    00004A E4               CLR     A
   1505    00004B F6               MOV     @R0,A
   1506    00004C 08               INC     R0
   1507    00004D F6               MOV     @R0,A
   1508    00004E 08               INC     R0
   1509    00004F F6               MOV     @R0,A
   1510    000050 08               INC     R0
   1511    000051 E6               MOV     A,@R0
   1512    000052 5480             ANL     A,#128
   1513    000054 F6               MOV     @R0,A
   1514    000055          
   1515    000055          AdjustAndReturn:
   1516    000055 09               INC     R1
   1517    000056 09               INC     R1
   1518    000057 09               INC     R1
   1519    000058 18               DEC     R0
   1520    000059 18               DEC     R0
   1521    00005A 18               DEC     R0
   1522    00005B          
   1523    00005B          JustReturn:
   1524    00005B 22               RET     
   1525    00005C          
   1526    00005C          
   1527    00005C EA       DoMul:  MOV     A,R2
   1528    00005D C0E0             PUSH    A
   1529    00005F              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 1)
   1530    00005F              cfi R2 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            1, 1)
   1531    00005F EB               MOV     A,R3
   1532    000060 C0E0             PUSH    A
   1533    000062              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 2)
   1534    000062              cfi R3 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            2, 1)
   1535    000062 EC               MOV     A,R4
   1536    000063 C0E0             PUSH    A
   1537    000065              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 3)
   1538    000065              cfi R4 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            3, 1)
   1539    000065 ED               MOV     A,R5
   1540    000066 C0E0             PUSH    A
   1541    000068              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   1542    000068              cfi R5 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            4, 1)
   1543    000068          
   1544    000068          ;                          S2 S1 S0
   1545    000068          ;                        * D2 D1 D0
   1546    000068          ;                          -----------
   1547    000068          ;                             S0*D0     1.
   1548    000068          ;                          S1*D0        3.
   1549    000068          ;                          S0*D1        2.
   1550    000068          ;                       S2*D0           4.
   1551    000068          ;                       S1*D1           5.
   1552    000068          ;                       S0*D2           6.
   1553    000068          ;                    S2*D1              8.
   1554    000068          ;                    S1*D2              7.
   1555    000068          ;               + S2*D2                 9.
   1556    000068          ;              -----------------------
   1557    000068          ;              =  M5 M4 M3 M2 M1 M0
   1558    000068          
   1559    000068          
   1560    000068 E6               MOV     A,@R0
   1561    000069 87F0             MOV     B,@R1
   1562    00006B A4               MUL     AB              ; S0*D0
   1563    00006C FB               MOV     R3,A
   1564    00006D ACF0             MOV     R4,B
   1565    00006F          
   1566    00006F          ;       R3 = M0
   1567    00006F          ;       R4 = M1
   1568    00006F          
   1569    00006F 08               INC     R0
   1570    000070 E6               MOV     A,@R0
   1571    000071 87F0             MOV     B,@R1
   1572    000073 A4               MUL     AB              ; S0*D1
   1573    000074 2C               ADD     A,R4
   1574    000075 FC               MOV     R4,A
   1575    000076 E4               CLR     A
   1576    000077 35F0             ADDC    A,B
   1577    000079 FA               MOV     R2,A
   1578    00007A          
   1579    00007A          ;       R3 = M0
   1580    00007A          ;       R4 = M1
   1581    00007A          ;       R2 = M2
   1582    00007A          
   1583    00007A 18               DEC     R0
   1584    00007B 09               INC     R1
   1585    00007C E6               MOV     A,@R0
   1586    00007D 87F0             MOV     B,@R1
   1587    00007F A4               MUL     AB              ; S1*D0
   1588    000080 2C               ADD     A,R4
   1589    000081 4B               ORL     A,R3            ; Collect sticky
                                                            bits
   1590    000082 6002             JZ      Skip
   1591    000084 7401             MOV     A,#1
   1592    000086          
   1593    000086 CA       Skip:   XCH     A,R2
   1594    000087 35F0             ADDC    A,B
   1595    000089 FC               MOV     R4,A
   1596    00008A E4               CLR     A
   1597    00008B 33               RLC     A
   1598    00008C FB               MOV     R3,A
   1599    00008D          
   1600    00008D          ;       R2 = M1 (sticky bits)
   1601    00008D          ;       R4 = M2
   1602    00008D          ;       R3 = M3
   1603    00008D          
   1604    00008D 09               INC     R1
   1605    00008E E6               MOV     A,@R0
   1606    00008F 87F0             MOV     B,@R1
   1607    000091 D2F7             SETB    B.7
   1608    000093 A4               MUL     AB              ; S2*D0
   1609    000094 2C               ADD     A,R4
   1610    000095 CB               XCH     A,R3
   1611    000096 35F0             ADDC    A,B
   1612    000098 FC               MOV     R4,A
   1613    000099          
   1614    000099          ;       R2 = M1 (sticky bits)
   1615    000099          ;       R3 = M2
   1616    000099          ;       R4 = M3
   1617    000099          
   1618    000099 19               DEC     R1
   1619    00009A 08               INC     R0
   1620    00009B E6               MOV     A,@R0
   1621    00009C 87F0             MOV     B,@R1
   1622    00009E A4               MUL     AB              ; S1*D1
   1623    00009F 2B               ADD     A,R3
   1624    0000A0 CC               XCH     A,R4
   1625    0000A1 35F0             ADDC    A,B
   1626    0000A3 FB               MOV     R3,A
   1627    0000A4 E4               CLR     A
   1628    0000A5 33               RLC     A
   1629    0000A6 FD               MOV     R5,A
   1630    0000A7          
   1631    0000A7          ;       R2 = M1 (sticky bits)
   1632    0000A7          ;       R4 = M2
   1633    0000A7          ;       R3 = M3
   1634    0000A7          ;       R5 = M4
   1635    0000A7          
   1636    0000A7 08               INC     R0
   1637    0000A8 19               DEC     R1
   1638    0000A9 E6               MOV     A,@R0
   1639    0000AA 87F0             MOV     B,@R1
   1640    0000AC D2E7             SETB    ACC.7
   1641    0000AE A4               MUL     AB              ; S0*D2
   1642    0000AF 2C               ADD     A,R4
   1643    0000B0 4A               ORL     A,R2
   1644    0000B1 CB               XCH     A,R3
   1645    0000B2 35F0             ADDC    A,B
   1646    0000B4 CD               XCH     A,R5
   1647    0000B5 3400             ADDC    A,#0
   1648    0000B7 FC               MOV     R4,A
   1649    0000B8          
   1650    0000B8          ;       R3 = M2 (sticky bits, guard bit & possible
                            result)
   1651    0000B8          ;       R5 = M3
   1652    0000B8          ;       R4 = M4
   1653    0000B8          
   1654    0000B8 09               INC     R1
   1655    0000B9 E6               MOV     A,@R0
   1656    0000BA 87F0             MOV     B,@R1
   1657    0000BC D2E7             SETB    ACC.7
   1658    0000BE A4               MUL     AB              ; S1*D2
   1659    0000BF 2D               ADD     A,R5
   1660    0000C0 CC               XCH     A,R4
   1661    0000C1 35F0             ADDC    A,B
   1662    0000C3 FD               MOV     R5,A
   1663    0000C4 E4               CLR     A
   1664    0000C5 33               RLC     A
   1665    0000C6 FA               MOV     R2,A    
   1666    0000C7          
   1667    0000C7          ;       R3 = M2 (sticky bits, guard bit & possible
                            result)
   1668    0000C7          ;       R4 = M3
   1669    0000C7          ;       R5 = M4
   1670    0000C7          ;       R2 = M5
   1671    0000C7          
   1672    0000C7 09               INC     R1
   1673    0000C8 18               DEC     R0
   1674    0000C9 E6               MOV     A,@R0
   1675    0000CA 87F0             MOV     B,@R1
   1676    0000CC D2F7             SETB    B.7
   1677    0000CE A4               MUL     AB              ; S2*D1
   1678    0000CF 2C               ADD     A,R4
   1679    0000D0 CD               XCH     A,R5
   1680    0000D1 35F0             ADDC    A,B
   1681    0000D3 CA               XCH     A,R2
   1682    0000D4 3400             ADDC    A,#0
   1683    0000D6 FC               MOV     R4,A
   1684    0000D7          
   1685    0000D7          ;       R3 = M2 (sticky bits, guard bit & possible
                            result)
   1686    0000D7          ;       R5 = M3
   1687    0000D7          ;       R2 = M4
   1688    0000D7          ;       R4 = M5
   1689    0000D7          
   1690    0000D7 08               INC     R0
   1691    0000D8 E6               MOV     A,@R0
   1692    0000D9 87F0             MOV     B,@R1
   1693    0000DB D2E7             SETB    ACC.7
   1694    0000DD D2F7             SETB    B.7
   1695    0000DF A4               MUL     AB              ; S2*D2
   1696    0000E0 2A               ADD     A,R2
   1697    0000E1 CC               XCH     A,R4
   1698    0000E2 35F0             ADDC    A,B
   1699    0000E4          
   1700    0000E4          ;       R3 = M2 (sticky bits, guard bit & possible
                            result)
   1701    0000E4          ;       R5 = M3
   1702    0000E4          ;       R4 = M4
   1703    0000E4          ;       A  = M5
   1704    0000E4          ;       CY = 0
   1705    0000E4          
   1706    0000E4 7A7E             MOV     R2,#126
   1707    0000E6 20E70B           JB      ACC.7,NoShift
   1708    0000E9          
   1709    0000E9          ;
   1710    0000E9          ; Shift up the mantissa if the ms bit is not
                            set
   1711    0000E9          ;
   1712    0000E9 0A               INC     R2
   1713    0000EA CB               XCH     A,R3
   1714    0000EB 33               RLC     A
   1715    0000EC CB               XCH     A,R3
   1716    0000ED CD               XCH     A,R5
   1717    0000EE 33               RLC     A
   1718    0000EF CD               XCH     A,R5
   1719    0000F0 CC               XCH     A,R4
   1720    0000F1 33               RLC     A
   1721    0000F2 CC               XCH     A,R4
   1722    0000F3 33               RLC     A
   1723    0000F4          
   1724    0000F4          NoShift:
   1725    0000F4 CB               XCH     A,R3            ; Here we know that
                                                            CY=0
   1726    0000F5 33               RLC     A
   1727    0000F6 5014             JNC     NoRoundUp
   1728    0000F8 7004             JNZ     RoundUp
   1729    0000FA ED               MOV     A,R5
   1730    0000FB 30E00E           JNB     ACC.0,NoRoundUp
   1731    0000FE          
   1732    0000FE          RoundUp:
   1733    0000FE D2F1             SETB    B.1
   1734    000100 E4               CLR     A
   1735    000101 CD               XCH     A,R5
   1736    000102 3D               ADDC    A,R5
   1737    000103 CD               XCH     A,R5
   1738    000104 CC               XCH     A,R4
   1739    000105 3C               ADDC    A,R4
   1740    000106 CC               XCH     A,R4
   1741    000107 3B               ADDC    A,R3
   1742    000108 5005             JNC     ClrMsb
   1743    00010A DA05             DJNZ    R2,CalcExp      ; This is always
                                                            jump true!
   1744    00010C          
   1745    00010C          NoRoundUp:
   1746    00010C C2F1             CLR     B.1
   1747    00010E EB               MOV     A,R3
   1748    00010F          ClrMsb:
   1749    00010F 547F             ANL     A,#127
   1750    000111          
   1751    000111          ;       R2 = Adjustment value for the exponent (127
                            or 126)
   1752    000111          ;       R5 = M3
   1753    000111          ;       R4 = M4
   1754    000111          ;       A  = M5
   1755    000111          ;       CY = 0
   1756    000111          
   1757    000111          CalcExp:
   1758    000111 C6               XCH     A,@R0
   1759    000112 33               RLC     A
   1760    000113 08               INC     R0
   1761    000114 E6               MOV     A,@R0
   1762    000115 33               RLC     A
   1763    000116 92F0             MOV     B.0,C
   1764    000118          
   1765    000118 FB               MOV     R3,A
   1766    000119 E7               MOV     A,@R1
   1767    00011A 33               RLC     A
   1768    00011B 09               INC     R1
   1769    00011C E7               MOV     A,@R1
   1770    00011D 33               RLC     A
   1771    00011E C3               CLR     C
   1772    00011F          
   1773    00011F 9A               SUBB    A,R2
   1774    000120 502D             JNC     PossibleOverflow
   1775    000122          
   1776    000122 2B               ADD     A,R3
   1777    000123 7019             JNZ     TestUnderflow
   1778    000125          
   1779    000125          ;
   1780    000125          ; Special case when the exponent is zero!
   1781    000125          ; Round up if all bits are set...
   1782    000125          ;
   1783    000125 0C               INC     R4
   1784    000126 0D               INC     R5
   1785    000127 4C               ORL     A,R4
   1786    000128 4D               ORL     A,R5
   1787    000129 7015             JNZ     Zero
   1788    00012B          
   1789    00012B 18               DEC     R0
   1790    00012C 06               INC     @R0
   1791    00012D E6               MOV     A,@R0
   1792    00012E 08               INC     R0
   1793    00012F C3               CLR     C
   1794    000130 33               RLC     A
   1795    000131 700D             JNZ     Zero
   1796    000133          
   1797    000133 20F10A           JB      B.1,Zero        ; Do not round up if
                                                            we have round up
                                                            before
   1798    000136 A2F0             MOV     C,B.0
   1799    000138 13               RRC     A
   1800    000139 F6               MOV     @R0,A
   1801    00013A E4               CLR     A
   1802    00013B 18               DEC     R0
   1803    00013C 800B             SJMP    ClrLow
   1804    00013E          
   1805    00013E          TestUnderflow:
   1806    00013E 4024             JC      PackAndStore
   1807    000140          
   1808    000140 E4       Zero:   CLR     A
   1809    000141 F6               MOV     @R0,A
   1810    000142 30F002           JNB     B.0,NoNeg
   1811    000145 7680             MOV     @R0,#128
   1812    000147          
   1813    000147 18       NoNeg:  DEC     R0
   1814    000148 F6               MOV     @R0,A
   1815    000149 18       ClrLow: DEC     R0
   1816    00014A F6               MOV     @R0,A
   1817    00014B 18               DEC     R0
   1818    00014C F6               MOV     @R0,A
   1819    00014D 8024             SJMP    PopAndReturn
   1820    00014F          
   1821    00014F          PossibleOverflow:
   1822    00014F D3               SETB    C
   1823    000150 3B               ADDC    A,R3
   1824    000151 14               DEC     A
   1825    000152 5010             JNC     PackAndStore
   1826    000154          
   1827    000154 74FF             MOV     A,#255
   1828    000156 A2F0             MOV     C,B.0
   1829    000158 13               RRC     A
   1830    000159 F6               MOV     @R0,A
   1831    00015A 18               DEC     R0
   1832    00015B 7680             MOV     @R0,#128
   1833    00015D E4               CLR     A
   1834    00015E 18               DEC     R0
   1835    00015F F6               MOV     @R0,A
   1836    000160 18               DEC     R0
   1837    000161 F6               MOV     @R0,A
   1838    000162 800F             SJMP    PopAndReturn            
   1839    000164          
   1840    000164          PackAndStore:
   1841    000164 A2F0             MOV     C,B.0
   1842    000166 13               RRC     A
   1843    000167 F6               MOV     @R0,A
   1844    000168 18               DEC     R0
   1845    000169 E6               MOV     A,@R0
   1846    00016A 33               RLC     A
   1847    00016B 03               RR      A
   1848    00016C F6               MOV     @R0,A
   1849    00016D 18               DEC     R0
   1850    00016E EC               MOV     A,R4
   1851    00016F F6               MOV     @R0,A
   1852    000170 18               DEC     R0
   1853    000171 ED               MOV     A,R5
   1854    000172 F6               MOV     @R0,A
   1855    000173          
   1856    000173          PopAndReturn:
   1857    000173          
   1858    000173 D0E0             POP     A
   1859    000175              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 3)
   1860    000175 FD               MOV     R5,A
   1861    000176              cfi R5 samevalue
   1862    000176 D0E0             POP     A
   1863    000178              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 2)
   1864    000178 FC               MOV     R4,A
   1865    000179              cfi R4 samevalue
   1866    000179 D0E0             POP     A
   1867    00017B              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 1)
   1868    00017B FB               MOV     R3,A
   1869    00017C              cfi R3 samevalue
   1870    00017C D0E0             POP     A
   1871    00017E              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   1872    00017E FA               MOV     R2,A
   1873    00017F              cfi R2 samevalue
   1874    00017F 22               RET
   1875    000180                  
   1876    000180              cfi ENDBLOCK ?FLT_MUL
   1877    000180                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3     1167     1171
                                                                     1179     1183     1306     1310
                                                                     1317     1321     1529     1530
                                                                     1533     1534     1537     1538
                                                                     1541     1542     1859     1863
                                                                     1867     1871
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321     1529
                                                                     1533     1537     1541     1859
                                                                     1863     1867     1871
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321     1529
                                                                     1530     1533     1534     1537
                                                                     1538     1541     1542     1859
                                                                     1863     1867     1871
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_MUL            REL    CONST PUB UNTYP.       RCODE      0 
?FLT_MUL_REW        REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_INF       ABS    CONST EXT [unref] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_R1    ABS    CONST EXT [unref] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_R1_REWABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_REW   ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN       ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN_R1    ABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_R1_REWABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_REW  ABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
AdjustAndReturn     REL    CONST UNTYP.           RCODE      55 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
CalcExp             REL    CONST UNTYP.           RCODE      111 
ClrLow              REL    CONST UNTYP.           RCODE      149 
ClrMsb              REL    CONST UNTYP.           RCODE      10F 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DoMul               REL    CONST UNTYP.           RCODE      5C 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
Frame               REL    CONST UNTYP.           RCODE      Not solved 
JustReturn          REL    CONST UNTYP.           RCODE      5B 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NoINF               REL    CONST UNTYP.           RCODE      40 
NoNeg               REL    CONST UNTYP.           RCODE      147 
NoRoundUp           REL    CONST UNTYP.           RCODE      10C 
NoShift             REL    CONST UNTYP.           RCODE      F4 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
PackAndStore        REL    CONST UNTYP.           RCODE      164 
PopAndReturn        REL    CONST UNTYP.           RCODE      173 
PossibleOverflow    REL    CONST UNTYP.           RCODE      14F 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
ReturnNAN           REL    CONST UNTYP.           RCODE      1D 
RoundUp             REL    CONST UNTYP.           RCODE      FE 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
Skip                REL    CONST UNTYP.           RCODE      86 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
TestSrc             REL    CONST UNTYP.           RCODE      26 
TestUnderflow       REL    CONST UNTYP.           RCODE      13E 
USING               REL    CONST UNTYP.           RCODE      Not solved 
Zero                REL    CONST UNTYP.           RCODE      140 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:319F          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 387         #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1878    000000          
   1879    000000          
   1880    000000          ;---------------------------------------------------
                           --------------------------
   1881    000000          ;
   1882    000000          ;       Function: ?FLT_SUB
   1883    000000          ;
   1884    000000          ;       Description: Subtract a float from another
                            (@R0 = @R0 - @R1)
   1885    000000          ;
   1886    000000          ;       Register input:
   1887    000000          ;               R0 Points to LSB in object #1
                            (destination)
   1888    000000          ;               R1 Points to LSB in object
                            #2
   1889    000000          ;
   1890    000000          ;       Register output:
   1891    000000          ;               A    = Is undefined.           
                            
   1892    000000          ;               B    = Is undefined.           
                            
   1893    000000          ;               R0   = R0
   1894    000000          ;               R1   = R1 + 3
   1895    000000          ;               CY   = Is undefined
   1896    000000          ;
   1897    000000          ;       Stack usage: 6
   1898    000000          ;
   1899    000000          ;---------------------------------------------------
                           --------------------------
   1900    000000                  MODULE  ?FLT_ADD
   1901    000000                  RSEG    RCODE:CODE:NOROOT       
   1902    000000                  PUBLIC  ?FLT_ADD
   1903    000000                  PUBLIC  ?FLT_ADD_REW
   1904    000000                  PUBLIC  ?FLT_SUB
   1905    000000                  PUBLIC  ?FLT_SUB_REW
   1906    000000                  EXTERN  ?FLT_TEST_INF
   1907    000000                  EXTERN  ?FLT_TEST_INF_REW
   1908    000000                  EXTERN  ?FLT_TEST_INF_R1
   1909    000000                  EXTERN  ?FLT_TEST_INF_R1_REW
   1910    000000                  EXTERN  ?FLT_TEST_NAN
   1911    000000                  EXTERN  ?FLT_TEST_NAN_R1
   1912    000000                  EXTERN  ?FLT_TEST_ZERO_REW
   1913    000000                  EXTERN  ?FLT_TEST_ZERO_R1_REW
   1914    000000              cfi BLOCK ?FLT_SUB_REW USING cfi_common
   1915    000000              cfi NOFUNCTION
   1916    000000          
   1917    000000              cfi A undefined
   1918    000000              cfi B undefined
   1919    000000              cfi R0 undefined
   1920    000000              cfi R1 undefined
   1921    000000          
   1922    000000          ?FLT_SUB_REW:
   1923    000000          
   1924    000000 18               DEC     R0
   1925    000001 18               DEC     R0
   1926    000002 18               DEC     R0
   1927    000003          
   1928    000003              cfi ENDBLOCK ?FLT_SUB_REW
   1929    000003                  REQUIRE ?FLT_SUB
   1930    000003          
   1931    000003          ;------
   1932    000003          
   1933    000000                  RSEG    RCODE:CODE:NOROOT
   1934    000000              cfi BLOCK ?FLT_SUB USING cfi_common
   1935    000000              cfi NOFUNCTION
   1936    000000          
   1937    000000              cfi A undefined
   1938    000000              cfi B undefined
   1939    000000              cfi R0 undefined
   1940    000000              cfi R1 undefined
   1941    000000          
   1942    000000          ?FLT_SUB:
   1943    000000 12....           LCALL   ?FLT_TEST_NAN_R1
   1944    000003 60..             JZ      AdjustAndReturnNAN
   1945    000005          
   1946    000005 12....           LCALL   ?FLT_TEST_NAN
   1947    000008 60..             JZ      AdjustAndReturn
   1948    00000A                  
   1949    00000A E9               MOV     A,R1
   1950    00000B 68               XRL     A,R0
   1951    00000C 7008             JNZ     NoZero
   1952    00000E          ;
   1953    00000E F6               MOV     @R0,A
   1954    00000F 18               DEC     R0
   1955    000010 F6               MOV     @R0,A
   1956    000011 18               DEC     R0
   1957    000012 F6               MOV     @R0,A
   1958    000013 18               DEC     R0
   1959    000014 F6               MOV     @R0,A
   1960    000015 22               RET
   1961    000016          
   1962    000016 7480     NoZero: MOV     A,#128
   1963    000018 67               XRL     A,@R1
   1964    000019 F7               MOV     @R1,A
   1965    00001A 12....           LCALL   SubEntry
   1966    00001D 09               INC     R1
   1967    00001E 09               INC     R1
   1968    00001F 09               INC     R1
   1969    000020 7480             MOV     A,#128
   1970    000022 67               XRL     A,@R1
   1971    000023 F7               MOV     @R1,A
   1972    000024 22               RET
   1973    000025          
   1974    000025              cfi ENDBLOCK ?FLT_SUB
   1975    000025          
   1976    000025          
   1977    000025          ;---------------------------------------------------
                           --------------------------
   1978    000025          ;
   1979    000025          ;       Function: ?FLT_ADD
   1980    000025          ;
   1981    000025          ;       Description: Add two floats (@R0 = @R0 +
                            @R1)
   1982    000025          ;
   1983    000025          ;       Register input:
   1984    000025          ;               R0 Points to LSB in object #1
                            (destination)
   1985    000025          ;               R1 Points to LSB in object
                            #2
   1986    000025          ;
   1987    000025          ;       Register output:
   1988    000025          ;               A    = Is undefined.           
                            
   1989    000025          ;               B    = Is undefined.           
                            
   1990    000025          ;               R0   = R0
   1991    000025          ;               R1   = R1
   1992    000025          ;               CY   = Is undefined
   1993    000025          ;
   1994    000025          ;       Stack usage: 6
   1995    000025          ;
   1996    000025          ;---------------------------------------------------
                           --------------------------
   1997    000000                  RSEG    RCODE:CODE:NOROOT       
   1998    000000              cfi BLOCK ?FLT_ADD_REW USING cfi_common
   1999    000000              cfi NOFUNCTION
   2000    000000          
   2001    000000              cfi A undefined
   2002    000000              cfi B undefined
   2003    000000              cfi R0 undefined
   2004    000000              cfi R1 undefined
   2005    000000          
   2006    000000          ?FLT_ADD_REW:
   2007    000000          
   2008    000000 18               DEC     R0
   2009    000001 18               DEC     R0
   2010    000002 18               DEC     R0
   2011    000003          
   2012    000003              cfi ENDBLOCK ?FLT_ADD_REW
   2013    000003                  REQUIRE x
   2014    000003          
   2015    000003          ;------
   2016    000003          
   2017    000000                  RSEG    RCODE:CODE:NOROOT
   2018    000000              cfi BLOCK ?FLT_ADD USING cfi_common
   2019    000000              cfi NOFUNCTION
   2020    000000          
   2021    000000              cfi A undefined
   2022    000000              cfi B undefined
   2023    000000              cfi R0 undefined
   2024    000000              cfi R1 undefined
   2025    000000          
   2026    000000          
   2027    000000          x:
   2028    000000          ?FLT_ADD:
   2029    000000 12....           LCALL   ?FLT_TEST_NAN
   2030    000003 601D             JZ      AdjustAndReturn
   2031    000005 12....           LCALL   ?FLT_TEST_NAN_R1
   2032    000008 7005             JNZ     TestINF
   2033    00000A          
   2034    00000A 19               DEC     R1
   2035    00000B 19               DEC     R1
   2036    00000C 19               DEC     R1
   2037    00000D 801A             SJMP    ReturnNAN
   2038    00000F          
   2039    00000F          ;------
   2040    00000F          
   2041    00000F          SubEntry:
   2042    00000F          TestINF:
   2043    00000F 12....           LCALL   ?FLT_TEST_INF_REW
   2044    000012 701F             JNZ     TestSrc
   2045    000014          
   2046    000014 12....           LCALL   ?FLT_TEST_INF_R1_REW
   2047    000017 C3               CLR     C
   2048    000018 7003             JNZ     ReturnINF
   2049    00001A          
   2050    00001A E6               MOV     A,@R0
   2051    00001B 67               XRL     A,@R1
   2052    00001C 33               RLC     A
   2053    00001D          
   2054    00001D          ReturnINF:
   2055    00001D 19               DEC     R1
   2056    00001E 19               DEC     R1
   2057    00001F 19               DEC     R1
   2058    000020 4007             JC      ReturnNAN
   2059    000022          
   2060    000022          AdjustAndReturn:
   2061    000022 18               DEC     R0
   2062    000023 18               DEC     R0
   2063    000024 18               DEC     R0
   2064    000025 22               RET
   2065    000026          
   2066    000026          AdjustAndReturnNAN:
   2067    000026 08               INC     R0
   2068    000027 08               INC     R0
   2069    000028 08               INC     R0
   2070    000029          
   2071    000029          ReturnNAN:
   2072    000029 74FF             MOV     A,#255
   2073    00002B F6               MOV     @R0,A
   2074    00002C 18               DEC     R0
   2075    00002D F6               MOV     @R0,A
   2076    00002E 18               DEC     R0
   2077    00002F F6               MOV     @R0,A
   2078    000030 18               DEC     R0
   2079    000031 F6               MOV     @R0,A
   2080    000032 22               RET
   2081    000033                  
   2082    000033                  
   2083    000033          TestSrc:
   2084    000033 12....           LCALL   ?FLT_TEST_INF_R1_REW
   2085    000036 6017             JZ      CopySrc
   2086    000038                  
   2087    000038          ;------
   2088    000038          
   2089    000038 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   2090    00003B 7021             JNZ     TestDst
   2091    00003D          
   2092    00003D 92F0             MOV     B.0,C
   2093    00003F 12....           LCALL   ?FLT_TEST_ZERO_REW
   2094    000042 7019             JNZ     Return
   2095    000044 5017             JNC     Return
   2096    000046 20F014           JB      B.0,Return
   2097    000049          
   2098    000049          CopyRew:
   2099    000049 08               INC     R0
   2100    00004A 08               INC     R0
   2101    00004B 08               INC     R0
   2102    00004C 09               INC     R1
   2103    00004D 09               INC     R1
   2104    00004E 09               INC     R1
   2105    00004F          CopySrc:
   2106    00004F E7               MOV     A,@R1
   2107    000050 F6               MOV     @R0,A
   2108    000051 18               DEC     R0
   2109    000052 19               DEC     R1
   2110    000053 E7               MOV     A,@R1
   2111    000054 F6               MOV     @R0,A
   2112    000055 18               DEC     R0
   2113    000056 19               DEC     R1
   2114    000057 E7               MOV     A,@R1
   2115    000058 F6               MOV     @R0,A
   2116    000059 18               DEC     R0
   2117    00005A 19               DEC     R1
   2118    00005B E7               MOV     A,@R1
   2119    00005C F6               MOV     @R0,A
   2120    00005D 22       Return: RET
   2121    00005E          
   2122    00005E          TestDst:
   2123    00005E 12....           LCALL   ?FLT_TEST_ZERO_REW
   2124    000061 60E6             JZ      CopyRew
   2125    000063          
   2126    000063          ;------
   2127    000063          
   2128    000063 E8               MOV     A,R0
   2129    000064 69               XRL     A,R1
   2130    000065 701F             JNZ     DoAdd
   2131    000067          
   2132    000067 08               INC     R0
   2133    000068 08               INC     R0
   2134    000069 E6               MOV     A,@R0
   2135    00006A 2480             ADD     A,#128
   2136    00006C F6               MOV     @R0,A
   2137    00006D 08               INC     R0
   2138    00006E E4               CLR     A
   2139    00006F 36               ADDC    A,@R0
   2140    000070 F6               MOV     @R0,A
   2141    000071 18               DEC     R0
   2142    000072 547F             ANL     A,#127
   2143    000074 B47F0C           CJNE    A,#127,GoBack
   2144    000077 E6               MOV     A,@R0
   2145    000078 5480             ANL     A,#128
   2146    00007A 6007             JZ      GoBack
   2147    00007C          
   2148    00007C F6               MOV     @R0,A
   2149    00007D E4               CLR     A
   2150    00007E 18               DEC     R0
   2151    00007F F6               MOV     @R0,A
   2152    000080 18               DEC     R0
   2153    000081 F6               MOV     @R0,A
   2154    000082 22               RET
   2155    000083          
   2156    000083 18       GoBack: DEC     R0
   2157    000084 18               DEC     R0
   2158    000085 22               RET
   2159    000086                  
   2160    000086          ;-----------------------;
   2161    000086          ;   The FLT_ADD core    ;
   2162    000086          ;                       ;
   2163    000086          ; Use the old float ADD ;
   2164    000086          ; while the new one is  ;
   2165    000086          ; "getting better".     ;
   2166    000086          ;-----------------------;
   2167    000086          DoAdd:
   2168    000086          
   2169    000086          ;-----------
   2170    000086          ; Old core
   2171    000086          ;
   2172    000086          
   2173    000086 E9               MOV     A,R1
   2174    000087 C6               XCH     A,@R0
   2175    000088 CC               XCH     A,R4
   2176    000089 08               INC     R0
   2177    00008A C6               XCH     A,@R0
   2178    00008B CD               XCH     A,R5
   2179    00008C 08               INC     R0
   2180    00008D C6               XCH     A,@R0
   2181    00008E CE               XCH     A,R6
   2182    00008F 08               INC     R0
   2183    000090 C6               XCH     A,@R0
   2184    000091 CF               XCH     A,R7
   2185    000092 C0E0             PUSH    A
   2186    000094              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 1)
   2187    000094              cfi R7 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            1, 1)
   2188    000094 E8               MOV     A,R0
   2189    000095 C0E0             PUSH    A
   2190    000097              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 2)
   2191    000097              cfi R0 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            2, 1)
   2192    000097 EA               MOV     A,R2
   2193    000098 C0E0             PUSH    A
   2194    00009A              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 3)
   2195    00009A              cfi R2 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            3, 1)
   2196    00009A EB               MOV     A,R3
   2197    00009B C0E0             PUSH    A
   2198    00009D              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   2199    00009D              cfi R3 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            4, 1)
   2200    00009D 09               INC     R1
   2201    00009E E9               MOV     A,R1
   2202    00009F F8               MOV     R0,A
   2203    0000A0 09               INC     R1
   2204    0000A1 E7               MOV     A,@R1
   2205    0000A2 FA               MOV     R2,A
   2206    0000A3 09               INC     R1
   2207    0000A4 E7               MOV     A,@R1
   2208    0000A5 FB               MOV     R3,A
   2209    0000A6 E6               MOV     A,@R0
   2210    0000A7 F9               MOV     R1,A
   2211    0000A8 18               DEC     R0
   2212    0000A9 E6               MOV     A,@R0
   2213    0000AA F8               MOV     R0,A
   2214    0000AB          ;-+-+-+-+-+-+-+-+-+-+-+-+-+-
   2215    0000AB          
   2216    0000AB          ;
   2217    0000AB          ;       First swap NOS and TOS if the absolute value
                            of TOS is 
   2218    0000AB          ;       higher than NOS
   2219    0000AB          ;
   2220    0000AB          
   2221    0000AB C3               CLR     C
   2222    0000AC EC               MOV     A,R4            ; abs(NOS) -
                                                            abs(TOS)
   2223    0000AD 98               SUBB    A,R0
   2224    0000AE ED               MOV     A,R5
   2225    0000AF 99               SUBB    A,R1
   2226    0000B0 EE               MOV     A,R6
   2227    0000B1 9A               SUBB    A,R2
   2228    0000B2 EB               MOV     A,R3
   2229    0000B3 C2E7             CLR     ACC.7
   2230    0000B5 F5F0             MOV     B,A
   2231    0000B7 EF               MOV     A,R7
   2232    0000B8 C2E7             CLR     ACC.7
   2233    0000BA 95F0             SUBB    A,B
   2234    0000BC 500E             JNC     NO_SWAP         ; Jump if abs(NOS)
                                                            >= abs(TOS)
   2235    0000BE 600C             JZ      NO_SWAP
   2236    0000C0          
   2237    0000C0 EB               MOV     A,R3            ; Swap NOS with
                                                            TOS
   2238    0000C1 CF               XCH     A,R7
   2239    0000C2 FB               MOV     R3,A
   2240    0000C3 EA               MOV     A,R2
   2241    0000C4 CE               XCH     A,R6
   2242    0000C5 FA               MOV     R2,A
   2243    0000C6 E9               MOV     A,R1
   2244    0000C7 CD               XCH     A,R5
   2245    0000C8 F9               MOV     R1,A
   2246    0000C9 E8               MOV     A,R0
   2247    0000CA CC               XCH     A,R4
   2248    0000CB F8               MOV     R0,A
   2249    0000CC          
   2250    0000CC          NO_SWAP:
   2251    0000CC          ;
   2252    0000CC          ;       Now we have the knowledge that abs(NOS) >=
                            abs(TOS) !!!
   2253    0000CC          ;
   2254    0000CC          ;
   2255    0000CC          ;       Unpack the incoming operands
   2256    0000CC          ;
   2257    0000CC EA               MOV     A,R2
   2258    0000CD A2E7             MOV     C,ACC.7         ; TOSE LSBit
   2259    0000CF D2E7             SETB    ACC.7
   2260    0000D1 FA               MOV     R2,A    
   2261    0000D2 EB               MOV     A,R3
   2262    0000D3 33               RLC     A
   2263    0000D4 FB               MOV     R3,A            ; TOSE in R3
   2264    0000D5 13               RRC     A       
   2265    0000D6 F5F0             MOV     B,A             ; TOSS in B.7
   2266    0000D8                  
   2267    0000D8 EE               MOV     A,R6
   2268    0000D9 A2E7             MOV     C,ACC.7         ; NOSE LSBit
   2269    0000DB D2E7             SETB    ACC.7
   2270    0000DD FE               MOV     R6,A    
   2271    0000DE EF               MOV     A,R7
   2272    0000DF 33               RLC     A
   2273    0000E0 FF               MOV     R7,A            ; NOSE in R7
   2274    0000E1 C5F0             XCH     A,B
   2275    0000E3 13               RRC     A               ; TOSS in A.6 and
                                                            NOSS in A.7
   2276    0000E4 A2E7             MOV     C,ACC.7 
   2277    0000E6 30E601           JNB     ACC.6,L0
   2278    0000E9 B3               CPL     C
   2279    0000EA 13       L0:     RRC     A               
   2280    0000EB C5F0             XCH     A,B             ; TOSS xor NOSS in
                                                            B.7, NOSS in
                                                            B.6,
   2281    0000ED                                          ; TOSS in B.5, NOSE
                            in A
   2282    0000ED C3               CLR     C
   2283    0000EE          
   2284    0000EE          ;
   2285    0000EE          ;       Let RESE = NOSE, RESS = NOSS, RESM2 = NOSS ^
                            TOSS
   2286    0000EE          ;
   2287    0000EE                  
   2288    0000EE C0E0             PUSH    ACC
   2289    0000F0              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 5)
   2290    0000F0              cfi R3 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            5, 1)
   2291    0000F0 C0F0             PUSH    B
   2292    0000F2              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 6)
   2293    0000F2              cfi R3 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            6, 1)
   2294    0000F2 7F00             MOV     R7,#0
   2295    0000F4          
   2296    0000F4          ;       Compute the number of shifts to be done
                            before internal add or sub.
   2297    0000F4          ;
   2298    0000F4          ;       Use register R3 for saving no_of_shift
   2299    0000F4          ;
   2300    0000F4                  
   2301    0000F4 C3               CLR     C
   2302    0000F5 9B               SUBB    A,R3                    ; R0 = NOSE
                                                                    -
                                                                    TOSE
   2303    0000F6 FB               MOV     R3,A
   2304    0000F7 605B             JZ      CHOSE_ADD_OR_SUB        ; Jump if no
                                                                    shifting
   2305    0000F9          ;
   2306    0000F9          ;       Under special circumstances we know that the
                            result shall
   2307    0000F9          ;       be equal to NOS, namely:
   2308    0000F9          ;
   2309    0000F9          ;       TOS == 0 (checked out already!)
   2310    0000F9          ;       no_shift >= 25          
   2311    0000F9          ;
   2312    0000F9          ;       So if one of above conditions exist then let
                            RESM = NOSM and exit
   2313    0000F9          ;
   2314    0000F9          
   2315    0000F9 9418             SUBB    A,#24
   2316    0000FB 600C             JZ      L20
   2317    0000FD 401A             JC      L21
   2318    0000FF          
   2319    0000FF D0E0             POP     ACC                     ; Load
                                                                    RESE,RESS
   2320    000101              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 5)
   2321    000101 23               RL      A
   2322    000102 F9               MOV     R1,A
   2323    000103 D0E0             POP     ACC
   2324    000105              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   2325    000105 F8               MOV     R0,A
   2326    000106 02....           LJMP    ?F_PACK_L02
   2327    000109          ;
   2328    000109          ;       Now we have to compute the mantissa result.
                            To do this we have
   2329    000109          ;       a knowledge of how many potenses it's differ
                            between NOS and TOS,
   2330    000109          ;       If we shifts TOS that number to the right
                            (in RESM, 4-bytes) a 
   2331    000109          ;       simple add or sub between NOSM and RESM can
                            be done:
   2332    000109          ;
   2333    000109          ;       Use the following registers for RESM
                            R1:R2:R3:R4
   2334    000109          ;
   2335    000109          
   2336    000109              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 6)
   2337    000109          L20:
   2338    000109          ;
   2339    000109          ;       24 bit shift. Special case!!!
   2340    000109          ;
   2341    000109          
   2342    000109 8AF0             MOV     B,R2
   2343    00010B E9               MOV     A,R1
   2344    00010C 48               ORL     A,R0
   2345    00010D 6003             JZ      L200
   2346    00010F D2F0             SETB    B.0
   2347    000111 E4               CLR     A
   2348    000112          L200:   
   2349    000112 AFF0             MOV     R7,B
   2350    000114 FA               MOV     R2,A
   2351    000115 F9               MOV     R1,A
   2352    000116 F8               MOV     R0,A
   2353    000117 803B             SJMP    CHOSE_ADD_OR_SUB
   2354    000119          
   2355    000119          L21:
   2356    000119 EB               MOV     A,R3
   2357    00011A 30E40D           JNB     ACC.4,L22
   2358    00011D          ;
   2359    00011D          ;       16 bit shift
   2360    00011D          ;
   2361    00011D          
   2362    00011D 89F0             MOV     B,R1
   2363    00011F EA               MOV     A,R2
   2364    000120 6003             JZ      L210
   2365    000122 D2F0             SETB    B.0
   2366    000124 E4               CLR     A
   2367    000125          L210:
   2368    000125 AFF0             MOV     R7,B
   2369    000127 F9               MOV     R1,A
   2370    000128 CA               XCH     A,R2
   2371    000129 F8               MOV     R0,A
   2372    00012A          
   2373    00012A          L22:
   2374    00012A EB               MOV     A,R3
   2375    00012B 30E30D           JNB     ACC.3,L23
   2376    00012E          ;
   2377    00012E          ;       8 bit shift
   2378    00012E          ;
   2379    00012E          
   2380    00012E 88F0             MOV     B,R0
   2381    000130 EF               MOV     A,R7
   2382    000131 6002             JZ      L220
   2383    000133 D2F0             SETB    B.0
   2384    000135          L220:
   2385    000135 AFF0             MOV     R7,B
   2386    000137 E4               CLR     A
   2387    000138 CA               XCH     A,R2
   2388    000139 C9               XCH     A,R1
   2389    00013A F8               MOV     R0,A
   2390    00013B          
   2391    00013B          L23:
   2392    00013B EB               MOV     A,R3
   2393    00013C 5407             ANL     A,#7
   2394    00013E 6014             JZ      CHOSE_ADD_OR_SUB
   2395    000140 FB               MOV     R3,A
   2396    000141          ;
   2397    000141          ;       TOSM >> X
   2398    000141          ;
   2399    000141          
   2400    000141          SHIFT_LOOP:
   2401    000141 C3               CLR     C
   2402    000142 EA               MOV     A,R2
   2403    000143 13               RRC     A
   2404    000144 FA               MOV     R2,A
   2405    000145 E9               MOV     A,R1
   2406    000146 13               RRC     A
   2407    000147 F9               MOV     R1,A
   2408    000148 E8               MOV     A,R0
   2409    000149 13               RRC     A
   2410    00014A F8               MOV     R0,A
   2411    00014B EF               MOV     A,R7
   2412    00014C 13               RRC     A
   2413    00014D 5002             JNC     L24
   2414    00014F D2E0             SETB    ACC.0
   2415    000151 FF       L24:    MOV     R7,A
   2416    000152 DBED             DJNZ    R3,SHIFT_LOOP
   2417    000154          ;
   2418    000154          ;       Now we have loaded RESM in registers with
                            NOSM in right place.
   2419    000154          ;       If TOSS == NOSS then an internal add is to
                            be done, else sub !
   2420    000154          ;
   2421    000154          
   2422    000154              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 6)
   2423    000154          CHOSE_ADD_OR_SUB:
   2424    000154 D0E0             POP     ACC                     ; Get NOSS
                                                                    xor
                                                                    TOSS
   2425    000156              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 5)
   2426    000156 C0E0             PUSH    ACC
   2427    000158              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 6)
   2428    000158              cfi R3 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            6, 1)
   2429    000158 30E739           JNB     ACC.7,DO_ADD            ; If equal
                                                                    do an
                                                                    add
   2430    00015B          ;
   2431    00015B          ; Do the subtraction
   2432    00015B          ;
   2433    00015B          
   2434    00015B C3               CLR     C
   2435    00015C E4               CLR     A
   2436    00015D 9F               SUBB    A,R7
   2437    00015E FF               MOV     R7,A
   2438    00015F F5F0             MOV     B,A
   2439    000161 EC               MOV     A,R4
   2440    000162 98               SUBB    A,R0
   2441    000163 FC               MOV     R4,A
   2442    000164 42F0             ORL     B,A
   2443    000166 ED               MOV     A,R5
   2444    000167 99               SUBB    A,R1
   2445    000168 FD               MOV     R5,A
   2446    000169 42F0             ORL     B,A
   2447    00016B EE               MOV     A,R6
   2448    00016C 9A               SUBB    A,R2
   2449    00016D FE               MOV     R6,A
   2450    00016E 42F0             ORL     B,A
   2451    000170          
   2452    000170 D0E0             POP     ACC                     ; Get
                                                                    RESS
   2453    000172              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 5)
   2454    000172 F9               MOV     R1,A
   2455    000173 D0E0             POP     ACC                     ; Get
                                                                    RESE
   2456    000175              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   2457    000175 F8               MOV     R0,A
   2458    000176 E5F0             MOV     A,B
   2459    000178          
   2460    000178 607A             JZ      AddEnd                  ; Return
                                                                    zero
   2461    00017A          SUB_ADJ:
   2462    00017A E9               MOV     A,R1                    ; Get
                                                                    correct
                                                                    sign in
                                                                    R1.7
   2463    00017B 23               RL      A
   2464    00017C F9               MOV     R1,A
   2465    00017D          
   2466    00017D EE               MOV     A,R6
   2467    00017E          LLL:
   2468    00017E 20E742           JB      ACC.7,?F_ROUND_L02      ; Jump if no
                                                                    change in
                                                                    RESE
   2469    000181          LL:
   2470    000181 D802             DJNZ    R0,SUB_SHIFT            ; RESE--
   2471    000183 8067             SJMP    ?F_UNDERFLOW_L02
   2472    000185          
   2473    000185          SUB_SHIFT:
   2474    000185 C3               CLR     C
   2475    000186 EF               MOV     A,R7
   2476    000187 33               RLC     A
   2477    000188 FF               MOV     R7,A
   2478    000189 EC               MOV     A,R4
   2479    00018A 33               RLC     A
   2480    00018B FC               MOV     R4,A
   2481    00018C ED               MOV     A,R5
   2482    00018D 33               RLC     A
   2483    00018E FD               MOV     R5,A
   2484    00018F EE               MOV     A,R6
   2485    000190 33               RLC     A
   2486    000191 FE               MOV     R6,A
   2487    000192 80EA             SJMP    LLL
   2488    000194          ;
   2489    000194          ; Do the addition
   2490    000194          ;
   2491    000194          
   2492    000194              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 6)
   2493    000194          DO_ADD: 
   2494    000194 EC               MOV     A,R4
   2495    000195 28               ADD     A,R0
   2496    000196 FC               MOV     R4,A
   2497    000197 ED               MOV     A,R5
   2498    000198 39               ADDC    A,R1
   2499    000199 FD               MOV     R5,A
   2500    00019A EE               MOV     A,R6
   2501    00019B 3A               ADDC    A,R2
   2502    00019C FE               MOV     R6,A
   2503    00019D          
   2504    00019D D0E0             POP     ACC                     ; Get
                                                                    RESS
   2505    00019F              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 5)
   2506    00019F 23               RL      A
   2507    0001A0 F9               MOV     R1,A
   2508    0001A1 D0E0             POP     ACC                     ; Get
                                                                    RESE
   2509    0001A3              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   2510    0001A3 F8               MOV     R0,A
   2511    0001A4 4002             JC      ADD_SHIFT
   2512    0001A6 801B             SJMP    ?F_ROUND_L02            ; Jump if no
                                                                    change in
                                                                    RESE
   2513    0001A8          
   2514    0001A8          ADD_SHIFT:
   2515    0001A8 C3               CLR     C
   2516    0001A9 EE               MOV     A,R6
   2517    0001AA 13               RRC     A
   2518    0001AB FE               MOV     R6,A
   2519    0001AC ED               MOV     A,R5
   2520    0001AD 13               RRC     A
   2521    0001AE FD               MOV     R5,A
   2522    0001AF EC               MOV     A,R4
   2523    0001B0 13               RRC     A
   2524    0001B1 FC               MOV     R4,A
   2525    0001B2 EF               MOV     A,R7
   2526    0001B3 13               RRC     A
   2527    0001B4 5002             JNC     LL2
   2528    0001B6 D2E0             SETB    ACC.0
   2529    0001B8 FF       LL2:    MOV     R7,A
   2530    0001B9 08               INC     R0                      ; RESE++
   2531    0001BA B80006           CJNE    R0,#0,ADD_EXIT
   2532    0001BD          
   2533    0001BD          ?F_OVERFLOW_L02:
   2534    0001BD 7F7F             MOV     R7,#127                 ; Overflow
                                                                    !!!
   2535    0001BF 74FF             MOV     A,#255
   2536    0001C1 802E             SJMP    LL1     
   2537    0001C3          
   2538    0001C3          ;
   2539    0001C3          ;       That's all. Round, pack and exit !!
   2540    0001C3          ;
   2541    0001C3          
   2542    0001C3          ADD_EXIT:
   2543    0001C3          ?F_ROUND_L02:
   2544    0001C3          ;
   2545    0001C3          ;       First check the G-bit (the 25th),
   2546    0001C3          ;
   2547    0001C3          
   2548    0001C3 EF               MOV     A,R7
   2549    0001C4 33               RLC     A
   2550    0001C5 5017             JNC     ?F_PACK_L02     ; No rounding if
                                                            G-bit is cleared
   2551    0001C7          ;
   2552    0001C7          ;       then upround if the 24th bit is set or one
                            of the bits after is set.
   2553    0001C7          ;
   2554    0001C7          
   2555    0001C7          ?F_ROUND_2_L02:
   2556    0001C7 8CF0             MOV     B,R4
   2557    0001C9 20F002           JB      B.0,?F_UP_ROUND_L02             ;
                                              Test if L-bit is set
   2558    0001CC          ?F_R_TEST_L02:
   2559    0001CC 6010             JZ      ?F_PACK_L02     ; No rounding if
                                                            rest is zero
   2560    0001CE          
   2561    0001CE          ?F_UP_ROUND_L02:
   2562    0001CE 0C               INC     R4
   2563    0001CF BC000C           CJNE    R4,#0,?F_PACK_L02
   2564    0001D2 0D               INC     R5
   2565    0001D3 BD0008           CJNE    R5,#0,?F_PACK_L02
   2566    0001D6 0E               INC     R6
   2567    0001D7 BE0004           CJNE    R6,#0,?F_PACK_L02
   2568    0001DA 08               INC     R0              ; We do not shift
                                                            down mantissa
                                                            due
   2569    0001DB                                          ; to that the
                            mantissa is always
   2570    0001DB                                          ; 8000000, and we
                            will set it so
   2571    0001DB                                          ; later on
   2572    0001DB E8               MOV     A,R0
   2573    0001DC 60DF             JZ      ?F_OVERFLOW_L02
   2574    0001DE                  
   2575    0001DE          ?F_PACK_L02:
   2576    0001DE E9               MOV     A,R1
   2577    0001DF 33               RLC     A
   2578    0001E0 E8               MOV     A,R0
   2579    0001E1 13               RRC     A
   2580    0001E2 FF               MOV     R7,A
   2581    0001E3 EE               MOV     A,R6
   2582    0001E4 23               RL      A
   2583    0001E5 13               RRC     A
   2584    0001E6 FE               MOV     R6,A
   2585    0001E7          
   2586    0001E7          ?F_EXIT_L02:
   2587    0001E7 4F               ORL     A,R7
   2588    0001E8 4D               ORL     A,R5
   2589    0001E9 4C               ORL     A,R4
   2590    0001EA 8008             SJMP    AddEnd
   2591    0001EC          
   2592    0001EC          ?F_UNDERFLOW_L02:
   2593    0001EC E9               MOV     A,R1
   2594    0001ED 5480             ANL     A,#128
   2595    0001EF FF               MOV     R7,A
   2596    0001F0 E4               CLR     A
   2597    0001F1 FE       LL1:    MOV     R6,A
   2598    0001F2 FD               MOV     R5,A
   2599    0001F3 FC               MOV     R4,A
   2600    0001F4          
   2601    0001F4          AddEnd:
   2602    0001F4          ;-+-+-+-+-+-+-+-+-+-+-+-+-+-
   2603    0001F4 EE               MOV     A,R6
   2604    0001F5 33               RLC     A
   2605    0001F6 EF               MOV     A,R7
   2606    0001F7 33               RLC     A
   2607    0001F8 F4               CPL     A
   2608    0001F9 7004             JNZ     NoInf
   2609    0001FB          
   2610    0001FB FC               MOV     R4,A
   2611    0001FC FD               MOV     R5,A
   2612    0001FD 7E80             MOV     R6,#128
   2613    0001FF          
   2614    0001FF D0E0     NoInf:  POP     A
   2615    000201              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 3)
   2616    000201 FB               MOV     R3,A
   2617    000202              cfi R3 samevalue
   2618    000202 D0E0             POP     A
   2619    000204              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 2)
   2620    000204 FA               MOV     R2,A
   2621    000205              cfi R2 samevalue
   2622    000205 D0E0             POP     A
   2623    000207              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 1)
   2624    000207 F8               MOV     R0,A
   2625    000208              cfi R0 samevalue
   2626    000208 D0E0             POP     A       
   2627    00020A              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   2628    00020A CF               XCH     A,R7
   2629    00020B              cfi R7 samevalue
   2630    00020B C6               XCH     A,@R0
   2631    00020C 18               DEC     R0
   2632    00020D CE               XCH     A,R6
   2633    00020E C6               XCH     A,@R0
   2634    00020F 18               DEC     R0
   2635    000210 CD               XCH     A,R5
   2636    000211 C6               XCH     A,@R0
   2637    000212 18               DEC     R0
   2638    000213 CC               XCH     A,R4
   2639    000214 C6               XCH     A,@R0
   2640    000215 F9               MOV     R1,A
   2641    000216 22               RET
   2642    000217          
   2643    000217          
   2644    000217          ;
   2645    000217          ; End old core
   2646    000217          ;-------------
   2647    000217          
   2648    000217              cfi ENDBLOCK ?FLT_ADD
   2649    000217                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3     1167     1171
                                                                     1179     1183     1306     1310
                                                                     1317     1321     1529     1530
                                                                     1533     1534     1537     1538
                                                                     1541     1542     1859     1863
                                                                     1867     1871     2186     2187
                                                                     2190     2191     2194     2195
                                                                     2198     2199     2289     2290
                                                                     2292     2293     2320     2324
                                                                     2336     2422     2425     2427
                                                                     2428     2453     2456     2492
                                                                     2505     2509     2615     2619
                                                                     2623     2627
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321     1529
                                                                     1533     1537     1541     1859
                                                                     1863     1867     1871     2186
                                                                     2190     2194     2198     2289
                                                                     2292     2320     2324     2336
                                                                     2422     2425     2427     2453
                                                                     2456     2492     2505     2509
                                                                     2615     2619     2623     2627
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321     1529
                                                                     1530     1533     1534     1537
                                                                     1538     1541     1542     1859
                                                                     1863     1867     1871     2186
                                                                     2187     2190     2191     2194
                                                                     2195     2198     2199     2289
                                                                     2290     2292     2293     2320
                                                                     2324     2336     2422     2425
                                                                     2427     2428     2453     2456
                                                                     2492     2505     2509     2615
                                                                     2619     2623     2627
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_ADD            REL    CONST PUB UNTYP.       RCODE      0 
?FLT_ADD_REW        REL    CONST PUB UNTYP.       RCODE      0 
?FLT_SUB            REL    CONST PUB UNTYP.       RCODE      0 
?FLT_SUB_REW        REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_INF       ABS    CONST EXT [unref] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_R1    ABS    CONST EXT [unref] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_R1_REWABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_REW   ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN       ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN_R1    ABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_R1_REWABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_REW  ABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 
?F_EXIT_L02         REL    CONST UNTYP.           RCODE      1E7 
?F_OVERFLOW_L02     REL    CONST UNTYP.           RCODE      1BD 
?F_PACK_L02         REL    CONST UNTYP.           RCODE      1DE 
?F_ROUND_2_L02      REL    CONST UNTYP.           RCODE      1C7 
?F_ROUND_L02        REL    CONST UNTYP.           RCODE      1C3 
?F_R_TEST_L02       REL    CONST UNTYP.           RCODE      1CC 
?F_UNDERFLOW_L02    REL    CONST UNTYP.           RCODE      1EC 
?F_UP_ROUND_L02     REL    CONST UNTYP.           RCODE      1CE 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
ADD_EXIT            REL    CONST UNTYP.           RCODE      1C3 
ADD_SHIFT           REL    CONST UNTYP.           RCODE      1A8 
AddEnd              REL    CONST UNTYP.           RCODE      1F4 
AdjustAndReturn     REL    CONST UNTYP.           RCODE      22 
AdjustAndReturnNAN  REL    CONST UNTYP.           RCODE      26 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
CHOSE_ADD_OR_SUB    REL    CONST UNTYP.           RCODE      154 
CopyRew             REL    CONST UNTYP.           RCODE      49 
CopySrc             REL    CONST UNTYP.           RCODE      4F 
DO_ADD              REL    CONST UNTYP.           RCODE      194 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DoAdd               REL    CONST UNTYP.           RCODE      86 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
Frame               REL    CONST UNTYP.           RCODE      Not solved 
GoBack              REL    CONST UNTYP.           RCODE      83 
L0                  REL    CONST UNTYP.           RCODE      EA 
L20                 REL    CONST UNTYP.           RCODE      109 
L200                REL    CONST UNTYP.           RCODE      112 
L21                 REL    CONST UNTYP.           RCODE      119 
L210                REL    CONST UNTYP.           RCODE      125 
L22                 REL    CONST UNTYP.           RCODE      12A 
L220                REL    CONST UNTYP.           RCODE      135 
L23                 REL    CONST UNTYP.           RCODE      13B 
L24                 REL    CONST UNTYP.           RCODE      151 
LL                  REL    CONST UNTYP.           RCODE      181 
LL1                 REL    CONST UNTYP.           RCODE      1F1 
LL2                 REL    CONST UNTYP.           RCODE      1B8 
LLL                 REL    CONST UNTYP.           RCODE      17E 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NO_SWAP             REL    CONST UNTYP.           RCODE      CC 
NoInf               REL    CONST UNTYP.           RCODE      1FF 
NoZero              REL    CONST UNTYP.           RCODE      16 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
Return              REL    CONST UNTYP.           RCODE      5D 
ReturnINF           REL    CONST UNTYP.           RCODE      1D 
ReturnNAN           REL    CONST UNTYP.           RCODE      29 
SHIFT_LOOP          REL    CONST UNTYP.           RCODE      141 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
SUB_ADJ             REL    CONST UNTYP.           RCODE      17A 
SUB_SHIFT           REL    CONST UNTYP.           RCODE      185 
SubEntry            REL    CONST UNTYP.           RCODE      F 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
TestDst             REL    CONST UNTYP.           RCODE      5E 
TestINF             REL    CONST UNTYP.           RCODE      F 
TestSrc             REL    CONST UNTYP.           RCODE      33 
USING               REL    CONST UNTYP.           RCODE      Not solved 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:A8F8          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 578         #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:35             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_ieee_float.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_ieee_float.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_ieee_float.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   2650    000000          
   2651    000000          
   2652    000000          ;---------------------------------------------------
                           --------------------------
   2653    000000          ;
   2654    000000          ;       Function: ?FLT_DIV
   2655    000000          ;
   2656    000000          ;       Description: Floating point division (@R0 =
                            @R0 / @R1)
   2657    000000          ;
   2658    000000          ;       Register input:
   2659    000000          ;               R0 Points to LSB of the dividend
                            (destination)
   2660    000000          ;               R1 Points to LSB of the divisor
   2661    000000          ;
   2662    000000          ;       Register output:
   2663    000000          ;               A    = Is undefined.
   2664    000000          ;               B    = Is undefined.
   2665    000000          ;               R0   = R0
   2666    000000          ;               R1   = R1
   2667    000000          ;               CY   = Is undefined
   2668    000000          ;
   2669    000000          ;       Stack usage: 6
   2670    000000          ;
   2671    000000          ;---------------------------------------------------
                           --------------------------
   2672    000000                  MODULE  ?FLT_DIV
   2673    000000                  RSEG    RCODE:CODE:NOROOT       
   2674    000000                  PUBLIC  ?FLT_DIV
   2675    000000                  PUBLIC  ?FLT_DIV_REW
   2676    000000                  EXTERN  ?FLT_TEST_INF
   2677    000000                  EXTERN  ?FLT_TEST_INF_R1
   2678    000000                  EXTERN  ?FLT_TEST_NAN
   2679    000000                  EXTERN  ?FLT_TEST_NAN_R1
   2680    000000                  EXTERN  ?FLT_TEST_ZERO_REW
   2681    000000                  EXTERN  ?FLT_TEST_ZERO_R1_REW
   2682    000000              cfi BLOCK ?FLT_DIV_REW USING cfi_common
   2683    000000              cfi NOFUNCTION
   2684    000000          
   2685    000000              cfi A undefined
   2686    000000              cfi B undefined
   2687    000000              cfi R0 undefined
   2688    000000              cfi R1 undefined
   2689    000000              cfi R2 undefined
   2690    000000              cfi R3 undefined
   2691    000000              cfi R4 undefined
   2692    000000              cfi R5 undefined
   2693    000000          
   2694    000000          ?FLT_DIV_REW:
   2695    000000          
   2696    000000 18               DEC     R0
   2697    000001 18               DEC     R0
   2698    000002 18               DEC     R0
   2699    000003          
   2700    000003              cfi ENDBLOCK ?FLT_DIV_REW
   2701    000003                  REQUIRE x
   2702    000003          
   2703    000003          ;------
   2704    000003          
   2705    000000                  RSEG    RCODE:CODE:NOROOT
   2706    000000              cfi BLOCK ?FLT_DIV USING cfi_common
   2707    000000              cfi NOFUNCTION
   2708    000000          
   2709    000000              cfi A undefined
   2710    000000              cfi B undefined
   2711    000000              cfi R0 undefined
   2712    000000              cfi R1 undefined
   2713    000000              cfi R2 undefined
   2714    000000              cfi R3 undefined
   2715    000000              cfi R4 undefined
   2716    000000              cfi R5 undefined
   2717    000000          
   2718    000000          x:
   2719    000000          ?FLT_DIV:
   2720    000000 12....           LCALL   ?FLT_TEST_NAN
   2721    000003 7004             JNZ     TestNanR1
   2722    000005          
   2723    000005 18       GoBack: DEC     R0
   2724    000006 18               DEC     R0
   2725    000007 18               DEC     R0
   2726    000008 22               RET
   2727    000009          
   2728    000009          TestNanR1:
   2729    000009 12....           LCALL   ?FLT_TEST_NAN_R1
   2730    00000C 700D             JNZ     SetSign
   2731    00000E          
   2732    00000E 74FF     RetNAN: MOV     A,#255
   2733    000010 F6               MOV     @R0,A
   2734    000011 18       RetZer: DEC     R0
   2735    000012 19               DEC     R1
   2736    000013 F6               MOV     @R0,A
   2737    000014 18               DEC     R0
   2738    000015 19               DEC     R1
   2739    000016 F6               MOV     @R0,A
   2740    000017 18               DEC     R0
   2741    000018 19               DEC     R1
   2742    000019 F6               MOV     @R0,A
   2743    00001A 22       Return: RET
   2744    00001B          
   2745    00001B          ; Combine the sign bits and store in destination
                            (@R0)
   2746    00001B          
   2747    00001B          SetSign:
   2748    00001B E7               MOV     A,@R1
   2749    00001C 5480             ANL     A,#128
   2750    00001E 66               XRL     A,@R0
   2751    00001F F6               MOV     @R0,A
   2752    000020          
   2753    000020 12....           LCALL   ?FLT_TEST_ZERO_REW
   2754    000023 700F             JNZ     TestDivisor
   2755    000025 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   2756    000028 70F0             JNZ     Return
   2757    00002A 14               DEC     A
   2758    00002B F6               MOV     @R0,A
   2759    00002C 08               INC     R0
   2760    00002D F6               MOV     @R0,A
   2761    00002E 08               INC     R0
   2762    00002F F6               MOV     @R0,A
   2763    000030 08               INC     R0
   2764    000031          SetHigh:
   2765    000031 F6               MOV     @R0,A
   2766    000032 80D1             SJMP    GoBack
   2767    000034          
   2768    000034          ;------
   2769    000034          
   2770    000034          TestDivisor:
   2771    000034 12....           LCALL   ?FLT_TEST_ZERO_R1_REW
   2772    000037 700C             JNZ     TestINF
   2773    000039 F6               MOV     @R0,A
   2774    00003A 08               INC     R0
   2775    00003B F6               MOV     @R0,A
   2776    00003C 08               INC     R0
   2777    00003D 7680             MOV     @R0,#128
   2778    00003F 08               INC     R0
   2779    000040 E6               MOV     A,@R0
   2780    000041 447F             ORL     A,#127
   2781    000043 80EC             SJMP    SetHigh
   2782    000045          
   2783    000045          ;------
   2784    000045          
   2785    000045          TestINF:
   2786    000045          
   2787    000045 12....           LCALL   ?FLT_TEST_INF_R1
   2788    000048 700C             JNZ     TestDividend
   2789    00004A 12....           LCALL   ?FLT_TEST_INF
   2790    00004D 60BF             JZ      RetNAN
   2791    00004F E6               MOV     A,@R0
   2792    000050 5480             ANL     A,#128
   2793    000052 F6               MOV     @R0,A
   2794    000053 E4               CLR     A
   2795    000054 80BB             SJMP    RetZer  
   2796    000056          
   2797    000056          TestDividend:
   2798    000056 12....           LCALL   ?FLT_TEST_INF
   2799    000059 7005             JNZ     CheckSame
   2800    00005B 19               DEC     R1
   2801    00005C 19               DEC     R1
   2802    00005D 19               DEC     R1
   2803    00005E 80A5             SJMP    GoBack
   2804    000060          
   2805    000060          ;----------------------------------;
   2806    000060          ; The algorithm does not allow the ;
   2807    000060          ; dividend and the divisor to be   ;
   2808    000060          ; at the same memory location, but ;
   2809    000060          ; that is 1.0 anyway so...         ;
   2810    000060          ;----------------------------------;
   2811    000060          CheckSame:
   2812    000060 E8               MOV     A,R0
   2813    000061 69               XRL     A,R1
   2814    000062 700C             JNZ     DoDiv
   2815    000064          
   2816    000064          ; Return 1.0
   2817    000064 763F             MOV     @R0,#63
   2818    000066 18               DEC     R0
   2819    000067 7680             MOV     @R0,#128
   2820    000069 18               DEC     R0
   2821    00006A F6               MOV     @R0,A
   2822    00006B 18               DEC     R0
   2823    00006C F6               MOV     @R0,A
   2824    00006D E8               MOV     A,R0
   2825    00006E F9               MOV     R1,A    
   2826    00006F 22               RET
   2827    000070          
   2828    000070          ;-------
   2829    000070          ; Start the algorithm
   2830    000070          ;
   2831    000070 E6       DoDiv:  MOV     A,@R0           ; Save R5 and put
                                                            High(dividend) in
                                                            R5
   2832    000071 CD               XCH     A,R5
   2833    000072 C0E0             PUSH    A
   2834    000074              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 1)
   2835    000074              cfi R5 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            1, 1)
   2836    000074 18               DEC     R0
   2837    000075          
   2838    000075 EC               MOV     A,R4            ; Save R4
   2839    000076 C0E0             PUSH    A
   2840    000078              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 2)
   2841    000078              cfi R4 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            2, 1)
   2842    000078          
   2843    000078          ;------------------------------------;
   2844    000078          ;   Register content at this point:  ;
   2845    000078          ;                                    ;
   2846    000078          ;   R0 = Dividend *(byte 2)          ;
   2847    000078          ;   R1 = Divisor *(byte 3)           ;
   2848    000078          ;   R5 = Byte 3 of the dividend      ;
   2849    000078          ;                                    ;
   2850    000078          ; - - - - - - - - - - - - - - - - - -;
   2851    000078          ;   Calculate a new preliminary      ;
   2852    000078          ;   exponent.                        ;
   2853    000078          ;------------------------------------;
   2854    000078 E6               MOV     A,@R0           ; Extract the
                                                            dividend exponent.
   2855    000079 33               RLC     A               ;
   2856    00007A CD               XCH     A,R5            ;
   2857    00007B 33               RLC     A               ;
   2858    00007C CD               XCH     A,R5            ;
   2859    00007D D3               SETB    C               ; Set the implicit
                                                            bit in the dividend
                                                            mantissa
   2860    00007E 13               RRC     A               ;
   2861    00007F F6               MOV     @R0,A           ; Save the high byte
                                                            of the dividend
                                                            mantissa
   2862    000080          
   2863    000080 E7               MOV     A,@R1           ; Extract the
                                                            divisor exponent
   2864    000081 19               DEC     R1              ;
   2865    000082 FC               MOV     R4,A            ;
   2866    000083 E7               MOV     A,@R1           ;
   2867    000084 19               DEC     R1              ; Make sure that R1
                                                            points to byte 0 of
                                                            the
   2868    000085 19               DEC     R1              ; divisors
                                                            mantissa.
   2869    000086 33               RLC     A               ;
   2870    000087 CC               XCH     A,R4            ;
   2871    000088 33               RLC     A               ;
   2872    000089 C3               CLR     C               ;
   2873    00008A 947F             SUBB    A,#Bias         ; Remove Bias from
                                                            the divisors
                                                            exponent
   2874    00008C 400E             JC      Small           ; 
   2875    00008E          
   2876    00008E CD               XCH     A,R5            ; Make the exponent
                                                            smaller if the
                                                            divisor is
   2877    00008F 9D               SUBB    A,R5            ; larger than
                                                            1.0
   2878    000090 5024             JNC     NoZero          ; => Continue if the
                                                            exponent is not
                                                            negative
   2879    000092          
   2880    000092 08       Zero:   INC     R0              ; Return a signed
                                                            zero result
   2881    000093 E6               MOV     A,@R0           ;
   2882    000094 5480             ANL     A,#128          ;
   2883    000096 F6               MOV     @R0,A           ;
   2884    000097 E4               CLR     A               ;
   2885    000098 18               DEC     R0              ;
   2886    000099 F6               MOV     @R0,A           ;
   2887    00009A 800F             SJMP    EndThis         ;
   2888    00009C          
   2889    00009C F4       Small:  CPL     A               ; Make the exponent
                                                            larger if the
                                                            divisor is
   2890    00009D 04               INC     A               ; smaller than
                                                            1.0
   2891    00009E 3D               ADDC    A,R5            ;
   2892    00009F 14               DEC     A               ;
   2893    0000A0 5014             JNC     NoInf           ; => Continue if the
                                                            exponent < 255
                                                            (Inf)
   2894    0000A2                  
   2895    0000A2 08       Inf:    INC     R0              ; Return a signed
                                                            Infinit result
   2896    0000A3 E6               MOV     A,@R0           ;
   2897    0000A4 447F             ORL     A,#127          ;
   2898    0000A6 F6               MOV     @R0,A           ;
   2899    0000A7 18               DEC     R0              ;
   2900    0000A8 7680             MOV     @R0,#128        ;
   2901    0000AA E4               CLR     A               ;
   2902    0000AB          EndThis:
   2903    0000AB 18               DEC     R0
   2904    0000AC F6               MOV     @R0,A
   2905    0000AD 18               DEC     R0
   2906    0000AE F6               MOV     @R0,A
   2907    0000AF D0E0             POP     A
   2908    0000B1              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 1)
   2909    0000B1 FC               MOV     R4,A
   2910    0000B2              cfi R4 samevalue
   2911    0000B2 D0E0             POP     A
   2912    0000B4              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   2913    0000B4 FD               MOV     R5,A
   2914    0000B5              cfi R5 samevalue
   2915    0000B5 22               RET
   2916    0000B6          
   2917    0000B6          ;------------------------------------;
   2918    0000B6          ;   Register content at this point:  ;
   2919    0000B6          ;                                    ;
   2920    0000B6          ;   A  = Preliminary exponent        ;
   2921    0000B6          ;   R0 = Destination *(byte 2)       ;
   2922    0000B6          ;  @R0 = Dividend-mantissa (byte 2)  ;
   2923    0000B6          ;   R1 = Divisor *(byte 0)           ;
   2924    0000B6          ;   R4 = Byte 2 of the divisor       ;
   2925    0000B6          ;   R5 = MSB dividend mantissa       ;
   2926    0000B6          ;                                    ;
   2927    0000B6          ; - - - - - - - - - - - - - - - - - -;
   2928    0000B6          ;   Prepare the divisor mantissa     ;
   2929    0000B6          ;   and store the mantissa of the    ;
   2930    0000B6          ;   dividend in registers.           ;
   2931    0000B6          ;------------------------------------;
   2932    0000B6          NoInf:
   2933    0000B6          NoZero:
   2934    0000B6              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 2)
   2935    0000B6              cfi R4 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            2, 1)
   2936    0000B6              cfi R5 undefined
   2937    0000B6 CC               XCH     A,R4            ; Adjust MSB in the
                                                            divisor and set MS
                                                            bit
   2938    0000B7 D3               SETB    C               ;
   2939    0000B8 13               RRC     A               ;
   2940    0000B9 CC               XCH     A,R4            ;
   2941    0000BA          
   2942    0000BA FD               MOV     R5,A            ; Store exponent in
                                                            R5
   2943    0000BB 18               DEC     R0              ; @R0 = Destination
                                                            byte 1
   2944    0000BC E4               CLR     A               ;
   2945    0000BD C6               XCH     A,@R0           ; R3 = Byte 1 of the
                                                            dividend mantissa
   2946    0000BE CB               XCH     A,R3            ;
   2947    0000BF C0E0             PUSH    A               ; Save R3
   2948    0000C1              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 3)
   2949    0000C1              cfi R3 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            1, 1)
   2950    0000C1 18               DEC     R0              ; @R0 = Destination
                                                            byte 0
   2951    0000C2 E4               CLR     A
   2952    0000C3 C6               XCH     A,@R0           ; R2 = Byte 0 of the
                                                            dividend mantissa
   2953    0000C4 CA               XCH     A,R2            ;
   2954    0000C5 C0E0             PUSH    A               ; Save R2
   2955    0000C7              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   2956    0000C7              cfi R2 Frame(CFA_MACHINE, __SIZE_OF_RETADDR__ +
                            2, 1)
   2957    0000C7          
   2958    0000C7 08               INC     R0              ; @R0 = Byte 2 of
                                                            the result
                                                            (destination)
   2959    0000C8 08               INC     R0              ;
   2960    0000C9                  
   2961    0000C9          ;------------------------------------;
   2962    0000C9          ;   Register content at this point:  ;
   2963    0000C9          ;                                    ;
   2964    0000C9          ;   R0 = Destination *(byte 2)       ;
   2965    0000C9          ;   R1 = Divisor *(byte 0)           ;
   2966    0000C9          ;   R2 = Dividend-mantissa (byte 0)  ;
   2967    0000C9          ;   R3 = Dividend-mantissa (byte 1)  ;
   2968    0000C9          ;  @R0 = Dividend-mantissa (byte 2)  ;
   2969    0000C9          ;   R4 = Divisor-mantissa (byte 2)   ;
   2970    0000C9          ;   R5 = Preliminary exponent        ;
   2971    0000C9          ;                                    ;
   2972    0000C9          ; - - - - - - - - - - - - - - - - - -;
   2973    0000C9          ;  Do the first itteration outside   ;
   2974    0000C9          ;  the main loop in order to get     ;
   2975    0000C9          ;  the msb and exponent right.       ;
   2976    0000C9          ;------------------------------------;
   2977    0000C9 ED               MOV     A,R5            ; Pre-pack sign and
                                                            exponent in the
                                                            destination
   2978    0000CA 08               INC     R0              ;
   2979    0000CB C6               XCH     A,@R0           ;
   2980    0000CC 33               RLC     A               ;
   2981    0000CD E6               MOV     A,@R0           ;
   2982    0000CE 13               RRC     A               ;
   2983    0000CF F6               MOV     @R0,A           ;
   2984    0000D0 18               DEC     R0              ;
   2985    0000D1 E4               CLR     A               ;
   2986    0000D2 33               RLC     A               ;
   2987    0000D3 C6               XCH     A,@R0           ;
   2988    0000D4                  
   2989    0000D4 75F003           MOV     B,#3
   2990    0000D7          ;
   2991    0000D7 C3               CLR     C               ;
   2992    0000D8 CA               XCH     A,R2
   2993    0000D9 97               SUBB    A,@R1
   2994    0000DA CA               XCH     A,R2
   2995    0000DB 09               INC     R1
   2996    0000DC CB               XCH     A,R3
   2997    0000DD 97               SUBB    A,@R1
   2998    0000DE CB               XCH     A,R3
   2999    0000DF 19               DEC     R1
   3000    0000E0 9C               SUBB    A,R4
   3001    0000E1 4004             JC      DecExp
   3002    0000E3 7D08             MOV     R5,#8
   3003    0000E5 802E             SJMP    NoDecExp
   3004    0000E7          
   3005    0000E7 BD0003   DecExp: CJNE    R5,#0,NoUF
   3006    0000EA 02....           LJMP    AdjDst
   3007    0000ED 16       NoUF:   DEC     @R0                     ; Decrement
                                                                    the
                                                                    exponent
   3008    0000EE B6FF05           CJNE    @R0,#255,NoDecHigh
   3009    0000F1 06               INC     @R0
   3010    0000F2 06               INC     @R0
   3011    0000F3 08               INC     R0
   3012    0000F4 16               DEC     @R0
   3013    0000F5 18               DEC     R0
   3014    0000F6          
   3015    0000F6          NoDecHigh:
   3016    0000F6 C3               CLR     C
   3017    0000F7 CA               XCH     A,R2
   3018    0000F8 33               RLC     A
   3019    0000F9 CA               XCH     A,R2
   3020    0000FA CB               XCH     A,R3
   3021    0000FB 33               RLC     A
   3022    0000FC CB               XCH     A,R3
   3023    0000FD 33               RLC     A
   3024    0000FE          
   3025    0000FE CA               XCH     A,R2
   3026    0000FF 27               ADD     A,@R1
   3027    000100 CA               XCH     A,R2
   3028    000101 09               INC     R1
   3029    000102 CB               XCH     A,R3
   3030    000103 37               ADDC    A,@R1
   3031    000104 CB               XCH     A,R3
   3032    000105 19               DEC     R1
   3033    000106 3C               ADDC    A,R4
   3034    000107 C3               CLR     C
   3035    000108 7D08             MOV     R5,#8
   3036    00010A 803E             SJMP    Entry
   3037    00010C          
   3038    00010C          ;
   3039    00010C          ; A  = The high byte of the dividend mantissa
   3040    00010C          ; R3 = The middle byte of the dividend mantissa
   3041    00010C          ; R2 = The low byte of the dividend mantissa
   3042    00010C          ;
   3043    00010C          ; R4 = The high byte of the divisor mantissa
   3044    00010C          ;
   3045    00010C          ; B  = Byte counter
   3046    00010C          ; R5 = Bit counter
   3047    00010C          
   3048    00010C          
   3049    00010C          NextByte:
   3050    00010C 18               DEC     R0
   3051    00010D 7D08             MOV     R5,#8
   3052    00010F          DivLoop:
   3053    00010F 20E75C           JB      ACC.7,DoSub
   3054    000112          
   3055    000112          DivLoop2:
   3056    000112 C6               XCH     A,@R0
   3057    000113 33               RLC     A
   3058    000114 C6               XCH     A,@R0
   3059    000115          NoDecExp:
   3060    000115 CA               XCH     A,R2
   3061    000116 33               RLC     A
   3062    000117 CA               XCH     A,R2
   3063    000118 CB               XCH     A,R3
   3064    000119 33               RLC     A
   3065    00011A CB               XCH     A,R3
   3066    00011B 33               RLC     A
   3067    00011C DDF1     DivCon: DJNZ    R5,DivLoop
   3068    00011E D5F0EB           DJNZ    B,NextByte
   3069    000121          
   3070    000121 30E77B           JNB     ACC.7,NoRound
   3071    000124 CA               XCH     A,R2
   3072    000125 97               SUBB    A,@R1
   3073    000126 CA               XCH     A,R2
   3074    000127 09               INC     R1
   3075    000128 CB               XCH     A,R3
   3076    000129 97               SUBB    A,@R1
   3077    00012A 4A               ORL     A,R2
   3078    00012B CB               XCH     A,R3
   3079    00012C 19               DEC     R1
   3080    00012D 9C               SUBB    A,R4
   3081    00012E 406F             JC      NoRound
   3082    000130 4B               ORL     A,R3
   3083    000131 7025             JNZ     RoundUp
   3084    000133          
   3085    000133 E6               MOV     A,@R0
   3086    000134 20E021           JB      ACC.0,RoundUp
   3087    000137 8066             SJMP    NoRound
   3088    000139          
   3089    000139          ;------
   3090    000139                  
   3091    000139          NextSub2Byte:
   3092    000139 18               DEC     R0
   3093    00013A 7D08             MOV     R5,#8
   3094    00013C          
   3095    00013C C3       DoSub2: CLR     C
   3096    00013D CA               XCH     A,R2
   3097    00013E 97               SUBB    A,@R1
   3098    00013F CA               XCH     A,R2
   3099    000140 09               INC     R1
   3100    000141 CB               XCH     A,R3
   3101    000142 97               SUBB    A,@R1
   3102    000143 CB               XCH     A,R3
   3103    000144 19               DEC     R1
   3104    000145 9C               SUBB    A,R4
   3105    000146 D3               SETB    C
   3106    000147          
   3107    000147 C6       Shift2: XCH     A,@R0
   3108    000148 33               RLC     A
   3109    000149 C6               XCH     A,@R0
   3110    00014A CA       Entry:  XCH     A,R2
   3111    00014B 33               RLC     A
   3112    00014C CA               XCH     A,R2
   3113    00014D CB               XCH     A,R3
   3114    00014E 33               RLC     A
   3115    00014F CB               XCH     A,R3
   3116    000150 33               RLC     A
   3117    000151 50C9             JNC     DivCon
   3118    000153 DDE7             DJNZ    R5,DoSub2
   3119    000155 D5F0E1           DJNZ    B,NextSub2Byte
   3120    000158          
   3121    000158          RoundUp:
   3122    000158 D3               SETB    C
   3123    000159 E4               CLR     A
   3124    00015A C6               XCH     A,@R0
   3125    00015B 36               ADDC    A,@R0
   3126    00015C C6               XCH     A,@R0
   3127    00015D 08               INC     R0
   3128    00015E C6               XCH     A,@R0
   3129    00015F 36               ADDC    A,@R0
   3130    000160 C6               XCH     A,@R0
   3131    000161 08               INC     R0
   3132    000162 C6               XCH     A,@R0
   3133    000163 36               ADDC    A,@R0
   3134    000164 C6               XCH     A,@R0
   3135    000165 08               INC     R0
   3136    000166 C6               XCH     A,@R0
   3137    000167 36               ADDC    A,@R0
   3138    000168 C6               XCH     A,@R0
   3139    000169 18               DEC     R0
   3140    00016A 18               DEC     R0
   3141    00016B 18               DEC     R0
   3142    00016C 8031             SJMP    NoRound
   3143    00016E          
   3144    00016E          ;------
   3145    00016E          
   3146    00016E C3       DoSub:  CLR     C
   3147    00016F CA               XCH     A,R2
   3148    000170 97               SUBB    A,@R1
   3149    000171 CA               XCH     A,R2
   3150    000172 09               INC     R1
   3151    000173 CB               XCH     A,R3
   3152    000174 97               SUBB    A,@R1
   3153    000175 CB               XCH     A,R3
   3154    000176 19               DEC     R1
   3155    000177 9C               SUBB    A,R4
   3156    000178 B3               CPL     C
   3157    000179 4097             JC      DivLoop2
   3158    00017B          
   3159    00017B C6               XCH     A,@R0
   3160    00017C 33               RLC     A
   3161    00017D C6               XCH     A,@R0
   3162    00017E CA               XCH     A,R2
   3163    00017F 33               RLC     A
   3164    000180 CA               XCH     A,R2
   3165    000181 CB               XCH     A,R3
   3166    000182 33               RLC     A
   3167    000183 CB               XCH     A,R3
   3168    000184 33               RLC     A
   3169    000185          
   3170    000185 DD34             DJNZ    R5,DoAdd
   3171    000187 D5F02E           DJNZ    B,NextAddByte
   3172    00018A          
   3173    00018A          ;------
   3174    00018A          
   3175    00018A C6               XCH     A,@R0
   3176    00018B A2E0             MOV     C,ACC.0
   3177    00018D C6               XCH     A,@R0
   3178    00018E 40C8             JC      RoundUp
   3179    000190          
   3180    000190 CA               XCH     A,R2
   3181    000191 27               ADD     A,@R1
   3182    000192 CA               XCH     A,R2
   3183    000193 09               INC     R1
   3184    000194 CB               XCH     A,R3
   3185    000195 37               ADDC    A,@R1
   3186    000196 19               DEC     R1
   3187    000197 4A               ORL     A,R2
   3188    000198 70BE             JNZ     RoundUp
   3189    00019A CB               XCH     A,R3
   3190    00019B 3C               ADDC    A,R4
   3191    00019C B480B9           CJNE    A,#128,RoundUp
   3192    00019F          
   3193    00019F          ;
   3194    00019F          ; Check underflow
   3195    00019F          ;
   3196    00019F          NoRound:
   3197    00019F 08               INC     R0
   3198    0001A0 08               INC     R0
   3199    0001A1 E6               MOV     A,@R0
   3200    0001A2 33               RLC     A
   3201    0001A3 08               INC     R0
   3202    0001A4 E6               MOV     A,@R0
   3203    0001A5 33               RLC     A
   3204    0001A6 601F             JZ      CheckEpsilon
   3205    0001A8          
   3206    0001A8 18               DEC     R0
   3207    0001A9 18       AdjDst: DEC     R0
   3208    0001AA 18               DEC     R0      
   3209    0001AB          PopAndReturn:
   3210    0001AB          
   3211    0001AB D0E0             POP     A
   3212    0001AD              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 3)
   3213    0001AD FA               MOV     R2,A
   3214    0001AE              cfi R2 samevalue
   3215    0001AE D0E0             POP     A
   3216    0001B0              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 2)
   3217    0001B0 FB               MOV     R3,A
   3218    0001B1              cfi R3 samevalue
   3219    0001B1 D0E0             POP     A
   3220    0001B3              cfi CFA_MACHINE MACHINE_SP - (__SIZE_OF_RETADDR_
                           _ + 1)
   3221    0001B3 FC               MOV     R4,A
   3222    0001B4              cfi R4 samevalue
   3223    0001B4 D0E0             POP     A
   3224    0001B6              cfi CFA_MACHINE MACHINE_SP - __SIZE_OF_RETADDR__
   3225    0001B6 FD               MOV     R5,A
   3226    0001B7              cfi R5 samevalue
   3227    0001B7 22               RET
   3228    0001B8          
   3229    0001B8          ;------
   3230    0001B8          
   3231    0001B8              cfi CFA_MACHINE MACHINE_SP -(__SIZE_OF_RETADDR__
                            + 4)
   3232    0001B8          
   3233    0001B8          NextAddByte:
   3234    0001B8 18               DEC     R0
   3235    0001B9 7D08             MOV     R5,#8
   3236    0001BB          
   3237    0001BB CA       DoAdd:  XCH     A,R2
   3238    0001BC 27               ADD     A,@R1
   3239    0001BD CA               XCH     A,R2
   3240    0001BE 09               INC     R1
   3241    0001BF CB               XCH     A,R3
   3242    0001C0 37               ADDC    A,@R1
   3243    0001C1 CB               XCH     A,R3
   3244    0001C2 19               DEC     R1
   3245    0001C3 3C               ADDC    A,R4
   3246    0001C4 D3               SETB    C
   3247    0001C5 8080             SJMP    Shift2
   3248    0001C7          
   3249    0001C7          ;------
   3250    0001C7          
   3251    0001C7          CheckEpsilon:
   3252    0001C7          
   3253    0001C7 13               RRC     A
   3254    0001C8 F6               MOV     @R0,A
   3255    0001C9 18               DEC     R0
   3256    0001CA E4               CLR     A
   3257    0001CB B67F11           CJNE    @R0,#127,Zero1
   3258    0001CE F6               MOV     @R0,A
   3259    0001CF 18               DEC     R0
   3260    0001D0 B6FF0E           CJNE    @R0,#255,Zero2
   3261    0001D3 F6               MOV     @R0,A
   3262    0001D4 18               DEC     R0
   3263    0001D5 C6               XCH     A,@R0
   3264    0001D6 04               INC     A
   3265    0001D7 70D2             JNZ     PopAndReturn
   3266    0001D9 08               INC     R0
   3267    0001DA 08               INC     R0
   3268    0001DB 7680             MOV     @R0,#128
   3269    0001DD 80CA             SJMP    AdjDst
   3270    0001DF          
   3271    0001DF F6       Zero1:  MOV     @R0,A
   3272    0001E0 18               DEC     R0
   3273    0001E1 F6       Zero2:  MOV     @R0,A
   3274    0001E2 18               DEC     R0
   3275    0001E3 F6               MOV     @R0,A
   3276    0001E4 80C5             SJMP    PopAndReturn
   3277    0001E6          
   3278    0001E6              cfi ENDBLOCK ?FLT_DIV
   3279    0001E6                  END


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
Bias                 #define, value: 127, line:        43        171      185      191      196
                                                                      486     2873
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3     1167     1171
                                                                     1179     1183     1306     1310
                                                                     1317     1321     1529     1530
                                                                     1533     1534     1537     1538
                                                                     1541     1542     1859     1863
                                                                     1867     1871     2186     2187
                                                                     2190     2191     2194     2195
                                                                     2198     2199     2289     2290
                                                                     2292     2293     2320     2324
                                                                     2336     2422     2425     2427
                                                                     2428     2453     2456     2492
                                                                     2505     2509     2615     2619
                                                                     2623     2627     2834     2835
                                                                     2840     2841     2908     2912
                                                                     2934     2935     2948     2949
                                                                     2955     2956     3212     3216
                                                                     3220     3224     3231
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321     1529
                                                                     1533     1537     1541     1859
                                                                     1863     1867     1871     2186
                                                                     2190     2194     2198     2289
                                                                     2292     2320     2324     2336
                                                                     2422     2425     2427     2453
                                                                     2456     2492     2505     2509
                                                                     2615     2619     2623     2627
                                                                     2834     2840     2908     2912
                                                                     2934     2948     2955     3212
                                                                     3216     3220     3224     3231
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SEPARATE__    Target symbol: 0 
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3     1167
                                                                     1171     1179     1183     1306
                                                                     1310     1317     1321     1529
                                                                     1530     1533     1534     1537
                                                                     1538     1541     1542     1859
                                                                     1863     1867     1871     2186
                                                                     2187     2190     2191     2194
                                                                     2195     2198     2199     2289
                                                                     2290     2292     2293     2320
                                                                     2324     2336     2422     2425
                                                                     2427     2428     2453     2456
                                                                     2492     2505     2509     2615
                                                                     2619     2623     2627     2834
                                                                     2835     2840     2841     2908
                                                                     2912     2934     2935     2948
                                                                     2949     2955     2956     3212
                                                                     3216     3220     3224     3231
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?FLT_DIV            REL    CONST PUB UNTYP.       RCODE      0 
?FLT_DIV_REW        REL    CONST PUB UNTYP.       RCODE      0 
?FLT_TEST_INF       ABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_INF_R1    ABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN       ABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_NAN_R1    ABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_R1_REWABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 
?FLT_TEST_ZERO_REW  ABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
AdjDst              REL    CONST UNTYP.           RCODE      1A9 
B                   ABS    CONST UNTYP.           ASEG       F0 
BLOCK               REL    CONST UNTYP.           RCODE      Not solved 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
CheckEpsilon        REL    CONST UNTYP.           RCODE      1C7 
CheckSame           REL    CONST UNTYP.           RCODE      60 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DecExp              REL    CONST UNTYP.           RCODE      E7 
DivCon              REL    CONST UNTYP.           RCODE      11C 
DivLoop             REL    CONST UNTYP.           RCODE      10F 
DivLoop2            REL    CONST UNTYP.           RCODE      112 
DoAdd               REL    CONST UNTYP.           RCODE      1BB 
DoDiv               REL    CONST UNTYP.           RCODE      70 
DoSub               REL    CONST UNTYP.           RCODE      16E 
DoSub2              REL    CONST UNTYP.           RCODE      13C 
ENDBLOCK            REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
EndThis             REL    CONST UNTYP.           RCODE      AB 
Entry               REL    CONST UNTYP.           RCODE      14A 
F0                  ABS    CONST UNTYP.           ASEG       D5 
Frame               REL    CONST UNTYP.           RCODE      Not solved 
GoBack              REL    CONST UNTYP.           RCODE      5 
Inf                 REL    CONST UNTYP.           RCODE      A2 
NOFUNCTION          REL    CONST UNTYP.           RCODE      Not solved 
NextAddByte         REL    CONST UNTYP.           RCODE      1B8 
NextByte            REL    CONST UNTYP.           RCODE      10C 
NextSub2Byte        REL    CONST UNTYP.           RCODE      139 
NoDecExp            REL    CONST UNTYP.           RCODE      115 
NoDecHigh           REL    CONST UNTYP.           RCODE      F6 
NoInf               REL    CONST UNTYP.           RCODE      B6 
NoRound             REL    CONST UNTYP.           RCODE      19F 
NoUF                REL    CONST UNTYP.           RCODE      ED 
NoZero              REL    CONST UNTYP.           RCODE      B6 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
PopAndReturn        REL    CONST UNTYP.           RCODE      1AB 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
RetNAN              REL    CONST UNTYP.           RCODE      E 
RetZer              REL    CONST UNTYP.           RCODE      11 
Return              REL    CONST UNTYP.           RCODE      1A 
RoundUp             REL    CONST UNTYP.           RCODE      158 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
SetHigh             REL    CONST UNTYP.           RCODE      31 
SetSign             REL    CONST UNTYP.           RCODE      1B 
Shift2              REL    CONST UNTYP.           RCODE      147 
Small               REL    CONST UNTYP.           RCODE      9C 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
TestDividend        REL    CONST UNTYP.           RCODE      56 
TestDivisor         REL    CONST UNTYP.           RCODE      34 
TestINF             REL    CONST UNTYP.           RCODE      45 
TestNanR1           REL    CONST UNTYP.           RCODE      9 
USING               REL    CONST UNTYP.           RCODE      Not solved 
Zero                REL    CONST UNTYP.           RCODE      92 
Zero1               REL    CONST UNTYP.           RCODE      1DF 
Zero2               REL    CONST UNTYP.           RCODE      1E1 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
x                   REL    CONST UNTYP.           RCODE      0 


##############################
#          CRC:932A          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 489         #
#     Modules:        14     #
#     Total errors:   0      #
#     Total warnings: 0      #
##############################



