###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

      1    000000          ;---------------------------------------------------
                           -------------------------
      2    000000          ;
      3    000000          ;       File:           iar_move_long.s03
      4    000000          ;
      5    000000          ;       Version:        6.00
      6    000000          ;
      7    000000          ;       Created:        19/Aug/02 IOLW [6.00]
      8    000000          ;
      9    000000          ;
     10    000000          ;       Description:    This file contain routines
                            for moving blocks between
     11    000000          ;                       the 8051s different
                            memoryspaces.
     12    000000          ;
     13    000000          ;       REVISON INFORMATION
     14    000000          ;
     15    000000          ;       $Revision: 1.19 $
     16    000000          ;
     17    000000          ;       Log information is available at the end of
                            this file
     18    000000          ;
     19    000000          ;---------------------------------------------------
                           -------------------------
     20    000000          
     21    000000          #include "iar_common.h"
     22    000000          
     23    000000          ;---------------------------------------------------
                           --------------------------
     24    000000          ;
     25    000000          ;       Functions: All the below functions are
                            expanded through the copy data macro.
     26    000000          ;                  ?MOVE_LONG8_IDATA_IDATA
     27    000000          ;                  ?MOVE_LONG8_IDATA_PDATA
     28    000000          ;                  ?MOVE_LONG8_IDATA_XDATA
     29    000000          ;                  ?MOVE_LONG8_IDATA_CODE
     30    000000          ;                  ?MOVE_LONG8_PDATA_IDATA
     31    000000          ;                  ?MOVE_LONG8_PDATA_PDATA
     32    000000          ;                  ?MOVE_LONG8_PDATA_XDATA
     33    000000          ;                  ?MOVE_LONG8_PDATA_CODE
     34    000000          ;                  ?MOVE_LONG8_XDATA_IDATA
     35    000000          ;                  ?MOVE_LONG8_XDATA_PDATA
     36    000000          ;
     37    000000          ;
     38    000000          ;       Description: Moves a block of bytes, max
                            256.
     39    000000          ;
     40    000000          ;       Register input:
     41    000000          ;                    A   : Size of the data to
                            move
     42    000000          ;                    @R1 or @DPTR : Points to
                            destination in IDATA, PDATA, XDATA or CODE.
     43    000000          ;                    @R0 or @DPTR : Points to source
                            data in IDATA, PDATA, XDATA or CODE.
     44    000000          ;
     45    000000          ;       Register output:
     46    000000          ;                    A    = Undefined (but always
                            0).
     47    000000          ;                    R0   = Undefined.
     48    000000          ;                    R1   = Undefined (if used).
     49    000000          ;                    DPTR = Undefined (if used).
     50    000000          ;
     51    000000          ;       Multiple DPTR
     52    000000          ;               Shadowed:       Requires DPTR: DPTRx
                               Requires DPS: DPTRx
     53    000000          ;                               Modifies DPTR: DPTRx
                               Returns  DPS: DPTRx
     54    000000          ;
     55    000000          ;               Separate:       Requires DPTR: DPTRx
                                Requires DPS: DPTRx 
     56    000000          ;                               Modifies DPTR: DPTRx
                                Returns  DPS: DPTRx
     57    000000          ;
     58    000000          ;       Stack usage: 1
     59    000000          ;
     60    000000          ;---------------------------------------------------
                           --------------------------
     61    000000          
    109    000000          
    110    000000          ;---------------------------------------------------
                           --------------------------
    111    000000          ;
    112    000000          ;       Functions: ?MOVE_LONG8_XDATA_XDATA
    113    000000          ;                  ?MOVE_LONG8_XDATA_CODE
    114    000000          ;                  ?MOVE_LONG16_XDATA_XDATA
    115    000000          ;                  ?MOVE_LONG16_XDATA_CODE
    116    000000          ;
    117    000000          ;       Description: Moves a block of bytes, max 64k
                            for derivatives that has
    118    000000          ;                    only One DPTR.
    119    000000          ;
    120    000000          ;       NOTE: R3 is used if this macro is called
                            with 16 as second parameter.
    121    000000          ;
    122    000000          ;       Register input:
    123    000000          ;                    A     : Size of the data to
                            move, Low.
    124    000000          ;          if used ( R3    : 1 + Size of the data to
                            move, High. )
    125    000000          ;                    R4    : Points to destination
                            in XDATA, Low.
    126    000000          ;                    R5    : Points to destination
                            in XDATA, High.
    127    000000          ;          if used ( R6    : Points to destination
                            in XDATA, Extended. )
    128    000000          ;                    @DPTR : Points to source data
                            in XDATA or CODE.
    129    000000          ;
    130    000000          ;       Register output:
    131    000000          ;                    A    = Undefined.
    132    000000          ;          if used ( R3   = undefined. )
    133    000000          ;                    R4   = Undefined.
    134    000000          ;                    R5   = Undefined.
    135    000000          ;                  ( R6   = Undefined. )
    136    000000          ;                    DPTR = Undefined.
    137    000000          ;
    138    000000          ;       Multiple DPTR
    139    000000          ;               Shadowed:       Requires DPTR: DPTRx
                               Requires DPS: DPTRx
    140    000000          ;                               Modifies DPTR: DPTRx
                               Returns  DPS: DPTRx
    141    000000          ;
    142    000000          ;               Separate:       Requires DPTR: 0    
                               Requires DPS: 0 
    143    000000          ;                               Modifies DPTR: 0    
                               Returns  DPS: 0
    144    000000          ;
    145    000000          ;       Stack usage: 1
    146    000000          ;
    147    000000          ;---------------------------------------------------
                           --------------------------
    220    000000          
    221    000000          ;---------------------------------------------------
                           --------------------------
    222    000000          ;
    223    000000          ;       Functions: ?MOVE_LONG8_XDATA_XDATA_2DPTR
    224    000000          ;                  ?MOVE_LONG8_XDATA_CODE_2DPTR
    225    000000          ;                  ?MOVE_LONG16_XDATA_XDATA_2DPTR
    226    000000          ;                  ?MOVE_LONG16_XDATA_CODE_2DPTR
    227    000000          ;
    228    000000          ;       Description: Moves a block of bytes, max 64k
                            for derivatives that has
    229    000000          ;                    only One DPTR.
    230    000000          ;
    231    000000          ;       NOTE: R3 is used if this macro is called
                            with 16 as second parameter.
    232    000000          ;
    233    000000          ;       Register input:
    234    000000          ;                    A              : Size of the
                            data to move, Low.
    235    000000          ;          if used ( R3             : 1 + Size of
                            the data to move, High. )
    236    000000          ;                    selected @DPTR : Points to
                            source in XDATA or CODE.
    237    000000          ;                    next     @DPTR : Points to
                            destination in XDATA or CODE.
    238    000000          ;
    239    000000          ;       Register output:
    240    000000          ;                    A            = Undefined.
    241    000000          ;          if used ( R3           = undefined.
                            )
    242    000000          ;                    current DPTR = Undefined.
    243    000000          ;                    next    DPTR = Undefined.
                            )
    244    000000          ;
    245    000000          ;       Multiple DPTR
    246    000000          ;               Shadowed:       Requires DPTR: pair 
                                       Requires DPS: DPTRx (source)
    247    000000          ;                               Modifies DPTR:
                            DPTRx, DPTRy     Returns  DPS: DPTRx
    248    000000          ;
    249    000000          ;               Separate:       Requires DPTR: pair 
                                       Requires DPS: DPTRx (source)
    250    000000          ;                               Modifies DPTR:
                            DPTRx, DPTRy     Returns  DPS: DPTRx
    251    000000          ;
    252    000000          ;       Stack usage: 1
    253    000000          ;
    254    000000          ;---------------------------------------------------
                           --------------------------
    304    000000          
    305    000000          ;===================================================
                           ==========
    306    000000          ;       HERE WE EXPAND THE MODULES DEFINED IN MACRO
                            copy_data
    307    000000          ;===================================================
                           ==========
    308    000000                  copy_data8  IDATA,IDATA,MOV,MOV,R1,R0
    308.1  000000                  MODULE  ?MOVE_LONG8_IDATA_IDATA
    308.2  000000                  RSEG    RCODE:CODE:NOROOT
    308.3  000000                  PUBLIC  ?MOVE_LONG8_IDATA_IDATA
    308    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    308.1  000000          #ifdef __EXTENDED_DPTR__
    308.2  000000          #endif ; __EXTENDED_DPTR__
    308.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    308.4  000000          #ifdef __DPTR_SEPARATE__
    308.5  000000          #ifdef __EXTENDED_DPTR__
    308.6  000000          #endif ; __EXTENDED_DPTR__
    308.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    308.8  000000          #ifdef __EXTENDED_DPTR__
    308.9  000000          #endif ; __EXTENDED_DPTR__
    308.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    308.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    308.12 000000          #ifdef __EXTENDED_DPTR__
    308.13 000000          #endif ; __EXTENDED_DPTR__
    308.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    308.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    308.16 000000          #ifdef __EXTENDED_DPTR__
    308.17 000000          #endif ; __EXTENDED_DPTR__
    308.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    308.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    308.20 000000          #ifdef __EXTENDED_DPTR__
    308.21 000000          #endif ; __EXTENDED_DPTR__
    308.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    308.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    308.24 000000          #ifdef __EXTENDED_DPTR__
    308.25 000000          #endif ; __EXTENDED_DPTR__
    308.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    308.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    308.28 000000          #ifdef __EXTENDED_DPTR__
    308.29 000000          #endif ; __EXTENDED_DPTR__
    308.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    308.31 000000          #endif ; __DPTR_SEPARATE__
    308.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    308.33 000000                  ENDM
    308.34 000000          
    308    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_IDATA_IDATA
    308.1  000000                                  cfi block ?MOVE_LONG8_IDATA_
                                                                         IDATA
                                                                          using
                                                                          cfi_c
                                                                         ommon
    308.2  000000                                  cfi nofunction
    308.3  000000          cfi_OFFSET              SET      0
    308.4  000000                                  ENDM
    308.5  000000          
    308.6  000000                  cfi A undefined
    308.7  000000                  cfi R0 undefined
    308.8  000000                  IF      'IDATA'='IDATA'
    308.9  000000                  cfi R1 undefined
    308.10 000000                  ENDIF
    308.11 000000                  IF      'IDATA'='PDATA'
    308.12 000000                  cfi R1 undefined
    308.13 000000                  ENDIF
    308.14 000000                  IF      'IDATA'='XDATA'
    308.15 000000                  cfi DPTR0 undefined
    308.16 000000                  ENDIF
    308.17 000000                  IF      'IDATA'='CODE'
    308.18 000000                  cfi DPTR0 undefined
    308.19 000000                  ENDIF
    308.20 000000          
    308.21 000000          ?MOVE_LONG8_IDATA_IDATA:
    308.22 000000 CA               XCH     A,R2
    308.23 000001 C0E0             PUSH    A
    308    000003                  cfi_PUSH_REG R2
    308    000003                                  cfi_STACK_ALLOC 1
    308.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    308.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    308.3  000003                                  ENDM
    308.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    308.5  000003                                  ENDM
    308.6  000003          move_byte:
    308.7  000003                  IF      'IDATA'='CODE'
    308.8  000003                  CLR     A
    308.9  000003                  MOVC    A,@A+R0
    308.10 000003                  ELSE
    308.11 000003 E6               MOV      A,@R0
    308.12 000004                  ENDIF
    308.13 000004 F7               MOV      @R1,A
    308.14 000005 09               INC     R1
    308.15 000006 08               INC     R0
    308.16 000007 DAFA             DJNZ    R2,move_byte
    308.17 000009 D0E0             POP     A
    308    00000B                  cfi_STACK_DEALL 1
    308.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    308.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    308.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    308.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    308.5  00000B          #endif
    308.6  00000B                                  ELSEIF cfi_OFFSET
    308.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    308.8  00000B                                  ELSE
    308.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    308.10 00000B                                  ENDIF
    308.11 00000B                                  ENDM
    308.12 00000B FA               MOV     R2,A
    308.13 00000C                  cfi R2 samevalue
    308.14 00000C 22               RET
    308.15 00000D          
    308    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_IDATA_IDATA
    308.1  00000D                                  IF cfi_OFFSET
    308.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    308.3  00000D                                  ELSE
    308.4  00000D                                    cfi endblock ?MOVE_LONG8_I
                           DATA_IDATA
    308.5  00000D                                  ENDIF
    308.6  00000D                                  ENDM
    308.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_IDATAREL    CONST PUB UNTYP.       RCODE      0 
?RET                ABS    CONST UNTYP.           ASEG       Not solved 
?RET_EXT            ABS    CONST UNTYP.           ASEG       Not solved 
?RET_HIGH           ABS    CONST UNTYP.           ASEG       Not solved 
?RET_LOW            ABS    CONST UNTYP.           ASEG       Not solved 
?V_START            ABS    CONST UNTYP.           ASEG       Not solved 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
BASEADDRESS         ABS    CONST UNTYP.           ASEG       Not solved 
Base                ABS    CONST UNTYP.           ASEG       Not solved 
CFA_PSP16           ABS    CONST UNTYP.           ASEG       Not solved 
CFA_SP              ABS    CONST UNTYP.           ASEG       Not solved 
CFA_XSP16           ABS    CONST UNTYP.           ASEG       Not solved 
CODEALIGN           ABS    CONST UNTYP.           ASEG       Not solved 
COMMON              ABS    CONST UNTYP.           ASEG       Not solved 
CONCAT              ABS    CONST UNTYP.           ASEG       Not solved 
DATAALIGN           ABS    CONST UNTYP.           ASEG       Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                ABS    CONST UNTYP.           ASEG       Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                ABS    CONST UNTYP.           ASEG       Not solved 
DPTR0               ABS    CONST UNTYP.           ASEG       Not solved 
ENDCOMMON           ABS    CONST UNTYP.           ASEG       Not solved 
ENDNAMES            ABS    CONST UNTYP.           ASEG       Not solved 
EXTENDS             ABS    CONST UNTYP.           ASEG       Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
FRAMECELL           ABS    CONST UNTYP.           ASEG       Not solved 
Frame               ABS    CONST UNTYP.           ASEG       Not solved 
NAMES               ABS    CONST UNTYP.           ASEG       Not solved 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSP16               ABS    CONST UNTYP.           ASEG       Not solved 
PSPH                ABS    CONST UNTYP.           ASEG       Not solved 
PSPL                ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RETH_CELL           ABS    CONST UNTYP.           ASEG       Not solved 
RETL_CELL           ABS    CONST UNTYP.           ASEG       Not solved 
RETURNADDRESS       ABS    CONST UNTYP.           ASEG       Not solved 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
Resource            ABS    CONST UNTYP.           ASEG       Not solved 
ResourceParts       ABS    CONST UNTYP.           ASEG       Not solved 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
SameValue           ABS    CONST UNTYP.           ASEG       Not solved 
StackFrame          ABS    CONST UNTYP.           ASEG       Not solved 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
USING               ABS    CONST UNTYP.           ASEG       Not solved 
Undefined           ABS    CONST UNTYP.           ASEG       Not solved 
V0                  ABS    CONST UNTYP.           ASEG       Not solved 
V1                  ABS    CONST UNTYP.           ASEG       Not solved 
V10                 ABS    CONST UNTYP.           ASEG       Not solved 
V11                 ABS    CONST UNTYP.           ASEG       Not solved 
V12                 ABS    CONST UNTYP.           ASEG       Not solved 
V13                 ABS    CONST UNTYP.           ASEG       Not solved 
V14                 ABS    CONST UNTYP.           ASEG       Not solved 
V15                 ABS    CONST UNTYP.           ASEG       Not solved 
V16                 ABS    CONST UNTYP.           ASEG       Not solved 
V17                 ABS    CONST UNTYP.           ASEG       Not solved 
V18                 ABS    CONST UNTYP.           ASEG       Not solved 
V19                 ABS    CONST UNTYP.           ASEG       Not solved 
V2                  ABS    CONST UNTYP.           ASEG       Not solved 
V20                 ABS    CONST UNTYP.           ASEG       Not solved 
V21                 ABS    CONST UNTYP.           ASEG       Not solved 
V22                 ABS    CONST UNTYP.           ASEG       Not solved 
V23                 ABS    CONST UNTYP.           ASEG       Not solved 
V24                 ABS    CONST UNTYP.           ASEG       Not solved 
V25                 ABS    CONST UNTYP.           ASEG       Not solved 
V26                 ABS    CONST UNTYP.           ASEG       Not solved 
V27                 ABS    CONST UNTYP.           ASEG       Not solved 
V28                 ABS    CONST UNTYP.           ASEG       Not solved 
V29                 ABS    CONST UNTYP.           ASEG       Not solved 
V3                  ABS    CONST UNTYP.           ASEG       Not solved 
V30                 ABS    CONST UNTYP.           ASEG       Not solved 
V31                 ABS    CONST UNTYP.           ASEG       Not solved 
V4                  ABS    CONST UNTYP.           ASEG       Not solved 
V5                  ABS    CONST UNTYP.           ASEG       Not solved 
V6                  ABS    CONST UNTYP.           ASEG       Not solved 
V7                  ABS    CONST UNTYP.           ASEG       Not solved 
V8                  ABS    CONST UNTYP.           ASEG       Not solved 
V9                  ABS    CONST UNTYP.           ASEG       Not solved 
VB                  ABS    CONST UNTYP.           ASEG       Not solved 
VirtualResource     ABS    CONST UNTYP.           ASEG       Not solved 
XSP16               ABS    CONST UNTYP.           ASEG       Not solved 
XSPH                ABS    CONST UNTYP.           ASEG       Not solved 
XSPL                ABS    CONST UNTYP.           ASEG       Not solved 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_banked_common   ABS    CONST UNTYP.           ASEG       Not solved 
cfi_banked_names    ABS    CONST UNTYP.           ASEG       Not solved 
cfi_common          ABS    CONST UNTYP.           ASEG       Not solved 
cfi_names           ABS    CONST UNTYP.           ASEG       Not solved 
cfi_pdata_enter_commonABS    CONST UNTYP.           ASEG       Not solved 
cfi_pdata_enter_namesABS    CONST UNTYP.           ASEG       Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           ABS    CONST UNTYP.           ASEG       Not solved 
sub                 ABS    CONST UNTYP.           ASEG       Not solved 
undefined           ABS    CONST UNTYP.           ASEG       Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:6594          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    308.8  000000                  ENDM
    309    000000                  copy_data8  IDATA,PDATA,MOV,MOVX,R1,R0
    309.1  000000                  MODULE  ?MOVE_LONG8_IDATA_PDATA
    309.2  000000                  RSEG    RCODE:CODE:NOROOT
    309.3  000000                  PUBLIC  ?MOVE_LONG8_IDATA_PDATA
    309    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    309.1  000000          #ifdef __EXTENDED_DPTR__
    309.2  000000          #endif ; __EXTENDED_DPTR__
    309.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    309.4  000000          #ifdef __DPTR_SEPARATE__
    309.5  000000          #ifdef __EXTENDED_DPTR__
    309.6  000000          #endif ; __EXTENDED_DPTR__
    309.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    309.8  000000          #ifdef __EXTENDED_DPTR__
    309.9  000000          #endif ; __EXTENDED_DPTR__
    309.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    309.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    309.12 000000          #ifdef __EXTENDED_DPTR__
    309.13 000000          #endif ; __EXTENDED_DPTR__
    309.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    309.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    309.16 000000          #ifdef __EXTENDED_DPTR__
    309.17 000000          #endif ; __EXTENDED_DPTR__
    309.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    309.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    309.20 000000          #ifdef __EXTENDED_DPTR__
    309.21 000000          #endif ; __EXTENDED_DPTR__
    309.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    309.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    309.24 000000          #ifdef __EXTENDED_DPTR__
    309.25 000000          #endif ; __EXTENDED_DPTR__
    309.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    309.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    309.28 000000          #ifdef __EXTENDED_DPTR__
    309.29 000000          #endif ; __EXTENDED_DPTR__
    309.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    309.31 000000          #endif ; __DPTR_SEPARATE__
    309.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    309.33 000000                  ENDM
    309.34 000000          
    309    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_IDATA_PDATA
    309.1  000000                                  cfi block ?MOVE_LONG8_IDATA_
 PDATA using cfi_common
    309.2  000000                                  cfi nofunction
    309.3  000000          cfi_OFFSET              SET      0
    309.4  000000                                  ENDM
    309.5  000000          
    309.6  000000                  cfi A undefined
    309.7  000000                  cfi R0 undefined
    309.8  000000                  IF      'PDATA'='IDATA'
    309.9  000000                  cfi R1 undefined
    309.10 000000                  ENDIF
    309.11 000000                  IF      'PDATA'='PDATA'
    309.12 000000                  cfi R1 undefined
    309.13 000000                  ENDIF
    309.14 000000                  IF      'PDATA'='XDATA'
    309.15 000000                  cfi DPTR0 undefined
    309.16 000000                  ENDIF
    309.17 000000                  IF      'PDATA'='CODE'
    309.18 000000                  cfi DPTR0 undefined
    309.19 000000                  ENDIF
    309.20 000000          
    309.21 000000          ?MOVE_LONG8_IDATA_PDATA:
    309.22 000000 CA               XCH     A,R2
    309.23 000001 C0E0             PUSH    A
    309    000003                  cfi_PUSH_REG R2
    309    000003                                  cfi_STACK_ALLOC 1
    309.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    309.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    309.3  000003                                  ENDM
    309.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    309.5  000003                                  ENDM
    309.6  000003          move_byte:
    309.7  000003                  IF      'PDATA'='CODE'
    309.8  000003                  CLR     A
    309.9  000003                  MOVC    A,@A+R0
    309.10 000003                  ELSE
    309.11 000003 E2               MOVX      A,@R0
    309.12 000004                  ENDIF
    309.13 000004 F7               MOV      @R1,A
    309.14 000005 09               INC     R1
    309.15 000006 08               INC     R0
    309.16 000007 DAFA             DJNZ    R2,move_byte
    309.17 000009 D0E0             POP     A
    309    00000B                  cfi_STACK_DEALL 1
    309.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    309.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    309.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    309.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    309.5  00000B          #endif
    309.6  00000B                                  ELSEIF cfi_OFFSET
    309.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    309.8  00000B                                  ELSE
    309.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    309.10 00000B                                  ENDIF
    309.11 00000B                                  ENDM
    309.12 00000B FA               MOV     R2,A
    309.13 00000C                  cfi R2 samevalue
    309.14 00000C 22               RET
    309.15 00000D          
    309    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_IDATA_PDATA
    309.1  00000D                                  IF cfi_OFFSET
    309.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    309.3  00000D                                  ELSE
    309.4  00000D                                    cfi endblock ?MOVE_LONG8_I
                           DATA_PDATA
    309.5  00000D                                  ENDIF
    309.6  00000D                                  ENDM
    309.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_PDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PDATA               ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:E756          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    309.8  000000                  ENDM
    310    000000                  copy_data8  IDATA,XDATA,MOV,MOVX,R0,DPTR
    310.1  000000                  MODULE  ?MOVE_LONG8_IDATA_XDATA
    310.2  000000                  RSEG    RCODE:CODE:NOROOT
    310.3  000000                  PUBLIC  ?MOVE_LONG8_IDATA_XDATA
    310    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    310.1  000000          #ifdef __EXTENDED_DPTR__
    310.2  000000          #endif ; __EXTENDED_DPTR__
    310.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    310.4  000000          #ifdef __DPTR_SEPARATE__
    310.5  000000          #ifdef __EXTENDED_DPTR__
    310.6  000000          #endif ; __EXTENDED_DPTR__
    310.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    310.8  000000          #ifdef __EXTENDED_DPTR__
    310.9  000000          #endif ; __EXTENDED_DPTR__
    310.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    310.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    310.12 000000          #ifdef __EXTENDED_DPTR__
    310.13 000000          #endif ; __EXTENDED_DPTR__
    310.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    310.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    310.16 000000          #ifdef __EXTENDED_DPTR__
    310.17 000000          #endif ; __EXTENDED_DPTR__
    310.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    310.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    310.20 000000          #ifdef __EXTENDED_DPTR__
    310.21 000000          #endif ; __EXTENDED_DPTR__
    310.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    310.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    310.24 000000          #ifdef __EXTENDED_DPTR__
    310.25 000000          #endif ; __EXTENDED_DPTR__
    310.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    310.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    310.28 000000          #ifdef __EXTENDED_DPTR__
    310.29 000000          #endif ; __EXTENDED_DPTR__
    310.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    310.31 000000          #endif ; __DPTR_SEPARATE__
    310.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    310.33 000000                  ENDM
    310.34 000000          
    310    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_IDATA_XDATA
    310.1  000000                                  cfi block ?MOVE_LONG8_IDATA_
 XDATA using cfi_common
    310.2  000000                                  cfi nofunction
    310.3  000000          cfi_OFFSET              SET      0
    310.4  000000                                  ENDM
    310.5  000000          
    310.6  000000                  cfi A undefined
    310.7  000000                  cfi R0 undefined
    310.8  000000                  IF      'XDATA'='IDATA'
    310.9  000000                  cfi R1 undefined
    310.10 000000                  ENDIF
    310.11 000000                  IF      'XDATA'='PDATA'
    310.12 000000                  cfi R1 undefined
    310.13 000000                  ENDIF
    310.14 000000                  IF      'XDATA'='XDATA'
    310.15 000000                  cfi DPTR0 undefined
    310.16 000000                  ENDIF
    310.17 000000                  IF      'XDATA'='CODE'
    310.18 000000                  cfi DPTR0 undefined
    310.19 000000                  ENDIF
    310.20 000000          
    310.21 000000          ?MOVE_LONG8_IDATA_XDATA:
    310.22 000000 CA               XCH     A,R2
    310.23 000001 C0E0             PUSH    A
    310    000003                  cfi_PUSH_REG R2
    310    000003                                  cfi_STACK_ALLOC 1
    310.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    310.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    310.3  000003                                  ENDM
    310.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    310.5  000003                                  ENDM
    310.6  000003          move_byte:
    310.7  000003                  IF      'XDATA'='CODE'
    310.8  000003                  CLR     A
    310.9  000003                  MOVC    A,@A+DPTR
    310.10 000003                  ELSE
    310.11 000003 E0               MOVX      A,@DPTR
    310.12 000004                  ENDIF
    310.13 000004 F6               MOV      @R0,A
    310.14 000005 08               INC     R0
    310.15 000006 A3               INC     DPTR
    310.16 000007 DAFA             DJNZ    R2,move_byte
    310.17 000009 D0E0             POP     A
    310    00000B                  cfi_STACK_DEALL 1
    310.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    310.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    310.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    310.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    310.5  00000B          #endif
    310.6  00000B                                  ELSEIF cfi_OFFSET
    310.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    310.8  00000B                                  ELSE
    310.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    310.10 00000B                                  ENDIF
    310.11 00000B                                  ENDM
    310.12 00000B FA               MOV     R2,A
    310.13 00000C                  cfi R2 samevalue
    310.14 00000C 22               RET
    310.15 00000D          
    310    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_IDATA_XDATA
    310.1  00000D                                  IF cfi_OFFSET
    310.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    310.3  00000D                                  ELSE
    310.4  00000D                                    cfi endblock ?MOVE_LONG8_I
                           DATA_XDATA
    310.5  00000D                                  ENDIF
    310.6  00000D                                  ENDM
    310.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_XDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:F90D          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    310.8  000000                  ENDM
    311    000000                  copy_data8  IDATA,CODE,MOV,MOVC,R0,DPTR
    311.1  000000                  MODULE  ?MOVE_LONG8_IDATA_CODE
    311.2  000000                  RSEG    RCODE:CODE:NOROOT
    311.3  000000                  PUBLIC  ?MOVE_LONG8_IDATA_CODE
    311    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    311.1  000000          #ifdef __EXTENDED_DPTR__
    311.2  000000          #endif ; __EXTENDED_DPTR__
    311.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    311.4  000000          #ifdef __DPTR_SEPARATE__
    311.5  000000          #ifdef __EXTENDED_DPTR__
    311.6  000000          #endif ; __EXTENDED_DPTR__
    311.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    311.8  000000          #ifdef __EXTENDED_DPTR__
    311.9  000000          #endif ; __EXTENDED_DPTR__
    311.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    311.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    311.12 000000          #ifdef __EXTENDED_DPTR__
    311.13 000000          #endif ; __EXTENDED_DPTR__
    311.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    311.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    311.16 000000          #ifdef __EXTENDED_DPTR__
    311.17 000000          #endif ; __EXTENDED_DPTR__
    311.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    311.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    311.20 000000          #ifdef __EXTENDED_DPTR__
    311.21 000000          #endif ; __EXTENDED_DPTR__
    311.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    311.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    311.24 000000          #ifdef __EXTENDED_DPTR__
    311.25 000000          #endif ; __EXTENDED_DPTR__
    311.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    311.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    311.28 000000          #ifdef __EXTENDED_DPTR__
    311.29 000000          #endif ; __EXTENDED_DPTR__
    311.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    311.31 000000          #endif ; __DPTR_SEPARATE__
    311.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    311.33 000000                  ENDM
    311.34 000000          
    311    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_IDATA_CODE
    311.1  000000                                  cfi block ?MOVE_LONG8_IDATA_
 CODE using cfi_common
    311.2  000000                                  cfi nofunction
    311.3  000000          cfi_OFFSET              SET      0
    311.4  000000                                  ENDM
    311.5  000000          
    311.6  000000                  cfi A undefined
    311.7  000000                  cfi R0 undefined
    311.8  000000                  IF      'CODE'='IDATA'
    311.9  000000                  cfi R1 undefined
    311.10 000000                  ENDIF
    311.11 000000                  IF      'CODE'='PDATA'
    311.12 000000                  cfi R1 undefined
    311.13 000000                  ENDIF
    311.14 000000                  IF      'CODE'='XDATA'
    311.15 000000                  cfi DPTR0 undefined
    311.16 000000                  ENDIF
    311.17 000000                  IF      'CODE'='CODE'
    311.18 000000                  cfi DPTR0 undefined
    311.19 000000                  ENDIF
    311.20 000000          
    311.21 000000          ?MOVE_LONG8_IDATA_CODE:
    311.22 000000 CA               XCH     A,R2
    311.23 000001 C0E0             PUSH    A
    311    000003                  cfi_PUSH_REG R2
    311    000003                                  cfi_STACK_ALLOC 1
    311.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    311.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    311.3  000003                                  ENDM
    311.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    311.5  000003                                  ENDM
    311.6  000003          move_byte:
    311.7  000003                  IF      'CODE'='CODE'
    311.8  000003 E4               CLR     A
    311.9  000004 93               MOVC    A,@A+DPTR
    311.10 000005                  ELSE
    311.11 000005                  MOVC      A,@DPTR
    311.12 000005                  ENDIF
    311.13 000005 F6               MOV      @R0,A
    311.14 000006 08               INC     R0
    311.15 000007 A3               INC     DPTR
    311.16 000008 DAF9             DJNZ    R2,move_byte
    311.17 00000A D0E0             POP     A
    311    00000C                  cfi_STACK_DEALL 1
    311.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    311.2  00000C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    311.3  00000C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    311.4  00000C                                      #error "Negative size on
                            cfi deallocate"
    311.5  00000C          #endif
    311.6  00000C                                  ELSEIF cfi_OFFSET
    311.7  00000C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    311.8  00000C                                  ELSE
    311.9  00000C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    311.10 00000C                                  ENDIF
    311.11 00000C                                  ENDM
    311.12 00000C FA               MOV     R2,A
    311.13 00000D                  cfi R2 samevalue
    311.14 00000D 22               RET
    311.15 00000E          
    311    00000E                  cfi_DATA_BLOCK_end ?MOVE_LONG8_IDATA_CODE
    311.1  00000E                                  IF cfi_OFFSET
    311.2  00000E                                    #error "Non-zero offset on
                            cfi data block end"
    311.3  00000E                                  ELSE
    311.4  00000E                                    cfi endblock ?MOVE_LONG8_I
                           DATA_CODE
    311.5  00000E                                  ENDIF
    311.6  00000E                                  ENDM
    311.7  00000E                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_CODEREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:6DB2          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 14          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    311.8  000000                  ENDM
    312    000000                  
    313    000000                  copy_data8  PDATA,IDATA,MOVX,MOV,R1,R0
    313.1  000000                  MODULE  ?MOVE_LONG8_PDATA_IDATA
    313.2  000000                  RSEG    RCODE:CODE:NOROOT
    313.3  000000                  PUBLIC  ?MOVE_LONG8_PDATA_IDATA
    313    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    313.1  000000          #ifdef __EXTENDED_DPTR__
    313.2  000000          #endif ; __EXTENDED_DPTR__
    313.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    313.4  000000          #ifdef __DPTR_SEPARATE__
    313.5  000000          #ifdef __EXTENDED_DPTR__
    313.6  000000          #endif ; __EXTENDED_DPTR__
    313.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    313.8  000000          #ifdef __EXTENDED_DPTR__
    313.9  000000          #endif ; __EXTENDED_DPTR__
    313.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    313.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    313.12 000000          #ifdef __EXTENDED_DPTR__
    313.13 000000          #endif ; __EXTENDED_DPTR__
    313.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    313.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    313.16 000000          #ifdef __EXTENDED_DPTR__
    313.17 000000          #endif ; __EXTENDED_DPTR__
    313.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    313.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    313.20 000000          #ifdef __EXTENDED_DPTR__
    313.21 000000          #endif ; __EXTENDED_DPTR__
    313.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    313.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    313.24 000000          #ifdef __EXTENDED_DPTR__
    313.25 000000          #endif ; __EXTENDED_DPTR__
    313.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    313.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    313.28 000000          #ifdef __EXTENDED_DPTR__
    313.29 000000          #endif ; __EXTENDED_DPTR__
    313.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    313.31 000000          #endif ; __DPTR_SEPARATE__
    313.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    313.33 000000                  ENDM
    313.34 000000          
    313    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_PDATA_IDATA
    313.1  000000                                  cfi block ?MOVE_LONG8_PDATA_
 IDATA using cfi_common
    313.2  000000                                  cfi nofunction
    313.3  000000          cfi_OFFSET              SET      0
    313.4  000000                                  ENDM
    313.5  000000          
    313.6  000000                  cfi A undefined
    313.7  000000                  cfi R0 undefined
    313.8  000000                  IF      'IDATA'='IDATA'
    313.9  000000                  cfi R1 undefined
    313.10 000000                  ENDIF
    313.11 000000                  IF      'IDATA'='PDATA'
    313.12 000000                  cfi R1 undefined
    313.13 000000                  ENDIF
    313.14 000000                  IF      'IDATA'='XDATA'
    313.15 000000                  cfi DPTR0 undefined
    313.16 000000                  ENDIF
    313.17 000000                  IF      'IDATA'='CODE'
    313.18 000000                  cfi DPTR0 undefined
    313.19 000000                  ENDIF
    313.20 000000          
    313.21 000000          ?MOVE_LONG8_PDATA_IDATA:
    313.22 000000 CA               XCH     A,R2
    313.23 000001 C0E0             PUSH    A
    313    000003                  cfi_PUSH_REG R2
    313    000003                                  cfi_STACK_ALLOC 1
    313.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    313.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    313.3  000003                                  ENDM
    313.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    313.5  000003                                  ENDM
    313.6  000003          move_byte:
    313.7  000003                  IF      'IDATA'='CODE'
    313.8  000003                  CLR     A
    313.9  000003                  MOVC    A,@A+R0
    313.10 000003                  ELSE
    313.11 000003 E6               MOV      A,@R0
    313.12 000004                  ENDIF
    313.13 000004 F3               MOVX      @R1,A
    313.14 000005 09               INC     R1
    313.15 000006 08               INC     R0
    313.16 000007 DAFA             DJNZ    R2,move_byte
    313.17 000009 D0E0             POP     A
    313    00000B                  cfi_STACK_DEALL 1
    313.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    313.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    313.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    313.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    313.5  00000B          #endif
    313.6  00000B                                  ELSEIF cfi_OFFSET
    313.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    313.8  00000B                                  ELSE
    313.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    313.10 00000B                                  ENDIF
    313.11 00000B                                  ENDM
    313.12 00000B FA               MOV     R2,A
    313.13 00000C                  cfi R2 samevalue
    313.14 00000C 22               RET
    313.15 00000D          
    313    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_PDATA_IDATA
    313.1  00000D                                  IF cfi_OFFSET
    313.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    313.3  00000D                                  ELSE
    313.4  00000D                                    cfi endblock ?MOVE_LONG8_P
                           DATA_IDATA
    313.5  00000D                                  ENDIF
    313.6  00000D                                  ENDM
    313.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_PDATA_IDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PDATA               ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:129F          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    313.8  000000                  ENDM
    314    000000                  copy_data8  PDATA,PDATA,MOVX,MOVX,R1,R0
    314.1  000000                  MODULE  ?MOVE_LONG8_PDATA_PDATA
    314.2  000000                  RSEG    RCODE:CODE:NOROOT
    314.3  000000                  PUBLIC  ?MOVE_LONG8_PDATA_PDATA
    314    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    314.1  000000          #ifdef __EXTENDED_DPTR__
    314.2  000000          #endif ; __EXTENDED_DPTR__
    314.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    314.4  000000          #ifdef __DPTR_SEPARATE__
    314.5  000000          #ifdef __EXTENDED_DPTR__
    314.6  000000          #endif ; __EXTENDED_DPTR__
    314.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    314.8  000000          #ifdef __EXTENDED_DPTR__
    314.9  000000          #endif ; __EXTENDED_DPTR__
    314.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    314.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    314.12 000000          #ifdef __EXTENDED_DPTR__
    314.13 000000          #endif ; __EXTENDED_DPTR__
    314.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    314.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    314.16 000000          #ifdef __EXTENDED_DPTR__
    314.17 000000          #endif ; __EXTENDED_DPTR__
    314.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    314.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    314.20 000000          #ifdef __EXTENDED_DPTR__
    314.21 000000          #endif ; __EXTENDED_DPTR__
    314.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    314.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    314.24 000000          #ifdef __EXTENDED_DPTR__
    314.25 000000          #endif ; __EXTENDED_DPTR__
    314.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    314.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    314.28 000000          #ifdef __EXTENDED_DPTR__
    314.29 000000          #endif ; __EXTENDED_DPTR__
    314.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    314.31 000000          #endif ; __DPTR_SEPARATE__
    314.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    314.33 000000                  ENDM
    314.34 000000          
    314    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_PDATA_PDATA
    314.1  000000                                  cfi block ?MOVE_LONG8_PDATA_
 PDATA using cfi_common
    314.2  000000                                  cfi nofunction
    314.3  000000          cfi_OFFSET              SET      0
    314.4  000000                                  ENDM
    314.5  000000          
    314.6  000000                  cfi A undefined
    314.7  000000                  cfi R0 undefined
    314.8  000000                  IF      'PDATA'='IDATA'
    314.9  000000                  cfi R1 undefined
    314.10 000000                  ENDIF
    314.11 000000                  IF      'PDATA'='PDATA'
    314.12 000000                  cfi R1 undefined
    314.13 000000                  ENDIF
    314.14 000000                  IF      'PDATA'='XDATA'
    314.15 000000                  cfi DPTR0 undefined
    314.16 000000                  ENDIF
    314.17 000000                  IF      'PDATA'='CODE'
    314.18 000000                  cfi DPTR0 undefined
    314.19 000000                  ENDIF
    314.20 000000          
    314.21 000000          ?MOVE_LONG8_PDATA_PDATA:
    314.22 000000 CA               XCH     A,R2
    314.23 000001 C0E0             PUSH    A
    314    000003                  cfi_PUSH_REG R2
    314    000003                                  cfi_STACK_ALLOC 1
    314.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    314.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    314.3  000003                                  ENDM
    314.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    314.5  000003                                  ENDM
    314.6  000003          move_byte:
    314.7  000003                  IF      'PDATA'='CODE'
    314.8  000003                  CLR     A
    314.9  000003                  MOVC    A,@A+R0
    314.10 000003                  ELSE
    314.11 000003 E2               MOVX      A,@R0
    314.12 000004                  ENDIF
    314.13 000004 F3               MOVX      @R1,A
    314.14 000005 09               INC     R1
    314.15 000006 08               INC     R0
    314.16 000007 DAFA             DJNZ    R2,move_byte
    314.17 000009 D0E0             POP     A
    314    00000B                  cfi_STACK_DEALL 1
    314.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    314.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    314.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    314.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    314.5  00000B          #endif
    314.6  00000B                                  ELSEIF cfi_OFFSET
    314.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    314.8  00000B                                  ELSE
    314.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    314.10 00000B                                  ENDIF
    314.11 00000B                                  ENDM
    314.12 00000B FA               MOV     R2,A
    314.13 00000C                  cfi R2 samevalue
    314.14 00000C 22               RET
    314.15 00000D          
    314    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_PDATA_PDATA
    314.1  00000D                                  IF cfi_OFFSET
    314.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    314.3  00000D                                  ELSE
    314.4  00000D                                    cfi endblock ?MOVE_LONG8_P
                           DATA_PDATA
    314.5  00000D                                  ENDIF
    314.6  00000D                                  ENDM
    314.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_PDATA_PDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PDATA               ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:905D          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    314.8  000000                  ENDM
    315    000000                  copy_data8  PDATA,XDATA,MOVX,MOVX,R0,DPTR
    315.1  000000                  MODULE  ?MOVE_LONG8_PDATA_XDATA
    315.2  000000                  RSEG    RCODE:CODE:NOROOT
    315.3  000000                  PUBLIC  ?MOVE_LONG8_PDATA_XDATA
    315    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    315.1  000000          #ifdef __EXTENDED_DPTR__
    315.2  000000          #endif ; __EXTENDED_DPTR__
    315.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    315.4  000000          #ifdef __DPTR_SEPARATE__
    315.5  000000          #ifdef __EXTENDED_DPTR__
    315.6  000000          #endif ; __EXTENDED_DPTR__
    315.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    315.8  000000          #ifdef __EXTENDED_DPTR__
    315.9  000000          #endif ; __EXTENDED_DPTR__
    315.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    315.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    315.12 000000          #ifdef __EXTENDED_DPTR__
    315.13 000000          #endif ; __EXTENDED_DPTR__
    315.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    315.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    315.16 000000          #ifdef __EXTENDED_DPTR__
    315.17 000000          #endif ; __EXTENDED_DPTR__
    315.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    315.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    315.20 000000          #ifdef __EXTENDED_DPTR__
    315.21 000000          #endif ; __EXTENDED_DPTR__
    315.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    315.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    315.24 000000          #ifdef __EXTENDED_DPTR__
    315.25 000000          #endif ; __EXTENDED_DPTR__
    315.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    315.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    315.28 000000          #ifdef __EXTENDED_DPTR__
    315.29 000000          #endif ; __EXTENDED_DPTR__
    315.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    315.31 000000          #endif ; __DPTR_SEPARATE__
    315.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    315.33 000000                  ENDM
    315.34 000000          
    315    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_PDATA_XDATA
    315.1  000000                                  cfi block ?MOVE_LONG8_PDATA_
 XDATA using cfi_common
    315.2  000000                                  cfi nofunction
    315.3  000000          cfi_OFFSET              SET      0
    315.4  000000                                  ENDM
    315.5  000000          
    315.6  000000                  cfi A undefined
    315.7  000000                  cfi R0 undefined
    315.8  000000                  IF      'XDATA'='IDATA'
    315.9  000000                  cfi R1 undefined
    315.10 000000                  ENDIF
    315.11 000000                  IF      'XDATA'='PDATA'
    315.12 000000                  cfi R1 undefined
    315.13 000000                  ENDIF
    315.14 000000                  IF      'XDATA'='XDATA'
    315.15 000000                  cfi DPTR0 undefined
    315.16 000000                  ENDIF
    315.17 000000                  IF      'XDATA'='CODE'
    315.18 000000                  cfi DPTR0 undefined
    315.19 000000                  ENDIF
    315.20 000000          
    315.21 000000          ?MOVE_LONG8_PDATA_XDATA:
    315.22 000000 CA               XCH     A,R2
    315.23 000001 C0E0             PUSH    A
    315    000003                  cfi_PUSH_REG R2
    315    000003                                  cfi_STACK_ALLOC 1
    315.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    315.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    315.3  000003                                  ENDM
    315.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    315.5  000003                                  ENDM
    315.6  000003          move_byte:
    315.7  000003                  IF      'XDATA'='CODE'
    315.8  000003                  CLR     A
    315.9  000003                  MOVC    A,@A+DPTR
    315.10 000003                  ELSE
    315.11 000003 E0               MOVX      A,@DPTR
    315.12 000004                  ENDIF
    315.13 000004 F2               MOVX      @R0,A
    315.14 000005 08               INC     R0
    315.15 000006 A3               INC     DPTR
    315.16 000007 DAFA             DJNZ    R2,move_byte
    315.17 000009 D0E0             POP     A
    315    00000B                  cfi_STACK_DEALL 1
    315.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    315.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    315.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    315.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    315.5  00000B          #endif
    315.6  00000B                                  ELSEIF cfi_OFFSET
    315.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    315.8  00000B                                  ELSE
    315.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    315.10 00000B                                  ENDIF
    315.11 00000B                                  ENDM
    315.12 00000B FA               MOV     R2,A
    315.13 00000C                  cfi R2 samevalue
    315.14 00000C 22               RET
    315.15 00000D          
    315    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_PDATA_XDATA
    315.1  00000D                                  IF cfi_OFFSET
    315.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    315.3  00000D                                  ELSE
    315.4  00000D                                    cfi endblock ?MOVE_LONG8_P
                           DATA_XDATA
    315.5  00000D                                  ENDIF
    315.6  00000D                                  ENDM
    315.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_PDATA_XDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PDATA               ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:8E06          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    315.8  000000                  ENDM
    316    000000                  copy_data8  PDATA,CODE,MOVX,MOVC,R0,DPTR
    316.1  000000                  MODULE  ?MOVE_LONG8_PDATA_CODE
    316.2  000000                  RSEG    RCODE:CODE:NOROOT
    316.3  000000                  PUBLIC  ?MOVE_LONG8_PDATA_CODE
    316    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    316.1  000000          #ifdef __EXTENDED_DPTR__
    316.2  000000          #endif ; __EXTENDED_DPTR__
    316.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    316.4  000000          #ifdef __DPTR_SEPARATE__
    316.5  000000          #ifdef __EXTENDED_DPTR__
    316.6  000000          #endif ; __EXTENDED_DPTR__
    316.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    316.8  000000          #ifdef __EXTENDED_DPTR__
    316.9  000000          #endif ; __EXTENDED_DPTR__
    316.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    316.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    316.12 000000          #ifdef __EXTENDED_DPTR__
    316.13 000000          #endif ; __EXTENDED_DPTR__
    316.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    316.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    316.16 000000          #ifdef __EXTENDED_DPTR__
    316.17 000000          #endif ; __EXTENDED_DPTR__
    316.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    316.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    316.20 000000          #ifdef __EXTENDED_DPTR__
    316.21 000000          #endif ; __EXTENDED_DPTR__
    316.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    316.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    316.24 000000          #ifdef __EXTENDED_DPTR__
    316.25 000000          #endif ; __EXTENDED_DPTR__
    316.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    316.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    316.28 000000          #ifdef __EXTENDED_DPTR__
    316.29 000000          #endif ; __EXTENDED_DPTR__
    316.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    316.31 000000          #endif ; __DPTR_SEPARATE__
    316.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    316.33 000000                  ENDM
    316.34 000000          
    316    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_PDATA_CODE
    316.1  000000                                  cfi block ?MOVE_LONG8_PDATA_
 CODE using cfi_common
    316.2  000000                                  cfi nofunction
    316.3  000000          cfi_OFFSET              SET      0
    316.4  000000                                  ENDM
    316.5  000000          
    316.6  000000                  cfi A undefined
    316.7  000000                  cfi R0 undefined
    316.8  000000                  IF      'CODE'='IDATA'
    316.9  000000                  cfi R1 undefined
    316.10 000000                  ENDIF
    316.11 000000                  IF      'CODE'='PDATA'
    316.12 000000                  cfi R1 undefined
    316.13 000000                  ENDIF
    316.14 000000                  IF      'CODE'='XDATA'
    316.15 000000                  cfi DPTR0 undefined
    316.16 000000                  ENDIF
    316.17 000000                  IF      'CODE'='CODE'
    316.18 000000                  cfi DPTR0 undefined
    316.19 000000                  ENDIF
    316.20 000000          
    316.21 000000          ?MOVE_LONG8_PDATA_CODE:
    316.22 000000 CA               XCH     A,R2
    316.23 000001 C0E0             PUSH    A
    316    000003                  cfi_PUSH_REG R2
    316    000003                                  cfi_STACK_ALLOC 1
    316.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    316.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    316.3  000003                                  ENDM
    316.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    316.5  000003                                  ENDM
    316.6  000003          move_byte:
    316.7  000003                  IF      'CODE'='CODE'
    316.8  000003 E4               CLR     A
    316.9  000004 93               MOVC    A,@A+DPTR
    316.10 000005                  ELSE
    316.11 000005                  MOVC      A,@DPTR
    316.12 000005                  ENDIF
    316.13 000005 F2               MOVX      @R0,A
    316.14 000006 08               INC     R0
    316.15 000007 A3               INC     DPTR
    316.16 000008 DAF9             DJNZ    R2,move_byte
    316.17 00000A D0E0             POP     A
    316    00000C                  cfi_STACK_DEALL 1
    316.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    316.2  00000C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    316.3  00000C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    316.4  00000C                                      #error "Negative size on
                            cfi deallocate"
    316.5  00000C          #endif
    316.6  00000C                                  ELSEIF cfi_OFFSET
    316.7  00000C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    316.8  00000C                                  ELSE
    316.9  00000C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    316.10 00000C                                  ENDIF
    316.11 00000C                                  ENDM
    316.12 00000C FA               MOV     R2,A
    316.13 00000D                  cfi R2 samevalue
    316.14 00000D 22               RET
    316.15 00000E          
    316    00000E                  cfi_DATA_BLOCK_end ?MOVE_LONG8_PDATA_CODE
    316.1  00000E                                  IF cfi_OFFSET
    316.2  00000E                                    #error "Non-zero offset on
                            cfi data block end"
    316.3  00000E                                  ELSE
    316.4  00000E                                    cfi endblock ?MOVE_LONG8_P
                           DATA_CODE
    316.5  00000E                                  ENDIF
    316.6  00000E                                  ENDM
    316.7  00000E                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_PDATA_CODEREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PDATA               ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:444E          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 14          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    316.8  000000                  ENDM
    317    000000                  
    318    000000                  copy_data8  XDATA,IDATA,MOVX,MOV,DPTR,R0
    318.1  000000                  MODULE  ?MOVE_LONG8_XDATA_IDATA
    318.2  000000                  RSEG    RCODE:CODE:NOROOT
    318.3  000000                  PUBLIC  ?MOVE_LONG8_XDATA_IDATA
    318    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    318.1  000000          #ifdef __EXTENDED_DPTR__
    318.2  000000          #endif ; __EXTENDED_DPTR__
    318.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    318.4  000000          #ifdef __DPTR_SEPARATE__
    318.5  000000          #ifdef __EXTENDED_DPTR__
    318.6  000000          #endif ; __EXTENDED_DPTR__
    318.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    318.8  000000          #ifdef __EXTENDED_DPTR__
    318.9  000000          #endif ; __EXTENDED_DPTR__
    318.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    318.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    318.12 000000          #ifdef __EXTENDED_DPTR__
    318.13 000000          #endif ; __EXTENDED_DPTR__
    318.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    318.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    318.16 000000          #ifdef __EXTENDED_DPTR__
    318.17 000000          #endif ; __EXTENDED_DPTR__
    318.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    318.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    318.20 000000          #ifdef __EXTENDED_DPTR__
    318.21 000000          #endif ; __EXTENDED_DPTR__
    318.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    318.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    318.24 000000          #ifdef __EXTENDED_DPTR__
    318.25 000000          #endif ; __EXTENDED_DPTR__
    318.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    318.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    318.28 000000          #ifdef __EXTENDED_DPTR__
    318.29 000000          #endif ; __EXTENDED_DPTR__
    318.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    318.31 000000          #endif ; __DPTR_SEPARATE__
    318.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    318.33 000000                  ENDM
    318.34 000000          
    318    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_XDATA_IDATA
    318.1  000000                                  cfi block ?MOVE_LONG8_XDATA_
 IDATA using cfi_common
    318.2  000000                                  cfi nofunction
    318.3  000000          cfi_OFFSET              SET      0
    318.4  000000                                  ENDM
    318.5  000000          
    318.6  000000                  cfi A undefined
    318.7  000000                  cfi R0 undefined
    318.8  000000                  IF      'IDATA'='IDATA'
    318.9  000000                  cfi R1 undefined
    318.10 000000                  ENDIF
    318.11 000000                  IF      'IDATA'='PDATA'
    318.12 000000                  cfi R1 undefined
    318.13 000000                  ENDIF
    318.14 000000                  IF      'IDATA'='XDATA'
    318.15 000000                  cfi DPTR0 undefined
    318.16 000000                  ENDIF
    318.17 000000                  IF      'IDATA'='CODE'
    318.18 000000                  cfi DPTR0 undefined
    318.19 000000                  ENDIF
    318.20 000000          
    318.21 000000          ?MOVE_LONG8_XDATA_IDATA:
    318.22 000000 CA               XCH     A,R2
    318.23 000001 C0E0             PUSH    A
    318    000003                  cfi_PUSH_REG R2
    318    000003                                  cfi_STACK_ALLOC 1
    318.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    318.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    318.3  000003                                  ENDM
    318.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    318.5  000003                                  ENDM
    318.6  000003          move_byte:
    318.7  000003                  IF      'IDATA'='CODE'
    318.8  000003                  CLR     A
    318.9  000003                  MOVC    A,@A+R0
    318.10 000003                  ELSE
    318.11 000003 E6               MOV      A,@R0
    318.12 000004                  ENDIF
    318.13 000004 F0               MOVX      @DPTR,A
    318.14 000005 A3               INC     DPTR
    318.15 000006 08               INC     R0
    318.16 000007 DAFA             DJNZ    R2,move_byte
    318.17 000009 D0E0             POP     A
    318    00000B                  cfi_STACK_DEALL 1
    318.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    318.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    318.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    318.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    318.5  00000B          #endif
    318.6  00000B                                  ELSEIF cfi_OFFSET
    318.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    318.8  00000B                                  ELSE
    318.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    318.10 00000B                                  ENDIF
    318.11 00000B                                  ENDM
    318.12 00000B FA               MOV     R2,A
    318.13 00000C                  cfi R2 samevalue
    318.14 00000C 22               RET
    318.15 00000D          
    318    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_XDATA_IDATA
    318.1  00000D                                  IF cfi_OFFSET
    318.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    318.3  00000D                                  ELSE
    318.4  00000D                                    cfi endblock ?MOVE_LONG8_X
                           DATA_IDATA
    318.5  00000D                                  ENDIF
    318.6  00000D                                  ENDM
    318.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_XDATA_IDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:D81B          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    318.8  000000                  ENDM
    319    000000                  copy_data8  XDATA,PDATA,MOVX,MOVX,DPTR,R0
    319.1  000000                  MODULE  ?MOVE_LONG8_XDATA_PDATA
    319.2  000000                  RSEG    RCODE:CODE:NOROOT
    319.3  000000                  PUBLIC  ?MOVE_LONG8_XDATA_PDATA
    319    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    319.1  000000          #ifdef __EXTENDED_DPTR__
    319.2  000000          #endif ; __EXTENDED_DPTR__
    319.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    319.4  000000          #ifdef __DPTR_SEPARATE__
    319.5  000000          #ifdef __EXTENDED_DPTR__
    319.6  000000          #endif ; __EXTENDED_DPTR__
    319.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    319.8  000000          #ifdef __EXTENDED_DPTR__
    319.9  000000          #endif ; __EXTENDED_DPTR__
    319.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    319.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    319.12 000000          #ifdef __EXTENDED_DPTR__
    319.13 000000          #endif ; __EXTENDED_DPTR__
    319.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    319.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    319.16 000000          #ifdef __EXTENDED_DPTR__
    319.17 000000          #endif ; __EXTENDED_DPTR__
    319.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    319.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    319.20 000000          #ifdef __EXTENDED_DPTR__
    319.21 000000          #endif ; __EXTENDED_DPTR__
    319.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    319.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    319.24 000000          #ifdef __EXTENDED_DPTR__
    319.25 000000          #endif ; __EXTENDED_DPTR__
    319.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    319.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    319.28 000000          #ifdef __EXTENDED_DPTR__
    319.29 000000          #endif ; __EXTENDED_DPTR__
    319.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    319.31 000000          #endif ; __DPTR_SEPARATE__
    319.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    319.33 000000                  ENDM
    319.34 000000          
    319    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_XDATA_PDATA
    319.1  000000                                  cfi block ?MOVE_LONG8_XDATA_
 PDATA using cfi_common
    319.2  000000                                  cfi nofunction
    319.3  000000          cfi_OFFSET              SET      0
    319.4  000000                                  ENDM
    319.5  000000          
    319.6  000000                  cfi A undefined
    319.7  000000                  cfi R0 undefined
    319.8  000000                  IF      'PDATA'='IDATA'
    319.9  000000                  cfi R1 undefined
    319.10 000000                  ENDIF
    319.11 000000                  IF      'PDATA'='PDATA'
    319.12 000000                  cfi R1 undefined
    319.13 000000                  ENDIF
    319.14 000000                  IF      'PDATA'='XDATA'
    319.15 000000                  cfi DPTR0 undefined
    319.16 000000                  ENDIF
    319.17 000000                  IF      'PDATA'='CODE'
    319.18 000000                  cfi DPTR0 undefined
    319.19 000000                  ENDIF
    319.20 000000          
    319.21 000000          ?MOVE_LONG8_XDATA_PDATA:
    319.22 000000 CA               XCH     A,R2
    319.23 000001 C0E0             PUSH    A
    319    000003                  cfi_PUSH_REG R2
    319    000003                                  cfi_STACK_ALLOC 1
    319.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    319.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    319.3  000003                                  ENDM
    319.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    319.5  000003                                  ENDM
    319.6  000003          move_byte:
    319.7  000003                  IF      'PDATA'='CODE'
    319.8  000003                  CLR     A
    319.9  000003                  MOVC    A,@A+R0
    319.10 000003                  ELSE
    319.11 000003 E2               MOVX      A,@R0
    319.12 000004                  ENDIF
    319.13 000004 F0               MOVX      @DPTR,A
    319.14 000005 A3               INC     DPTR
    319.15 000006 08               INC     R0
    319.16 000007 DAFA             DJNZ    R2,move_byte
    319.17 000009 D0E0             POP     A
    319    00000B                  cfi_STACK_DEALL 1
    319.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    319.2  00000B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    319.3  00000B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    319.4  00000B                                      #error "Negative size on
                            cfi deallocate"
    319.5  00000B          #endif
    319.6  00000B                                  ELSEIF cfi_OFFSET
    319.7  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    319.8  00000B                                  ELSE
    319.9  00000B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    319.10 00000B                                  ENDIF
    319.11 00000B                                  ENDM
    319.12 00000B FA               MOV     R2,A
    319.13 00000C                  cfi R2 samevalue
    319.14 00000C 22               RET
    319.15 00000D          
    319    00000D                  cfi_DATA_BLOCK_end ?MOVE_LONG8_XDATA_PDATA
    319.1  00000D                                  IF cfi_OFFSET
    319.2  00000D                                    #error "Non-zero offset on
                            cfi data block end"
    319.3  00000D                                  ELSE
    319.4  00000D                                    cfi endblock ?MOVE_LONG8_X
                           DATA_PDATA
    319.5  00000D                                  ENDIF
    319.6  00000D                                  ENDM
    319.7  00000D                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_XDATA_PDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PDATA               ABS    CONST UNTYP.           ASEG       Not solved 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       6 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:5AD9          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 13          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    319.8  000000                  ENDM
    320    000000          
    321    000000                  copy_large_large  XDATA,8
    321.1  000000                  MODULE  ?MOVE_LONG8_XDATA_XDATA
    321.2  000000                  RSEG    RCODE:CODE:NOROOT
    321.3  000000                  PUBLIC  ?MOVE_LONG8_XDATA_XDATA
    321    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    321.1  000000          #ifdef __EXTENDED_DPTR__
    321.2  000000          #endif ; __EXTENDED_DPTR__
    321.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    321.4  000000          #ifdef __DPTR_SEPARATE__
    321.5  000000          #ifdef __EXTENDED_DPTR__
    321.6  000000          #endif ; __EXTENDED_DPTR__
    321.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    321.8  000000          #ifdef __EXTENDED_DPTR__
    321.9  000000          #endif ; __EXTENDED_DPTR__
    321.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    321.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    321.12 000000          #ifdef __EXTENDED_DPTR__
    321.13 000000          #endif ; __EXTENDED_DPTR__
    321.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    321.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    321.16 000000          #ifdef __EXTENDED_DPTR__
    321.17 000000          #endif ; __EXTENDED_DPTR__
    321.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    321.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    321.20 000000          #ifdef __EXTENDED_DPTR__
    321.21 000000          #endif ; __EXTENDED_DPTR__
    321.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    321.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    321.24 000000          #ifdef __EXTENDED_DPTR__
    321.25 000000          #endif ; __EXTENDED_DPTR__
    321.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    321.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    321.28 000000          #ifdef __EXTENDED_DPTR__
    321.29 000000          #endif ; __EXTENDED_DPTR__
    321.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    321.31 000000          #endif ; __DPTR_SEPARATE__
    321.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    321.33 000000                  ENDM
    321.34 000000          
    321    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_XDATA_XDATA
    321.1  000000                                  cfi block ?MOVE_LONG8_XDATA_
                                                             XDATA using
                                                              cfi_common
    321.2  000000                                  cfi nofunction
    321.3  000000          cfi_OFFSET              SET      0
    321.4  000000                                  ENDM
    321.5  000000                  cfi A undefined
    321.6  000000                  IF      '8'='16'
    321.7  000000                  cfi R3 undefined
    321.8  000000                  ENDIF
    321.9  000000                  cfi R4 undefined
    321.10 000000                  cfi R5 undefined
    321.11 000000          #ifdef __EXTENDED_DPTR__
    321.12 000000          #endif
    321.13 000000                  cfi DPTR0 undefined
    321.14 000000          
    321.15 000000          ?MOVE_LONG8_XDATA_XDATA:
    321.16 000000 CA               XCH     A,R2
    321.17 000001 C0E0             PUSH    A
    321    000003                  cfi_PUSH_REG R2
    321    000003                                  cfi_STACK_ALLOC 1
    321.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    321.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    321.3  000003                                  ENDM
    321.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    321.5  000003                                  ENDM
    321.6  000003          move_byte:
    321.7  000003                  ; Read up the source into A register.
    321.8  000003                  IF      'XDATA'='XDATA'
    321.9  000003 E0               MOVX    A,@DPTR
    321.10 000004                  ELSE
    321.11 000004                  CLR     A
    321.12 000004                  MOVC    A,@A+DPTR
    321.13 000004                  ENDIF
    321.14 000004 A3               INC     DPTR
    321.15 000005          
    321.16 000005 C582             XCH     A,DPL
    321.17 000007 CC               XCH     A,R4
    321.18 000008 C582             XCH     A,DPL
    321.19 00000A C583             XCH     A,DPH
    321.20 00000C CD               XCH     A,R5
    321.21 00000D C583             XCH     A,DPH
    321.22 00000F          #ifdef __EXTENDED_DPTR__
    321.23 00000F          #endif
    321.24 00000F F0               MOVX    @DPTR,A
    321.25 000010 A3               INC     DPTR
    321.26 000011                  
    321.27 000011 C582             XCH     A,DPL
    321.28 000013 CC               XCH     A,R4
    321.29 000014 C582             XCH     A,DPL
    321.30 000016 C583             XCH     A,DPH
    321.31 000018 CD               XCH     A,R5
    321.32 000019 C583             XCH     A,DPH
    321.33 00001B          #ifdef __EXTENDED_DPTR__
    321.34 00001B          #endif
    321.35 00001B                  
    321.36 00001B DAE6             DJNZ    R2,move_byte
    321.37 00001D                  IF      '8'='16'
    321.38 00001D                  DJNZ    R3,move_byte
    321.39 00001D                  ENDIF
    321.40 00001D          
    321.41 00001D D0E0             POP     A
    321    00001F                  cfi_STACK_DEALL 1
    321.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    321.2  00001F                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    321.3  00001F          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    321.4  00001F                                      #error "Negative size on
                            cfi deallocate"
    321.5  00001F          #endif
    321.6  00001F                                  ELSEIF cfi_OFFSET
    321.7  00001F                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    321.8  00001F                                  ELSE
    321.9  00001F                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    321.10 00001F                                  ENDIF
    321.11 00001F                                  ENDM
    321.12 00001F CA               XCH     A,R2
    321.13 000020                  cfi R2 samevalue
    321.14 000020 22               RET
    321.15 000021          
    321    000021                  cfi_DATA_BLOCK_end ?MOVE_LONG8_XDATA_XDATA
    321.1  000021                                  IF cfi_OFFSET
    321.2  000021                                    #error "Non-zero offset on
                            cfi data block end"
    321.3  000021                                  ELSE
    321.4  000021                                    cfi endblock ?MOVE_LONG8_X
                           DATA_XDATA
    321.5  000021                                  ENDIF
    321.6  000021                                  ENDM
    321.7  000021                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_XDATA_XDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       2 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:3F2E          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 33          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    321.8  000000                  ENDM
    322    000000                  copy_large_large  CODE,8
    322.1  000000                  MODULE  ?MOVE_LONG8_XDATA_CODE
    322.2  000000                  RSEG    RCODE:CODE:NOROOT
    322.3  000000                  PUBLIC  ?MOVE_LONG8_XDATA_CODE
    322    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    322.1  000000          #ifdef __EXTENDED_DPTR__
    322.2  000000          #endif ; __EXTENDED_DPTR__
    322.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    322.4  000000          #ifdef __DPTR_SEPARATE__
    322.5  000000          #ifdef __EXTENDED_DPTR__
    322.6  000000          #endif ; __EXTENDED_DPTR__
    322.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    322.8  000000          #ifdef __EXTENDED_DPTR__
    322.9  000000          #endif ; __EXTENDED_DPTR__
    322.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    322.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    322.12 000000          #ifdef __EXTENDED_DPTR__
    322.13 000000          #endif ; __EXTENDED_DPTR__
    322.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    322.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    322.16 000000          #ifdef __EXTENDED_DPTR__
    322.17 000000          #endif ; __EXTENDED_DPTR__
    322.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    322.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    322.20 000000          #ifdef __EXTENDED_DPTR__
    322.21 000000          #endif ; __EXTENDED_DPTR__
    322.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    322.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    322.24 000000          #ifdef __EXTENDED_DPTR__
    322.25 000000          #endif ; __EXTENDED_DPTR__
    322.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    322.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    322.28 000000          #ifdef __EXTENDED_DPTR__
    322.29 000000          #endif ; __EXTENDED_DPTR__
    322.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    322.31 000000          #endif ; __DPTR_SEPARATE__
    322.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    322.33 000000                  ENDM
    322.34 000000          
    322    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG8_XDATA_CODE
    322.1  000000                                  cfi block ?MOVE_LONG8_XDATA_
                                                             CODE using
                                                              cfi_common
    322.2  000000                                  cfi nofunction
    322.3  000000          cfi_OFFSET              SET      0
    322.4  000000                                  ENDM
    322.5  000000                  cfi A undefined
    322.6  000000                  IF      '8'='16'
    322.7  000000                  cfi R3 undefined
    322.8  000000                  ENDIF
    322.9  000000                  cfi R4 undefined
    322.10 000000                  cfi R5 undefined
    322.11 000000          #ifdef __EXTENDED_DPTR__
    322.12 000000          #endif
    322.13 000000                  cfi DPTR0 undefined
    322.14 000000          
    322.15 000000          ?MOVE_LONG8_XDATA_CODE:
    322.16 000000 CA               XCH     A,R2
    322.17 000001 C0E0             PUSH    A
    322    000003                  cfi_PUSH_REG R2
    322    000003                                  cfi_STACK_ALLOC 1
    322.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    322.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    322.3  000003                                  ENDM
    322.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    322.5  000003                                  ENDM
    322.6  000003          move_byte:
    322.7  000003                  ; Read up the source into A register.
    322.8  000003                  IF      'CODE'='XDATA'
    322.9  000003                  MOVX    A,@DPTR
    322.10 000003                  ELSE
    322.11 000003 E4               CLR     A
    322.12 000004 93               MOVC    A,@A+DPTR
    322.13 000005                  ENDIF
    322.14 000005 A3               INC     DPTR
    322.15 000006          
    322.16 000006 C582             XCH     A,DPL
    322.17 000008 CC               XCH     A,R4
    322.18 000009 C582             XCH     A,DPL
    322.19 00000B C583             XCH     A,DPH
    322.20 00000D CD               XCH     A,R5
    322.21 00000E C583             XCH     A,DPH
    322.22 000010          #ifdef __EXTENDED_DPTR__
    322.23 000010          #endif
    322.24 000010 F0               MOVX    @DPTR,A
    322.25 000011 A3               INC     DPTR
    322.26 000012                  
    322.27 000012 C582             XCH     A,DPL
    322.28 000014 CC               XCH     A,R4
    322.29 000015 C582             XCH     A,DPL
    322.30 000017 C583             XCH     A,DPH
    322.31 000019 CD               XCH     A,R5
    322.32 00001A C583             XCH     A,DPH
    322.33 00001C          #ifdef __EXTENDED_DPTR__
    322.34 00001C          #endif
    322.35 00001C                  
    322.36 00001C DAE5             DJNZ    R2,move_byte
    322.37 00001E                  IF      '8'='16'
    322.38 00001E                  DJNZ    R3,move_byte
    322.39 00001E                  ENDIF
    322.40 00001E          
    322.41 00001E D0E0             POP     A
    322    000020                  cfi_STACK_DEALL 1
    322.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    322.2  000020                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    322.3  000020          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    322.4  000020                                      #error "Negative size on
                            cfi deallocate"
    322.5  000020          #endif
    322.6  000020                                  ELSEIF cfi_OFFSET
    322.7  000020                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    322.8  000020                                  ELSE
    322.9  000020                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    322.10 000020                                  ENDIF
    322.11 000020                                  ENDM
    322.12 000020 CA               XCH     A,R2
    322.13 000021                  cfi R2 samevalue
    322.14 000021 22               RET
    322.15 000022          
    322    000022                  cfi_DATA_BLOCK_end ?MOVE_LONG8_XDATA_CODE
    322.1  000022                                  IF cfi_OFFSET
    322.2  000022                                    #error "Non-zero offset on
                            cfi data block end"
    322.3  000022                                  ELSE
    322.4  000022                                    cfi endblock ?MOVE_LONG8_X
                           DATA_CODE
    322.5  000022                                  ENDIF
    322.6  000022                                  ENDM
    322.7  000022                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_XDATA_CODEREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       2 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:30EE          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 34          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    322.8  000000                  ENDM
    323    000000                  copy_large_large  XDATA,16
    323.1  000000                  MODULE  ?MOVE_LONG16_XDATA_XDATA
    323.2  000000                  RSEG    RCODE:CODE:NOROOT
    323.3  000000                  PUBLIC  ?MOVE_LONG16_XDATA_XDATA
    323    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    323.1  000000          #ifdef __EXTENDED_DPTR__
    323.2  000000          #endif ; __EXTENDED_DPTR__
    323.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    323.4  000000          #ifdef __DPTR_SEPARATE__
    323.5  000000          #ifdef __EXTENDED_DPTR__
    323.6  000000          #endif ; __EXTENDED_DPTR__
    323.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    323.8  000000          #ifdef __EXTENDED_DPTR__
    323.9  000000          #endif ; __EXTENDED_DPTR__
    323.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    323.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    323.12 000000          #ifdef __EXTENDED_DPTR__
    323.13 000000          #endif ; __EXTENDED_DPTR__
    323.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    323.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    323.16 000000          #ifdef __EXTENDED_DPTR__
    323.17 000000          #endif ; __EXTENDED_DPTR__
    323.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    323.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    323.20 000000          #ifdef __EXTENDED_DPTR__
    323.21 000000          #endif ; __EXTENDED_DPTR__
    323.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    323.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    323.24 000000          #ifdef __EXTENDED_DPTR__
    323.25 000000          #endif ; __EXTENDED_DPTR__
    323.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    323.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    323.28 000000          #ifdef __EXTENDED_DPTR__
    323.29 000000          #endif ; __EXTENDED_DPTR__
    323.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    323.31 000000          #endif ; __DPTR_SEPARATE__
    323.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    323.33 000000                  ENDM
    323.34 000000          
    323    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG16_XDATA_XDAT
                           A
    323.1  000000                                  cfi block ?MOVE_LONG16_XDATA
                                                              _XDATA using
                                                               cfi_common
    323.2  000000                                  cfi nofunction
    323.3  000000          cfi_OFFSET              SET      0
    323.4  000000                                  ENDM
    323.5  000000                  cfi A undefined
    323.6  000000                  IF      '16'='16'
    323.7  000000                  cfi R3 undefined
    323.8  000000                  ENDIF
    323.9  000000                  cfi R4 undefined
    323.10 000000                  cfi R5 undefined
    323.11 000000          #ifdef __EXTENDED_DPTR__
    323.12 000000          #endif
    323.13 000000                  cfi DPTR0 undefined
    323.14 000000          
    323.15 000000          ?MOVE_LONG16_XDATA_XDATA:
    323.16 000000 CA               XCH     A,R2
    323.17 000001 C0E0             PUSH    A
    323    000003                  cfi_PUSH_REG R2
    323    000003                                  cfi_STACK_ALLOC 1
    323.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    323.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    323.3  000003                                  ENDM
    323.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    323.5  000003                                  ENDM
    323.6  000003          move_byte:
    323.7  000003                  ; Read up the source into A register.
    323.8  000003                  IF      'XDATA'='XDATA'
    323.9  000003 E0               MOVX    A,@DPTR
    323.10 000004                  ELSE
    323.11 000004                  CLR     A
    323.12 000004                  MOVC    A,@A+DPTR
    323.13 000004                  ENDIF
    323.14 000004 A3               INC     DPTR
    323.15 000005          
    323.16 000005 C582             XCH     A,DPL
    323.17 000007 CC               XCH     A,R4
    323.18 000008 C582             XCH     A,DPL
    323.19 00000A C583             XCH     A,DPH
    323.20 00000C CD               XCH     A,R5
    323.21 00000D C583             XCH     A,DPH
    323.22 00000F          #ifdef __EXTENDED_DPTR__
    323.23 00000F          #endif
    323.24 00000F F0               MOVX    @DPTR,A
    323.25 000010 A3               INC     DPTR
    323.26 000011                  
    323.27 000011 C582             XCH     A,DPL
    323.28 000013 CC               XCH     A,R4
    323.29 000014 C582             XCH     A,DPL
    323.30 000016 C583             XCH     A,DPH
    323.31 000018 CD               XCH     A,R5
    323.32 000019 C583             XCH     A,DPH
    323.33 00001B          #ifdef __EXTENDED_DPTR__
    323.34 00001B          #endif
    323.35 00001B                  
    323.36 00001B DAE6             DJNZ    R2,move_byte
    323.37 00001D                  IF      '16'='16'
    323.38 00001D DBE4             DJNZ    R3,move_byte
    323.39 00001F                  ENDIF
    323.40 00001F          
    323.41 00001F D0E0             POP     A
    323    000021                  cfi_STACK_DEALL 1
    323.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    323.2  000021                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    323.3  000021          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    323.4  000021                                      #error "Negative size on
                            cfi deallocate"
    323.5  000021          #endif
    323.6  000021                                  ELSEIF cfi_OFFSET
    323.7  000021                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    323.8  000021                                  ELSE
    323.9  000021                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    323.10 000021                                  ENDIF
    323.11 000021                                  ENDM
    323.12 000021 CA               XCH     A,R2
    323.13 000022                  cfi R2 samevalue
    323.14 000022 22               RET
    323.15 000023          
    323    000023                  cfi_DATA_BLOCK_end ?MOVE_LONG16_XDATA_XDATA
    323.1  000023                                  IF cfi_OFFSET
    323.2  000023                                    #error "Non-zero offset on
                            cfi data block end"
    323.3  000023                                  ELSE
    323.4  000023                                    cfi endblock ?MOVE_LONG16_
                           XDATA_XDATA
    323.5  000023                                  ENDIF
    323.6  000023                                  ENDM
    323.7  000023                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG16_XDATA_XDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       2 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:3DDB          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 35          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    323.8  000000                  ENDM
    324    000000                  copy_large_large  CODE,16
    324.1  000000                  MODULE  ?MOVE_LONG16_XDATA_CODE
    324.2  000000                  RSEG    RCODE:CODE:NOROOT
    324.3  000000                  PUBLIC  ?MOVE_LONG16_XDATA_CODE
    324    000000                  EXTERNS_FOR_ALL_DPTR_SYMBOLS()
    324.1  000000          #ifdef __EXTENDED_DPTR__
    324.2  000000          #endif ; __EXTENDED_DPTR__
    324.3  000000          #if (__NUMBER_OF_DPTRS__ > 1)
    324.4  000000          #ifdef __DPTR_SEPARATE__
    324.5  000000          #ifdef __EXTENDED_DPTR__
    324.6  000000          #endif ; __EXTENDED_DPTR__
    324.7  000000          #if (__NUMBER_OF_DPTRS__ > 2)
    324.8  000000          #ifdef __EXTENDED_DPTR__
    324.9  000000          #endif ; __EXTENDED_DPTR__
    324.10 000000          #endif ; __NUMBER_OF_DPTRS__ > 2
    324.11 000000          #if (__NUMBER_OF_DPTRS__ > 3)
    324.12 000000          #ifdef __EXTENDED_DPTR__
    324.13 000000          #endif ; __EXTENDED_DPTR__
    324.14 000000          #endif ; __NUMBER_OF_DPTRS__ > 3
    324.15 000000          #if (__NUMBER_OF_DPTRS__ > 4)
    324.16 000000          #ifdef __EXTENDED_DPTR__
    324.17 000000          #endif ; __EXTENDED_DPTR__
    324.18 000000          #endif ; __NUMBER_OF_DPTRS__ > 4
    324.19 000000          #if (__NUMBER_OF_DPTRS__ > 5)
    324.20 000000          #ifdef __EXTENDED_DPTR__
    324.21 000000          #endif ; __EXTENDED_DPTR__
    324.22 000000          #endif ; __NUMBER_OF_DPTRS__ > 5
    324.23 000000          #if (__NUMBER_OF_DPTRS__ > 6)
    324.24 000000          #ifdef __EXTENDED_DPTR__
    324.25 000000          #endif ; __EXTENDED_DPTR__
    324.26 000000          #endif ; __NUMBER_OF_DPTRS__ > 6
    324.27 000000          #if (__NUMBER_OF_DPTRS__ > 7)
    324.28 000000          #ifdef __EXTENDED_DPTR__
    324.29 000000          #endif ; __EXTENDED_DPTR__
    324.30 000000          #endif ; __NUMBER_OF_DPTRS__ > 7
    324.31 000000          #endif ; __DPTR_SEPARATE__
    324.32 000000          #endif ; __NUMBER_OF_DPTRS__ > 1
    324.33 000000                  ENDM
    324.34 000000          
    324    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG16_XDATA_CODE
    324.1  000000                                  cfi block ?MOVE_LONG16_XDATA
                                                             _CODE using
                                                              cfi_common
    324.2  000000                                  cfi nofunction
    324.3  000000          cfi_OFFSET              SET      0
    324.4  000000                                  ENDM
    324.5  000000                  cfi A undefined
    324.6  000000                  IF      '16'='16'
    324.7  000000                  cfi R3 undefined
    324.8  000000                  ENDIF
    324.9  000000                  cfi R4 undefined
    324.10 000000                  cfi R5 undefined
    324.11 000000          #ifdef __EXTENDED_DPTR__
    324.12 000000          #endif
    324.13 000000                  cfi DPTR0 undefined
    324.14 000000          
    324.15 000000          ?MOVE_LONG16_XDATA_CODE:
    324.16 000000 CA               XCH     A,R2
    324.17 000001 C0E0             PUSH    A
    324    000003                  cfi_PUSH_REG R2
    324    000003                                  cfi_STACK_ALLOC 1
    324.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    324.2  000003                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    324.3  000003                                  ENDM
    324.4  000003                                  cfi R2 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    324.5  000003                                  ENDM
    324.6  000003          move_byte:
    324.7  000003                  ; Read up the source into A register.
    324.8  000003                  IF      'CODE'='XDATA'
    324.9  000003                  MOVX    A,@DPTR
    324.10 000003                  ELSE
    324.11 000003 E4               CLR     A
    324.12 000004 93               MOVC    A,@A+DPTR
    324.13 000005                  ENDIF
    324.14 000005 A3               INC     DPTR
    324.15 000006          
    324.16 000006 C582             XCH     A,DPL
    324.17 000008 CC               XCH     A,R4
    324.18 000009 C582             XCH     A,DPL
    324.19 00000B C583             XCH     A,DPH
    324.20 00000D CD               XCH     A,R5
    324.21 00000E C583             XCH     A,DPH
    324.22 000010          #ifdef __EXTENDED_DPTR__
    324.23 000010          #endif
    324.24 000010 F0               MOVX    @DPTR,A
    324.25 000011 A3               INC     DPTR
    324.26 000012                  
    324.27 000012 C582             XCH     A,DPL
    324.28 000014 CC               XCH     A,R4
    324.29 000015 C582             XCH     A,DPL
    324.30 000017 C583             XCH     A,DPH
    324.31 000019 CD               XCH     A,R5
    324.32 00001A C583             XCH     A,DPH
    324.33 00001C          #ifdef __EXTENDED_DPTR__
    324.34 00001C          #endif
    324.35 00001C                  
    324.36 00001C DAE5             DJNZ    R2,move_byte
    324.37 00001E                  IF      '16'='16'
    324.38 00001E DBE3             DJNZ    R3,move_byte
    324.39 000020                  ENDIF
    324.40 000020          
    324.41 000020 D0E0             POP     A
    324    000022                  cfi_STACK_DEALL 1
    324.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    324.2  000022                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    324.3  000022          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    324.4  000022                                      #error "Negative size on
                            cfi deallocate"
    324.5  000022          #endif
    324.6  000022                                  ELSEIF cfi_OFFSET
    324.7  000022                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    324.8  000022                                  ELSE
    324.9  000022                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    324.10 000022                                  ENDIF
    324.11 000022                                  ENDM
    324.12 000022 CA               XCH     A,R2
    324.13 000023                  cfi R2 samevalue
    324.14 000023 22               RET
    324.15 000024          
    324    000024                  cfi_DATA_BLOCK_end ?MOVE_LONG16_XDATA_CODE
    324.1  000024                                  IF cfi_OFFSET
    324.2  000024                                    #error "Non-zero offset on
                            cfi data block end"
    324.3  000024                                  ELSE
    324.4  000024                                    cfi endblock ?MOVE_LONG16_
                           XDATA_CODE
    324.5  000024                                  ENDIF
    324.6  000024                                  ENDM
    324.7  000024                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG16_XDATA_CODEREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
_args               ABS    CONST LOCAL UNTYP.     ASEG       2 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
move_byte           REL    CONST UNTYP.           RCODE      3 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:6CBB          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 36          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    324.8  000000                  ENDM
    325    000000          
    326    000000          #if (__NUMBER_OF_DPTRS__ > 1)
    331    000000          #endif
    332    000000          
    333    000000          #define GP1L    R1
    334    000000          #define GP1M    R2
    335    000000          #define GP1H    R3
    336    000000          
    337    000000          #define GP2L    R4
    338    000000          #define GP2M    R5
    339    000000          #define GP2H    R6
    340    000000          
    341    000000          #define SIZE_H  R7
    342    000000          
    343    000000          
    344    000000          ;---------------------------------------------------
                           --------------------------
    345    000000          ;
    346    000000          ;       Function: ?MOVE_LONG_IDATA_GPTR
    347    000000          ;
    348    000000          ;       Description: Move an object from GENERIC to
                            IDATA
    349    000000          ;
    350    000000          ;       Register input:
    351    000000          ;               R0   Pointer to dest (IDATA).
    352    000000          ;               GP1  R3:R2:R1 pointer to src
    353    000000          ;               R7   Nr of bytes to move
    354    000000          ;
    355    000000          ;       Register output:
    356    000000          ;               R0   pointer to dest
    357    000000          ;
    358    000000          ;       Register changed:
    359    000000          ;               Carry = Undefined
    360    000000          ;               A
    361    000000          ;
    362    000000          ;       Multiple DPTR
    363    000000          ;               DPTR/DPS: Unchanged
    364    000000          ;
    365    000000          ;       Stack usage: 3
    366    000000          ;
    367    000000          ;---------------------------------------------------
                           --------------------------
    368    000000                  MODULE  ?MOVE_LONG_IDATA_GPTR
    369    000000                  RSEG    RCODE:CODE:NOROOT
    370    000000                  PUBLIC  ?MOVE_LONG_IDATA_GPTR
    371    000000                  EXTERN  ?MOVE_LONG8_IDATA_IDATA
    372    000000                  EXTERN  ?MOVE_LONG8_IDATA_XDATA
    373    000000                  EXTERN  ?MOVE_LONG8_IDATA_CODE
    374    000000          #if (__NUMBER_OF_DPTRS__ > 1)
    376    000000          #endif
    377    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_IDATA_GPTR
    377.1  000000                                  cfi block ?MOVE_LONG_IDATA_G
 PTR using cfi_common
    377.2  000000                                  cfi nofunction
    377.3  000000          cfi_OFFSET              SET      0
    377.4  000000                                  ENDM
    378    000000                  cfi A  undefined
    379    000000                  cfi R0 undefined
    380    000000          
    381    000000          
    382    000000          ?MOVE_LONG_IDATA_GPTR:
    383    000000 BB0017           CJNE    GP1H,#0x00,NOT_XDATA
    384    000003          
    385    000003                  ; IDATA <- XDATA
    386    000003                  
    387    000003                  ; save regs
    388    000003          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    392    000003          #endif
    393    000003 C082             PUSH    DPL
    394    000005                  cfi_PUSH_REG DPL0
    394    000005                                  cfi_STACK_ALLOC 1
    394.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    394.2  000005                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    394.3  000005                                  ENDM
    394.4  000005                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    394.5  000005                                  ENDM
    395    000005 C083             PUSH    DPH
    396    000007                  cfi_PUSH_REG DPH0
    396    000007                                  cfi_STACK_ALLOC 1
    396.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    396.2  000007                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    396.3  000007                                  ENDM
    396.4  000007                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    396.5  000007                                  ENDM
    397    000007          #ifdef __EXTENDED_DPTR__
    402    000007          #endif
    403    000007 E8               MOV     A,R0
    404    000008 C0E0             PUSH    A
    405    00000A                  cfi_PUSH_REG R0
    405    00000A                                  cfi_STACK_ALLOC 1
    405.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    405.2  00000A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    405.3  00000A                                  ENDM
    405.4  00000A                                  cfi R0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    405.5  00000A                                  ENDM
    406    00000A                  ; setup src
    407    00000A 8982             MOV     DPL,GP1L
    408    00000C 8A83             MOV     DPH,GP1M
    409    00000E                  ; dest already in R0
    410    00000E                  ; setup size
    411    00000E EF               MOV     A,R7
    412    00000F 12....           CALL    ?MOVE_LONG8_IDATA_XDATA         ; R0
  = dest, DPTR = src
    413    000012          
    414    000012 D0E0             POP     A
    415    000014                  cfi_STACK_DEALL 1
    415.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    415.2  000014                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    415.3  000014          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    415.4  000014                                      #error "Negative size on
                            cfi deallocate"
    415.5  000014          #endif
    415.6  000014                                  ELSEIF cfi_OFFSET
    415.7  000014                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    415.8  000014                                  ELSE
    415.9  000014                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    415.10 000014                                  ENDIF
    415.11 000014                                  ENDM
    416    000014 F8               MOV     R0,A
    417    000015                  cfi R0 samevalue
    418    000015          #ifdef __EXTENDED_DPTR__
    422    000015          #endif
    423    000015 D083             POP     DPH
    424    000017                  cfi_STACK_DEALL 1
    424.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    424.2  000017                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    424.3  000017          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    424.4  000017                                      #error "Negative size on
                            cfi deallocate"
    424.5  000017          #endif
    424.6  000017                                  ELSEIF cfi_OFFSET
    424.7  000017                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    424.8  000017                                  ELSE
    424.9  000017                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    424.10 000017                                  ENDIF
    424.11 000017                                  ENDM
    425    000017                  cfi DPH0 samevalue
    426    000017 D082             POP     DPL
    427    000019                  cfi_STACK_DEALL 1
    427.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    427.2  000019                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    427.3  000019          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    427.4  000019                                      #error "Negative size on
                            cfi deallocate"
    427.5  000019          #endif
    427.6  000019                                  ELSEIF cfi_OFFSET
    427.7  000019                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    427.8  000019                                  ELSE
    427.9  000019                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    427.10 000019                                  ENDIF
    427.11 000019                                  ENDM
    428    000019                  cfi DPL0 samevalue
    429    000019          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    433    000019          #endif
    434    000019 22               RET
    435    00001A          
    436    00001A          NOT_XDATA:
    437    00001A BB0114           CJNE    GP1H,#0x01,NOT_IDATA
    438    00001D          
    439    00001D                  ; IDATA <- IDATA
    440    00001D          
    441    00001D                  ; save regs
    442    00001D E8               MOV     A,R0
    443    00001E C0E0             PUSH    A
    444    000020                  cfi_PUSH_REG R0
    444    000020                                  cfi_STACK_ALLOC 1
    444.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    444.2  000020                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    444.3  000020                                  ENDM
    444.4  000020                                  cfi R0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    444.5  000020                                  ENDM
    445    000020 E9               MOV     A,R1
    446    000021 C0E0             PUSH    A
    447    000023                  cfi_PUSH_REG R1
    447    000023                                  cfi_STACK_ALLOC 1
    447.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    447.2  000023                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    447.3  000023                                  ENDM
    447.4  000023                                  cfi R1 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    447.5  000023                                  ENDM
    448    000023                  ; setup src and dest
    449    000023 E9               MOV     A,GP1L                          ;
                                              XCH GP1L(R1) and R0
    450    000024 C8               XCH     A,R0
    451    000025 F9               MOV     GP1L,A
    452    000026                  ; setup size
    453    000026 EF               MOV     A,R7
    454    000027 12....           CALL    ?MOVE_LONG8_IDATA_IDATA         ; R1
  = dest, R0 = src
    455    00002A                  ; restore saved regs
    456    00002A D0E0             POP     A
    457    00002C                  cfi_STACK_DEALL 1
    457.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    457.2  00002C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    457.3  00002C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    457.4  00002C                                      #error "Negative size on
                            cfi deallocate"
    457.5  00002C          #endif
    457.6  00002C                                  ELSEIF cfi_OFFSET
    457.7  00002C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    457.8  00002C                                  ELSE
    457.9  00002C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    457.10 00002C                                  ENDIF
    457.11 00002C                                  ENDM
    458    00002C F9               MOV     R1,A
    459    00002D                  cfi R1 samevalue
    460    00002D D0E0             POP     A
    461    00002F                  cfi_STACK_DEALL 1
    461.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    461.2  00002F                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    461.3  00002F          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    461.4  00002F                                      #error "Negative size on
                            cfi deallocate"
    461.5  00002F          #endif
    461.6  00002F                                  ELSEIF cfi_OFFSET
    461.7  00002F                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    461.8  00002F                                  ELSE
    461.9  00002F                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    461.10 00002F                                  ENDIF
    461.11 00002F                                  ENDM
    462    00002F F8               MOV     R0,A
    463    000030                  cfi R0 samevalue
    464    000030 22               RET
    465    000031          
    466    000031          NOT_IDATA:
    467    000031                  ; IDATA <- CODE
    468    000031          
    469    000031                  ; save regs
    470    000031          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    474    000031          #endif
    475    000031 C082             PUSH    DPL
    476    000033                  cfi_PUSH_REG DPL0
    476    000033                                  cfi_STACK_ALLOC 1
    476.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    476.2  000033                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    476.3  000033                                  ENDM
    476.4  000033                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    476.5  000033                                  ENDM
    477    000033 C083             PUSH    DPH
    478    000035                  cfi_PUSH_REG DPH0
    478    000035                                  cfi_STACK_ALLOC 1
    478.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    478.2  000035                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    478.3  000035                                  ENDM
    478.4  000035                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    478.5  000035                                  ENDM
    479    000035          #ifdef __EXTENDED_DPTR__
    484    000035          #endif
    485    000035 E8               MOV     A,R0
    486    000036 C0E0             PUSH A
    487    000038                  cfi_PUSH_REG R0
    487    000038                                  cfi_STACK_ALLOC 1
    487.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    487.2  000038                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    487.3  000038                                  ENDM
    487.4  000038                                  cfi R0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    487.5  000038                                  ENDM
    488    000038          
    489    000038                  ; setup src
    490    000038 8982             MOV     DPL,GP1L
    491    00003A 8A83             MOV     DPH,GP1M
    492    00003C                  ; dest already in R0
    493    00003C                  ; setup size
    494    00003C EF               MOV     A,R7
    495    00003D 12....           CALL    ?MOVE_LONG8_IDATA_CODE          ; R0
  = dest, DPTR = src
    496    000040          
    497    000040 D0E0             POP     A
    498    000042                  cfi_STACK_DEALL 1
    498.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    498.2  000042                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    498.3  000042          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    498.4  000042                                      #error "Negative size on
                            cfi deallocate"
    498.5  000042          #endif
    498.6  000042                                  ELSEIF cfi_OFFSET
    498.7  000042                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    498.8  000042                                  ELSE
    498.9  000042                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    498.10 000042                                  ENDIF
    498.11 000042                                  ENDM
    499    000042 F8               MOV     R0,A
    500    000043                  cfi R0 samevalue
    501    000043          #ifdef __EXTENDED_DPTR__
    505    000043          #endif
    506    000043 D083             POP     DPH
    507    000045                  cfi_STACK_DEALL 1
    507.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    507.2  000045                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    507.3  000045          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    507.4  000045                                      #error "Negative size on
                            cfi deallocate"
    507.5  000045          #endif
    507.6  000045                                  ELSEIF cfi_OFFSET
    507.7  000045                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    507.8  000045                                  ELSE
    507.9  000045                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    507.10 000045                                  ENDIF
    507.11 000045                                  ENDM
    508    000045                  cfi DPH0 samevalue
    509    000045 D082             POP     DPL
    510    000047                  cfi_STACK_DEALL 1
    510.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    510.2  000047                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    510.3  000047          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    510.4  000047                                      #error "Negative size on
                            cfi deallocate"
    510.5  000047          #endif
    510.6  000047                                  ELSEIF cfi_OFFSET
    510.7  000047                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    510.8  000047                                  ELSE
    510.9  000047                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    510.10 000047                                  ENDIF
    510.11 000047                                  ENDM
    511    000047                  cfi DPL0 samevalue
    512    000047          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    516    000047          #endif
    517    000047 22               RET
    518    000048          
    519    000048                  cfi_DATA_BLOCK_end ?MOVE_LONG_IDATA_GPTR
    519.1  000048                                  IF cfi_OFFSET
    519.2  000048                                    #error "Non-zero offset on
                            cfi data block end"
    519.3  000048                                  ELSE
    519.4  000048                                    cfi endblock ?MOVE_LONG_ID
                           ATA_GPTR
    519.5  000048                                  ENDIF
    519.6  000048                                  ENDM
    520    000048          
    521    000048                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437
GP1L                 #define, value: R1, line:       333        407      449      451      490
GP1M                 #define, value: R2, line:       334        408      491
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_CODEABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_IDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_XDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_IDATA_GPTRREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                REL    CONST UNTYP.           RCODE      Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      31 
NOT_XDATA           REL    CONST UNTYP.           RCODE      1A 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:D306          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 72          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    522    000000          
    523    000000          ;---------------------------------------------------
                           --------------------------
    524    000000          ;
    525    000000          ;       Function: ?MOVE_LONG_PDATA_GPTR
    526    000000          ;
    527    000000          ;       Description: Move an object from GENERIC to
                            PDATA
    528    000000          ;
    529    000000          ;       Register input:
    530    000000          ;               R0       = Pointer to dest
                            (PDATA).
    531    000000          ;               R3:R2:R1 = pointer to src
    532    000000          ;               R7       = Number of elements to
                            move
    533    000000          ;
    534    000000          ;       Register output:
    535    000000          ;               R0       = pointer to dest (same as
                            in)
    536    000000          ;               R3:R2:R1 = pointer to src  (same as
                            in)
    537    000000          ;               R7       = Number of elements to
                            move (same as in)
    538    000000          ;
    539    000000          ;       Register changed:
    540    000000          ;               Carry = Undefined
    541    000000          ;               A
    542    000000          ;
    543    000000          ;       Multiple DPTR
    544    000000          ;               DPTR/DPS: Unchanged
    545    000000          ;
    546    000000          ;       Stack usage: 3
    547    000000          ;
    548    000000          ;---------------------------------------------------
                           --------------------------
    549    000000                  MODULE  ?MOVE_LONG_PDATA_GPTR
    550    000000                  RSEG    RCODE:CODE:NOROOT
    551    000000                  PUBLIC  ?MOVE_LONG_PDATA_GPTR
    552    000000                  EXTERN  ?MOVE_LONG8_PDATA_IDATA
    553    000000                  EXTERN  ?MOVE_LONG8_PDATA_XDATA
    554    000000                  EXTERN  ?MOVE_LONG8_PDATA_CODE
    555    000000          #if (__NUMBER_OF_DPTRS__ > 1)
    557    000000          #endif
    558    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_PDATA_GPTR
    558.1  000000                                  cfi block ?MOVE_LONG_PDATA_G
 PTR using cfi_common
    558.2  000000                                  cfi nofunction
    558.3  000000          cfi_OFFSET              SET      0
    558.4  000000                                  ENDM
    559    000000                  cfi A undefined
    560    000000          
    561    000000          ?MOVE_LONG_PDATA_GPTR:
    562    000000 BB0017           CJNE    GP1H,#0x00,NOT_XDATA
    563    000003          
    564    000003                  ; PDATA <- XDATA
    565    000003          
    566    000003                  ; save regs
    567    000003          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    571    000003          #endif
    572    000003 C082             PUSH    DPL
    573    000005                  cfi_PUSH_REG DPL0
    573    000005                                  cfi_STACK_ALLOC 1
    573.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    573.2  000005                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    573.3  000005                                  ENDM
    573.4  000005                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    573.5  000005                                  ENDM
    574    000005 C083             PUSH    DPH
    575    000007                  cfi_PUSH_REG DPH0
    575    000007                                  cfi_STACK_ALLOC 1
    575.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    575.2  000007                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    575.3  000007                                  ENDM
    575.4  000007                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    575.5  000007                                  ENDM
    576    000007          #ifdef __EXTENDED_DPTR__
    581    000007          #endif
    582    000007 E8               MOV     A,R0
    583    000008 C0E0             PUSH    A
    584    00000A                  cfi_PUSH_REG R0
    584    00000A                                  cfi_STACK_ALLOC 1
    584.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    584.2  00000A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    584.3  00000A                                  ENDM
    584.4  00000A                                  cfi R0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    584.5  00000A                                  ENDM
    585    00000A                  ; setup src
    586    00000A 8982             MOV     DPL,GP1L
    587    00000C 8A83             MOV     DPH,GP1M
    588    00000E                  ; dest already in R0
    589    00000E                  ; setup size
    590    00000E EF               MOV     A,R7
    591    00000F 12....           CALL    ?MOVE_LONG8_PDATA_XDATA         ; R0
  = dest, DPTR = src
    592    000012          
    593    000012 D0E0             POP     A
    594    000014                  cfi_STACK_DEALL 1
    594.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    594.2  000014                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    594.3  000014          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    594.4  000014                                      #error "Negative size on
                            cfi deallocate"
    594.5  000014          #endif
    594.6  000014                                  ELSEIF cfi_OFFSET
    594.7  000014                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    594.8  000014                                  ELSE
    594.9  000014                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    594.10 000014                                  ENDIF
    594.11 000014                                  ENDM
    595    000014 F8               MOV     R0,A
    596    000015                  cfi R0 samevalue
    597    000015          #ifdef __EXTENDED_DPTR__
    601    000015          #endif
    602    000015 D083             POP     DPH
    603    000017                  cfi_STACK_DEALL 1
    603.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    603.2  000017                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    603.3  000017          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    603.4  000017                                      #error "Negative size on
                            cfi deallocate"
    603.5  000017          #endif
    603.6  000017                                  ELSEIF cfi_OFFSET
    603.7  000017                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    603.8  000017                                  ELSE
    603.9  000017                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    603.10 000017                                  ENDIF
    603.11 000017                                  ENDM
    604    000017                  cfi DPH0 samevalue
    605    000017 D082             POP     DPL
    606    000019                  cfi_STACK_DEALL 1
    606.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    606.2  000019                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    606.3  000019          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    606.4  000019                                      #error "Negative size on
                            cfi deallocate"
    606.5  000019          #endif
    606.6  000019                                  ELSEIF cfi_OFFSET
    606.7  000019                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    606.8  000019                                  ELSE
    606.9  000019                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    606.10 000019                                  ENDIF
    606.11 000019                                  ENDM
    607    000019                  cfi DPL0 samevalue
    608    000019          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    612    000019          #endif
    613    000019 22               RET
    614    00001A          
    615    00001A          NOT_XDATA:
    616    00001A BB0114           CJNE    GP1H,#0x01,NOT_IDATA
    617    00001D          
    618    00001D                  ; PDATA <- IDATA
    619    00001D          
    620    00001D                  ; save regs
    621    00001D E8               MOV     A,R0
    622    00001E C0E0             PUSH    A
    623    000020                  cfi_PUSH_REG R0
    623    000020                                  cfi_STACK_ALLOC 1
    623.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    623.2  000020                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    623.3  000020                                  ENDM
    623.4  000020                                  cfi R0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    623.5  000020                                  ENDM
    624    000020 E9               MOV     A,R1
    625    000021 C0E0             PUSH    A
    626    000023                  cfi_PUSH_REG R1
    626    000023                                  cfi_STACK_ALLOC 1
    626.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    626.2  000023                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    626.3  000023                                  ENDM
    626.4  000023                                  cfi R1 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    626.5  000023                                  ENDM
    627    000023                  ; setup src and dest
    628    000023 E9               MOV     A,GP1L                          ;
                                              XCH GP1L(R1) and R0
    629    000024 C8               XCH     A,R0
    630    000025 F9               MOV     GP1L,A
    631    000026                  ; setup size
    632    000026 EF               MOV     A,R7
    633    000027 12....           CALL    ?MOVE_LONG8_PDATA_IDATA         ; R1
  = dest, R0 = src
    634    00002A                  ; restore saved regs
    635    00002A D0E0             POP     A
    636    00002C                  cfi_STACK_DEALL 1
    636.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    636.2  00002C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    636.3  00002C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    636.4  00002C                                      #error "Negative size on
                            cfi deallocate"
    636.5  00002C          #endif
    636.6  00002C                                  ELSEIF cfi_OFFSET
    636.7  00002C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    636.8  00002C                                  ELSE
    636.9  00002C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    636.10 00002C                                  ENDIF
    636.11 00002C                                  ENDM
    637    00002C F9               MOV     R1,A
    638    00002D                  cfi R1 samevalue
    639    00002D D0E0             POP     A
    640    00002F                  cfi_STACK_DEALL 1
    640.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    640.2  00002F                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    640.3  00002F          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    640.4  00002F                                      #error "Negative size on
                            cfi deallocate"
    640.5  00002F          #endif
    640.6  00002F                                  ELSEIF cfi_OFFSET
    640.7  00002F                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    640.8  00002F                                  ELSE
    640.9  00002F                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    640.10 00002F                                  ENDIF
    640.11 00002F                                  ENDM
    641    00002F F8               MOV     R0,A
    642    000030                  cfi R0 samevalue
    643    000030 22               RET
    644    000031          
    645    000031          
    646    000031          NOT_IDATA:
    647    000031                  ; PDATA <- CODE
    648    000031          
    649    000031                  ; save regs
    650    000031          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    654    000031          #endif
    655    000031 C082             PUSH    DPL
    656    000033                  cfi_PUSH_REG DPL0
    656    000033                                  cfi_STACK_ALLOC 1
    656.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    656.2  000033                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    656.3  000033                                  ENDM
    656.4  000033                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    656.5  000033                                  ENDM
    657    000033 C083             PUSH    DPH
    658    000035                  cfi_PUSH_REG DPH0
    658    000035                                  cfi_STACK_ALLOC 1
    658.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    658.2  000035                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    658.3  000035                                  ENDM
    658.4  000035                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    658.5  000035                                  ENDM
    659    000035          #ifdef __EXTENDED_DPTR__
    664    000035          #endif
    665    000035 E8               MOV     A,R0
    666    000036 C0E0             PUSH    A
    667    000038                  cfi_PUSH_REG R0
    667    000038                                  cfi_STACK_ALLOC 1
    667.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    667.2  000038                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    667.3  000038                                  ENDM
    667.4  000038                                  cfi R0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    667.5  000038                                  ENDM
    668    000038                  ; setup src
    669    000038 8982             MOV     DPL,GP1L
    670    00003A 8A83             MOV     DPH,GP1M
    671    00003C                  ; dest already in R0
    672    00003C                  ; setup size
    673    00003C EF               MOV     A,R7
    674    00003D 12....           CALL    ?MOVE_LONG8_PDATA_CODE          ; R0
  = dest, DPTR = src
    675    000040 D0E0             POP     A
    676    000042                  cfi_STACK_DEALL 1
    676.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    676.2  000042                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    676.3  000042          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    676.4  000042                                      #error "Negative size on
                            cfi deallocate"
    676.5  000042          #endif
    676.6  000042                                  ELSEIF cfi_OFFSET
    676.7  000042                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    676.8  000042                                  ELSE
    676.9  000042                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    676.10 000042                                  ENDIF
    676.11 000042                                  ENDM
    677    000042 F8               MOV     R0,A
    678    000043                  cfi R0 samevalue
    679    000043          #ifdef __EXTENDED_DPTR__
    683    000043          #endif
    684    000043 D083             POP     DPH
    685    000045                  cfi_STACK_DEALL 1
    685.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    685.2  000045                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    685.3  000045          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    685.4  000045                                      #error "Negative size on
                            cfi deallocate"
    685.5  000045          #endif
    685.6  000045                                  ELSEIF cfi_OFFSET
    685.7  000045                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    685.8  000045                                  ELSE
    685.9  000045                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    685.10 000045                                  ENDIF
    685.11 000045                                  ENDM
    686    000045                  cfi DPH0 samevalue
    687    000045 D082             POP     DPL
    688    000047                  cfi_STACK_DEALL 1
    688.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    688.2  000047                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    688.3  000047          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    688.4  000047                                      #error "Negative size on
                            cfi deallocate"
    688.5  000047          #endif
    688.6  000047                                  ELSEIF cfi_OFFSET
    688.7  000047                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    688.8  000047                                  ELSE
    688.9  000047                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    688.10 000047                                  ENDIF
    688.11 000047                                  ENDM
    689    000047                  cfi DPL0 samevalue
    690    000047          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    694    000047          #endif
    695    000047 22               RET
    696    000048          
    697    000048                  cfi_DATA_BLOCK_end ?MOVE_LONG_PDATA_GPTR
    697.1  000048                                  IF cfi_OFFSET
    697.2  000048                                    #error "Non-zero offset on
                            cfi data block end"
    697.3  000048                                  ELSE
    697.4  000048                                    cfi endblock ?MOVE_LONG_PD
                           ATA_GPTR
    697.5  000048                                  ENDIF
    697.6  000048                                  ENDM
    698    000048                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
GP1M                 #define, value: R2, line:       334        408      491      587      670
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_PDATA_CODEABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_PDATA_IDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_PDATA_XDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_PDATA_GPTRREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                REL    CONST UNTYP.           RCODE      Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      31 
NOT_XDATA           REL    CONST UNTYP.           RCODE      1A 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:6911          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 72          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    699    000000          
    700    000000          ;---------------------------------------------------
                           --------------------------
    701    000000          ;
    702    000000          ;       Function: ?MOVE_LONG_XDATA_GPTR
    703    000000          ;
    704    000000          ;       Description: Move an object from GENERIC to
                            XDATA
    705    000000          ;
    706    000000          ;       Register input:
    707    000000          ;               (R6):R5:R4 = Pointer to dest
                            (XDATA).
    708    000000          ;               R3:R2:R1   = pointer to src
    709    000000          ;               R7         = Number of elements
                            (low)
    710    000000          ;               R0         = Number of elements
                            (high + 1)
    711    000000          ;
    712    000000          ;       Register output:
    713    000000          ;               (R6):R5:R4 = pointer to dest (same
                            as in)
    714    000000          ;               R3:R2:R1   = pointer to src  (same
                            as in)
    715    000000          ;
    716    000000          ;       Register changed:
    717    000000          ;               A     = Undefined
    718    000000          ;               Carry = Undefined
    719    000000          ;
    720    000000          ;       Multiple DPTR:
    721    000000          ;               DPTR/DPS: Unchanged
    722    000000          ;
    723    000000          ;       Stack usage: 7 + ?MOVE_LONG16_XDATA_XDATA
    724    000000          ;
    725    000000          ;---------------------------------------------------
                           --------------------------
    726    000000                  MODULE  ?MOVE_LONG_XDATA_GPTR
    727    000000                  RSEG    RCODE:CODE:NOROOT
    728    000000                  PUBLIC  ?MOVE_LONG_XDATA_GPTR
    729    000000                  EXTERN  ?MOVE_LONG8_XDATA_IDATA
    730    000000                  EXTERN  ?MOVE_LONG16_XDATA_XDATA
    731    000000                  EXTERN  ?MOVE_LONG16_XDATA_CODE
    732    000000          #if (__NUMBER_OF_DPTRS__ > 1)
    734    000000          #endif
    735    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_XDATA_GPTR
    735.1  000000                                  cfi block ?MOVE_LONG_XDATA_G
 PTR using cfi_common
    735.2  000000                                  cfi nofunction
    735.3  000000          cfi_OFFSET              SET      0
    735.4  000000                                  ENDM
    736    000000                  cfi A undefined
    737    000000          
    738    000000          ?MOVE_LONG_XDATA_GPTR:
    739    000000 BB0025           CJNE    GP1H,#0x00,NOT_XDATA
    740    000003          
    741    000003                  ; XDATA <- XDATA
    742    000003          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    746    000003          #endif
    747    000003 C082             PUSH    DPL
    748    000005                  cfi_PUSH_REG DPL0
    748    000005                                  cfi_STACK_ALLOC 1
    748.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    748.2  000005                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    748.3  000005                                  ENDM
    748.4  000005                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    748.5  000005                                  ENDM
    749    000005 C083             PUSH    DPH
    750    000007                  cfi_PUSH_REG DPH0
    750    000007                                  cfi_STACK_ALLOC 1
    750.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    750.2  000007                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    750.3  000007                                  ENDM
    750.4  000007                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    750.5  000007                                  ENDM
    751    000007          #ifdef __EXTENDED_DPTR__
    759    000007          #endif
    760    000007 EB               MOV     A,R3
    761    000008 C0E0             PUSH    A
    762    00000A                  cfi_PUSH_REG R3
    762    00000A                                  cfi_STACK_ALLOC 1
    762.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    762.2  00000A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    762.3  00000A                                  ENDM
    762.4  00000A                                  cfi R3 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    762.5  00000A                                  ENDM
    763    00000A EC               MOV     A,R4
    764    00000B C0E0             PUSH    A
    765    00000D                  cfi_PUSH_REG R4
    765    00000D                                  cfi_STACK_ALLOC 1
    765.1  000004          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    765.2  00000D                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    765.3  00000D                                  ENDM
    765.4  00000D                                  cfi R4 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    765.5  00000D                                  ENDM
    766    00000D ED               MOV     A,R5
    767    00000E C0E0             PUSH    A
    768    000010                  cfi_PUSH_REG R5
    768    000010                                  cfi_STACK_ALLOC 1
    768.1  000005          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    768.2  000010                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    768.3  000010                                  ENDM
    768.4  000010                                  cfi R5 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    768.5  000010                                  ENDM
    769    000010                  ; setup src
    770    000010 8982             MOV     DPL,GP1L
    771    000012 8A83             MOV     DPH,GP1M
    772    000014                  ; dest already in R5:R4
    773    000014                  ; setup size
    774    000014 E8               MOV     A,R0
    775    000015 FB               MOV     R3,A
    776    000016 EF               MOV     A,R7
    777    000017 12....           CALL    ?MOVE_LONG16_XDATA_XDATA        ;
  (R6:)R5:R4 = dest, DPTR = src
    778    00001A D0E0             POP     A
    779    00001C                  cfi_STACK_DEALL 1
    779.1  000004          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    779.2  00001C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    779.3  00001C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    779.4  00001C                                      #error "Negative size on
                            cfi deallocate"
    779.5  00001C          #endif
    779.6  00001C                                  ELSEIF cfi_OFFSET
    779.7  00001C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    779.8  00001C                                  ELSE
    779.9  00001C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    779.10 00001C                                  ENDIF
    779.11 00001C                                  ENDM
    780    00001C FD               MOV     R5,A
    781    00001D                  cfi R5 samevalue
    782    00001D D0E0             POP     A
    783    00001F                  cfi_STACK_DEALL 1
    783.1  000003          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    783.2  00001F                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    783.3  00001F          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    783.4  00001F                                      #error "Negative size on
                            cfi deallocate"
    783.5  00001F          #endif
    783.6  00001F                                  ELSEIF cfi_OFFSET
    783.7  00001F                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    783.8  00001F                                  ELSE
    783.9  00001F                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    783.10 00001F                                  ENDIF
    783.11 00001F                                  ENDM
    784    00001F FC               MOV     R4,A
    785    000020                  cfi R4 samevalue
    786    000020 D0E0             POP     A
    787    000022                  cfi_STACK_DEALL 1
    787.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    787.2  000022                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    787.3  000022          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    787.4  000022                                      #error "Negative size on
                            cfi deallocate"
    787.5  000022          #endif
    787.6  000022                                  ELSEIF cfi_OFFSET
    787.7  000022                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    787.8  000022                                  ELSE
    787.9  000022                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    787.10 000022                                  ENDIF
    787.11 000022                                  ENDM
    788    000022 FB               MOV     R3,A
    789    000023                  cfi R3 samevalue
    790    000023          #ifdef __EXTENDED_DPTR__
    798    000023          #endif
    799    000023 D083             POP     DPH
    800    000025                  cfi_STACK_DEALL 1
    800.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    800.2  000025                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    800.3  000025          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    800.4  000025                                      #error "Negative size on
                            cfi deallocate"
    800.5  000025          #endif
    800.6  000025                                  ELSEIF cfi_OFFSET
    800.7  000025                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    800.8  000025                                  ELSE
    800.9  000025                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    800.10 000025                                  ENDIF
    800.11 000025                                  ENDM
    801    000025                  cfi DPH0 samevalue
    802    000025 D082             POP     DPL
    803    000027                  cfi_STACK_DEALL 1
    803.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    803.2  000027                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    803.3  000027          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    803.4  000027                                      #error "Negative size on
                            cfi deallocate"
    803.5  000027          #endif
    803.6  000027                                  ELSEIF cfi_OFFSET
    803.7  000027                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    803.8  000027                                  ELSE
    803.9  000027                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    803.10 000027                                  ENDIF
    803.11 000027                                  ENDM
    804    000027                  cfi DPL0 samevalue
    805    000027          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    809    000027          #endif
    810    000027 22               RET
    811    000028          
    812    000028          NOT_XDATA:
    813    000028 BB0125           CJNE    GP1H,#0x01,NOT_IDATA
    814    00002B          
    815    00002B                  ; XDATA <- IDATA
    816    00002B          
    817    00002B                  ; save regs
    818    00002B          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    822    00002B          #endif
    823    00002B C082             PUSH    DPL
    824    00002D                  cfi_PUSH_REG DPL0
    824    00002D                                  cfi_STACK_ALLOC 1
    824.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    824.2  00002D                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    824.3  00002D                                  ENDM
    824.4  00002D                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    824.5  00002D                                  ENDM
    825    00002D C083             PUSH    DPH
    826    00002F                  cfi_PUSH_REG DPH0
    826    00002F                                  cfi_STACK_ALLOC 1
    826.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    826.2  00002F                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    826.3  00002F                                  ENDM
    826.4  00002F                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    826.5  00002F                                  ENDM
    827    00002F          #ifdef __EXTENDED_DPTR__
    832    00002F          #endif
    833    00002F EB               MOV     A,R3
    834    000030 C0E0             PUSH    A
    835    000032                  cfi_PUSH_REG R3
    835    000032                                  cfi_STACK_ALLOC 1
    835.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    835.2  000032                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    835.3  000032                                  ENDM
    835.4  000032                                  cfi R3 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    835.5  000032                                  ENDM
    836    000032 EC               MOV     A,R4
    837    000033 C0E0             PUSH    A
    838    000035                  cfi_PUSH_REG R4
    838    000035                                  cfi_STACK_ALLOC 1
    838.1  000004          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    838.2  000035                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    838.3  000035                                  ENDM
    838.4  000035                                  cfi R4 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    838.5  000035                                  ENDM
    839    000035 ED               MOV     A,R5
    840    000036 C0E0             PUSH    A
    841    000038                  cfi_PUSH_REG R5
    841    000038                                  cfi_STACK_ALLOC 1
    841.1  000005          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    841.2  000038                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    841.3  000038                                  ENDM
    841.4  000038                                  cfi R5 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    841.5  000038                                  ENDM
    842    000038                  ; setup src
    843    000038 E9               MOV     A,GP1L
    844    000039 F8               MOV     R0,A
    845    00003A                  ; setup dest
    846    00003A 8C82             MOV     DPL,R4
    847    00003C 8D83             MOV     DPH,R5
    848    00003E                  ; setup size
    849    00003E EF               MOV     A,R7
    850    00003F 12....           CALL    ?MOVE_LONG8_XDATA_IDATA         ;
  DPTR = dest, R0 = src
    851    000042 D0E0             POP     A
    852    000044                  cfi_STACK_DEALL 1
    852.1  000004          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    852.2  000044                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    852.3  000044          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    852.4  000044                                      #error "Negative size on
                            cfi deallocate"
    852.5  000044          #endif
    852.6  000044                                  ELSEIF cfi_OFFSET
    852.7  000044                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    852.8  000044                                  ELSE
    852.9  000044                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    852.10 000044                                  ENDIF
    852.11 000044                                  ENDM
    853    000044 FD               MOV     R5,A
    854    000045                  cfi R5 samevalue
    855    000045 D0E0             POP     A
    856    000047                  cfi_STACK_DEALL 1
    856.1  000003          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    856.2  000047                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    856.3  000047          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    856.4  000047                                      #error "Negative size on
                            cfi deallocate"
    856.5  000047          #endif
    856.6  000047                                  ELSEIF cfi_OFFSET
    856.7  000047                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    856.8  000047                                  ELSE
    856.9  000047                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    856.10 000047                                  ENDIF
    856.11 000047                                  ENDM
    857    000047 FC               MOV     R4,A
    858    000048                  cfi R4 samevalue
    859    000048 D0E0             POP     A
    860    00004A                  cfi_STACK_DEALL 1
    860.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    860.2  00004A                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    860.3  00004A          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    860.4  00004A                                      #error "Negative size on
                            cfi deallocate"
    860.5  00004A          #endif
    860.6  00004A                                  ELSEIF cfi_OFFSET
    860.7  00004A                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    860.8  00004A                                  ELSE
    860.9  00004A                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    860.10 00004A                                  ENDIF
    860.11 00004A                                  ENDM
    861    00004A FB               MOV     R3,A
    862    00004B                  cfi R3 samevalue
    863    00004B          #ifdef __EXTENDED_DPTR__
    867    00004B          #endif
    868    00004B D083             POP     DPH
    869    00004D                  cfi_STACK_DEALL 1
    869.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    869.2  00004D                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    869.3  00004D          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    869.4  00004D                                      #error "Negative size on
                            cfi deallocate"
    869.5  00004D          #endif
    869.6  00004D                                  ELSEIF cfi_OFFSET
    869.7  00004D                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    869.8  00004D                                  ELSE
    869.9  00004D                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    869.10 00004D                                  ENDIF
    869.11 00004D                                  ENDM
    870    00004D                  cfi DPH0 samevalue
    871    00004D D082             POP     DPL
    872    00004F                  cfi_STACK_DEALL 1
    872.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    872.2  00004F                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    872.3  00004F          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    872.4  00004F                                      #error "Negative size on
                            cfi deallocate"
    872.5  00004F          #endif
    872.6  00004F                                  ELSEIF cfi_OFFSET
    872.7  00004F                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    872.8  00004F                                  ELSE
    872.9  00004F                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    872.10 00004F                                  ENDIF
    872.11 00004F                                  ENDM
    873    00004F                  cfi DPL0 samevalue
    874    00004F          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    878    00004F          #endif
    879    00004F 22               RET
    880    000050          
    881    000050          NOT_IDATA:
    882    000050                  ; XDATA <- CODE
    883    000050          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    887    000050          #endif
    888    000050 C082             PUSH    DPL
    889    000052                  cfi_PUSH_REG DPL0
    889    000052                                  cfi_STACK_ALLOC 1
    889.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    889.2  000052                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    889.3  000052                                  ENDM
    889.4  000052                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    889.5  000052                                  ENDM
    890    000052 C083             PUSH    DPH
    891    000054                  cfi_PUSH_REG DPH0
    891    000054                                  cfi_STACK_ALLOC 1
    891.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    891.2  000054                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    891.3  000054                                  ENDM
    891.4  000054                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    891.5  000054                                  ENDM
    892    000054          #ifdef __EXTENDED_DPTR__
    900    000054          #endif
    901    000054 EB               MOV     A,R3
    902    000055 C0E0             PUSH    A
    903    000057                  cfi_PUSH_REG R3
    903    000057                                  cfi_STACK_ALLOC 1
    903.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    903.2  000057                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    903.3  000057                                  ENDM
    903.4  000057                                  cfi R3 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    903.5  000057                                  ENDM
    904    000057 EC               MOV     A,R4
    905    000058 C0E0             PUSH    A
    906    00005A                  cfi_PUSH_REG R4
    906    00005A                                  cfi_STACK_ALLOC 1
    906.1  000004          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    906.2  00005A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    906.3  00005A                                  ENDM
    906.4  00005A                                  cfi R4 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    906.5  00005A                                  ENDM
    907    00005A ED               MOV     A,R5
    908    00005B C0E0             PUSH    A
    909    00005D                  cfi_PUSH_REG R5
    909    00005D                                  cfi_STACK_ALLOC 1
    909.1  000005          cfi_OFFSET              SET     cfi_OFFSET +
                            1
    909.2  00005D                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    909.3  00005D                                  ENDM
    909.4  00005D                                  cfi R5 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
    909.5  00005D                                  ENDM
    910    00005D                  ; dest already in R5:R4
    911    00005D                  ; setup src
    912    00005D 8982             MOV     DPL,GP1L
    913    00005F 8A83             MOV     DPH,GP1M
    914    000061                  ; dest already in R0
    915    000061                  ; setup size
    916    000061 E8               MOV     A,R0
    917    000062 FB               MOV     R3,A
    918    000063 EF               MOV     A,R7
    919    000064 12....           CALL    ?MOVE_LONG16_XDATA_CODE         ;
  (R6:)R5:R4 = dest, DPTR = src
    920    000067 D0E0             POP     A
    921    000069                  cfi_STACK_DEALL 1
    921.1  000004          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    921.2  000069                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    921.3  000069          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    921.4  000069                                      #error "Negative size on
                            cfi deallocate"
    921.5  000069          #endif
    921.6  000069                                  ELSEIF cfi_OFFSET
    921.7  000069                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    921.8  000069                                  ELSE
    921.9  000069                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    921.10 000069                                  ENDIF
    921.11 000069                                  ENDM
    922    000069 FD               MOV     R5,A
    923    00006A                  cfi R5 samevalue
    924    00006A D0E0             POP     A
    925    00006C                  cfi_STACK_DEALL 1
    925.1  000003          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    925.2  00006C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    925.3  00006C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    925.4  00006C                                      #error "Negative size on
                            cfi deallocate"
    925.5  00006C          #endif
    925.6  00006C                                  ELSEIF cfi_OFFSET
    925.7  00006C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    925.8  00006C                                  ELSE
    925.9  00006C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    925.10 00006C                                  ENDIF
    925.11 00006C                                  ENDM
    926    00006C FC               MOV     R4,A
    927    00006D                  cfi R4 samevalue
    928    00006D D0E0             POP     A
    929    00006F                  cfi_STACK_DEALL 1
    929.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    929.2  00006F                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    929.3  00006F          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    929.4  00006F                                      #error "Negative size on
                            cfi deallocate"
    929.5  00006F          #endif
    929.6  00006F                                  ELSEIF cfi_OFFSET
    929.7  00006F                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    929.8  00006F                                  ELSE
    929.9  00006F                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    929.10 00006F                                  ENDIF
    929.11 00006F                                  ENDM
    930    00006F FB               MOV     R3,A
    931    000070                  cfi R3 samevalue
    932    000070          #ifdef __EXTENDED_DPTR__
    940    000070          #endif
    941    000070 D083             POP     DPH
    942    000072                  cfi_STACK_DEALL 1
    942.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    942.2  000072                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    942.3  000072          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    942.4  000072                                      #error "Negative size on
                            cfi deallocate"
    942.5  000072          #endif
    942.6  000072                                  ELSEIF cfi_OFFSET
    942.7  000072                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    942.8  000072                                  ELSE
    942.9  000072                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    942.10 000072                                  ENDIF
    942.11 000072                                  ENDM
    943    000072                  cfi DPH0 samevalue
    944    000072 D082             POP     DPL
    945    000074                  cfi_STACK_DEALL 1
    945.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
    945.2  000074                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
    945.3  000074          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
    945.4  000074                                      #error "Negative size on
                            cfi deallocate"
    945.5  000074          #endif
    945.6  000074                                  ELSEIF cfi_OFFSET
    945.7  000074                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
    945.8  000074                                  ELSE
    945.9  000074                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
    945.10 000074                                  ENDIF
    945.11 000074                                  ENDM
    946    000074                  cfi DPL0 samevalue
    947    000074          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
    951    000074          #endif
    952    000074 22               RET
    953    000075          
    954    000075                  cfi_DATA_BLOCK_end ?MOVE_LONG_XDATA_GPTR
    954.1  000075                                  IF cfi_OFFSET
    954.2  000075                                    #error "Non-zero offset on
                            cfi data block end"
    954.3  000075                                  ELSE
    954.4  000075                                    cfi endblock ?MOVE_LONG_XD
                           ATA_GPTR
    954.5  000075                                  ENDIF
    954.6  000075                                  ENDM
    955    000075                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG16_XDATA_CODEABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG16_XDATA_XDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_XDATA_IDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_XDATA_GPTRREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                REL    CONST UNTYP.           RCODE      Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      50 
NOT_XDATA           REL    CONST UNTYP.           RCODE      28 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:6850          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 117         #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

    956    000000          
    957    000000          ;---------------------------------------------------
                           --------------------------
    958    000000          ;
    959    000000          ;       Function: ?MOVE_LONG_GPTR_IDATA
    960    000000          ;
    961    000000          ;       Description: Move an object from IDATA to
                            GENERIC
    962    000000          ;
    963    000000          ;       Register input:
    964    000000          ;               GP1  R3:R2:R1 points to dest
    965    000000          ;               R0   Pointer to src (IDATA).
    966    000000          ;               R7   low byte of size
    967    000000          ;
    968    000000          ;       Register output:
    969    000000          ;               GP1   pointer to dest
    970    000000          ;
    971    000000          ;       Register changed:
    972    000000          ;               Carry = Undefined
    973    000000          ;               A
    974    000000          ;               R0
    975    000000          ;
    976    000000          ;       Multiple DPTR:
    977    000000          ;               DPTR/DPS: Unchanged
    978    000000          ;
    979    000000          ;       Stack usage: 2
    980    000000          ;
    981    000000          ;---------------------------------------------------
                           --------------------------
    982    000000                  MODULE  ?MOVE_LONG_GPTR_IDATA
    983    000000                  RSEG    RCODE:CODE:NOROOT
    984    000000                  PUBLIC  ?MOVE_LONG_GPTR_IDATA
    985    000000                  EXTERN  ?MOVE_LONG8_IDATA_IDATA
    986    000000                  EXTERN  ?MOVE_LONG8_XDATA_IDATA
    987    000000          #if (__NUMBER_OF_DPTRS__ > 1)
    989    000000          #endif
    990    000000          
    991    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_GPTR_IDATA
    991.1  000000                                  cfi block ?MOVE_LONG_GPTR_ID
 ATA using cfi_common
    991.2  000000                                  cfi nofunction
    991.3  000000          cfi_OFFSET              SET      0
    991.4  000000                                  ENDM
    992    000000                  cfi A undefined
    993    000000                  cfi R0 undefined
    994    000000          
    995    000000          ?MOVE_LONG_GPTR_IDATA:
    996    000000 BB0011           CJNE    GP1H,#0x00,NOT_XDATA
    997    000003          
    998    000003                  ; XDATA <- IDATA
    999    000003          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1003    000003          #endif
   1004    000003 C082             PUSH    DPL
   1005    000005                  cfi_PUSH_REG DPL0
   1005    000005                                  cfi_STACK_ALLOC 1
   1005.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1005.2  000005                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1005.3  000005                                  ENDM
   1005.4  000005                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1005.5  000005                                  ENDM
   1006    000005 C083             PUSH    DPH
   1007    000007                  cfi_PUSH_REG DPH0
   1007    000007                                  cfi_STACK_ALLOC 1
   1007.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1007.2  000007                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1007.3  000007                                  ENDM
   1007.4  000007                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1007.5  000007                                  ENDM
   1008    000007          #ifdef __EXTENDED_DPTR__
   1013    000007          #endif
   1014    000007          
   1015    000007                  ; setup dest
   1016    000007 8982             MOV     DPL,GP1L
   1017    000009 8A83             MOV     DPH,GP1M
   1018    00000B                  ; src already in R0
   1019    00000B                  ; setup size
   1020    00000B EF               MOV     A,R7
   1021    00000C 12....           CALL    ?MOVE_LONG8_XDATA_IDATA         ;
  DPTR = dest, R0 = src
   1022    00000F          #ifdef __EXTENDED_DPTR__
   1026    00000F          #endif
   1027    00000F D083             POP     DPH
   1028    000011                  cfi_STACK_DEALL 1
   1028.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1028.2  000011                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1028.3  000011          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1028.4  000011                                      #error "Negative size on
                            cfi deallocate"
   1028.5  000011          #endif
   1028.6  000011                                  ELSEIF cfi_OFFSET
   1028.7  000011                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1028.8  000011                                  ELSE
   1028.9  000011                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1028.10 000011                                  ENDIF
   1028.11 000011                                  ENDM
   1029    000011                  cfi DPH0 samevalue
   1030    000011 D082             POP     DPL
   1031    000013                  cfi_STACK_DEALL 1
   1031.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1031.2  000013                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1031.3  000013          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1031.4  000013                                      #error "Negative size on
                            cfi deallocate"
   1031.5  000013          #endif
   1031.6  000013                                  ELSEIF cfi_OFFSET
   1031.7  000013                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1031.8  000013                                  ELSE
   1031.9  000013                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1031.10 000013                                  ENDIF
   1031.11 000013                                  ENDM
   1032    000013                  cfi DPL0 samevalue
   1033    000013          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1037    000013          #endif
   1038    000013 22               RET
   1039    000014          
   1040    000014          NOT_XDATA:
   1041    000014 BB010B           CJNE    GP1H,#0x01,NOT_IDATA
   1042    000017          
   1043    000017                  ; IDATA <- IDATA
   1044    000017          
   1045    000017                  ; save regs
   1046    000017 E9               MOV     A,R1
   1047    000018 C0E0             PUSH    A
   1048    00001A                  cfi_PUSH_REG R1
   1048    00001A                                  cfi_STACK_ALLOC 1
   1048.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1048.2  00001A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1048.3  00001A                                  ENDM
   1048.4  00001A                                  cfi R1 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1048.5  00001A                                  ENDM
   1049    00001A                  ; src already in R0
   1050    00001A                  ; dest already in R1
   1051    00001A                  ; setup size
   1052    00001A EF               MOV     A,R7
   1053    00001B 12....           CALL    ?MOVE_LONG8_IDATA_IDATA         ; R1
  = dest, R0 = src
   1054    00001E D0E0             POP     A
   1055    000020                  cfi_STACK_DEALL 1
   1055.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1055.2  000020                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1055.3  000020          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1055.4  000020                                      #error "Negative size on
                            cfi deallocate"
   1055.5  000020          #endif
   1055.6  000020                                  ELSEIF cfi_OFFSET
   1055.7  000020                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1055.8  000020                                  ELSE
   1055.9  000020                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1055.10 000020                                  ENDIF
   1055.11 000020                                  ENDM
   1056    000020 F9               MOV     R1,A
   1057    000021                  cfi R1 samevalue
   1058    000021 22               RET
   1059    000022                  
   1060    000022          NOT_IDATA:
   1061    000022                  ; CODE <- IDATA
   1062    000022 22               RET
   1063    000023          
   1064    000023                  cfi_DATA_BLOCK_end ?MOVE_LONG_GPTR_IDATA
   1064.1  000023                                  IF cfi_OFFSET
   1064.2  000023                                    #error "Non-zero offset on
                            cfi data block end"
   1064.3  000023                                  ELSE
   1064.4  000023                                    cfi endblock ?MOVE_LONG_GP
                           TR_IDATA
   1064.5  000023                                  ENDIF
   1064.6  000023                                  ENDM
   1065    000023                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945     1005     1005     1007
                                                                     1007     1028     1031     1048
                                                                     1048     1055
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813      996     1041
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912     1016
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913     1017
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945     1005     1007     1028
                                                                     1031     1048     1055
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947      987      999     1033
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945     1005
                                                                     1005     1007     1007     1028
                                                                     1028     1031     1031     1048
                                                                     1048     1055     1055
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_IDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_XDATA_IDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_GPTR_IDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                REL    CONST UNTYP.           RCODE      Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      22 
NOT_XDATA           REL    CONST UNTYP.           RCODE      14 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:DD3A          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 35          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1066    000000          
   1067    000000          ;---------------------------------------------------
                           --------------------------
   1068    000000          ;
   1069    000000          ;       Function: ?MOVE_LONG_GPTR_PDATA
   1070    000000          ;
   1071    000000          ;       Description: Move an object from PDATA to
                            GENERIC
   1072    000000          ;
   1073    000000          ;       Register input:
   1074    000000          ;               GP1  R3:R2:R1 points to dest
   1075    000000          ;               R0   Pointer to src (PDATA).
   1076    000000          ;               R7    low byte of size
   1077    000000          ;
   1078    000000          ;       Register output:
   1079    000000          ;               GP1   pointer to dest
   1080    000000          ;
   1081    000000          ;       Register changed:
   1082    000000          ;               Carry = Undefined
   1083    000000          ;               A
   1084    000000          ;               R0
   1085    000000          ;
   1086    000000          ;       Multiple DPTR
   1087    000000          ;               DPTR/DPS: Unchanged
   1088    000000          ;
   1089    000000          ;       Stack usage: 4 + MOVE_LONG usage
   1090    000000          ;
   1091    000000          ;---------------------------------------------------
                           --------------------------
   1092    000000                  MODULE  ?MOVE_LONG_GPTR_PDATA
   1093    000000                  RSEG    RCODE:CODE:NOROOT
   1094    000000                  PUBLIC  ?MOVE_LONG_GPTR_PDATA
   1095    000000                  EXTERN  ?MOVE_LONG8_IDATA_PDATA
   1096    000000                  EXTERN  ?MOVE_LONG8_XDATA_PDATA
   1097    000000          #if (__NUMBER_OF_DPTRS__ > 1)
   1099    000000          #endif
   1100    000000          
   1101    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_GPTR_PDATA
   1101.1  000000                                  cfi block ?MOVE_LONG_GPTR_PD
 ATA using cfi_common
   1101.2  000000                                  cfi nofunction
   1101.3  000000          cfi_OFFSET              SET      0
   1101.4  000000                                  ENDM
   1102    000000                  cfi A  undefined
   1103    000000                  cfi R0 undefined
   1104    000000          
   1105    000000          ?MOVE_LONG_GPTR_PDATA:
   1106    000000 BB0011           CJNE    GP1H,#0x00,NOT_XDATA
   1107    000003          
   1108    000003                  ; XDATA <- PDATA
   1109    000003          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1113    000003          #endif
   1114    000003 C082             PUSH    DPL
   1115    000005                  cfi_PUSH_REG DPL0
   1115    000005                                  cfi_STACK_ALLOC 1
   1115.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1115.2  000005                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1115.3  000005                                  ENDM
   1115.4  000005                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1115.5  000005                                  ENDM
   1116    000005 C083             PUSH    DPH
   1117    000007                  cfi_PUSH_REG DPH0
   1117    000007                                  cfi_STACK_ALLOC 1
   1117.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1117.2  000007                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1117.3  000007                                  ENDM
   1117.4  000007                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1117.5  000007                                  ENDM
   1118    000007          #ifdef __EXTENDED_DPTR__
   1123    000007          #endif
   1124    000007          
   1125    000007                  ; setup dest
   1126    000007 8982             MOV     DPL,GP1L
   1127    000009 8A83             MOV     DPH,GP1M
   1128    00000B                  ; src already in R0
   1129    00000B                  ; setup size
   1130    00000B EF               MOV     A,R7
   1131    00000C 12....           CALL    ?MOVE_LONG8_XDATA_PDATA         ;
  DPTR = dest, R0 = src
   1132    00000F          #ifdef __EXTENDED_DPTR__
   1136    00000F          #endif
   1137    00000F D083             POP     DPH
   1138    000011                  cfi_STACK_DEALL 1
   1138.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1138.2  000011                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1138.3  000011          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1138.4  000011                                      #error "Negative size on
                            cfi deallocate"
   1138.5  000011          #endif
   1138.6  000011                                  ELSEIF cfi_OFFSET
   1138.7  000011                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1138.8  000011                                  ELSE
   1138.9  000011                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1138.10 000011                                  ENDIF
   1138.11 000011                                  ENDM
   1139    000011                  cfi DPH0 samevalue
   1140    000011 D082             POP     DPL
   1141    000013                  cfi_STACK_DEALL 1
   1141.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1141.2  000013                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1141.3  000013          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1141.4  000013                                      #error "Negative size on
                            cfi deallocate"
   1141.5  000013          #endif
   1141.6  000013                                  ELSEIF cfi_OFFSET
   1141.7  000013                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1141.8  000013                                  ELSE
   1141.9  000013                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1141.10 000013                                  ENDIF
   1141.11 000013                                  ENDM
   1142    000013                  cfi DPL0 samevalue
   1143    000013          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1147    000013          #endif
   1148    000013 22               RET
   1149    000014          
   1150    000014          NOT_XDATA:
   1151    000014 BB010B           CJNE    GP1H,#0x01,NOT_IDATA
   1152    000017          
   1153    000017                  ; IDATA <- PDATA
   1154    000017          
   1155    000017                  ; save regs
   1156    000017 E9               MOV     A,R1
   1157    000018 C0E0             PUSH    A
   1158    00001A                  cfi_PUSH_REG R1
   1158    00001A                                  cfi_STACK_ALLOC 1
   1158.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1158.2  00001A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1158.3  00001A                                  ENDM
   1158.4  00001A                                  cfi R1 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1158.5  00001A                                  ENDM
   1159    00001A                  ; src already in R0
   1160    00001A                  ; dest already in R1
   1161    00001A                  ; setup size
   1162    00001A EF               MOV     A,R7
   1163    00001B 12....           CALL    ?MOVE_LONG8_IDATA_PDATA         ; R1
  = dest, R0 = src
   1164    00001E D0E0             POP     A
   1165    000020                  cfi_STACK_DEALL 1
   1165.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1165.2  000020                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1165.3  000020          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1165.4  000020                                      #error "Negative size on
                            cfi deallocate"
   1165.5  000020          #endif
   1165.6  000020                                  ELSEIF cfi_OFFSET
   1165.7  000020                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1165.8  000020                                  ELSE
   1165.9  000020                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1165.10 000020                                  ENDIF
   1165.11 000020                                  ENDM
   1166    000020 F9               MOV     R1,A
   1167    000021                  cfi R1 samevalue
   1168    000021 22               RET
   1169    000022                  
   1170    000022          NOT_IDATA:
   1171    000022                  ; CODE <- IDATA
   1172    000022 22               RET
   1173    000023          
   1174    000023                  cfi_DATA_BLOCK_end ?MOVE_LONG_GPTR_PDATA
   1174.1  000023                                  IF cfi_OFFSET
   1174.2  000023                                    #error "Non-zero offset on
                            cfi data block end"
   1174.3  000023                                  ELSE
   1174.4  000023                                    cfi endblock ?MOVE_LONG_GP
                           TR_PDATA
   1174.5  000023                                  ENDIF
   1174.6  000023                                  ENDM
   1175    000023                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945     1005     1005     1007
                                                                     1007     1028     1031     1048
                                                                     1048     1055     1115     1115
                                                                     1117     1117     1138     1141
                                                                     1158     1158     1165
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813      996     1041
                                                                     1106     1151
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912     1016
                                                                     1126
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913     1017     1127
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945     1005     1007     1028
                                                                     1031     1048     1055     1115
                                                                     1117     1138     1141     1158
                                                                     1165
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947      987      999     1033
                                                                     1097     1109     1143
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945     1005
                                                                     1005     1007     1007     1028
                                                                     1028     1031     1031     1048
                                                                     1048     1055     1055     1115
                                                                     1115     1117     1117     1138
                                                                     1138     1141     1141     1158
                                                                     1158     1165     1165
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG8_IDATA_PDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_XDATA_PDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_GPTR_PDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                REL    CONST UNTYP.           RCODE      Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      22 
NOT_XDATA           REL    CONST UNTYP.           RCODE      14 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:19D4          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 35          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1176    000000          
   1177    000000          
   1178    000000          ;---------------------------------------------------
                           --------------------------
   1179    000000          ;
   1180    000000          ;       Function: ?MOVE_LONG_GPTR_XDATA
   1181    000000          ;
   1182    000000          ;       Description: Move an object from XDATA to
                            GENERIC
   1183    000000          ;
   1184    000000          ;       Register input:
   1185    000000          ;               GP1  R3:R2:R1 points to dest
   1186    000000          ;               DPTR Pointer to src (XDATA).
   1187    000000          ;               R7   low byte of size
   1188    000000          ;               R0   high byte of size
   1189    000000          ;
   1190    000000          ;       Register output:
   1191    000000          ;               GP1   pointer to dest
   1192    000000          ;
   1193    000000          ;       Register changed:
   1194    000000          ;               A
   1195    000000          ;               R0
   1196    000000          ;               DPTR
   1197    000000          ;               Carry = Undefined
   1198    000000          ;
   1199    000000          ;       Multiple DPTR
   1200    000000          ;               Shadowed:       Requires DPTR: DPTRx
                               Requires DPS: DPTRx
   1201    000000          ;                               Modifies DPTR: DPTRx
                               Returns  DPS: DPTRx
   1202    000000          ;
   1203    000000          ;               Separate:       Requires DPTR: 0    
                               Requires DPS: 0 
   1204    000000          ;                               Modifies DPTR: 0    
                               Returns  DPS: 0
   1205    000000          ;
   1206    000000          ;       Stack usage: 2
   1207    000000          ;
   1208    000000          ;---------------------------------------------------
                           --------------------------
   1209    000000                  MODULE  ?MOVE_LONG_GPTR_XDATA
   1210    000000                  RSEG    RCODE:CODE:NOROOT
   1211    000000                  PUBLIC  ?MOVE_LONG_GPTR_XDATA
   1212    000000                  EXTERN  ?MOVE_LONG8_IDATA_XDATA
   1213    000000                  EXTERN  ?MOVE_LONG16_XDATA_XDATA
   1214    000000          
   1215    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_GPTR_XDATA
   1215.1  000000                                  cfi block ?MOVE_LONG_GPTR_XD
 ATA using cfi_common
   1215.2  000000                                  cfi nofunction
   1215.3  000000          cfi_OFFSET              SET      0
   1215.4  000000                                  ENDM
   1216    000000                  cfi A  undefined
   1217    000000                  cfi R0 undefined
   1218    000000                  cfi DPTR0 undefined
   1219    000000          
   1220    000000          ?MOVE_LONG_GPTR_XDATA:
   1221    000000 BB001D           CJNE    GP1H,#0x00,NOT_XDATA
   1222    000003          
   1223    000003                  ; XDATA <- XDATA
   1224    000003          
   1225    000003                  ; save regs
   1226    000003 EB               MOV     A,R3
   1227    000004 C0E0             PUSH    A
   1228    000006                  cfi_PUSH_REG R3
   1228    000006                                  cfi_STACK_ALLOC 1
   1228.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1228.2  000006                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1228.3  000006                                  ENDM
   1228.4  000006                                  cfi R3 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1228.5  000006                                  ENDM
   1229    000006 EC               MOV     A,R4
   1230    000007 C0E0             PUSH    A
   1231    000009                  cfi_PUSH_REG R4
   1231    000009                                  cfi_STACK_ALLOC 1
   1231.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1231.2  000009                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1231.3  000009                                  ENDM
   1231.4  000009                                  cfi R4 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1231.5  000009                                  ENDM
   1232    000009 ED               MOV     A,R5
   1233    00000A C0E0             PUSH    A
   1234    00000C                  cfi_PUSH_REG R5
   1234    00000C                                  cfi_STACK_ALLOC 1
   1234.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1234.2  00000C                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1234.3  00000C                                  ENDM
   1234.4  00000C                                  cfi R5 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1234.5  00000C                                  ENDM
   1235    00000C          #ifdef __EXTENDED_DPTR__
   1240    00000C          #endif
   1241    00000C                  ; setup dest
   1242    00000C E9               MOV     A,GP1L
   1243    00000D FC               MOV     R4,A
   1244    00000E EA               MOV     A,GP1M
   1245    00000F FD               MOV     R5,A
   1246    000010                  ; src already in DPTR
   1247    000010                  ; setup high size
   1248    000010 E8               MOV     A,R0
   1249    000011 FB               MOV     R3,A
   1250    000012 EF               MOV     A,R7
   1251    000013 12....           CALL    ?MOVE_LONG16_XDATA_XDATA        ;
  R5:R4 = dest,  DPTR = src
   1252    000016          #ifdef __EXTENDED_DPTR__
   1257    000016          #endif
   1258    000016 D0E0             POP     A
   1259    000018                  cfi_STACK_DEALL 1
   1259.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1259.2  000018                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1259.3  000018          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1259.4  000018                                      #error "Negative size on
                            cfi deallocate"
   1259.5  000018          #endif
   1259.6  000018                                  ELSEIF cfi_OFFSET
   1259.7  000018                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1259.8  000018                                  ELSE
   1259.9  000018                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1259.10 000018                                  ENDIF
   1259.11 000018                                  ENDM
   1260    000018 FD               MOV     R5,A
   1261    000019                  cfi R5 samevalue
   1262    000019 D0E0             POP     A
   1263    00001B                  cfi_STACK_DEALL 1
   1263.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1263.2  00001B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1263.3  00001B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1263.4  00001B                                      #error "Negative size on
                            cfi deallocate"
   1263.5  00001B          #endif
   1263.6  00001B                                  ELSEIF cfi_OFFSET
   1263.7  00001B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1263.8  00001B                                  ELSE
   1263.9  00001B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1263.10 00001B                                  ENDIF
   1263.11 00001B                                  ENDM
   1264    00001B FC               MOV     R4,A
   1265    00001C                  cfi R4 samevalue
   1266    00001C D0E0             POP     A
   1267    00001E                  cfi_STACK_DEALL 1
   1267.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1267.2  00001E                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1267.3  00001E          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1267.4  00001E                                      #error "Negative size on
                            cfi deallocate"
   1267.5  00001E          #endif
   1267.6  00001E                                  ELSEIF cfi_OFFSET
   1267.7  00001E                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1267.8  00001E                                  ELSE
   1267.9  00001E                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1267.10 00001E                                  ENDIF
   1267.11 00001E                                  ENDM
   1268    00001E FB               MOV     R3,A
   1269    00001F                  cfi R3 samevalue
   1270    00001F 22               RET
   1271    000020          
   1272    000020          NOT_XDATA:
   1273    000020 BB0106           CJNE    GP1H,#0x01,NOT_IDATA
   1274    000023          
   1275    000023                  ; IDATA <- XDATA
   1276    000023                  
   1277    000023                  ; dest already in DPTR
   1278    000023                  ; setup src
   1279    000023 E9               MOV     A,GP1L
   1280    000024 F8               MOV     R0,A
   1281    000025                  ; setup size
   1282    000025 EF               MOV     A,R7
   1283    000026 12....           CALL    ?MOVE_LONG8_IDATA_XDATA         ; R0
  = dest, DPTR = src
   1284    000029                  ; fall through
   1285    000029                  
   1286    000029          NOT_IDATA:
   1287    000029                  ; CODE <- IDATA
   1288    000029 22               RET
   1289    00002A          
   1290    00002A                  cfi_DATA_BLOCK_end ?MOVE_LONG_GPTR_XDATA
   1290.1  00002A                                  IF cfi_OFFSET
   1290.2  00002A                                    #error "Non-zero offset on
                            cfi data block end"
   1290.3  00002A                                  ELSE
   1290.4  00002A                                    cfi endblock ?MOVE_LONG_GP
                           TR_XDATA
   1290.5  00002A                                  ENDIF
   1290.6  00002A                                  ENDM
   1291    00002A                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945     1005     1005     1007
                                                                     1007     1028     1031     1048
                                                                     1048     1055     1115     1115
                                                                     1117     1117     1138     1141
                                                                     1158     1158     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1263     1267
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813      996     1041
                                                                     1106     1151     1221     1273
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912     1016
                                                                     1126     1242     1279
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913     1017     1127
                                                                     1244
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945     1005     1007     1028
                                                                     1031     1048     1055     1115
                                                                     1117     1138     1141     1158
                                                                     1165     1228     1231     1234
                                                                     1259     1263     1267
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947      987      999     1033
                                                                     1097     1109     1143
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945     1005
                                                                     1005     1007     1007     1028
                                                                     1028     1031     1031     1048
                                                                     1048     1055     1055     1115
                                                                     1115     1117     1117     1138
                                                                     1138     1141     1141     1158
                                                                     1158     1165     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1259     1263
                                                                     1263     1267     1267
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG16_XDATA_XDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_XDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_GPTR_XDATAREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      29 
NOT_XDATA           REL    CONST UNTYP.           RCODE      20 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:4D90          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 42          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1292    000000          
   1293    000000          
   1294    000000          ;---------------------------------------------------
                           --------------------------
   1295    000000          ;
   1296    000000          ;       Function: ?MOVE_LONG_GPTR_CODE
   1297    000000          ;
   1298    000000          ;       Description: Move an object from IDATA to
                            CODE
   1299    000000          ;
   1300    000000          ;       Register input:
   1301    000000          ;               GP1   R3:R2:R1 points to dest
   1302    000000          ;               DPTR  Pointer to src (CODE).
   1303    000000          ;               R7    low byte of size
   1304    000000          ;               R0    high byte of size
   1305    000000          ;
   1306    000000          ;       Register output:
   1307    000000          ;               R0   pointer to dest
   1308    000000          ;
   1309    000000          ;       Register changed:
   1310    000000          ;               A
   1311    000000          ;               R0
   1312    000000          ;               DPTR
   1313    000000          ;               Carry = Undefined
   1314    000000          ;
   1315    000000          ;       Multiple DPTR
   1316    000000          ;               Shadowed:       Requires DPTR: DPTRx
                               Requires DPS: DPTRx
   1317    000000          ;                               Modifies DPTR: DPTRx
                               Returns  DPS: DPTRx
   1318    000000          ;
   1319    000000          ;               Separate:       Requires DPTR: 0    
                               Requires DPS: 0 
   1320    000000          ;                               Modifies DPTR: 0    
                               Returns  DPS: 0
   1321    000000          ;
   1322    000000          ;       Stack usage: 2
   1323    000000          ;
   1324    000000          ;---------------------------------------------------
                           --------------------------
   1325    000000                  MODULE  ?MOVE_LONG_GPTR_CODE
   1326    000000                  RSEG    RCODE:CODE:NOROOT
   1327    000000                  PUBLIC  ?MOVE_LONG_GPTR_CODE
   1328    000000                  EXTERN  ?MOVE_LONG8_IDATA_CODE
   1329    000000                  EXTERN  ?MOVE_LONG16_XDATA_CODE
   1330    000000          
   1331    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_GPTR_CODE
   1331.1  000000                                  cfi block ?MOVE_LONG_GPTR_CO
 DE using cfi_common
   1331.2  000000                                  cfi nofunction
   1331.3  000000          cfi_OFFSET              SET      0
   1331.4  000000                                  ENDM
   1332    000000                  cfi A  undefined
   1333    000000                  cfi R0 undefined
   1334    000000                  cfi DPTR0 undefined
   1335    000000          
   1336    000000          ?MOVE_LONG_GPTR_CODE:
   1337    000000 BB001D           CJNE    GP1H,#0x00,NOT_XDATA
   1338    000003          
   1339    000003                  ; XDATA <- CODE
   1340    000003          
   1341    000003                  ; save regs
   1342    000003 EB               MOV     A,R3
   1343    000004 C0E0             PUSH    A
   1344    000006                  cfi_PUSH_REG R3
   1344    000006                                  cfi_STACK_ALLOC 1
   1344.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1344.2  000006                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1344.3  000006                                  ENDM
   1344.4  000006                                  cfi R3 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1344.5  000006                                  ENDM
   1345    000006 EC               MOV     A,R4
   1346    000007 C0E0             PUSH    A
   1347    000009                  cfi_PUSH_REG R4
   1347    000009                                  cfi_STACK_ALLOC 1
   1347.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1347.2  000009                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1347.3  000009                                  ENDM
   1347.4  000009                                  cfi R4 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1347.5  000009                                  ENDM
   1348    000009 ED               MOV     A,R5
   1349    00000A C0E0             PUSH    A
   1350    00000C                  cfi_PUSH_REG R5
   1350    00000C                                  cfi_STACK_ALLOC 1
   1350.1  000003          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1350.2  00000C                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1350.3  00000C                                  ENDM
   1350.4  00000C                                  cfi R5 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1350.5  00000C                                  ENDM
   1351    00000C          #ifdef __EXTENDED_DPTR__
   1356    00000C          #endif
   1357    00000C                  ; setup dest
   1358    00000C E9               MOV     A,GP1L
   1359    00000D FC               MOV     R4,A
   1360    00000E EA               MOV     A,GP1M
   1361    00000F FD               MOV     R5,A
   1362    000010                  ; src already in DPTR
   1363    000010                  ; setup size
   1364    000010 E8               MOV     A,R0
   1365    000011 FB               MOV     R3,A
   1366    000012 EF               MOV     A,R7    
   1367    000013 12....           CALL    ?MOVE_LONG16_XDATA_CODE         ;
  R5:R4 = dest, DPTR = src
   1368    000016          #ifdef __EXTENDED_DPTR__
   1373    000016          #endif
   1374    000016 D0E0             POP     A
   1375    000018                  cfi_STACK_DEALL 1
   1375.1  000002          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1375.2  000018                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1375.3  000018          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1375.4  000018                                      #error "Negative size on
                            cfi deallocate"
   1375.5  000018          #endif
   1375.6  000018                                  ELSEIF cfi_OFFSET
   1375.7  000018                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1375.8  000018                                  ELSE
   1375.9  000018                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1375.10 000018                                  ENDIF
   1375.11 000018                                  ENDM
   1376    000018 FD               MOV     R5,A
   1377    000019                  cfi R5 samevalue
   1378    000019 D0E0             POP     A
   1379    00001B                  cfi_STACK_DEALL 1
   1379.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1379.2  00001B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1379.3  00001B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1379.4  00001B                                      #error "Negative size on
                            cfi deallocate"
   1379.5  00001B          #endif
   1379.6  00001B                                  ELSEIF cfi_OFFSET
   1379.7  00001B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1379.8  00001B                                  ELSE
   1379.9  00001B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1379.10 00001B                                  ENDIF
   1379.11 00001B                                  ENDM
   1380    00001B FC               MOV     R4,A
   1381    00001C                  cfi R4 samevalue
   1382    00001C D0E0             POP     A
   1383    00001E                  cfi_STACK_DEALL 1
   1383.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1383.2  00001E                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1383.3  00001E          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1383.4  00001E                                      #error "Negative size on
                            cfi deallocate"
   1383.5  00001E          #endif
   1383.6  00001E                                  ELSEIF cfi_OFFSET
   1383.7  00001E                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1383.8  00001E                                  ELSE
   1383.9  00001E                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1383.10 00001E                                  ENDIF
   1383.11 00001E                                  ENDM
   1384    00001E FB               MOV     R3,A
   1385    00001F                  cfi R3 samevalue
   1386    00001F 22               RET
   1387    000020          
   1388    000020          NOT_XDATA:
   1389    000020 BB0106           CJNE    GP1H,#0x01,NOT_IDATA
   1390    000023          
   1391    000023                  ; IDATA <- CODE
   1392    000023          
   1393    000023                  ; setup dest
   1394    000023 E9               MOV     A,GP1L
   1395    000024 F8               MOV     R0,A
   1396    000025                  ; src already in DPTR
   1397    000025                  ; setup size
   1398    000025 EF               MOV     A,R7
   1399    000026 12....           CALL    ?MOVE_LONG8_IDATA_CODE          ; R0
  = dest, DPTR = src
   1400    000029                  ; fall through
   1401    000029                  
   1402    000029          NOT_IDATA:
   1403    000029                  ; CODE <- CODE
   1404    000029 22               RET
   1405    00002A          
   1406    00002A                  cfi_DATA_BLOCK_end ?MOVE_LONG_GPTR_CODE
   1406.1  00002A                                  IF cfi_OFFSET
   1406.2  00002A                                    #error "Non-zero offset on
                            cfi data block end"
   1406.3  00002A                                  ELSE
   1406.4  00002A                                    cfi endblock ?MOVE_LONG_GP
                           TR_CODE
   1406.5  00002A                                  ENDIF
   1406.6  00002A                                  ENDM
   1407    00002A                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945     1005     1005     1007
                                                                     1007     1028     1031     1048
                                                                     1048     1055     1115     1115
                                                                     1117     1117     1138     1141
                                                                     1158     1158     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1263     1267
                                                                     1344     1344     1347     1347
                                                                     1350     1350     1375     1379
                                                                     1383
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813      996     1041
                                                                     1106     1151     1221     1273
                                                                     1337     1389
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912     1016
                                                                     1126     1242     1279     1358
                                                                     1394
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913     1017     1127
                                                                     1244     1360
GP2H                 #define, value: R6, line:       339  
GP2L                 #define, value: R4, line:       337  
GP2M                 #define, value: R5, line:       338  
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945     1005     1007     1028
                                                                     1031     1048     1055     1115
                                                                     1117     1138     1141     1158
                                                                     1165     1228     1231     1234
                                                                     1259     1263     1267     1344
                                                                     1347     1350     1375     1379
                                                                     1383
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947      987      999     1033
                                                                     1097     1109     1143
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945     1005
                                                                     1005     1007     1007     1028
                                                                     1028     1031     1031     1048
                                                                     1048     1055     1055     1115
                                                                     1115     1117     1117     1138
                                                                     1138     1141     1141     1158
                                                                     1158     1165     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1259     1263
                                                                     1263     1267     1267     1344
                                                                     1344     1347     1347     1350
                                                                     1350     1375     1375     1379
                                                                     1379     1383     1383
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG16_XDATA_CODEABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_CODEABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_GPTR_CODEREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPTR0               REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA           REL    CONST UNTYP.           RCODE      29 
NOT_XDATA           REL    CONST UNTYP.           RCODE      20 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:1656          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 42          #
##############################



###############################################################################
#                                                                             #
#     IAR Systems 8051 Assembler V7.30A/W32 02/Apr/2018  11:06:36             #
#     Copyright 2007 IAR Systems. All rights reserved.                        #
#                                                                             #
#           Target option =  plain                                            #
#           Source file   =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51#
#           List file     =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\iar_move_long.lst#
#           Object file   =  E:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\iar_move_long.r51#
#           Command line  =  E:\Project_1500V_dec20\ED\code\Library\clib\iar_move_long.s51 #
#                            -v0 -D__CORE__=1 -D__CODE_MODEL__=1              #
#                            -D__DATA_MODEL__=2 -D__CALLING_CONVENTION__=4    #
#                            -D__NUMBER_OF_DPTRS__=1                          #
#                            -OE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\Obj\ #
#                            -s+ -M<>                                         #
#                            -LE:\Project_1500V_dec20\ED\iar\Build .hex for CC2510\List\ #
#                            -t8 -xDI -IC:\IARSystems-CD-730B\8051\INC\       #
#                            -Dchip=2510 -D_LOW_IMAGE_ -w+                    #
#                                                                             #
###############################################################################

   1408    000000          
   1409    000000                  
   1410    000000          
   1411    000000          ;---------------------------------------------------
                           --------------------------
   1412    000000          ;
   1413    000000          ;       Function: ?MOVE_LONG_GPTR_GPTR
   1414    000000          ;
   1415    000000          ;       Description: Move an object from GENERIC to
                            IDATA
   1416    000000          ;
   1417    000000          ;       Register input:
   1418    000000          ;               GP2  R3:R2:R1 pointer to dest
   1419    000000          ;               GP1  R6:R5:R4 pointer to src
   1420    000000          ;               R7   low byte of size
   1421    000000          ;               R0   high byte of size
   1422    000000          ;
   1423    000000          ;       Register output:
   1424    000000          ;               GP1   pointer to dest
   1425    000000          ;
   1426    000000          ;       Register changed:
   1427    000000          ;               A
   1428    000000          ;               R0
   1429    000000          ;               GP2
   1430    000000          ;               Carry = Undefined
   1431    000000          ;
   1432    000000          ;       Multiple DPTR
   1433    000000          ;               DPTR/DPS:       Unchanged
   1434    000000          ;
   1435    000000          ;       Stack usage: 2
   1436    000000          ;
   1437    000000          ;---------------------------------------------------
                           --------------------------
   1438    000000                  MODULE  ?MOVE_LONG_GPTR_GPTR
   1439    000000                  RSEG    RCODE:CODE:NOROOT
   1440    000000                  PUBLIC  ?MOVE_LONG_GPTR_GPTR
   1441    000000                  EXTERN  ?MOVE_LONG8_IDATA_IDATA
   1442    000000                  EXTERN  ?MOVE_LONG8_IDATA_PDATA
   1443    000000                  EXTERN  ?MOVE_LONG8_IDATA_XDATA
   1444    000000                  EXTERN  ?MOVE_LONG16_XDATA_XDATA
   1445    000000                  EXTERN  ?MOVE_LONG8_XDATA_IDATA
   1446    000000                  EXTERN  ?MOVE_LONG16_XDATA_CODE
   1447    000000                  EXTERN  ?MOVE_LONG8_IDATA_CODE
   1448    000000          #if (__NUMBER_OF_DPTRS__ > 1)
   1450    000000          #endif
   1451    000000          
   1452    000000                  cfi_DATA_BLOCK_start ?MOVE_LONG_GPTR_GPTR
   1452.1  000000                                  cfi block ?MOVE_LONG_GPTR_GP
 TR using cfi_common
   1452.2  000000                                  cfi nofunction
   1452.3  000000          cfi_OFFSET              SET      0
   1452.4  000000                                  ENDM
   1453    000000                  cfi A  undefined
   1454    000000                  cfi R0 undefined
   1455    000000                  cfi R1 undefined
   1456    000000                  cfi R2 undefined
   1457    000000                  cfi R3 undefined
   1458    000000          
   1459    000000          ?MOVE_LONG_GPTR_GPTR:
   1460    000000 BB0038           CJNE    GP1H,#0x00,NOT_XDATA_SRC
   1461    000003 BE0019           CJNE    GP2H,#0x00,NOT_XDATA_XDATA
   1462    000006          
   1463    000006                  ;
   1464    000006                  ; XDATA SRC
   1465    000006                  ;
   1466    000006          
   1467    000006                  ; XDATA <- XDATA
   1468    000006          
   1469    000006                  ; save regs
   1470    000006          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1474    000006          #endif
   1475    000006 C082             PUSH    DPL
   1476    000008                  cfi_PUSH_REG DPL0
   1476    000008                                  cfi_STACK_ALLOC 1
   1476.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1476.2  000008                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1476.3  000008                                  ENDM
   1476.4  000008                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1476.5  000008                                  ENDM
   1477    000008 C083             PUSH    DPH
   1478    00000A                  cfi_PUSH_REG DPH0
   1478    00000A                                  cfi_STACK_ALLOC 1
   1478.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1478.2  00000A                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1478.3  00000A                                  ENDM
   1478.4  00000A                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1478.5  00000A                                  ENDM
   1479    00000A          #ifdef __EXTENDED_DPTR__
   1484    00000A          #endif
   1485    00000A                  ; dest already already in (R6):R5:R4
   1486    00000A                  ; load src to DPTR
   1487    00000A 8982             MOV     DPL,GP1L
   1488    00000C 8A83             MOV     DPH,GP1M
   1489    00000E                  ; setup return pointer
   1490    00000E EC               MOV     A,GP2L
   1491    00000F F9               MOV     GP1L,A
   1492    000010 ED               MOV     A,GP2M
   1493    000011 FA               MOV     GP1M,A
   1494    000012                  ; setup size
   1495    000012 E8               MOV     A,R0
   1496    000013 FB               MOV     R3,A
   1497    000014 EF               MOV     A,R7
   1498    000015 12....           CALL    ?MOVE_LONG16_XDATA_XDATA        ;
  R5:R4 = dest, DPTR = src
   1499    000018                  ; setup return pointer
   1500    000018 7B00             MOV     GP1H,#0x00                      ;
                                                 XDATA
   1501    00001A          #ifdef __EXTENDED_DPTR__
   1505    00001A          #endif
   1506    00001A D083             POP     DPH
   1507    00001C                  cfi_STACK_DEALL 1
   1507.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1507.2  00001C                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1507.3  00001C          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1507.4  00001C                                      #error "Negative size on
                            cfi deallocate"
   1507.5  00001C          #endif
   1507.6  00001C                                  ELSEIF cfi_OFFSET
   1507.7  00001C                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1507.8  00001C                                  ELSE
   1507.9  00001C                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1507.10 00001C                                  ENDIF
   1507.11 00001C                                  ENDM
   1508    00001C                  cfi DPH0 samevalue
   1509    00001C D082             POP     DPL
   1510    00001E                  cfi_STACK_DEALL 1
   1510.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1510.2  00001E                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1510.3  00001E          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1510.4  00001E                                      #error "Negative size on
                            cfi deallocate"
   1510.5  00001E          #endif
   1510.6  00001E                                  ELSEIF cfi_OFFSET
   1510.7  00001E                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1510.8  00001E                                  ELSE
   1510.9  00001E                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1510.10 00001E                                  ENDIF
   1510.11 00001E                                  ENDM
   1511    00001E                  cfi DPL0 samevalue
   1512    00001E          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1516    00001E          #endif
   1517    00001E 22               RET
   1518    00001F          
   1519    00001F          NOT_XDATA_XDATA:
   1520    00001F BE0118           CJNE    GP2H,#0x01,NOT_IDATA_XDATA
   1521    000022          
   1522    000022                  ; IDATA <- XDATA
   1523    000022          
   1524    000022          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1528    000022          #endif
   1529    000022 C082             PUSH    DPL
   1530    000024                  cfi_PUSH_REG DPL0
   1530    000024                                  cfi_STACK_ALLOC 1
   1530.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1530.2  000024                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1530.3  000024                                  ENDM
   1530.4  000024                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1530.5  000024                                  ENDM
   1531    000024 C083             PUSH    DPH
   1532    000026                  cfi_PUSH_REG DPH0
   1532    000026                                  cfi_STACK_ALLOC 1
   1532.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1532.2  000026                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1532.3  000026                                  ENDM
   1532.4  000026                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1532.5  000026                                  ENDM
   1533    000026          #ifdef __EXTENDED_DPTR__
   1538    000026          #endif
   1539    000026                  ; load src to DPTR
   1540    000026 8982             MOV     DPL,GP1L
   1541    000028 8A83             MOV     DPH,GP1M
   1542    00002A                  ; load dest to R0
   1543    00002A EC               MOV     A,GP2L
   1544    00002B F8               MOV     R0,A
   1545    00002C                  ; setup return pointer
   1546    00002C F9               MOV     GP1L,A
   1547    00002D                  ; setup size
   1548    00002D EF               MOV     A,R7
   1549    00002E 12....           CALL    ?MOVE_LONG8_IDATA_XDATA         ; R0
  = dest, DPTR = src
   1550    000031                  ; setup return pointer
   1551    000031 7A00             MOV     GP1M,#0x00
   1552    000033 7B01             MOV     GP1H,#0x01                      ;
                                                 IDATA return
   1553    000035          #ifdef __EXTENDED_DPTR__
   1557    000035          #endif
   1558    000035 D083             POP     DPH
   1559    000037                  cfi_STACK_DEALL 1
   1559.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1559.2  000037                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1559.3  000037          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1559.4  000037                                      #error "Negative size on
                            cfi deallocate"
   1559.5  000037          #endif
   1559.6  000037                                  ELSEIF cfi_OFFSET
   1559.7  000037                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1559.8  000037                                  ELSE
   1559.9  000037                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1559.10 000037                                  ENDIF
   1559.11 000037                                  ENDM
   1560    000037                  cfi DPH0 samevalue
   1561    000037 D082             POP     DPL
   1562    000039                  cfi_STACK_DEALL 1
   1562.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1562.2  000039                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1562.3  000039          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1562.4  000039                                      #error "Negative size on
                            cfi deallocate"
   1562.5  000039          #endif
   1562.6  000039                                  ELSEIF cfi_OFFSET
   1562.7  000039                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1562.8  000039                                  ELSE
   1562.9  000039                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1562.10 000039                                  ENDIF
   1562.11 000039                                  ENDM
   1563    000039                  cfi DPL0 samevalue
   1564    000039          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1568    000039          #endif
   1569    000039 22               RET
   1570    00003A          
   1571    00003A          NOT_IDATA_XDATA:
   1572    00003A                  ; CODE <- XDATA -> Do nothing
   1573    00003A 22               RET
   1574    00003B          
   1575    00003B          
   1576    00003B                  ;
   1577    00003B                  ; IDATA SRC
   1578    00003B                  ;
   1579    00003B          
   1580    00003B          NOT_XDATA_SRC:
   1581    00003B BB0132           CJNE    GP1H,#0x01,NOT_IDATA_SRC
   1582    00003E BE0019           CJNE    GP2H,#0x00,NOT_XDATA_IDATA
   1583    000041          
   1584    000041                  ; XDATA <- IDATA
   1585    000041          
   1586    000041          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1590    000041          #endif
   1591    000041 C082             PUSH    DPL
   1592    000043                  cfi_PUSH_REG DPL0
   1592    000043                                  cfi_STACK_ALLOC 1
   1592.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1592.2  000043                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1592.3  000043                                  ENDM
   1592.4  000043                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1592.5  000043                                  ENDM
   1593    000043 C083             PUSH    DPH
   1594    000045                  cfi_PUSH_REG DPH0
   1594    000045                                  cfi_STACK_ALLOC 1
   1594.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1594.2  000045                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1594.3  000045                                  ENDM
   1594.4  000045                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1594.5  000045                                  ENDM
   1595    000045          #ifdef __EXTENDED_DPTR__
   1600    000045          #endif
   1601    000045                  ; load src
   1602    000045 E9               MOV     A,GP1L
   1603    000046 F8               MOV     R0,A
   1604    000047                  ;load dest and return pointer
   1605    000047 EC               MOV     A,GP2L
   1606    000048 F582             MOV     DPL,A
   1607    00004A F9               MOV     GP1L,A
   1608    00004B ED               MOV     A,GP2M
   1609    00004C F583             MOV     DPH,A
   1610    00004E FA               MOV     GP1M,A
   1611    00004F                  ; setup size
   1612    00004F EF               MOV     A,R7
   1613    000050 12....           CALL    ?MOVE_LONG8_XDATA_IDATA         ;
  DPTR = dest, R0 = src
   1614    000053                  ; setup return pointer
   1615    000053 AB00             MOV     GP1H,0x00                       ;
                                                 XDATA
   1616    000055          #ifdef __EXTENDED_DPTR__
   1620    000055          #endif
   1621    000055 D083             POP     DPH
   1622    000057                  cfi_STACK_DEALL 1
   1622.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1622.2  000057                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1622.3  000057          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1622.4  000057                                      #error "Negative size on
                            cfi deallocate"
   1622.5  000057          #endif
   1622.6  000057                                  ELSEIF cfi_OFFSET
   1622.7  000057                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1622.8  000057                                  ELSE
   1622.9  000057                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1622.10 000057                                  ENDIF
   1622.11 000057                                  ENDM
   1623    000057                  cfi DPH0 samevalue
   1624    000057 D082             POP     DPL
   1625    000059                  cfi_STACK_DEALL 1
   1625.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1625.2  000059                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1625.3  000059          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1625.4  000059                                      #error "Negative size on
                            cfi deallocate"
   1625.5  000059          #endif
   1625.6  000059                                  ELSEIF cfi_OFFSET
   1625.7  000059                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1625.8  000059                                  ELSE
   1625.9  000059                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1625.10 000059                                  ENDIF
   1625.11 000059                                  ENDM
   1626    000059                  cfi DPL0 samevalue
   1627    000059          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1631    000059          #endif
   1632    000059 22               RET
   1633    00005A          
   1634    00005A          NOT_XDATA_IDATA:
   1635    00005A BE0112           CJNE    GP2H,#0x01,NOT_IDATA_IDATA
   1636    00005D          
   1637    00005D                  ; IDATA <- IDATA
   1638    00005D          
   1639    00005D          
   1640    00005D                  ; setup src
   1641    00005D E9               MOV     A,GP1L          ; R0 <- R1
   1642    00005E F8               MOV     R0,A
   1643    00005F                  ; save return pointer and setup dest
   1644    00005F EC               MOV     A,GP2L  
   1645    000060 C0E0             PUSH    A
   1646    000062                  cfi_PUSH_REG GP2L
   1646    000062                                  cfi_STACK_ALLOC 1
   1646.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1646.2  000062                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1646.3  000062                                  ENDM
   1646.4  000062                                  cfi GP2L frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1646.5  000062                                  ENDM
   1647    000062 F9               MOV     R1,A            ; R1 <- R4
   1648    000063                  ; setup size
   1649    000063 EF               MOV     A,R7
   1650    000064 12....           CALL    ?MOVE_LONG8_IDATA_IDATA         ; R1
  = dest, R0 = src
   1651    000067                  ; setup return pointer
   1652    000067 D0E0             POP     A
   1653    000069                  cfi_STACK_DEALL 1
   1653.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1653.2  000069                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1653.3  000069          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1653.4  000069                                      #error "Negative size on
                            cfi deallocate"
   1653.5  000069          #endif
   1653.6  000069                                  ELSEIF cfi_OFFSET
   1653.7  000069                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1653.8  000069                                  ELSE
   1653.9  000069                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1653.10 000069                                  ENDIF
   1653.11 000069                                  ENDM
   1654    000069 F9               MOV     GP1L,A
   1655    00006A 7A00             MOV     GP1M,#0x00
   1656    00006C 7B01             MOV     GP1H,#0x01                      ;
                                                 IDATA
   1657    00006E 22               RET
   1658    00006F                  
   1659    00006F          NOT_IDATA_IDATA
   1660    00006F                  ; CODE <- IDATA
   1661    00006F 22               RET
   1662    000070          
   1663    000070          
   1664    000070                  ;
   1665    000070                  ; CODE SRC
   1666    000070                  ;
   1667    000070          
   1668    000070          NOT_IDATA_SRC:
   1669    000070 BE0019           CJNE    GP2H,#0x00,NOT_XDATA_CODE
   1670    000073          
   1671    000073                  ; XDATA <- CODE
   1672    000073          
   1673    000073          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1677    000073          #endif
   1678    000073 C082             PUSH    DPL
   1679    000075                  cfi_PUSH_REG DPL0
   1679    000075                                  cfi_STACK_ALLOC 1
   1679.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1679.2  000075                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1679.3  000075                                  ENDM
   1679.4  000075                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1679.5  000075                                  ENDM
   1680    000075 C083             PUSH    DPH
   1681    000077                  cfi_PUSH_REG DPH0
   1681    000077                                  cfi_STACK_ALLOC 1
   1681.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1681.2  000077                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1681.3  000077                                  ENDM
   1681.4  000077                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1681.5  000077                                  ENDM
   1682    000077          #ifdef __EXTENDED_DPTR__
   1687    000077          #endif
   1688    000077                  ; load src
   1689    000077 8982             MOV     DPL,GP1L
   1690    000079 8A83             MOV     DPH,GP1M
   1691    00007B                  ; dest already in (R6):R5:R4
   1692    00007B                  ; setup return pointer
   1693    00007B EC               MOV     A,GP2L
   1694    00007C F9               MOV     GP1L,A
   1695    00007D ED               MOV     A,GP2M
   1696    00007E FA               MOV     GP1M,A
   1697    00007F                  ; setup size
   1698    00007F E8               MOV     A,R0
   1699    000080 FB               MOV     R3,A
   1700    000081 EF               MOV     A,R7
   1701    000082 12....           CALL    ?MOVE_LONG16_XDATA_CODE         ;
  (R6):R5:R4 = dest, DPTR = src
   1702    000085                  ; setup return pointer
   1703    000085 7B00             MOV     GP1H,#0x00                      ;
                                                 XDATA
   1704    000087          #ifdef __EXTENDED_DPTR__
   1708    000087          #endif
   1709    000087 D083             POP     DPH
   1710    000089                  cfi_STACK_DEALL 1
   1710.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1710.2  000089                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1710.3  000089          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1710.4  000089                                      #error "Negative size on
                            cfi deallocate"
   1710.5  000089          #endif
   1710.6  000089                                  ELSEIF cfi_OFFSET
   1710.7  000089                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1710.8  000089                                  ELSE
   1710.9  000089                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1710.10 000089                                  ENDIF
   1710.11 000089                                  ENDM
   1711    000089                  cfi DPH0 samevalue
   1712    000089 D082             POP     DPL
   1713    00008B                  cfi_STACK_DEALL 1
   1713.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1713.2  00008B                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1713.3  00008B          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1713.4  00008B                                      #error "Negative size on
                            cfi deallocate"
   1713.5  00008B          #endif
   1713.6  00008B                                  ELSEIF cfi_OFFSET
   1713.7  00008B                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1713.8  00008B                                  ELSE
   1713.9  00008B                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1713.10 00008B                                  ENDIF
   1713.11 00008B                                  ENDM
   1714    00008B                  cfi DPL0 samevalue
   1715    00008B          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1719    00008B          #endif
   1720    00008B 22               RET
   1721    00008C          
   1722    00008C          NOT_XDATA_CODE:
   1723    00008C BE0118           CJNE    GP2H,#0x01,NOT_IDATA_CODE
   1724    00008F          
   1725    00008F                  ; IDATA <- CODE
   1726    00008F          
   1727    00008F          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1731    00008F          #endif
   1732    00008F C082             PUSH    DPL
   1733    000091                  cfi_PUSH_REG DPL0
   1733    000091                                  cfi_STACK_ALLOC 1
   1733.1  000001          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1733.2  000091                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1733.3  000091                                  ENDM
   1733.4  000091                                  cfi DPL0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1733.5  000091                                  ENDM
   1734    000091 C083             PUSH    DPH
   1735    000093                  cfi_PUSH_REG DPH0
   1735    000093                                  cfi_STACK_ALLOC 1
   1735.1  000002          cfi_OFFSET              SET     cfi_OFFSET +
                            1
   1735.2  000093                                  cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1735.3  000093                                  ENDM
   1735.4  000093                                  cfi DPH0 frame(CFA_MACHINE,
                            __SIZE_OF_RETADDR__ + cfi_OFFSET)
   1735.5  000093                                  ENDM
   1736    000093          #ifdef __EXTENDED_DPTR__
   1741    000093          #endif
   1742    000093                  ; load src
   1743    000093 8982             MOV     DPL,GP1L
   1744    000095 8A83             MOV     DPH,GP1M
   1745    000097                  ; load dest
   1746    000097 EC               MOV     A,GP2L
   1747    000098 F8               MOV     R0,A
   1748    000099                  ; setup return pointer
   1749    000099 F9               MOV     GP1L,A
   1750    00009A                  ; setup size
   1751    00009A EF               MOV     A,R7
   1752    00009B 12....           CALL    ?MOVE_LONG8_IDATA_CODE          ; R0
  = dest, DPTR = src
   1753    00009E                  ; setup return pointer
   1754    00009E 7A00             MOV     GP1M,#0x00
   1755    0000A0 7B01             MOV     GP1H,#0x01                      ;
                                                 IDATA
   1756    0000A2          #ifdef __EXTENDED_DPTR__
   1760    0000A2          #endif
   1761    0000A2 D083             POP     DPH
   1762    0000A4                  cfi_STACK_DEALL 1
   1762.1  000001          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1762.2  0000A4                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1762.3  0000A4          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1762.4  0000A4                                      #error "Negative size on
                            cfi deallocate"
   1762.5  0000A4          #endif
   1762.6  0000A4                                  ELSEIF cfi_OFFSET
   1762.7  0000A4                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1762.8  0000A4                                  ELSE
   1762.9  0000A4                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1762.10 0000A4                                  ENDIF
   1762.11 0000A4                                  ENDM
   1763    0000A4                  cfi DPH0 samevalue
   1764    0000A4 D082             POP     DPL
   1765    0000A6                  cfi_STACK_DEALL 1
   1765.1  000000          cfi_OFFSET              SET     cfi_OFFSET -
                            1
   1765.2  0000A6                                  IF (cfi_OFFSET + __SIZE_OF_R
                           ETADDR__) < 0
   1765.3  0000A6          #ifndef __IAR_SYSTEMS_ICC__ /* Let it accept
                            preprocessing by compiler */
   1765.4  0000A6                                      #error "Negative size on
                            cfi deallocate"
   1765.5  0000A6          #endif
   1765.6  0000A6                                  ELSEIF cfi_OFFSET
   1765.7  0000A6                                    cfi     CFA_MACHINE
                            MACHINE_SP - (__SIZE_OF_RETADDR__ + cfi_OFFSET)
   1765.8  0000A6                                  ELSE
   1765.9  0000A6                                    cfi     CFA_MACHINE
                            MACHINE_SP - __SIZE_OF_RETADDR__
   1765.10 0000A6                                  ENDIF
   1765.11 0000A6                                  ENDM
   1766    0000A6                  cfi DPL0 samevalue
   1767    0000A6          #if (defined(__DPTR_SEPARATE__) && (__NUMBER_OF_DPTR
                           S__ > 1))
   1771    0000A6          #endif
   1772    0000A6 22               RET
   1773    0000A7          
   1774    0000A7          NOT_IDATA_CODE:
   1775    0000A7                  ; CODE <- CODE -> do nothing
   1776    0000A7 22               RET
   1777    0000A8                  
   1778    0000A8                  cfi_DATA_BLOCK_end ?MOVE_LONG_GPTR_GPTR
   1778.1  0000A8                                  IF cfi_OFFSET
   1778.2  0000A8                                    #error "Non-zero offset on
                            cfi data block end"
   1778.3  0000A8                                  ELSE
   1778.4  0000A8                                    cfi endblock ?MOVE_LONG_GP
                           TR_GPTR
   1778.5  0000A8                                  ENDIF
   1778.6  0000A8                                  ENDM
   1779    0000A8                  ENDMOD


EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945     1005     1005     1007
                                                                     1007     1028     1031     1048
                                                                     1048     1055     1115     1115
                                                                     1117     1117     1138     1141
                                                                     1158     1158     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1263     1267
                                                                     1344     1344     1347     1347
                                                                     1350     1350     1375     1379
                                                                     1383     1476     1476     1478
                                                                     1478     1507     1510     1530
                                                                     1530     1532     1532     1559
                                                                     1562     1592     1592     1594
                                                                     1594     1622     1625     1646
                                                                     1646     1653     1679     1679
                                                                     1681     1681     1710     1713
                                                                     1733     1733     1735     1735
                                                                     1762     1765
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813      996     1041
                                                                     1106     1151     1221     1273
                                                                     1337     1389     1460     1500
                                                                     1552     1581     1615     1656
                                                                     1703     1755
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912     1016
                                                                     1126     1242     1279     1358
                                                                     1394     1487     1491     1540
                                                                     1546     1602     1607     1641
                                                                     1654     1689     1694     1743
                                                                     1749
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913     1017     1127
                                                                     1244     1360     1488     1493
                                                                     1541     1551     1610     1655
                                                                     1690     1696     1744     1754
GP2H                 #define, value: R6, line:       339       1461     1520     1582     1635
                                                                     1669     1723
GP2L                 #define, value: R4, line:       337       1490     1543     1605     1644
                                                                     1646     1693     1746
GP2M                 #define, value: R5, line:       338       1492     1608     1695
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945     1005     1007     1028
                                                                     1031     1048     1055     1115
                                                                     1117     1138     1141     1158
                                                                     1165     1228     1231     1234
                                                                     1259     1263     1267     1344
                                                                     1347     1350     1375     1379
                                                                     1383     1476     1478     1507
                                                                     1510     1530     1532     1559
                                                                     1562     1592     1594     1622
                                                                     1625     1646     1653     1679
                                                                     1681     1710     1713     1733
                                                                     1735     1762     1765
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947      987      999     1033
                                                                     1097     1109     1143     1448
                                                                     1470     1512     1524     1564
                                                                     1586     1627     1673     1715
                                                                     1727     1767
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945     1005
                                                                     1005     1007     1007     1028
                                                                     1028     1031     1031     1048
                                                                     1048     1055     1055     1115
                                                                     1115     1117     1117     1138
                                                                     1138     1141     1141     1158
                                                                     1158     1165     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1259     1263
                                                                     1263     1267     1267     1344
                                                                     1344     1347     1347     1350
                                                                     1350     1375     1375     1379
                                                                     1379     1383     1383     1476
                                                                     1476     1478     1478     1507
                                                                     1507     1510     1510     1530
                                                                     1530     1532     1532     1559
                                                                     1559     1562     1562     1592
                                                                     1592     1594     1594     1622
                                                                     1622     1625     1625     1646
                                                                     1646     1653     1653     1679
                                                                     1679     1681     1681     1710
                                                                     1710     1713     1713     1733
                                                                     1733     1735     1735     1762
                                                                     1762     1765     1765
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
RCODE               CODE  	REL 
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
?MOVE_LONG16_XDATA_CODEABS    CONST EXT [004] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG16_XDATA_XDATAABS    CONST EXT [002] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_CODEABS    CONST EXT [005] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_IDATAABS    CONST EXT [000] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_PDATAABS    CONST EXT [unref] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_IDATA_XDATAABS    CONST EXT [001] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG8_XDATA_IDATAABS    CONST EXT [003] UNTYP. __EXTERNS  Solved Extern 
?MOVE_LONG_GPTR_GPTRREL    CONST PUB UNTYP.       RCODE      0 
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
CFA_SP              REL    CONST UNTYP.           RCODE      Not solved 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPH0                REL    CONST UNTYP.           RCODE      Not solved 
DPL                 ABS    CONST UNTYP.           ASEG       82 
DPL0                REL    CONST UNTYP.           RCODE      Not solved 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
NOT_IDATA_CODE      REL    CONST UNTYP.           RCODE      A7 
NOT_IDATA_IDATA     REL    CONST UNTYP.           RCODE      6F 
NOT_IDATA_SRC       REL    CONST UNTYP.           RCODE      70 
NOT_IDATA_XDATA     REL    CONST UNTYP.           RCODE      3A 
NOT_XDATA_CODE      REL    CONST UNTYP.           RCODE      8C 
NOT_XDATA_IDATA     REL    CONST UNTYP.           RCODE      5A 
NOT_XDATA_SRC       REL    CONST UNTYP.           RCODE      3B 
NOT_XDATA_XDATA     REL    CONST UNTYP.           RCODE      1F 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 
block               REL    CONST UNTYP.           RCODE      Not solved 
cfi_OFFSET          ABS    VAR UNTYP.             RCODE      0 
cfi_common          REL    CONST UNTYP.           RCODE      Not solved 
endblock            REL    CONST UNTYP.           RCODE      Not solved 
frame               REL    CONST UNTYP.           RCODE      Not solved 
nofunction          REL    CONST UNTYP.           RCODE      Not solved 
samevalue           REL    CONST UNTYP.           RCODE      Not solved 
undefined           REL    CONST UNTYP.           RCODE      Not solved 
using               REL    CONST UNTYP.           RCODE      Not solved 


##############################
#          CRC:4145          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 168         #
##############################





EOF                  DELIMITER 
\n                   DELIMITER 
                     DELIMITER 
!                    OPERATOR 
!=                   OPERATOR 
%                    OPERATOR 
&                    OPERATOR 
&&                   OPERATOR 
(                    OPERATOR 
(                    DELIMITER 
)                    OPERATOR 
)                    DELIMITER 
*                    OPERATOR 
+                    OPERATOR 
,                    DELIMITER 
-                    OPERATOR 
/                    OPERATOR 
:                    DELIMITER 
;                    DELIMITER 
;                    Target symbol: 23 
<                    OPERATOR 
<<                   OPERATOR 
<=                   OPERATOR 
<>                   OPERATOR 
=                    OPERATOR 
=                    DIRECTIVE 
==                   OPERATOR 
>                    OPERATOR 
>=                   OPERATOR 
>>                   OPERATOR 
?XSP                 Target symbol: 0 
@                    DELIMITER 
A                    REGISTER 
AB                   REGISTER 
ACALL                MNEMONIC 
ADD                  MNEMONIC 
ADDC                 MNEMONIC 
AJMP                 MNEMONIC 
ALIAS                DIRECTIVE 
ALIGN                DIRECTIVE 
ALIGNRAM             DIRECTIVE 
AND                  OPERATOR 
ANL                  MNEMONIC 
ARGFRAME             DIRECTIVE 
ASEG                 DIRECTIVE 
ASEGN                DIRECTIVE 
ASSIGN               DIRECTIVE 
B                    REGISTER 
BINAND               OPERATOR 
BINNOT               OPERATOR 
BINOR                OPERATOR 
BINXOR               OPERATOR 
BIT                  SEGMENT TYPE 
BITAND               OPERATOR 
BITNOT               OPERATOR 
BITOR                OPERATOR 
BITXOR               OPERATOR 
BREAK                DIRECTIVE 
BYTE                 Target symbol: 524288 
BYTE1                OPERATOR 
BYTE2                OPERATOR 
BYTE3                OPERATOR 
BYTE4                OPERATOR 
C                    Target symbol: 1 
CALL                 MNEMONIC 
CASE                 DIRECTIVE 
CASEOFF              DIRECTIVE 
CASEON               DIRECTIVE 
CFA_ESP16            Target symbol: 0 
CFA_ESP24            Target symbol: 0 
CFA_MACHINE          #define, value: CFA_SP, line:      37:3      516:3    517:3    519:3    519:3
                                                                    519:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3      308      308
                                                                      308      309      309      309
                                                                      310      310      310      311
                                                                      311      311      313      313
                                                                      313      314      314      314
                                                                      315      315      315      316
                                                                      316      316      318      318
                                                                      318      319      319      319
                                                                      321      321      321      322
                                                                      322      322      323      323
                                                                      323      324      324      324
                                                                      394      394      396      396
                                                                      405      405      415      424
                                                                      427      444      444      447
                                                                      447      457      461      476
                                                                      476      478      478      487
                                                                      487      498      507      510
                                                                      573      573      575      575
                                                                      584      584      594      603
                                                                      606      623      623      626
                                                                      626      636      640      656
                                                                      656      658      658      667
                                                                      667      676      685      688
                                                                      748      748      750      750
                                                                      762      762      765      765
                                                                      768      768      779      783
                                                                      787      800      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      856      860
                                                                      869      872      889      889
                                                                      891      891      903      903
                                                                      906      906      909      909
                                                                      921      925      929      942
                                                                      945     1005     1005     1007
                                                                     1007     1028     1031     1048
                                                                     1048     1055     1115     1115
                                                                     1117     1117     1138     1141
                                                                     1158     1158     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1263     1267
                                                                     1344     1344     1347     1347
                                                                     1350     1350     1375     1379
                                                                     1383     1476     1476     1478
                                                                     1478     1507     1510     1530
                                                                     1530     1532     1532     1559
                                                                     1562     1592     1592     1594
                                                                     1594     1622     1625     1646
                                                                     1646     1653     1679     1679
                                                                     1681     1681     1710     1713
                                                                     1733     1733     1735     1735
                                                                     1762     1765
CFA_PSP24            Target symbol: 0 
CFA_SPP              #define, value: CFA_PSP16, line:      21:3  
CFA_SPX              #define, value: CFA_XSP16, line:      23:3  
CFA_XSP24            Target symbol: 0 
CFI                  DIRECTIVE 
CFI_COMMON_DECLARE_CORE_COMMON MACRO 
CFI_COMMON_DECLARE_SAME_VALUE_FOR_ALL_REGISTERS
                     MACRO 
CFI_COMMON_DECLARE_UNDEFINED_FOR_ALL_DPTR_REGISTERS
                     MACRO 
CFI_NAMES_DECLARE_REGISTER_RESOURCES
                     MACRO 
CFI_NAMES_DECLARE_RETURN_RESOURCE
                     MACRO 
CFI_NAMES_DECLARE_STACKS MACRO 
CFI_banked_com       MACRO 
CFI_banked_nam       MACRO 
CFI_com              MACRO 
CFI_nam              MACRO 
CFI_pdata_enter_com  MACRO 
CFI_pdata_enter_nam  MACRO 
CJNE                 MNEMONIC 
CLR                  MNEMONIC 
CODE                 SEGMENT TYPE 
CODE                 DIRECTIVE 
COL                  DIRECTIVE 
COMMON               DIRECTIVE 
CONST                SEGMENT TYPE 
CONTINUE             DIRECTIVE 
CPL                  MNEMONIC 
CY                   Target symbol: 1 
DA                   MNEMONIC 
DATA                 SEGMENT TYPE 
DATA                 DIRECTIVE 
DATE                 OPERATOR 
DB                   DIRECTIVE 
DC16                 DIRECTIVE 
DC24                 DIRECTIVE 
DC32                 DIRECTIVE 
DC8                  DIRECTIVE 
DD                   DIRECTIVE 
DEC                  MNEMONIC 
DEFAULT              DIRECTIVE 
DEFINE               DIRECTIVE 
DIV                  MNEMONIC 
DJNZ                 MNEMONIC 
DPTR                 REGISTER 
DPTR_MASK_SYMBOLS    MACRO 
DS                   DIRECTIVE 
DS16                 DIRECTIVE 
DS24                 DIRECTIVE 
DS32                 DIRECTIVE 
DS8                  DIRECTIVE 
DT                   DIRECTIVE 
DW                   DIRECTIVE 
ELSE                 DIRECTIVE 
ELSEIF               DIRECTIVE 
ELSEIFS              DIRECTIVE 
ELSES                DIRECTIVE 
END                  DIRECTIVE 
ENDF                 DIRECTIVE 
ENDIF                DIRECTIVE 
ENDIFS               DIRECTIVE 
ENDM                 DIRECTIVE 
ENDMAC               DIRECTIVE 
ENDMOD               DIRECTIVE 
ENDR                 DIRECTIVE 
ENDS                 DIRECTIVE 
ENDW                 DIRECTIVE 
EQ                   OPERATOR 
EQU                  DIRECTIVE 
ESP16                Target symbol: 0 
ESP24                Target symbol: 0 
EVEN                 DIRECTIVE 
EXITM                DIRECTIVE 
EXPORT               DIRECTIVE 
EXTERN               DIRECTIVE 
EXTERNS_FOR_ALL_DPTR_SYMBOLS MACRO 
EXTRN                DIRECTIVE 
FAR                  SEGMENT TYPE 
FARCODE              SEGMENT TYPE 
FARCONST             SEGMENT TYPE 
FARDATA              SEGMENT TYPE 
FOR                  DIRECTIVE 
FUNCALL              DIRECTIVE 
FUNCTION             DIRECTIVE 
GE                   OPERATOR 
GP1H                 #define, value: R3, line:       335        383      437      562      616
                                                                      739      813      996     1041
                                                                     1106     1151     1221     1273
                                                                     1337     1389     1460     1500
                                                                     1552     1581     1615     1656
                                                                     1703     1755
GP1L                 #define, value: R1, line:       333        407      449      451      490
                                                                      586      628      630      669
                                                                      770      843      912     1016
                                                                     1126     1242     1279     1358
                                                                     1394     1487     1491     1540
                                                                     1546     1602     1607     1641
                                                                     1654     1689     1694     1743
                                                                     1749
GP1M                 #define, value: R2, line:       334        408      491      587      670
                                                                      771      913     1017     1127
                                                                     1244     1360     1488     1493
                                                                     1541     1551     1610     1655
                                                                     1690     1696     1744     1754
GP2H                 #define, value: R6, line:       339       1461     1520     1582     1635
                                                                     1669     1723
GP2L                 #define, value: R4, line:       337       1490     1543     1605     1644
                                                                     1646     1693     1746
GP2M                 #define, value: R5, line:       338       1492     1608     1695
GT                   OPERATOR 
HIGH                 OPERATOR 
HUGE                 SEGMENT TYPE 
HUGECODE             SEGMENT TYPE 
HUGECONST            SEGMENT TYPE 
HUGEDATA             SEGMENT TYPE 
HWRD                 OPERATOR 
IDATA                SEGMENT TYPE 
IF                   DIRECTIVE 
IFS                  DIRECTIVE 
IMPORT               DIRECTIVE 
INC                  MNEMONIC 
JB                   MNEMONIC 
JBC                  MNEMONIC 
JC                   MNEMONIC 
JMP                  MNEMONIC 
JNB                  MNEMONIC 
JNC                  MNEMONIC 
JNZ                  MNEMONIC 
JZ                   MNEMONIC 
LCALL                MNEMONIC 
LE                   OPERATOR 
LIBRARY              DIRECTIVE 
LIMIT                DIRECTIVE 
LJMP                 MNEMONIC 
LOC                  OPERATOR 
LOCAL                DIRECTIVE 
LOCFRAME             DIRECTIVE 
LONG                 Target symbol: 2097152 
LOW                  OPERATOR 
LSTCND               DIRECTIVE 
LSTCOD               DIRECTIVE 
LSTCYC               DIRECTIVE 
LSTEXP               DIRECTIVE 
LSTMAC               DIRECTIVE 
LSTOUT               DIRECTIVE 
LSTPAG               DIRECTIVE 
LSTREP               DIRECTIVE 
LSTSAS               DIRECTIVE 
LSTXRF               DIRECTIVE 
LT                   OPERATOR 
LWRD                 OPERATOR 
MACHINE_MEM          #define, value: DATA, line:      39:3      516:3    517:3
MACHINE_SP           #define, value: SP, line:      38:3      516:3    516:3    517:3    517:3
                                                                    519:3    520:3    521:3      308
                                                                      308      309      309      310
                                                                      310      311      311      313
                                                                      313      314      314      315
                                                                      315      316      316      318
                                                                      318      319      319      321
                                                                      321      322      322      323
                                                                      323      324      324      394
                                                                      396      405      415      424
                                                                      427      444      447      457
                                                                      461      476      478      487
                                                                      498      507      510      573
                                                                      575      584      594      603
                                                                      606      623      626      636
                                                                      640      656      658      667
                                                                      676      685      688      748
                                                                      750      762      765      768
                                                                      779      783      787      800
                                                                      803      824      826      835
                                                                      838      841      852      856
                                                                      860      869      872      889
                                                                      891      903      906      909
                                                                      921      925      929      942
                                                                      945     1005     1007     1028
                                                                     1031     1048     1055     1115
                                                                     1117     1138     1141     1158
                                                                     1165     1228     1231     1234
                                                                     1259     1263     1267     1344
                                                                     1347     1350     1375     1379
                                                                     1383     1476     1478     1507
                                                                     1510     1530     1532     1559
                                                                     1562     1592     1594     1622
                                                                     1625     1646     1653     1679
                                                                     1681     1710     1713     1733
                                                                     1735     1762     1765
MACRO                DIRECTIVE 
MOD                  OPERATOR 
MODULE               DIRECTIVE 
MOV                  MNEMONIC 
MOVC                 MNEMONIC 
MOVX                 MNEMONIC 
MUL                  MNEMONIC 
NAME                 DIRECTIVE 
NE                   OPERATOR 
NEAR                 SEGMENT TYPE 
NEARCODE             SEGMENT TYPE 
NEARCONST            SEGMENT TYPE 
NEARDATA             SEGMENT TYPE 
NOP                  MNEMONIC 
NOROOT               SEGMENT TYPE 
NOT                  OPERATOR 
NPAGE                SEGMENT TYPE 
ODD                  DIRECTIVE 
OR                   OPERATOR 
ORG                  DIRECTIVE 
ORL                  MNEMONIC 
PAGE                 DIRECTIVE 
PAGSIZ               DIRECTIVE 
PC                   REGISTER 
POP                  MNEMONIC 
PRM                  OPERATOR 
PROGRAM              DIRECTIVE 
PSP24                Target symbol: 0 
PUBLIC               DIRECTIVE 
PUBWEAK              DIRECTIVE 
PUSH                 MNEMONIC 
R0                   REGISTER 
R1                   REGISTER 
R2                   REGISTER 
R3                   REGISTER 
R4                   REGISTER 
R5                   REGISTER 
R6                   REGISTER 
R7                   REGISTER 
RADIX                DIRECTIVE 
READ                 Target symbol: 2048 
REGISTER             SEGMENT TYPE 
REORDER              SEGMENT TYPE 
REPEAT               DIRECTIVE 
REPT                 DIRECTIVE 
REPTC                DIRECTIVE 
REPTI                DIRECTIVE 
REQUIRE              DIRECTIVE 
RET                  MNEMONIC 
RETI                 MNEMONIC 
RL                   MNEMONIC 
RLC                  MNEMONIC 
ROOT                 SEGMENT TYPE 
RR                   MNEMONIC 
RRC                  MNEMONIC 
RSEG                 DIRECTIVE 
RTMODEL              DIRECTIVE 
S                    PREFIX 
SET                  DIRECTIVE 
SETB                 MNEMONIC 
SFB                  OPERATOR 
SFE                  OPERATOR 
SFRTYPE              DIRECTIVE 
SHL                  OPERATOR 
SHR                  OPERATOR 
SIZEOF               OPERATOR 
SIZE_H               #define, value: R7, line:       341  
SJMP                 MNEMONIC 
SORT                 SEGMENT TYPE 
SPP                  #define, value: PSP16, line:      22:3      521:3
SPX                  #define, value: XSP16, line:      24:3  
STACK                DIRECTIVE 
SUBB                 MNEMONIC 
SWAP                 MNEMONIC 
SWITCH               DIRECTIVE 
SYMBOL               DIRECTIVE 
UGT                  OPERATOR 
ULT                  OPERATOR 
UNTIL                DIRECTIVE 
UNTYPED              SEGMENT TYPE 
WHILE                DIRECTIVE 
WORD                 Target symbol: 1048576 
WRITE                Target symbol: 4096 
XCH                  MNEMONIC 
XCHD                 MNEMONIC 
XDATA                SEGMENT TYPE 
XOR                  OPERATOR 
XRL                  MNEMONIC 
XSP24                Target symbol: 0 
XSP_H                #define, value: ?XSP+1, line:      24:1  
XSP_L                #define, value: ?XSP, line:      23:1  
ZPAGE                SEGMENT TYPE 
[                    DELIMITER 
]                    DELIMITER 
^                    OPERATOR 
_LOW_IMAGE_          #define, value: 1, line:         0  
__BUILD_NUMBER__     #define,            line:         0  
__CALLING_CONVENTION__ #define, value: 4, line:         0  
__CC_DO__            #define, value: 0, line:      45:2  
__CC_ER__            #define, value: 5, line:      50:2  
__CC_IO__            #define, value: 1, line:      46:2  
__CC_IR__            #define, value: 2, line:      47:2  
__CC_PR__            #define, value: 3, line:      48:2  
__CC_XR__            #define, value: 4, line:      49:2  
__CM_BANKED_EXT2__   #define, value: 4, line:      31:2  
__CM_BANKED__        #define, value: 2, line:      29:2  
__CM_FAR__           #define, value: 3, line:      30:2       42:3    516:3    519:3
__CM_NEAR__          #define, value: 1, line:      28:2  
__CM_TINY__          #define, value: 0, line:      27:2  
__CODE_MODEL__       #define, value: 1, line:         0       42:3    516:3    519:3
__CORE_EXTENDED1__   #define, value: 2, line:      21:2       67:2    521:3
__CORE_EXTENDED2__   #define, value: 3, line:      22:2  
__CORE_PLAIN__       #define, value: 1, line:      20:2  
__CORE_TINY__        #define, value: 0, line:      19:2  
__CORE__             #define, value: 1, line:         0       67:2    521:3
__DATA_MODEL__       #define, value: 2, line:         0  
__DATE__             #define,            line:         0  
__DM_FAR__           #define, value: 4, line:      40:2  
__DM_GENERIC__       #define, value: 3, line:      39:2  
__DM_LARGE__         #define, value: 2, line:      38:2  
__DM_SMALL__         #define, value: 1, line:      37:2  
__DM_TINY__          #define, value: 0, line:      36:2  
__DPTR_SHADOWED__    Target symbol: 0 
__EXTENDED_STACK__   Target symbol: 0 
__FILE__             #define,            line:         0  
__IAR_SYSTEMS_ASM    #define,            line:         0  
__IAR_SYSTEMS_ASM__  #define,            line:         0  
__INC_DPSEL_SELECT__ Target symbol: 0 
__LINE__             #define,            line:         0  
__NUMBER_OF_DPTRS__  #define, value: 1, line:         0       56:2    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    516:3    516:3    516:3    516:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    517:3
                                                                    517:3    517:3    517:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    519:3    519:3
                                                                    519:3    519:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    520:3    520:3    520:3
                                                                    520:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                    521:3    521:3    521:3    521:3
                                                                     97:1      308      309      310
                                                                      311      313      314      315
                                                                      316      318      319      321
                                                                      322      323      324      326
                                                                      374      388      429      470
                                                                      512      555      567      608
                                                                      650      690      732      742
                                                                      805      818      874      883
                                                                      947      987      999     1033
                                                                     1097     1109     1143     1448
                                                                     1470     1512     1524     1564
                                                                     1586     1627     1673     1715
                                                                     1727     1767
__SIZE_OF_RETADDR__  #define, value: 2, line:      45:3      519:3    521:3    521:3      308
                                                                      308      308      308      309
                                                                      309      309      309      310
                                                                      310      310      310      311
                                                                      311      311      311      313
                                                                      313      313      313      314
                                                                      314      314      314      315
                                                                      315      315      315      316
                                                                      316      316      316      318
                                                                      318      318      318      319
                                                                      319      319      319      321
                                                                      321      321      321      322
                                                                      322      322      322      323
                                                                      323      323      323      324
                                                                      324      324      324      394
                                                                      394      396      396      405
                                                                      405      415      415      424
                                                                      424      427      427      444
                                                                      444      447      447      457
                                                                      457      461      461      476
                                                                      476      478      478      487
                                                                      487      498      498      507
                                                                      507      510      510      573
                                                                      573      575      575      584
                                                                      584      594      594      603
                                                                      603      606      606      623
                                                                      623      626      626      636
                                                                      636      640      640      656
                                                                      656      658      658      667
                                                                      667      676      676      685
                                                                      685      688      688      748
                                                                      748      750      750      762
                                                                      762      765      765      768
                                                                      768      779      779      783
                                                                      783      787      787      800
                                                                      800      803      803      824
                                                                      824      826      826      835
                                                                      835      838      838      841
                                                                      841      852      852      856
                                                                      856      860      860      869
                                                                      869      872      872      889
                                                                      889      891      891      903
                                                                      903      906      906      909
                                                                      909      921      921      925
                                                                      925      929      929      942
                                                                      942      945      945     1005
                                                                     1005     1007     1007     1028
                                                                     1028     1031     1031     1048
                                                                     1048     1055     1055     1115
                                                                     1115     1117     1117     1138
                                                                     1138     1141     1141     1158
                                                                     1158     1165     1165     1228
                                                                     1228     1231     1231     1234
                                                                     1234     1259     1259     1263
                                                                     1263     1267     1267     1344
                                                                     1344     1347     1347     1350
                                                                     1350     1375     1375     1379
                                                                     1379     1383     1383     1476
                                                                     1476     1478     1478     1507
                                                                     1507     1510     1510     1530
                                                                     1530     1532     1532     1559
                                                                     1559     1562     1562     1592
                                                                     1592     1594     1594     1622
                                                                     1622     1625     1625     1646
                                                                     1646     1653     1653     1679
                                                                     1679     1681     1681     1710
                                                                     1710     1713     1713     1733
                                                                     1733     1735     1735     1762
                                                                     1762     1765     1765
__SUBVERSION__       #define,            line:         0  
__TID__              #define,            line:         0  
__TIME__             #define,            line:         0  
__VER__              #define,            line:         0  
__XOR_DPSEL_SELECT__ Target symbol: 0 
bytes                Target symbol: 0 
cfi_DATA_BLOCK_end   MACRO 
cfi_DATA_BLOCK_start MACRO 
cfi_PUSH_ISTACK_RET_DEFS_CONST_DEPEND
                     MACRO 
cfi_PUSH_ISTACK_RET_DEFS_REG_DEPEND
                     MACRO 
cfi_PUSH_REG         MACRO 
cfi_REMEMBER_STATE   MACRO 
cfi_RESTORE_STATE    MACRO 
cfi_SET_REG          MACRO 
cfi_STACK_ALLOC      MACRO 
cfi_STACK_DEALL      MACRO 
chip                 #define, value: 2510, line:         0  
constant             Target symbol: 0 
copy_data8           MACRO 
copy_large_large     MACRO 
copy_large_large_2dptr MACRO 
define               PREPROCESSOR DIRECTIVE 
defined              Target symbol: 0 
destReg              Target symbol: 0 
dst                  Target symbol: 0 
dstInstr             Target symbol: 0 
elif                 PREPROCESSOR DIRECTIVE 
else                 PREPROCESSOR DIRECTIVE 
endif                PREPROCESSOR DIRECTIVE 
error                PREPROCESSOR DIRECTIVE 
if                   PREPROCESSOR DIRECTIVE 
ifdef                PREPROCESSOR DIRECTIVE 
ifndef               PREPROCESSOR DIRECTIVE 
include              PREPROCESSOR DIRECTIVE 
line                 PREPROCESSOR DIRECTIVE 
message              PREPROCESSOR DIRECTIVE 
name                 Target symbol: 0 
no                   Target symbol: 0 
pragma               PREPROCESSOR DIRECTIVE 
reg                  Target symbol: 0 
reg_from             Target symbol: 0 
reg_to               Target symbol: 0 
src                  Target symbol: 0 
srcInstr             Target symbol: 0 
srcReg               Target symbol: 0 
undef                PREPROCESSOR DIRECTIVE 
|                    OPERATOR 
||                   OPERATOR 
~                    OPERATOR 

Segment             Type 	Mode
----------------------------------------
__EXTERNS           CODE  	ABS Org:0 

Label               Mode   Type                   Segment    Value/Offset
------------------------------------------------------------------------------
AC                  ABS    CONST UNTYP.           ASEG       D6 
ACC                 ABS    CONST UNTYP.           ASEG       E0 
B                   ABS    CONST UNTYP.           ASEG       F0 
DPH                 ABS    CONST UNTYP.           ASEG       83 
DPL                 ABS    CONST UNTYP.           ASEG       82 
EXTI0               ABS    CONST UNTYP.           ASEG       3 
EXTI1               ABS    CONST UNTYP.           ASEG       13 
F0                  ABS    CONST UNTYP.           ASEG       D5 
OV                  ABS    CONST UNTYP.           ASEG       D2 
P                   ABS    CONST UNTYP.           ASEG       D0 
PSW                 ABS    CONST UNTYP.           ASEG       D0 
RESET               ABS    CONST UNTYP.           ASEG       0 
RS0                 ABS    CONST UNTYP.           ASEG       D3 
RS1                 ABS    CONST UNTYP.           ASEG       D4 
SINT                ABS    CONST UNTYP.           ASEG       23 
SP                  ABS    CONST UNTYP.           ASEG       81 
TID                 ABS    CONST UNTYP.           ASEG       2000 
TIMER0              ABS    CONST UNTYP.           ASEG       B 
TIMER1              ABS    CONST UNTYP.           ASEG       1B 


##############################
#          CRC:4145          #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 168         #
#     Modules:        22     #
#     Total errors:   0      #
#     Total warnings: 0      #
##############################



