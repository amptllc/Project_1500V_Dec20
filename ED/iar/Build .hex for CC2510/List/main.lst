###############################################################################
#                                                                             #
# IAR 8051 C/C++ Compiler V7.30B/W32                    02/Apr/2018  11:06:41 #
# Copyright 2004-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\Project_1500V_dec20\ED\code\AndStackED\source\m #
#                          ain.c                                              #
#    Command line       =  E:\Project_1500V_dec20\ED\code\AndStackED\source\m #
#                          ain.c -D NDEBUG -D chip=2510 -D LOWER_IMAGE -D     #
#                          MidString -D MIDSTRING -lCN                        #
#                          "E:\Project_1500V_dec20\ED\iar\Build .hex for      #
#                          CC2510\List\" -lA "E:\Project_1500V_dec20\ED\iar\B #
#                          uild .hex for CC2510\List\" -o                     #
#                          "E:\Project_1500V_dec20\ED\iar\Build .hex for      #
#                          CC2510\Obj\" -e -z9 --core=plain --dptr=16,1       #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 32 -I     #
#                          E:\Project_1500V_dec20\ED\iar\..\CODE\AndStackED\I #
#                          NCLUDE\ -I E:\Project_1500V_dec20\ED\iar\..\CODE\L #
#                          IBRARY\HAL\INCLUDE\ -I E:\Project_1500V_dec20\ED\i #
#                          ar\..\CODE\LIBRARY\HAL_BUI\INCLUDE\ -I             #
#                          C:\IARSystems-CD-730B\8051\INC\                    #
#    List file          =  E:\Project_1500V_dec20\ED\iar\Build .hex for       #
#                          CC2510\List\main.lst                               #
#    Object file        =  E:\Project_1500V_dec20\ED\iar\Build .hex for       #
#                          CC2510\Obj\main.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\Project_1500V_dec20\ED\code\AndStackED\source\main.c
      1          /*==== DECLARATION CONTROL ===================================================*/
      2          /*==== INCLUDES ==============================================================*/
      3          
      4          #include "hal_main.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIM
   \                     RFIM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr FWT
   \                     FWT:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xad
   \   unsigned char volatile __sfr FADDRH
   \                     FADDRH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xae
   \   unsigned char volatile __sfr FCTL
   \                     FCTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbc
   \   unsigned char volatile __sfr RNDL
   \                     RNDL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbd
   \   unsigned char volatile __sfr RNDH
   \                     RNDH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEP
   \                     SLEEP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCON
   \                     CLKCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcb
   \   unsigned char volatile __sfr T3CTL
   \                     T3CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcc
   \   unsigned char volatile __sfr T3CCTL0
   \                     T3CCTL0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcd
   \   unsigned char volatile __sfr T3CC0
   \                     T3CC0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xce
   \   unsigned char volatile __sfr T3CCTL1
   \                     T3CCTL1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xcf
   \   unsigned char volatile __sfr T3CC1
   \                     T3CC1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xda
   \   unsigned char volatile __sfr T1CC0L
   \                     T1CC0L:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xdb
   \   unsigned char volatile __sfr T1CC0H
   \                     T1CC0H:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe2
   \   unsigned char volatile __sfr T1CNTL
   \                     T1CNTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe3
   \   unsigned char volatile __sfr T1CNTH
   \                     T1CNTH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe4
   \   unsigned char volatile __sfr T1CTL
   \                     T1CTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe5
   \   unsigned char volatile __sfr T1CCTL0
   \                     T1CCTL0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIF
   \                     RFIF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      5          #include "main.h"
      6          #include "parameter_block.h"
      7          #include "commands.h"
      8          //#include <stdio.h>
      9          //#include <stdlib.h>
     10          //#include <string.h>
     11          
     12          #define MKS_IN_TICK     500
     13          #define TICKS_IN_SEC    2000
     14          #define TICKS_IN_MS     2
     15          /*
     16          #define MKS_IN_TICK     200
     17          #define TICKS_IN_SEC    5000
     18          #define TICKS_IN_MS     5
     19          */
     20          //UINT32  _freq         = FREQUENCY_FCC_CC2511;

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          INT16  _slot         = ( 40 * TICKS_IN_MS );
   \                     _slot:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _slot>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     22          INT16  _join_slot    = ( 24 * TICKS_IN_MS );
   \                     _join_slot:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _join_slot>`
   \   000002                REQUIRE __INIT_XDATA_I
     23          //#define  _slot         ( 40 * TICKS_IN_MS )
     24          //#define  _join_slot    ( 24 * TICKS_IN_MS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
     25          INT16  _gw_delay     = ( 30 * TICKS_IN_MS );
   \                     _gw_delay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _gw_delay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     26          INT16  _loop_delay   = ( 40 * TICKS_IN_MS );
   \                     _loop_delay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for _loop_delay>`
   \   000002                REQUIRE __INIT_XDATA_I
     27          //#define  _gw_delay      ( 30 * TICKS_IN_MS )
     28          //#define  _loop_delay     ( 40 * TICKS_IN_MS )

   \                                 In  segment XDATA_I, align 1, keep-with-next
     29          BYTE    _datarate     = DATA_RATE_4_CC2511;
   \                     _datarate:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for _datarate>`
   \   000001                REQUIRE __INIT_XDATA_I
     30          
     31          //#define _mppCycle            ( TICKS_IN_SEC / 16 ) 
     32          #define _mppCycle            ( 60 * TICKS_IN_MS ) 
     33          #define _dogFeeding          ( TICKS_IN_SEC / 16 )
     34          #define _adjustFrequency     ( (UINT16)TICKS_IN_SEC * 2 )
     35          #define _firstAdcMeasurement ( TICKS_IN_SEC / 50 )
     36          //#define _adcMeasurement      ( TICKS_IN_SEC / 100 )
     37          #define _adcMeasurement      ( 4 * TICKS_IN_MS )
     38          #define _calibrationDelay    ( TICKS_IN_MS  )
     39          
     40          //void configureAdcs(void);
     41          
     42          //void feedTheDog(void);
     43          //BYTE clearAndHop( BYTE p );
     44          void tickWait(BYTE wait);
     45          void rc(void);
     46          void prepareData(void);
     47          void sendData(BYTE *buffer, BOOL is500 );
     48          void armAdcs(void);
     49          void readNextValue(void);
     50          void parseGWPackage(void);
     51          //void calibrate(void);
     52          void computeADCs(BOOL timeout, BOOL accumulateEnergy);
     53          void prepareJoinRequest(void);
     54          void prepareScaling(void);
     55          //void prepareFlashCheck(void);
     56          void setup500( BOOL flag );
     57          BYTE *nextSlot(void);
     58          void switchTo255(void);
     59          
     60          void parseCommands(BYTE l);
     61          void setByte( BYTE reg, BYTE val );
     62          
     63          extern void flashCallback(void);
     64          extern void setup_hopper(BYTE curch);
     65          extern void hop(void);
     66          
     67          extern void wait_aes(void);
     68          extern void load(const unsigned char what, char *ptr);
     69          extern void code(    unsigned char what, unsigned char size,  char *from, char *to );
     70          //extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, UINT16 len);
     71          extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, BYTE len);
     72          //extern void writeTheLatest(BYTE *ptr, BYTE len);
     73          extern BOOL readTheLatest( BYTE *ptr, BYTE len);
     74          
     75          //#ifdef MidString
     76          //void compute98(void);
     77          //#endif
     78          
     79          #define loadKey( key )                  { load( 0x04, key );     wait_aes(); }
     80          #define loadIV(  iv )                   { load( 0x06, iv  );     wait_aes(); }
     81          #define encode( size,  from, to )       code( 0x00, size, from, to );
     82          #define decode( size,  from, to )       code( 0x02, size, from, to );
     83          
     84          // must be even

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          ParameterBlock page;
   \                     page:
   \   000000                DS 242
   \   0000F2                REQUIRE __INIT_XDATA_Z
     86          //float energy       = 0.0;
     87          //float deltaEnergy  = 0.0;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          BYTE *base_ptr = NULL;
   \                     base_ptr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     89          
     90          //#define PAGESIZE 240
     91          #define PAGESIZE 242
     92          #define PAGEADDR 0x5C00
     93          
     94          //#define ENERGY_WRITE_LIMIT   ((BYTE *) (PAGEADDR + 0x3F0) )
     95          #ifdef MidString 
     96              #define KE (1E-3*20.0*1E-3*0.125 / 3600.0)
     97          #else
     98              #define KE (1E-3*2.0*1E-3*0.125  / 3600.0)
     99          #endif

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          BYTE  search_stat = 2;
   \                     search_stat:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for search_stat>`
   \   000001                REQUIRE __INIT_XDATA_I
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          float invVref0 = 0;
   \                     invVref0:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          INT8 theRealOffset  = 0;
   \                     theRealOffset:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          /*==== PUBLIC FUNCTIONS ======================================================*/
    106          #define BUFFER_SIZE 8
    107          #define BUFFER_MASK 0x7    
    108          #define N_CHANNELS  9
    109          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          UINT16 adcBuf  [ N_CHANNELS ][ BUFFER_SIZE    ];
   \                     adcBuf:
   \   000000                DS 144
   \   000090                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          INT32  adcs[     N_CHANNELS ];
   \                     adcs:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          UINT16 adcs16[   N_CHANNELS ];
   \                     adcs16:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          UINT16 adcsTemp[ N_CHANNELS ];
   \                     adcsTemp:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          BYTE tempAdcsCount = 0;
   \                     tempAdcsCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          
    117          extern BYTE mdm_rate1[6];
    118          
    119          UINT16            

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120                 ticks2ProcessCmd = 0,       
   \                     ticks2ProcessCmd:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121                 cmdCount = 0,
   \                     cmdCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    122                 lastCycle   = (40 * TICKS_IN_MS * 21),
   \                     lastCycle:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for lastCycle>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123                 cyclesTo500 = 120, cyclesTo10 = 220, cyclesToStep500Channel = 20, cycles2Step10Channel = 30,
   \                     cyclesTo500:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cyclesTo500>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cyclesTo10:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cyclesTo10>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cyclesToStep500Channel:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cyclesToStep500Channel>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cycles2Step10Channel:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cycles2Step10Channel>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    124                 cycles2SoftKick = 8, cycles2HardKick = 80, cyclesFromStart = 0;
   \                     cycles2SoftKick:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cycles2SoftKick>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     cycles2HardKick:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for cycles2HardKick>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     cyclesFromStart:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          UINT16 temperatureProtectionDelay, decodeDelay;
   \                     temperatureProtectionDelay:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     decodeDelay:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    126          
    127          // 06/27/2017 - Firmware Version now stored in code
    128          // Pattern is HHHHLLLL-A_BC, where HHHH is the FWVersionHigh value,
    129          // LLLL is the FWVersionLow value, A is FWSuffixOne value and
    130          // BC are the FWSuffixTwo and FWSuffixThree values.  The _ and the
    131          // - are implied.
    132          
    133          static const UINT16  FWVersionHigh = 7000; // LBC need to place official version in code
    134          static const UINT16  FWVersionLow = 11;
    135          static const BYTE    FWSuffixOne = '1';
    136          static const BYTE    FWSuffixTwo = 'B';
    137          static const BYTE    FWSuffixThree = 'B';
    138          
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          BYTE   curChannel = 0,  curBunch = 0,      
   \                     curChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     curBunch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141                 bufferCount = 0, adcCount = 0,  reportScaling = 0,       joinRequestWasSend = 0,
   \                     bufferCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     adcCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     reportScaling:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     joinRequestWasSend:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142                 resetReason,     theOC,         setOC,
   \                     resetReason:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     theOC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     setOC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143                 reportFlashCheck = 0,           calibrationRepeat = 4,   cyclesToHop = 0, 
   \                     reportFlashCheck:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     calibrationRepeat:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for calibrationRepeat>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     cyclesToHop:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144                 bunchCount = 0,                 got_gw = 0,              isOnTestStand = 0,
   \                     bunchCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     got_gw:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     isOnTestStand:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145                 ocShortCircuitLimit = 255;
   \                     ocShortCircuitLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ocShortCircuitLimit>`
   \   000001                REQUIRE __INIT_XDATA_I
    146          
    147          
    148          // Pointer to memory location tracking whether module can turn on,                                              
    149          // and the three acceptable values. Module turning off because of                                               
    150          // temperature is not tracked.  Pointer to memory location is                                                   
    151          // constant.                                                                                                    

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          BYTE * const ModuleOffRememberedPtr = ((BYTE *) 0xFFFD);
   \                     ModuleOffRememberedPtr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ModuleOffRememberedPtr>`
   \   000002                REQUIRE __INIT_XDATA_I
    153          static const BYTE ModuleStatusOff = 0xE7;
    154          static const BYTE ModuleStatusOffFetFailure = 0x7E;
    155          static const BYTE ModuleStatusCanTurnOn = 0x00;
    156          
    157          
    158          /* 12/29/2017 BEGIN Protection global variables */
    159          
    160          static const BYTE ModuleStatusOffProtection = 0x6A;
    161          static const BYTE ModuleStatusOffTemperature = 0xA6;
    162          
    163          static const BYTE NoProtectionsSetMask = 0x00;
    164          static const BYTE VoutLimitMask = 0x040;
    165          static const BYTE IoutLimitMask = 0x080;
    166          static const BYTE VoutAndIoutLimitMask = 0xC0;
    167          static const BYTE NotVoutAndIoutLimitMask = 0x3F;
    168          static const BYTE NotVoutAndIoutLimitNoCountDownMask = 0x3E;
    169          
    170          static const BYTE TemperatureModuleOffMask = 0x20;
    171          static const BYTE TemperatureSteppedDownMask = 0x10;
    172          static const BYTE TemperatureModuleOffAndSteppedDownMask = 0x30;
    173          static const BYTE NotTemperatureModuleOffAndSteppedDownMask = 0xCF;
    174          
    175          static const BYTE CountDownTimerActive = 0x01;
    176          static const BYTE CountDownTimerNotActive = 0xFE;
    177          
    178          /* variable to track protection settings */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          static BYTE ProtectionLimitsExceeded = 0x00;
   \                     ProtectionLimitsExceeded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          static const INT16 Volts_50 = 1666; /* 50 * 33.3333 as int16 */
    182          static const INT16 Amps_1 = 1000;
    183          
    184          /* 12/29/2017 END Protection global variables */
    185          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186          BOOL   enable2SendData  = FALSE,       txDisabled = FALSE,                    alignMPP = TRUE,
   \                     enable2SendData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     txDisabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     alignMPP:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for alignMPP>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187                 from_flash = FALSE,             /*zeroPackageWasNotReceived = FALSE,*/ turnOnFlag = FALSE,  isCalibrationPackage = FALSE,
   \                     from_flash:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     turnOnFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     isCalibrationPackage:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188                 was_listening = FALSE, rcgen = FALSE,
   \                     was_listening:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     rcgen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189                 ch255 = FALSE,                  packagePrepared = FALSE;//,                  real_cw_mode = FALSE;
   \                     ch255:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     packagePrepared:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    190          INT16 gnd_shift = -600;
   \                     gnd_shift:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for gnd_shift>`
   \   000002                REQUIRE __INIT_XDATA_I
    191          
    192          //UINT16 Vout98 = 0; 
    193          //INT16  Cur98  = 0;
    194          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          UINT32 utc = 0;
   \                     utc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          UINT16 ms  = 0;
   \                     ms:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    197          //UINT16 ticks2Prepare = 0;
    198          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    199          UINT32 utcLast = 0;
   \                     utcLast:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          UINT16 msLast = 0,  processingTime, pt;
   \                     msLast:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     processingTime:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     pt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    201          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          UINT16 mdmcfg4_cycles = 0;
   \                     mdmcfg4_cycles:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    203          
    204          // variables to control turning module on/ "track" FET failures                                             

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static BOOL fetFailure = FALSE; // static variable indicating if a FET failure recognized
   \                     fetFailure:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    206          BOOL checkForFETFailure = TRUE; // once FET failure recognized, no longer check unless restart
   \                     checkForFETFailure:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for checkForFETFailure>`
   \   000001                REQUIRE __INIT_XDATA_I
    207          // netValue made global so fetFailure condition can access/change reported "status"

   \                                 In  segment XDATA_I, align 1, keep-with-next
    208          static UINT16 netValue = MainNetValueStandard;
   \                     netValue:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for netValue>`
   \   000002                REQUIRE __INIT_XDATA_I
    209          
    210          static __xdata_rom const UINT16 cyclesDefaults[] = {180, 30, 3, 4, 8, 80};

   \                                 In  segment XDATA_ROM_C, align 1
    211          static __xdata_rom const BYTE default_pb[] = {
   \                     default_pb:
   \   000000   AAAA0000     DB 170, 170, 0, 0, 255, 255, 44, 118, 64, 2, 39, 68, 113, 170, 53, 186
   \            FFFF2C76
   \            40022744
   \            71AA35BA
   \   000010   D3BC633D     DB 211, 188, 99, 61, 145, 237, 28, 63, 0, 0, 72, 195, 0, 0, 28, 69, 149
   \            91ED1C3F
   \            000048C3
   \            00001C45
   \            95      
   \   000021   BFD63400     DB 191, 214, 52, 0, 0, 146, 66, 154, 153, 147, 65, 0, 192, 15, 197, 10
   \            0092429A
   \            99934100
   \            C00FC50A
   \   000031   D7854100     DB 215, 133, 65, 0, 0, 0, 0, 102, 102, 238, 64, 0, 0, 9, 196, 61, 10
   \            00000066
   \            66EE4000
   \            0009C43D
   \            0A      
   \   000042   85410000     DB 133, 65, 0, 0, 112, 194, 82, 184, 222, 62, 0, 64, 28, 68, 82, 187
   \            70C252B8
   \            DE3E0040
   \            1C4452BB
   \   000052   EE400080     DB 238, 64, 0, 128, 11, 196, 31, 133, 243, 64, 0, 128, 255, 195, 65, 78
   \            0BC41F85
   \            F3400080
   \            FFC3414E
   \   000062   4453006C     DB 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7, 65, 117
   \            61724175
   \            67757374
   \            00074175
   \   000072   67757374     DB 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7, 0, 0
   \            00074175
   \            67757374
   \            00070000
   \   000082   BC025000     DB 188, 2, 80, 0, 6, 255, 53, 130, 200, 0, 59, 143, 40, 0, 1, 2, 3, 0
   \            06FF3582
   \            C8003B8F
   \            28000102
   \            0300    
   \   000094   FFFFFFFF     DB 255, 255, 255, 255, 255, 255, 240, 240, 0, 0, 0, 170, 255, 120, 128
   \            FFFFF0F0
   \            000000AA
   \            FF7880  
   \   0000A3   4DFFCB48     DB 77, 255, 203, 72, 102, 84, 203, 72, 102, 84, 203, 72, 102, 84, 172
   \            6654CB48
   \            6654CB48
   \            6654AC  
   \   0000B2   C5A73717     DB 197, 167, 55, 23, 183, 81, 56, 1, 1, 90, 200, 255, 2, 1, 255, 255
   \            B7513801
   \            015AC8FF
   \            0201FFFF
   \   0000C2   1701A49A     DB 23, 1, 164, 154, 56, 255, 40, 0, 30, 0, 3, 0, 4, 0, 8, 0, 80, 0, 63
   \            38FF2800
   \            1E000300
   \            04000800
   \            50003F  
   \   0000D5   08F11FF1     DB 8, 241, 31, 241, 31, 255, 137, 255, 255, 25, 70, 110, 100, 90, 10, 7
   \            1FFF89FF
   \            FF19466E
   \            645A0A07
   \   0000E5   0B3C0A18     DB 11, 60, 10, 24, 252, 10, 20, 1, 0, 0, 0, 85, 85
   \            FC0A1401
   \            00000055
   \            55      
    212          /*0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x76, 0x40, 0x03, 0x62, 0x7B, 0x71, 0xAA, 0x35, 0xBA, 
    213          0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x34, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
    214          0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
    215          0x9A, 0x99, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4,
    216          0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
    217          0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0xF0, 0xF0, 0x18, 0xFC, 0x00, 0x00, 0x00, 0x64, 
    218          0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    219          0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    220          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    221          0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    222          0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 
    223          0x53, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0xD2, 0x82, 0xFF, 0x02, 0x01, 
    224          0xFE, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
    225          0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFE, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
    226          0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
    227          0x55, 0x55 */
    228          // channel 255, ed/gw 0201, std key, bunch 0, netid 0
    229          /* 0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
    230          0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x48, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
    231          0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
    232          0x66, 0x66, 0x4A, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4, 
    233          0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
    234          0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
    235          0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    236          0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    237          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    238          0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
    239          0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
    240          0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
    241          0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
    242          0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
    243          0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
    244          0x55, 0x55 */
    245          // New in code parameter block 09/15/15, defaults according to manufacturing
    246          // 1st Line : barrier through dFk[0]
    247          // 2nd Line : dFk[1] through vrefPolynom[0] (dFk[3] changed)
    248          // 3rd Line : vrefPolynom[1] through linearK[0][1] (linearK[0][0], [0][1] changed)
    249          // 4th Line : linearK[1][0] through linearK[2][1] (linearK[1][0], [2][0],[2][1] changed)
    250          // 5th Line : linearK[3][0] through linearK[4][1] (linearK[3][0], [3][1] changed)
    251          // 6th Line : linearK[5][0] through linearK[6][1] (all four values changed)
    252          // 7th Line : curKey[AES_SIZE]  
    253          // 8th Line : curIV[AES_SIZE] 
    254          // 9th Line : fetFailureCount through IhvLimitVins (only LowCurrentLimitTo255 stayed same)
    255          // 10th Line: tests[4] through shortCircuitLevel
    256          // 11th Line: reserved through 3rd byte of utcHigh (did not change the 3 times values)
    257          // 12th Line: 4th byte of utcHigh through gwAddr  (should oc change?)
    258          // 13th Line: repeaterChannel through defCyclesToStep10Channel
    259          // 14th Line: defCycles2SoftKick through ov_startup (changed ov_startup)
    260          // 15th Line: t_mod_off through vin_switch_off
    261          // 16th Line: post_barrier
    262            /*
    263          0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
    264          0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x75, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
    265          0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0xB8, 0x1E, 0xDD, 0x41, 0x00, 0xC0, 0x5A, 0xC5, 
    266          0xE1, 0x7A, 0xC8, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x40, 0x00, 0x80, 0x0E, 0xC4, 
    267          0x8F, 0xC2, 0xC7, 0x41, 0x00, 0x00, 0x6B, 0xC3, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
    268          0xCD, 0xCC, 0xFC, 0x40, 0x00, 0x00, 0x05, 0xC4, 0xC3, 0xF5, 0xF8, 0x40, 0x00, 0x80, 0x12, 0xC4, 
    269          0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    270          0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
    271          0x20, 0x4E, 0xBC, 0x02, 0x50, 0x00, 0x00, 0x00, 0x30, 0x75, 0xF0, 0x00, 0xB0, 0x04, 0xF8, 0x7F, 
    272          0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
    273          0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
    274          0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
    275          0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
    276          0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0x46, 
    277          0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x14, 0x01, 0x00, 0x00, 0x00, 
    278          0x55, 0x55
    279            */
    280           0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
    281           0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x48, 0xC3, 0x00, 0x00, 0x1C, 0x45,
    282           0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x9A, 0x99, 0x93, 0x41, 0x00, 0xC0, 0x0F, 0xC5,
    283           0x0A, 0xD7, 0x85, 0x41, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0xEE, 0x40, 0x00, 0x00, 0x09, 0xC4,
    284           0x3D, 0x0A, 0x85, 0x41, 0x00, 0x00, 0x70, 0xC2, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44,
    285           0x52, 0xBB, 0xEE, 0x40, 0x00, 0x80, 0x0B, 0xC4, 0x1F, 0x85, 0xF3, 0x40, 0x00, 0x80, 0xFF, 0xC3,
    286           0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07,
    287           0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07,
    288           0x00, 0x00, 0xBC, 0x02, 0x50, 0x00, 0x06, 0xFF, 0x35, 0x82, 0xC8, 0x00, 0x3B, 0x8F, 0x28, 0x00,
    289           0x01, 0x02, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA,
    290           0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66,
    291           0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x5A, 0xC8, 0xFF, 0x02, 0x01,
    292           0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00,
    293           0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x1F, 0xF1, 0x1F, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0x46,
    294           0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x14, 0x01, 0x00, 0x00, 0x00,
    295           0x55, 0x55
    296          };
    297          
    298          //static INT32 counts1[5] = {0L,0L,0L,0L,0L};
    299          //static INT32 counts2[5] = {0L,0L,0L,0L,0L};
    300          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    301          SchedulerInterface *si = (SchedulerInterface *)0xF500;
   \                     si:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for si>`
   \   000002                REQUIRE __INIT_XDATA_I
    302          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    303          static BOOL  *flags;// = si->flags;
   \                     flags:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    304          static INT16 *ticks;// = si->ticks;
   \                     ticks:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    305          
    306          //float safe_vin;
    307          //UINT16 safe_vin_16;
    308          //UINT16 VinTurnOn_16, VinShutOff_16, VinDisableRadio_16;
    309          
    310          #define POWER   1
    311          #define CURRENT 2
    312          #define EXT_GND 3
    313          #define REF     4
    314          
    315          #define TINT    7
    316          #define TEXT    6
    317          
    318          #define Iin2    8
    319          
    320          /*
    321          const BYTE  adcChannels[ N_CHANNELS ] = {  
    322            // Vout  0                                         Pin   1                                        Iout  2      
    323              ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN1,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
    324            // Gnd ext 3                                       Ref 4
    325              ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN4,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN6,    
    326            // Vin  5                                          Text  6                          
    327              ADC_REF_P0_7   
    328          | ADC_12_BIT | ADC_AIN0,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN5,    
    329            // Tin 7
    330              ADC_REF_P0_7   | ADC_12_BIT | ADC_TEMP_SENS
    331              //ADC_REF_1_25_V | ADC_12_BIT | ADC_TEMP_SENS
    332          };
    333          */
    334          
    335          //#define MidString - defined in projects
    336          
    337          #ifdef MidString
    338            #define REFERENCE       ADC_REF_AVDD
    339            #define REFERENCE_PIN   ADC_AIN7
    340          #else
    341            #define REFERENCE       ADC_REF_P0_7
    342            #define REFERENCE_PIN   ADC_AIN6
    343          #endif
    344          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    345          const BYTE  adcChannels[ N_CHANNELS ] = {  
   \                     adcChannels:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for adcChannels>`
   \   000009                REQUIRE __INIT_XDATA_I
    346            // Vout  0                                         Pin   1                                        Iout  2      
    347              REFERENCE | ADC_12_BIT | ADC_AIN1,      REFERENCE | ADC_12_BIT | ADC_AIN2,    REFERENCE | ADC_12_BIT | ADC_AIN3,    
    348            // Gnd ext 3                                       Ref 4
    349              REFERENCE | ADC_12_BIT | ADC_GND,       REFERENCE | ADC_12_BIT | REFERENCE_PIN,    
    350            // Vin  5                                          Text  6                          
    351              REFERENCE | ADC_12_BIT | ADC_AIN0,      REFERENCE | ADC_12_BIT | ADC_AIN5,    
    352            // Tin 7                                           Iin2 8
    353              REFERENCE | ADC_12_BIT | ADC_AIN4,       REFERENCE | ADC_12_BIT | ADC_AIN6
    354          };
    355          /*
    356          #else
    357          const BYTE  adcChannels[ N_CHANNELS ] = {  
    358            // Vout  0                                        Pin   1                                        Iout  2      
    359              ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN1,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
    360            // Gnd ext 3                                      Ref 4
    361              ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN4,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN6,    
    362            // Vin  5                                         Text  6                          
    363              ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN0,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN5,    
    364            // Tin 7                                          Iin2 8 
    365              ADC_REF_P0_7 | ADC_12_BIT | ADC_TEMP_SENS, ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN7,
    366            // int Gnd. 9                                     int Ref 10
    367              ADC_REF_P0_7 | ADC_12_BIT | ADC_GND,       ADC_REF_P0_7 | ADC_12_BIT | ADC_REF
    368          };
    369          #endif
    370          */
    371          
    372                                             // Vout Pin Iout           Vin Text  Iout+ Iin2  //  IntGnd  IntRef

   \                                 In  segment XDATA_I, align 1, keep-with-next
    373          const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 6,    5};   //,    0xFF }; //,   0xFF   };
   \                     indices:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for indices>`
   \   000009                REQUIRE __INIT_XDATA_I
    374          //const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 0xFF,  5};   //,    0xFF }; //,   0xFF   };

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    375          INT16  lastOff = 0, lastRssi = 0; //, delta = 0;
   \                     lastOff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     lastRssi:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    376          extern INT32 delta;
    377          
    378          // 06/26/2017 - Moved from local declarations in function checkVin() to const here
    379          // old switchTo255Lim -> 60000, old switchFrom255Lim ->  57000 (1000V values shown)
    380          // old shortCircuitProtectionOn -> 12000, old shortCircuitProtectionOff -> 16000 (1000V values shown)
    381          // values used in checkVin (global to avoid declaration(s) every 120 MS)
    382          
    383          // 07/05/2017 - switchTo255Lim was 43400, switchFrom255Lim was 40000
    384          #ifdef MidString

   \                                 In  segment XDATA_I, align 1, keep-with-next
    385          const UINT16 switchTo255Lim = 44500,
   \                     switchTo255Lim:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for switchTo255Lim>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    386              switchFrom255Lim = 42000, 
   \                     switchFrom255Lim:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for switchFrom255Lim>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    387              shortCircuitProtectionOn = 10000, 
   \                     shortCircuitProtectionOn:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for shortCircuitProtectionOn>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    388              shortCircuitProtectionOff = 13400; 
   \                     shortCircuitProtectionOff:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for shortCircuitProtectionOff>`
   \   000002                REQUIRE __INIT_XDATA_I
    389          #endif
    390          
    391          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    392          const char theKey[ 2*AES_SIZE ] = { 'A', 'N', 'D', 'S',  0,  'l', 'a', 'r', 'A', 'u', 'g', 'u', 's', 't',  0,   7 ,
   \                     theKey:
   \   000000                DS 32
   \   000020                REQUIRE `?<Initializer for theKey>`
   \   000020                REQUIRE __INIT_XDATA_I
    393                                              'A', 'u', 'g', 'u', 's', 't',  0,   7,  'A', 'u', 'g', 'u', 's', 't',  0,   7 };
    394          /******************************************************************************/
    395          
    396          #define atomicChange( idx, val ) ticks[idx]=val
    397          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    398          BYTE nextKey[ AES_SIZE ];
   \                     nextKey:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    399          BYTE nextIV [ AES_SIZE ];
   \                     nextIV:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z
    400          
    401          void savePB();
    402          
    403          //static const float DEF_CURRENT_MULTYPLIER = 3.93; //7.93; //5.536;
    404          
    405          //static float k_oc2timer = 0.0;
    406          //BYTE oc2timer(BYTE oc){ 
    407          //INT16 val;
    408          //#ifdef MidString
    409          //  if( oc > ocShortCircuitLimit ) oc = ocShortCircuitLimit;  // Short Circuit protection.
    410          //#endif
    411          //  if( k_oc2timer < 1.0 ) k_oc2timer = DEF_CURRENT_MULTYPLIER / (page.linearK[2][0]-4.0);
    412          // //  if( test4Zero((BYTE*)&k_oc2timer, 4) ) k_oc2timer = DEF_CURRENT_MULTYPLIER / page.linearK[2][0];
    413          //  val = (UINT16)( oc * k_oc2timer + 0.5 );
    414          //  if( val > 255 ) val = 255;
    415          //  return (BYTE) val; 
    416          //}
    417          
    418          // 03/24/2017 static const float DEF_CURRENT_MULTYPLIER = 3.93; //7.93; //5.536;
    419          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    420          static float k_oc2timer = 0.0;
   \                     k_oc2timer:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    421          BYTE oc2timer(BYTE oc){ 
   \                     oc2timer:
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    422          UINT16 val;
    423          #ifdef MidString
    424            if( oc > ocShortCircuitLimit ) oc = ocShortCircuitLimit;  // Short Circuit protection.
   \   000007   90....       MOV     DPTR,#ocShortCircuitLimit
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   C3           CLR     C
   \   00000C   95..         SUBB    A,?V0 + 0
   \   00000E   5003         JNC     ??oc2timer_0
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    425          #endif
    426            // 03/24/2017  if( k_oc2timer < 1.0 ) k_oc2timer = DEF_CURRENT_MULTYPLIER / (page.linearK[2][0]-4.0);
    427            // 03/24/2017 if( k_oc2timer < 1.0 ) k_oc2timer =  7.6 / (page.linearK[2][0]);
    428            
    429            if( k_oc2timer < 1.0 ) k_oc2timer =  7.93 / (page.linearK[2][0]);
   \                     ??oc2timer_0:
   \   000013   90....       MOV     DPTR,#k_oc2timer
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   90....       MOV     DPTR,#__Constant_3f800000
   \   00001E   78..         MOV     R0,#?V0 + 8
   \   000020   12....       LCALL   ?L_MOV_X
   \   000023   78..         MOV     R0,#?V0 + 4
   \   000025   79..         MOV     R1,#?V0 + 8
   \   000027   12....       LCALL   ?FLT_LT
   \   00002A   5023         JNC     ??oc2timer_1
   \   00002C   75..8F       MOV     ?V0 + 4,#-0x71
   \   00002F   75..C2       MOV     ?V0 + 5,#-0x3e
   \   000032   75..FD       MOV     ?V0 + 6,#-0x3
   \   000035   75..40       MOV     ?V0 + 7,#0x40
   \   000038   90....       MOV     DPTR,#(page + 56)
   \   00003B   78..         MOV     R0,#?V0 + 8
   \   00003D   12....       LCALL   ?L_MOV_X
   \   000040   78..         MOV     R0,#?V0 + 4
   \   000042   79..         MOV     R1,#?V0 + 8
   \   000044   12....       LCALL   ?FLT_DIV
   \   000047   90....       MOV     DPTR,#k_oc2timer
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?L_MOV_TO_X
    430            
    431          //  if( test4Zero((BYTE*)&k_oc2timer, 4) ) k_oc2timer = DEF_CURRENT_MULTYPLIER / page.linearK[2][0];
    432          
    433            // 03/24/2017 added line
    434            if ( oc > 240 ) oc = 240;
   \                     ??oc2timer_1:
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   C3           CLR     C
   \   000052   94F1         SUBB    A,#-0xf
   \   000054   4003         JC      ??oc2timer_2
   \   000056   75..F0       MOV     ?V0 + 0,#-0x10
    435            
    436            // 03/24/2017 val = (UINT16)( oc * k_oc2timer + 0.5 );
    437            val = (UINT16)( oc * k_oc2timer ); 
   \                     ??oc2timer_2:
   \   000059   75..00       MOV     ?V0 + 1,#0x0
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   75..00       MOV     ?V0 + 3,#0x0
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?UL_TO_FLT
   \   000067   90....       MOV     DPTR,#k_oc2timer
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?L_MOV_X
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   79..         MOV     R1,#?V0 + 4
   \   000073   12....       LCALL   ?FLT_MUL
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?FLT_TO_L
   \   00007B   A8..         MOV     R0,?V0 + 0
    438            if( val > 255 ) val = 255;
   \   00007D   C3           CLR     C
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   9401         SUBB    A,#0x1
   \   000082   4002         JC      ??oc2timer_3
   \   000084   78FF         MOV     R0,#-0x1
    439            return (BYTE) val; 
   \                     ??oc2timer_3:
   \   000086   E8           MOV     A,R0
   \   000087   F9           MOV     R1,A
   \   000088                REQUIRE ?Subroutine113
   \   000088                ; // Fall through to label ?Subroutine113
    440          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA
    441          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    442          INT16 abs( INT16 a ) { return ( a > 0 ) ? a : -a; }
   \                     abs:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   C3           CLR     C
   \   000001   EA           MOV     A,R2
   \   000002   9401         SUBB    A,#0x1
   \   000004   12....       LCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_190:
   \   000007   4005         JC      ??abs_0
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   EB           MOV     A,R3
   \   00000C   8006         SJMP    ??abs_1
   \                     ??abs_0:
   \   00000E   C3           CLR     C
   \   00000F   E4           CLR     A
   \   000010   9A           SUBB    A,R2
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   9B           SUBB    A,R3
   \                     ??abs_1:
   \   000014   F9           MOV     R1,A
   \   000015   E8           MOV     A,R0
   \   000016   FA           MOV     R2,A
   \   000017   E9           MOV     A,R1
   \   000018   FB           MOV     R3,A
   \   000019   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   EB           MOV     A,R3
   \                     ??Subroutine64_0:
   \   000001   12....       LCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_386:
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   9400         SUBB    A,#0x0
   \   000002   80..         SJMP    ?Subroutine116

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000002   65D0         XRL     A,PSW
   \   000004   33           RLC     A
   \   000005   22           RET
    443          //void bootOtherImage()
    444          //  {void (*f)( void ) = ( void (*)( void ) ) page.imageAddr;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}
    445          
    446          /******************************************************************************/
    447          inline float sqr( float x ){ return x*x; }
    448          /******************************************************************************/
    449          //inline void setupFrequency(){
    450              // Configure the radio frequency to use
    451          //    FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC
    452          //}

   \                                 In  segment XDATA_I, align 1, keep-with-next
    453          const INT32 defFreq = 0x646AAA;
   \                     defFreq:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for defFreq>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    454          const BYTE the_frequency[3] = { 0x64, 0x6A, 0xAA };
   \                     the_frequency:
   \   000000                DS 3
   \   000003                REQUIRE `?<Initializer for the_frequency>`
   \   000003                REQUIRE __INIT_XDATA_I
    455          // def_freq puts the frequency values into the FrequencyControl High/Medium/Low Bytes

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    456          void def_freq(void){ mymemcpy( (BYTE *)0xDF09, (BYTE *)the_frequency, 3 ); }
   \                     def_freq:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function mymemcpy
   \   000000   7903         MOV     R1,#0x3
   \   000002   7C..         MOV     R4,#(the_frequency & 0xff)
   \   000004   7D..         MOV     R5,#((the_frequency >> 8) & 0xff)
   \   000006   7A09         MOV     R2,#0x9
   \   000008   7BDF         MOV     R3,#-0x21
   \   00000A   12....       LCALL   mymemcpy
   \   00000D   22           RET
    457          
    458          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    459          void setupRadioDR(BYTE dr, BYTE channel ){
   \                     setupRadioDR:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8005         SJMP    ??setupRadioDR_0
    460              //INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
    461                  while( *((BYTE *)0xF53A) == RADIO_MODE_TX) tickWait(1);            
   \                     ??setupRadioDR_1:
   \   00000B                ; Setup parameters for call to function tickWait
   \   00000B   7901         MOV     R1,#0x1
   \   00000D   12....       LCALL   tickWait
   \                     ??setupRadioDR_0:
   \   000010   90F53A       MOV     DPTR,#-0xac6
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6410         XRL     A,#0x10
   \   000016   60F3         JZ      ??setupRadioDR_1
    462                  RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \   000018   12....       LCALL   ?Subroutine24
    463                  S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
   \                     ??CrossCallReturnLabel_63:
   \   00001B   539BFC       ANL     0x9b,#0xfc
   \   00001E   E59B         MOV     A,0x9b
   \   000020   53E9EF       ANL     0xe9,#0xef
   \   000023   759110       MOV     0x91,#0x10
    464                  if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
   \   000026   7432         MOV     A,#0x32
   \   000028   6E           XRL     A,R6
   \   000029   700C         JNZ     ??setupRadioDR_2
   \   00002B   90....       MOV     DPTR,#(page + 219)
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000031   5004         JNC     ??setupRadioDR_2
   \   000033                ; Setup parameters for call to function radioConfigure
   \   000033   7919         MOV     R1,#0x19
   \   000035   8002         SJMP    ??setupRadioDR_3
    465                  else                                                  radioConfigure( dr ); 
   \                     ??setupRadioDR_2:
   \   000037                ; Setup parameters for call to function radioConfigure
   \   000037   EE           MOV     A,R6
   \   000038   F9           MOV     R1,A
   \                     ??setupRadioDR_3:
   \   000039   12....       LCALL   radioConfigure
    466                  CHANNR = channel;      
   \   00003C   EF           MOV     A,R7
   \   00003D   90DF06       MOV     DPTR,#-0x20fa
   \   000040   F0           MOVX    @DPTR,A
    467                  if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
   \   000041   7432         MOV     A,#0x32
   \   000043   6E           XRL     A,R6
   \   000044   7005         JNZ     ??setupRadioDR_4
   \   000046   90....       MOV     DPTR,#(page + 193)
   \   000049   8003         SJMP    ??setupRadioDR_5
    468                  else                           PA_TABLE0 = page.radioPower;
   \                     ??setupRadioDR_4:
   \   00004B   90....       MOV     DPTR,#(page + 189)
   \                     ??setupRadioDR_5:
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   90DF2E       MOV     DPTR,#-0x20d2
   \   000052   12....       LCALL   ?Subroutine80
    469                  ADDR = page.edAddr;
   \                     ??CrossCallReturnLabel_257:
   \   000055   F0           MOVX    @DPTR,A
    470                  SYNC0 = page.syncword & 0xFF;    SYNC1 = ( page.syncword >> 8 ) & 0xFF;
   \   000056   90....       MOV     DPTR,#(page + 154)
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   90DF01       MOV     DPTR,#-0x20ff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   90....       MOV     DPTR,#(page + 155)
   \   000061   E0           MOVX    A,@DPTR
   \   000062   90DF00       MOV     DPTR,#-0x2100
   \   000065   F0           MOVX    @DPTR,A
    471                  //RFST = STROBE_CAL; 
    472                  HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
   \   000066   439A01       ORL     0x9a,#0x1
    473              //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
    474          }
   \   000069   02....       LJMP    ?Subroutine120
   \   00006C                REQUIRE RFIM
   \   00006C                REQUIRE IEN2
   \   00006C                REQUIRE S1CON
   \   00006C                REQUIRE _A_IEN0
   \   00006C                REQUIRE _A_IEN1
   \   00006C                REQUIRE RFST
   \   00006C                REQUIRE RFIF

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   75E104       MOV     0xe1,#0x4
   \   000003   12....       LCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_289:
   \   000006   74F0         MOV     A,#-0x10
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   90....       MOV     DPTR,#si
   \   000003   E0           MOVX    A,@DPTR
   \   000004   243A         ADD     A,#0x3a
   \                     ??Subroutine89_0:
   \   000006   12....       LCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_339:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(page + 190)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   90DF05       MOV     DPTR,#-0x20fb
   \   000008   22           RET
    475          extern BOOL transfer;

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    476          void setupRadio( BYTE channel ){ setupRadioDR( page.is500Always ? DATA_RATE_1_CC2511 : DATA_RATE_3_CC2511, channel ); }
   \                     setupRadio:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   \   000006   90....       MOV     DPTR,#(page + 194)
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   5004         JNC     ??setupRadio_0
   \   00000E   7932         MOV     R1,#0x32
   \   000010   8002         SJMP    ??setupRadio_1
   \                     ??setupRadio_0:
   \   000012   790C         MOV     R1,#0xc
   \                     ??setupRadio_1:
   \   000014                ; Setup parameters for call to function setupRadioDR
   \   000014   12....       LCALL   setupRadioDR
   \   000017   02....       LJMP    ??Subroutine115_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F0           MOVX    @DPTR,A
   \                     ??Subroutine115_0:
   \   000001   D083         POP     DPH
   \   000003   D082         POP     DPL
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    477          void setupRepeater( BOOL flag ){
   \                     setupRepeater:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    478            DMAARM = 0x83; // stop receive and transmit
   \   000004   75D683       MOV     0xd6,#-0x7d
    479            if( flag && (!page.is500Always) ){  
   \   000007   E9           MOV     A,R1
   \   000008   601C         JZ      ??setupRepeater_0
   \   00000A   90....       MOV     DPTR,#(page + 194)
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000010   4014         JC      ??setupRepeater_0
    480                 //P1_1 = 1;
    481                 setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel );  
   \   000012                ; Setup parameters for call to function setupRadioDR
   \   000012   90....       MOV     DPTR,#(page + 192)
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   7932         MOV     R1,#0x32
   \   000019   12....       LCALL   setupRadioDR
    482                 ADDR = page.gwAddr;  
   \   00001C   90....       MOV     DPTR,#(page + 191)
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   90DF05       MOV     DPTR,#-0x20fb
   \   000023   F0           MOVX    @DPTR,A
   \   000024   8003         SJMP    ??CrossCallReturnLabel_129
    483            }else{
    484                 //P1_1 = 0;
    485                 setupRadio( curChannel );                    
   \                     ??setupRepeater_0:
   \   000026                ; Setup parameters for call to function setupRadio
   \   000026   12....       LCALL   ?Subroutine51
    486            }
    487          }
   \                     ??CrossCallReturnLabel_129:
   \   000029   02....       LJMP    ??Subroutine115_0
   \   00002C                REQUIRE DMAARM

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   90....       MOV     DPTR,#curChannel
   \                     ??Subroutine51_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   setupRadio
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    488          void softKick(void){
   \                     softKick:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    489              //if( transfer ) return;
    490              //INT_GLOBAL_ENABLE( INT_OFF );
    491                  //halPowerClkMgmtSetMainClkSrc(CRYSTAL);  // it is never needed to set crystall again
    492                  DMAARM = 0x83; RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \   000004   75D683       MOV     0xd6,#-0x7d
   \   000007   12....       LCALL   ?Subroutine24
    493                  //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC //setupFrequency();       //
    494                  zerofill( (BYTE *)&delta, 4 ); //delta = 0;     
   \                     ??CrossCallReturnLabel_64:
   \   00000A                ; Setup parameters for call to function zerofill
   \   00000A   7904         MOV     R1,#0x4
   \   00000C   7A..         MOV     R2,#(delta & 0xff)
   \   00000E   7B..         MOV     R3,#((delta >> 8) & 0xff)
   \   000010   12....       LCALL   zerofill
    495                  FSCTRL0 = 0;   def_freq();
   \   000013   E4           CLR     A
   \   000014   90DF08       MOV     DPTR,#-0x20f8
   \   000017   F0           MOVX    @DPTR,A
   \   000018                ; Setup parameters for call to function def_freq
   \   000018   12....       LCALL   def_freq
    496                  //dmaRadioSetup();
    497                  //MCSM0 = 0x14; // calibraton on
    498                  loadKey( page.curKey );
   \   00001B                ; Setup parameters for call to function load
   \   00001B   12....       LCALL   ?Subroutine81
    499                  setupRadio( curChannel = ( page.is500Always ? curChannel : page.channel ) );        // global interrups are enabled inside setup radio
   \                     ??CrossCallReturnLabel_259:
   \   00001E   90....       MOV     DPTR,#(page + 194)
   \   000021   E0           MOVX    A,@DPTR
   \   000022   A2E6         MOV     C,0xE0 /* A   */.6
   \   000024   5005         JNC     ??softKick_0
   \   000026   90....       MOV     DPTR,#curChannel
   \   000029   8003         SJMP    ??softKick_1
   \                     ??softKick_0:
   \   00002B   90....       MOV     DPTR,#(page + 164)
   \                     ??softKick_1:
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   E9           MOV     A,R1
   \   000031   90....       MOV     DPTR,#curChannel
   \   000034   F0           MOVX    @DPTR,A
   \   000035                ; Setup parameters for call to function setupRadio
   \   000035   12....       LCALL   setupRadio
    500                  zerofill( (BYTE *)&utcLast, 6 ); //utcLast = 0; msLast = 0;
   \   000038                ; Setup parameters for call to function zerofill
   \   000038   7906         MOV     R1,#0x6
   \   00003A   7A..         MOV     R2,#(utcLast & 0xff)
   \   00003C   7B..         MOV     R3,#((utcLast >> 8) & 0xff)
   \   00003E   12....       LCALL   zerofill
    501                  cmdCount = 0;
   \   000041   90....       MOV     DPTR,#cmdCount
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    502                  //if( enable2SendData ){ computeADCs( TRUE, FALSE );  } // adjust quartz to temperature only if buffer is already full
    503                  computeADCs( TRUE, FALSE );  // adjust quartz to temperature only if buffer is already full
   \   000048                ; Setup parameters for call to function computeADCs
   \   000048   FA           MOV     R2,A
   \   000049   7901         MOV     R1,#0x1
   \   00004B   12....       LCALL   computeADCs
    504                  ticks[ ReceiveData ] = 1;
   \   00004E   12....       LCALL   ?Subroutine1
    505                  ticks[ Hop ] = 0; cyclesToHop = 0;
   \                     ??CrossCallReturnLabel_415:
   \   000051   12....       LCALL   ??Subroutine2_0
   \                     ??CrossCallReturnLabel_2:
   \   000054   90....       MOV     DPTR,#cyclesToHop
   \   000057   02....       LJMP    ?Subroutine115
   \   00005A                REQUIRE DMAARM
   \   00005A                REQUIRE RFST
    506              //INT_GLOBAL_ENABLE( INT_ON );
    507          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   7A..         MOV     R2,#((page + 96) & 0xff)
   \   000002   7B..         MOV     R3,#(((page + 96) >> 8) & 0xff)
   \                     ??Subroutine81_0:
   \   000004   7904         MOV     R1,#0x4
   \                     ??Subroutine81_1:
   \   000006   12....       LCALL   load
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009                ; Setup parameters for call to function wait_aes
   \   000009   12....       LCALL   wait_aes
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   12....       LCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_399:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_348:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   80..         SJMP    ?Subroutine118

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_297:
   \   000003   7401         MOV     A,#0x1
   \   000005   02....       LJMP    ?Subroutine119

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#curChannel
   \   000003   F0           MOVX    @DPTR,A
   \                     ??Subroutine2_0:
   \   000004   90....       MOV     DPTR,#ticks
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2410         ADD     A,#0x10
   \                     ??Subroutine2_1:
   \   00000A   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_285:
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    508          void restoreRadio(){
   \                     restoreRadio:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    509              //ticks[ ReceiveData ] = 1;
    510              //HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
    511              //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
    512              //DMAARM = 0x83; RFST = STROBE_IDLE; 
    513              ticks[ ReceiveData ] = 1;
   \   000004   12....       LCALL   ?Subroutine1
    514          }
   \                     ??CrossCallReturnLabel_416:
   \   000007   02....       LJMP    ??Subroutine115_0
    515          /******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    516          void init(void){
   \                     init:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    517          BYTE pin;
    518              P0DIR = 0;    // all port 0 pins are input
   \   000005   75FD00       MOV     0xfd,#0x0
    519              P0INP = 0xFF; // all port 0 pins are tristate
   \   000008   758FFF       MOV     0x8f,#-0x1
    520              ADC_ENABLE_CHANNELS( 0xFF );
   \   00000B   E5F2         MOV     A,0xf2
   \   00000D   75F2FF       MOV     0xf2,#-0x1
    521              for( pin = 0; pin < 8; pin++ ){ IO_ADC_PORT0_PIN( pin, IO_ADC_EN); }
   \   000010   7A00         MOV     R2,#0x0
   \                     ??init_0:
   \   000012   75..01       MOV     ?V0 + 0,#0x1
   \   000015   75..00       MOV     ?V0 + 1,#0x0
   \   000018   EA           MOV     A,R2
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?S_SHL
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   45F2         ORL     A,0xf2
   \   000022   F5F2         MOV     0xf2,A
   \   000024   0A           INC     R2
   \   000025   EA           MOV     A,R2
   \   000026   C3           CLR     C
   \   000027   9408         SUBB    A,#0x8
   \   000029   40E7         JC      ??init_0
    522          
    523              // 2 top pins are secial function - timer 3 channels
    524              P1SEL = 0xC0;                          
   \   00002B   75F4C0       MOV     0xf4,#-0x40
    525              // pins 7(oc) 6(ov) 4(on/off), 3(mpp), 1(LED), 0(mpp cycle) are for output
    526              P1DIR = 0xDB;   // 1101 1011
   \   00002E   75FEDB       MOV     0xfe,#-0x25
    527          
    528              T3CTL   = 0x50; // was 0x70, prescaler 1/4, normal operation, mode - free running
   \   000031   75CB50       MOV     0xcb,#0x50
    529              T3CCTL0 = 0x24; // clear output on compare up, set on 0, enabled
   \   000034   75CC24       MOV     0xcc,#0x24
    530              T3CCTL1 = 0x24; // clear output on compare up, set on 0, enabled
   \   000037   75CE24       MOV     0xce,#0x24
    531              PERCFG  = 0x20; // Timer3 has alternate 2 location - P1_6 & P1_7
   \   00003A   75F120       MOV     0xf1,#0x20
    532          
    533              P2SEL   = 0x20; // Timer3 has priority over USART1
   \   00003D   75F520       MOV     0xf5,#0x20
    534              // pull down commented out for version 8
    535              //P2DIR   = 0x0F; P2_1 = 0; P2_2 = 0;
    536              
    537              //P1_3 = 1; //P1 |= 8;  // MPP ON
    538              zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
   \   000040                ; Setup parameters for call to function zerofill
   \   000040   7912         MOV     R1,#0x12
   \   000042   7A..         MOV     R2,#(adcsTemp & 0xff)
   \   000044   7B..         MOV     R3,#((adcsTemp >> 8) & 0xff)
   \   000046   12....       LCALL   zerofill
    539              //     LED down,  MPP off, Module Off 
    540              //P1 &= ~ ( 2 | 8 | 0x10 ); 
    541              
    542              P0SEL = 0;
   \   000049   75F300       MOV     0xf3,#0x0
    543              // Choose the crystal oscillator as the system clock
    544           //   P1_1 = 0;
    545           //   halPowerClkMgmtSetMainClkSrc(CRYSTAL);
    546              // Select frequency and data rate from LCD menu, then configure the radio
    547              
    548              // Configure interrupt for every time a packet is sent
    549              
    550              FSCTRL0 = 0;
   \   00004C   E4           CLR     A
   \   00004D   90DF08       MOV     DPTR,#-0x20f8
   \   000050   F0           MOVX    @DPTR,A
    551                  
    552              setup_hopper( page.channel );
   \   000051                ; Setup parameters for call to function setup_hopper
   \   000051   90....       MOV     DPTR,#(page + 164)
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   setup_hopper
    553              dmaRadioSetup();
   \   000059                ; Setup parameters for call to function dmaRadioSetup
   \   000059   12....       LCALL   dmaRadioSetup
    554          
    555              //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC setupFrequency();
    556              def_freq();
   \   00005C                ; Setup parameters for call to function def_freq
   \   00005C   12....       LCALL   def_freq
    557              setupRadio( curChannel ); //page.is500Always? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
   \   00005F                ; Setup parameters for call to function setupRadio
   \   00005F   12....       LCALL   ?Subroutine51
    558          
    559              //calibrateParking();
    560          
    561              invVref0 = 1.0 / page.vrefPolynom[0];
   \                     ??CrossCallReturnLabel_130:
   \   000062   75..00       MOV     ?V0 + 0,#0x0
   \   000065   75..00       MOV     ?V0 + 1,#0x0
   \   000068   75..80       MOV     ?V0 + 2,#-0x80
   \   00006B   75..3F       MOV     ?V0 + 3,#0x3f
   \   00006E   90....       MOV     DPTR,#(page + 28)
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?L_MOV_X
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   79..         MOV     R1,#?V0 + 4
   \   00007A   12....       LCALL   ?FLT_DIV
   \   00007D   90....       MOV     DPTR,#invVref0
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?L_MOV_TO_X
    562              //__________________________________________________________________________
    563             // Over Voltage     Over Current
    564          
    565              T3CTL |= 0x14;
   \   000085   43CB14       ORL     0xcb,#0x14
   \   000088   E5CB         MOV     A,0xcb
    566              
    567              HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
   \   00008A   D2B9         SETB    0xb8.1
    568              HAL_INT_ENABLE(INUM_ADC, INT_ON);    // enable ADC interrupt
   \   00008C   D2A9         SETB    0xa8.1
    569              HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
   \   00008E   439A01       ORL     0x9a,#0x1
    570          }
   \   000091   02....       LJMP    ??Subroutine121_1
   \   000094                REQUIRE P0INP
   \   000094                REQUIRE IEN2
   \   000094                REQUIRE _A_IEN0
   \   000094                REQUIRE _A_IEN1
   \   000094                REQUIRE T3CTL
   \   000094                REQUIRE T3CCTL0
   \   000094                REQUIRE T3CCTL1
   \   000094                REQUIRE PERCFG
   \   000094                REQUIRE ADCCFG
   \   000094                REQUIRE P0SEL
   \   000094                REQUIRE P1SEL
   \   000094                REQUIRE P2SEL
   \   000094                REQUIRE P0DIR
   \   000094                REQUIRE P1DIR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   78..         MOV     R0,#?V0 + 4
   \   000002   79..         MOV     R1,#?V0 + 0
   \   000004   12....       LCALL   ?FLT_MUL
   \                     ??Subroutine121_0:
   \   000007   AA..         MOV     R2,?V0 + 4
   \   000009   AB..         MOV     R3,?V0 + 5
   \   00000B   AC..         MOV     R4,?V0 + 6
   \   00000D   AD..         MOV     R5,?V0 + 7
   \                     ??Subroutine121_1:
   \   00000F   7F08         MOV     R7,#0x8
   \   000011   02....       LJMP    ?FUNC_LEAVE_XDATA
    571          /******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    572          void ov_startup(void)
   \                     ov_startup:
    573          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    574            // ensure FETs are good/Module can turn on before beginning ov_startup sequence
    575            // and turning module on.
    576            if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
   \   000004   90FFFD       MOV     DPTR,#-0x3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7023         JNZ     ??ov_startup_0
    577            {
    578              if( page.ov_startup )
   \   00000A   90....       MOV     DPTR,#(page + 223)
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   601A         JZ      ??CrossCallReturnLabel_17
    579              {
    580                T3CC0 = (page.ov_startup < page.ov) ? page.ov_startup : page.ov; 
   \   000011   90....       MOV     DPTR,#(page + 187)
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EA           MOV     A,R2
   \   000017   C3           CLR     C
   \   000018   9B           SUBB    A,R3
   \   000019   5003         JNC     ??ov_startup_1
   \   00001B   EA           MOV     A,R2
   \   00001C   8001         SJMP    ??ov_startup_2
   \                     ??ov_startup_1:
   \   00001E   EB           MOV     A,R3
   \                     ??ov_startup_2:
   \   00001F   FC           MOV     R4,A
   \   000020   8CCD         MOV     0xcd,R4
    581                atomicChange( OvStartup, TICKS_IN_SEC );
   \   000022   90....       MOV     DPTR,#ticks
   \   000025   E0           MOVX    A,@DPTR
   \   000026   241E         ADD     A,#0x1e
   \   000028   12....       LCALL   ??Subroutine5_0
    582                //        #ifdef MidString                                                                            
    583                //        compute98();                                                                                
    584                //        #endif
    585              }
    586              P1_4 = 1;
   \                     ??CrossCallReturnLabel_17:
   \   00002B   D294         SETB    0x90.4
    587            }
    588          }
   \                     ??ov_startup_0:
   \   00002D   02....       LJMP    ??Subroutine115_0
   \   000030                REQUIRE _A_P1
   \   000030                REQUIRE T3CC0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2416         ADD     A,#0x16
   \                     ??Subroutine5_0:
   \   000006   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_286:
   \   000009   74D0         MOV     A,#-0x30
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   7407         MOV     A,#0x7
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET
    589          
    590          /******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    591          float *_coeff, invRef = 0;
   \                     _coeff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     invRef:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    592          float mult( float t, INT16 i ){ return (t)*(float)i; }
   \                     mult:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   \   00000D   740F         MOV     A,#0xf
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_67:
   \   000015   12....       LCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_269:
   \   000018   12....       LCALL   ?L_TO_FLT
   \   00001B   02....       LJMP    ?Subroutine121

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   33           RLC     A
   \   000001   95E0         SUBB    A,0xE0 /* A   */
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    593          float lin_coeff( float f ){ return _coeff[0]*f + _coeff[1]; }
   \                     lin_coeff:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   90....       MOV     DPTR,#_coeff
   \   000010   12....       LCALL   ??Subroutine47_1
   \                     ??CrossCallReturnLabel_117:
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_MOV_X
   \   000018   78..         MOV     R0,#?V0 + 4
   \   00001A   79..         MOV     R1,#?V0 + 0
   \   00001C   12....       LCALL   ?FLT_MUL
   \   00001F   12....       LCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_113:
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_MOV_X
   \   000027   78..         MOV     R0,#?V0 + 4
   \   000029   79..         MOV     R1,#?V0 + 0
   \   00002B   12....       LCALL   ?FLT_ADD
   \   00002E   02....       LJMP    ??Subroutine121_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   90....       MOV     DPTR,#_coeff
   \   000003   12....       LCALL   ??Subroutine92_0
   \                     ??CrossCallReturnLabel_397:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   90....       MOV     DPTR,#ticks
   \                     ??Subroutine92_0:
   \   000003   12....       LCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_340:
   \   000006                REQUIRE ?Subroutine118
   \   000006                ; // Fall through to label ?Subroutine118

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \                     ??Subroutine47_0:
   \   000001   90....       MOV     DPTR,#ticks
   \                     ??Subroutine47_1:
   \   000004   12....       LCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_321:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine109
   \                     ??CrossCallReturnLabel_341:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL   ?Subroutine112
   \                     ??CrossCallReturnLabel_349:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    594          float lin_coeff_t( float f ){    return (_coeff[1] - f )*_coeff[0]; }
   \                     lin_coeff_t:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   12....       LCALL   ?Subroutine46
   \                     ??CrossCallReturnLabel_114:
   \   000010   78..         MOV     R0,#?V0 + 4
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V0 + 4
   \   000017   79..         MOV     R1,#?V0 + 0
   \   000019   12....       LCALL   ?FLT_SUB
   \   00001C   90....       MOV     DPTR,#_coeff
   \   00001F   12....       LCALL   ??Subroutine47_1
   \                     ??CrossCallReturnLabel_118:
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_MOV_X
   \   000027   02....       LJMP    ?Subroutine121

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    595          float lin( BYTE idx ){
   \                     lin:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    596          float t  = ((float)adcs[ idx ]) * page.vrefPolynom[0] * invRef; // invRef = 1.0 / (float)adcs[ REF ];
    597              return lin_coeff_t( t ); //( coeff[1] - t ) * coeff[0];  
   \   000005                ; Setup parameters for call to function lin_coeff_t
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   75..00       MOV     ?V0 + 1,#0x0
   \   00000A   7402         MOV     A,#0x2
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   12....       LCALL   ?S_SHL
   \   000011   E5..         MOV     A,?V0 + 0
   \   000013   24..         ADD     A,#(adcs & 0xff)
   \   000015   F582         MOV     DPL,A
   \   000017   E5..         MOV     A,?V0 + 1
   \   000019   34..         ADDC    A,#((adcs >> 8) & 0xff)
   \   00001B   F583         MOV     DPH,A
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?L_MOV_X
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_TO_FLT
   \   000027   90....       MOV     DPTR,#(page + 28)
   \   00002A   78..         MOV     R0,#?V0 + 4
   \   00002C   12....       LCALL   ?L_MOV_X
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   79..         MOV     R1,#?V0 + 4
   \   000033   12....       LCALL   ?FLT_MUL
   \   000036   90....       MOV     DPTR,#invRef
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?L_MOV_X
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   79..         MOV     R1,#?V0 + 4
   \   000042   12....       LCALL   ?FLT_MUL
   \   000045   AA..         MOV     R2,?V0 + 0
   \   000047   AB..         MOV     R3,?V0 + 1
   \   000049   AC..         MOV     R4,?V0 + 2
   \   00004B   AD..         MOV     R5,?V0 + 3
   \   00004D   12....       LCALL   lin_coeff_t
   \   000050   80..         SJMP    ??Subroutine121_1
    598          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    599          float cube_coeff( float *t ){ 
   \                     cube_coeff:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    600          //  return ( ( ( _coeff[0]*t + _coeff[1] )*t + _coeff[2] )*t + _coeff[3] ); 
    601          float acc = _coeff[0]; 
   \   000005   90....       MOV     DPTR,#_coeff
   \   000008   12....       LCALL   ??Subroutine47_1
   \                     ??CrossCallReturnLabel_119:
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?L_MOV_X
    602          BYTE i;
    603              for( i = 1; i < 4; i++ ) acc = acc*(*t) + _coeff[i];
   \   000010   7D01         MOV     R5,#0x1
   \                     ??cube_coeff_0:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   79..         MOV     R1,#?V0 + 4
   \   00001F   12....       LCALL   ?FLT_MUL
   \   000022   8D..         MOV     ?V0 + 4,R5
   \   000024   75..00       MOV     ?V0 + 5,#0x0
   \   000027   7402         MOV     A,#0x2
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?S_SHL
   \   00002E   90....       MOV     DPTR,#_coeff
   \   000031   E0           MOVX    A,@DPTR
   \   000032   25..         ADD     A,?V0 + 4
   \   000034   FC           MOV     R4,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   35..         ADDC    A,?V0 + 5
   \   000039   8C82         MOV     DPL,R4
   \   00003B   F583         MOV     DPH,A
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?L_MOV_X
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   79..         MOV     R1,#?V0 + 4
   \   000046   12....       LCALL   ?FLT_ADD
   \   000049   0D           INC     R5
   \   00004A   ED           MOV     A,R5
   \   00004B   C3           CLR     C
   \   00004C   9404         SUBB    A,#0x4
   \   00004E   40C2         JC      ??cube_coeff_0
    604              return acc;
   \   000050                REQUIRE ?Subroutine124
   \   000050                ; // Fall through to label ?Subroutine124
    605          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   AC..         MOV     R4,?V0 + 2
   \   000006   AD..         MOV     R5,?V0 + 3
   \   000008   80..         SJMP    ??Subroutine121_1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    606          float checkVref;
   \                     checkVref:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    607          float processCheck( INT16 val ){ return lin_coeff( ((float)val) * checkVref );  }
   \                     processCheck:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005                ; Setup parameters for call to function lin_coeff
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   EB           MOV     A,R3
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   12....       LCALL   ?Subroutine83
   \                     ??CrossCallReturnLabel_270:
   \   00000D   12....       LCALL   ?L_TO_FLT
   \   000010   90....       MOV     DPTR,#checkVref
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_MOV_X
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   79..         MOV     R1,#?V0 + 4
   \   00001C   12....       LCALL   ?FLT_MUL
   \   00001F   AA..         MOV     R2,?V0 + 0
   \   000021   AB..         MOV     R3,?V0 + 1
   \   000023   AC..         MOV     R4,?V0 + 2
   \   000025   AD..         MOV     R5,?V0 + 3
   \   000027   12....       LCALL   lin_coeff
   \   00002A   80..         SJMP    ??Subroutine121_1
    608          /******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    609          UINT16  last[ N_CHANNELS ]; //Vout, lastPin, lastIout, lastGnd, lastRef, lastVin, lastTex, lastTin;
   \                     last:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    610          UINT16  checkVoutOnT  = 0, checkPD = 0;
   \                     checkVoutOnT:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     checkPD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    611          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    612          void read_page(void){
   \                     read_page:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    613              mymemcpy( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+4 ); 
   \   000004                ; Setup parameters for call to function mymemcpy
   \   000004   79F2         MOV     R1,#-0xe
   \   000006   7C00         MOV     R4,#0x0
   \   000008   7D5C         MOV     R5,#0x5c
   \   00000A   7A..         MOV     R2,#(page & 0xff)
   \   00000C   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   00000E   12....       LCALL   mymemcpy
    614              //if( page.barrier == 0xAAAA ){
    615              if( page.barrier == 0xAAAA  && page.post_barrier == 0x5555 ){
   \   000011   90....       MOV     DPTR,#page
   \   000014   E0           MOVX    A,@DPTR
   \   000015   64AA         XRL     A,#0xaa
   \   000017   7004         JNZ     ??read_page_0
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   64AA         XRL     A,#0xaa
   \                     ??read_page_0:
   \   00001D   700E         JNZ     ??read_page_1
   \   00001F   90....       MOV     DPTR,#(page + 240)
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6455         XRL     A,#0x55
   \   000025   7004         JNZ     ??read_page_2
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6455         XRL     A,#0x55
   \                     ??read_page_2:
   \   00002B   6020         JZ      ??read_page_3
    616                  /* page F compatibility - not needed anymore
    617                  zerofill( (BYTE *)&page.syncword, 8 );
    618                  page.syncword = 0xF0F0; 
    619                  page.vin_disable_radio = 6;
    620                  page.vin_limit         = 0; 
    621                  page.vin_turn_on       = 120;
    622                  page.vin_switch_off    = 100;
    623                  */
    624                  //BYTE *ptr = nextSlot();
    625                  //if( ptr && ptr > (BYTE *)(PAGEADDR+PAGESIZE+4) ){ ptr -= 4;  mymemcpy( (BYTE *)&energy, ptr, 4 );  }
    626                  //zerofill( (BYTE *)&deltaEnergy, 4 );
    627              }else{
    628                  //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
    629                  mymemcpy((BYTE *)&page, (BYTE *)default_pb, PAGESIZE );
   \                     ??read_page_1:
   \   00002D                ; Setup parameters for call to function mymemcpy
   \   00002D   79F2         MOV     R1,#-0xe
   \   00002F   7C..         MOV     R4,#(default_pb & 0xff)
   \   000031   7D..         MOV     R5,#((default_pb >> 8) & 0xff)
   \   000033   7A..         MOV     R2,#(page & 0xff)
   \   000035   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   000037   12....       LCALL   mymemcpy
    630                  // partial PB restoration goes here
    631                  //void (*f)( void ) = ( void (*)( void ) )0x603F;  (*f)();  // to 8k image
    632                  switchTo255(); ch255 = FALSE;
   \   00003A                ; Setup parameters for call to function switchTo255
   \   00003A   12....       LCALL   ?Subroutine84
    633                  page.ov         = *((BYTE *)0x3DC);
   \                     ??CrossCallReturnLabel_271:
   \   00003D   9003DC       MOV     DPTR,#0x3dc
   \   000040   E0           MOVX    A,@DPTR
   \   000041   90....       MOV     DPTR,#(page + 187)
   \   000044   F0           MOVX    @DPTR,A
    634                  page.oc         = *((BYTE *)0x3DD);
   \   000045   9003DD       MOV     DPTR,#0x3dd
   \   000048   E0           MOVX    A,@DPTR
   \   000049   90....       MOV     DPTR,#(page + 188)
   \   00004C   F0           MOVX    @DPTR,A
    635                  //page.ov_startup = 100;//*((BYTE *)0x3DE);
    636                  //page.myBunch = 0;   page.netId  = 0;
    637                   /*
    638                  page.channel = 255; page.pureOffset = -130;
    639                  page.edAddr    = 2; page.gwAddr     = 1; 
    640                  page.vin_limit = 0; 
    641                  mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 );
    642                  //page.myBunch = 0;   page.netId  = 0;
    643                  mymemcpy( (BYTE *)&page, (BYTE *)0x3D4, 12 );    // netid, bunch, mac
    644                  //zerofill( (BYTE *)&energy, 8 );
    645                  */
    646              }
    647              
    648              page.versionHigh = FWVersionHigh;
   \                     ??read_page_3:
   \   00004D   90....       MOV     DPTR,#(page + 216)
   \   000050   7458         MOV     A,#0x58
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   741B         MOV     A,#0x1b
   \   000056   F0           MOVX    @DPTR,A
    649              page.versionLow = FWVersionLow;
   \   000057   90....       MOV     DPTR,#(page + 214)
   \   00005A   740B         MOV     A,#0xb
   \   00005C   12....       LCALL   ?Subroutine119
    650              page.versionSuffix[0] = FWSuffixOne;
   \                     ??CrossCallReturnLabel_402:
   \   00005F   7431         MOV     A,#0x31
   \   000061   90....       MOV     DPTR,#(page + 144)
   \   000064   F0           MOVX    @DPTR,A
    651              page.versionSuffix[1] = FWSuffixTwo;
   \   000065   7442         MOV     A,#0x42
   \   000067   90....       MOV     DPTR,#(page + 145)
   \   00006A   F0           MOVX    @DPTR,A
    652              page.versionSuffix[2] = FWSuffixThree;    
   \   00006B   90....       MOV     DPTR,#(page + 146)
   \   00006E   F0           MOVX    @DPTR,A
    653              ch255 = FALSE;
   \   00006F   E4           CLR     A
   \   000070   90....       MOV     DPTR,#ch255
   \   000073   80..         SJMP    ?Subroutine115
    654          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   switchTo255
   \   000003   E4           CLR     A
   \   000004   90....       MOV     DPTR,#ch255
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    655          //float polynomial[] = { 0, 0, 0, -200 }; // -0.000693, 0.0556, 0.613, -220.0};

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    656          void switchTo255(){
   \                     switchTo255:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    657              curChannel = page.channel = 255;   
   \   000004   74FF         MOV     A,#-0x1
   \   000006   90....       MOV     DPTR,#(page + 164)
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#curChannel
   \   00000D   12....       LCALL   ?Subroutine78
    658              page.use12kbod  = TRUE;   page.hoppingAllowed = FALSE;
   \                     ??CrossCallReturnLabel_251:
   \   000010   C2E4         CLR     0xE0 /* A   */.4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   D2E2         SETB    0xE0 /* A   */.2
   \   000015   F0           MOVX    @DPTR,A
    659              page.useFEC     = FALSE;  page.is500Always = FALSE; 
   \   000016   90....       MOV     DPTR,#(page + 219)
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C2E4         CLR     0xE0 /* A   */.4
   \   00001C   12....       LCALL   ?Subroutine78
    660              page.isRelay    = FALSE;  page.searchCommunication = FALSE;
   \                     ??CrossCallReturnLabel_252:
   \   00001F   541F         ANL     A,#0x1f
   \   000021   F0           MOVX    @DPTR,A
    661              page.vin_disable_radio = 0;
   \   000022   E4           CLR     A
   \   000023   90....       MOV     DPTR,#(page + 156)
   \   000026   F0           MOVX    @DPTR,A
    662              //page.production = 0;
    663              //page.fuseComm   = 0;    page.fuseOVOC = 0;
    664              mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 ); 
   \   000027                ; Setup parameters for call to function mymemcpy
   \   000027   7920         MOV     R1,#0x20
   \   000029   7C..         MOV     R4,#(theKey & 0xff)
   \   00002B   7D..         MOV     R5,#((theKey >> 8) & 0xff)
   \   00002D   7A..         MOV     R2,#((page + 96) & 0xff)
   \   00002F   7B..         MOV     R3,#(((page + 96) >> 8) & 0xff)
   \   000031   12....       LCALL   mymemcpy
    665              //mymemcpy( (BYTE *)page.dFk,    (BYTE *)polynomial, 16 );
    666              page.syncword = 0xF0F0; page.edAddr = 2; page.gwAddr = 1;
   \   000034   90....       MOV     DPTR,#(page + 154)
   \   000037   74F0         MOV     A,#-0x10
   \   000039   12....       LCALL   ?Subroutine68
    667              mymemcpy( (BYTE *)&page, (BYTE *)0x3D0, 12 );    // barrier, netid (0), bunch (0), group, mac, 
   \                     ??CrossCallReturnLabel_223:
   \   00003C                ; Setup parameters for call to function mymemcpy
   \   00003C   790C         MOV     R1,#0xc
   \   00003E   7CD0         MOV     R4,#-0x30
   \   000040   7D03         MOV     R5,#0x3
   \   000042   7A..         MOV     R2,#(page & 0xff)
   \   000044   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   000046   12....       LCALL   mymemcpy
    668              ch255 = TRUE;   softKick();
   \   000049   7401         MOV     A,#0x1
   \   00004B   90....       MOV     DPTR,#ch255
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function softKick
   \   00004F   12....       LCALL   softKick
    669              //page.myBunch    =  0;     page.netId = 0;  
    670          }
   \   000052   80..         SJMP    ??Subroutine115_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(page + 194)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7402         MOV     A,#0x2
   \   000005   90....       MOV     DPTR,#(page + 190)
   \   000008   F0           MOVX    @DPTR,A
   \   000009   7401         MOV     A,#0x1
   \   00000B   90....       MOV     DPTR,#(page + 191)
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET
    671          
    672          
    673          
    674          #ifdef MidString

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    675          INT16 iOutIin1Diff; // Used in compute ADCs for FET failure
   \                     iOutIin1Diff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    676          INT16 iOutIin2Diff; // Global to save time with computeADCs
   \                     iOutIin2Diff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    677          #endif
    678          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    679          void checkVin(void)
   \                     checkVin:
    680          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    681            INT16  t;
    682            UINT16 safe_vin_16;
    683          
    684          #ifdef MidString
    685            static UINT16 currentFETTickCount = 0;
    686            
    687            /* 12/29/2017 BEGIN adding 1500V Protection Variables */
    688            static INT16 protectionModuleOffTimer = 0;
    689            /* 12/29/2017 END adding 1500V Protection Variables */
    690            
    691            if (checkForFETFailure)
   \   000005   90....       MOV     DPTR,#checkForFETFailure
   \   000008   E0           MOVX    A,@DPTR
   \   000009   7003         JNZ     $+5
   \   00000B   02....       LJMP    ??CrossCallReturnLabel_404
    692            {
    693              iOutIin1Diff = (INT16)adcs16[2] - (INT16)adcs16[6];
   \   00000E   12....       LCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_164:
   \   000011   90....       MOV     DPTR,#(adcs16 + 12)
   \   000014   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_103:
   \   000017   90....       MOV     DPTR,#iOutIin1Diff
   \   00001A   12....       LCALL   ??Subroutine114_0
    694              iOutIin2Diff = (INT16)adcs16[2] - (INT16)adcs16[5];
   \                     ??CrossCallReturnLabel_350:
   \   00001D   90....       MOV     DPTR,#(adcs16 + 10)
   \   000020   12....       LCALL   ?Subroutine44
   \                     ??CrossCallReturnLabel_104:
   \   000023   90....       MOV     DPTR,#iOutIin2Diff
   \   000026   12....       LCALL   ??Subroutine114_0
    695              
    696              if ( ((INT16)adcs16[2] > page.fetCurrentThreshold) && ( (iOutIin1Diff < page.fetDeltaCurrent) || (iOutIin2Diff < page.fetDeltaCurrent) )  )
   \                     ??CrossCallReturnLabel_351:
   \   000029   90....       MOV     DPTR,#(page + 130)
   \   00002C   12....       LCALL   ??Subroutine0_1
   \                     ??CrossCallReturnLabel_372:
   \   00002F   5059         JNC     ??checkVin_0
   \   000031   90....       MOV     DPTR,#(page + 132)
   \   000034   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_165:
   \   000037   90....       MOV     DPTR,#iOutIin1Diff
   \   00003A   12....       LCALL   ??Subroutine0_1
   \                     ??CrossCallReturnLabel_373:
   \   00003D   4008         JC      ??checkVin_1
   \   00003F   90....       MOV     DPTR,#iOutIin2Diff
   \   000042   12....       LCALL   ??Subroutine0_1
   \                     ??CrossCallReturnLabel_374:
   \   000045   5043         JNC     ??checkVin_0
    697              {
    698                currentFETTickCount += 120;
   \                     ??checkVin_1:
   \   000047   90....       MOV     DPTR,#??currentFETTickCount
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   2478         ADD     A,#0x78
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   3400         ADDC    A,#0x0
   \   000052   F0           MOVX    @DPTR,A
    699                netValue = MainNetValueFETFailing; // indicate FET failure being observed
   \   000053   90....       MOV     DPTR,#netValue
   \   000056   740A         MOV     A,#0xa
   \   000058   12....       LCALL   ?Subroutine119
    700                
    701                if (currentFETTickCount >= (INT16)page.fetFailureCount)
   \                     ??CrossCallReturnLabel_403:
   \   00005B   90....       MOV     DPTR,#(page + 128)
   \   00005E   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_166:
   \   000061   7583..       MOV     DPH,#((??currentFETTickCount >> 8) & 0xff)
   \   000064   7582..       MOV     DPL,#(??currentFETTickCount & 0xff)
   \   000067   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_301:
   \   00006A   402D         JC      ??CrossCallReturnLabel_404
    702                {
    703                  P1_4 = 0; /*turn the module off  */
   \   00006C   C294         CLR     0x90.4
    704                  fetFailure = TRUE; /* set guard to keep module from being turned on */
   \   00006E   7401         MOV     A,#0x1
   \   000070   90....       MOV     DPTR,#fetFailure
   \   000073   F0           MOVX    @DPTR,A
    705                  checkForFETFailure = FALSE; /* No need to check further until power cycle or Module On */
   \   000074   E4           CLR     A
   \   000075   90....       MOV     DPTR,#checkForFETFailure
   \   000078   12....       LCALL   ?Subroutine73
    706                  netValue = MainNetValueFETFailed; /* indicate FET failure condition */
    707                  *ModuleOffRememberedPtr = ModuleStatusOffFetFailure; /* Remember module is off */
   \                     ??CrossCallReturnLabel_400:
   \   00007B   747E         MOV     A,#0x7e
   \   00007D   90FFFD       MOV     DPTR,#-0x3
   \   000080   F0           MOVX    @DPTR,A
    708                  currentFETTickCount = 0; /* Reset to 0 */
   \   000081   90....       MOV     DPTR,#??currentFETTickCount
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   02....       LJMP    ??checkVin_2
    709                }
    710              }
    711              else
    712              {
    713                currentFETTickCount = 0; /* Ensure count is back to default */
   \                     ??checkVin_0:
   \   00008A   90....       MOV     DPTR,#??currentFETTickCount
   \   00008D   E4           CLR     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   F0           MOVX    @DPTR,A
    714                netValue = MainNetValueStandard; /* "default" netValue for main image */
   \   000091   90....       MOV     DPTR,#netValue
   \   000094   7432         MOV     A,#0x32
   \   000096   12....       LCALL   ?Subroutine119
    715              }
    716            }
    717             
    718            /* 12/29/2017 BEGIN Adding 1500V Protection Code */
    719            
    720            if (fetFailure == FALSE) /* If fetFailure then module is already off */
   \                     ??CrossCallReturnLabel_404:
   \   000099   90....       MOV     DPTR,#fetFailure
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6003         JZ      $+5
   \   00009F   02....       LJMP    ??checkVin_3
    721            {
    722              /* Check if Vout has exceeded VoutLimit and has not yet been observed */
    723              if ((page.VoutLimitCount > 0) && ((ProtectionLimitsExceeded & VoutLimitMask) != VoutLimitMask) && (adcs16[0] > page.VoutLimit))
   \   0000A2   90....       MOV     DPTR,#(page + 136)
   \   0000A5   12....       LCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_28:
   \   0000A8   4026         JC      ??CrossCallReturnLabel_200
   \   0000AA   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   A2E6         MOV     C,0xE0 /* A   */.6
   \   0000B0   401E         JC      ??CrossCallReturnLabel_200
   \   0000B2   90....       MOV     DPTR,#adcs16
   \   0000B5   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_167:
   \   0000B8   7583..       MOV     DPH,#(((page + 138) >> 8) & 0xff)
   \   0000BB   7582..       MOV     DPL,#((page + 138) & 0xff)
   \   0000BE   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_302:
   \   0000C1   500D         JNC     ??CrossCallReturnLabel_200
    724              {
    725                P1_4 = 0; /* turn Module off */
   \   0000C3   12....       LCALL   ?Subroutine75
    726                P1_3 = 0; /* turn MPP off */
    727                
    728                *ModuleOffRememberedPtr = ModuleStatusOffProtection; /* Remember why module is off */
    729                ProtectionLimitsExceeded |= VoutLimitMask;   /* Set Protection byte to indicate Vout Protection */
   \                     ??CrossCallReturnLabel_239:
   \   0000C6   D2E6         SETB    0xE0 /* A   */.6
   \   0000C8   12....       LCALL   ?Subroutine0
    730                
    731                if (protectionModuleOffTimer < page.VoutLimitCount) /* Set Protection timer to appropriate value */
   \                     ??CrossCallReturnLabel_370:
   \   0000CB   5003         JNC     ??CrossCallReturnLabel_200
    732                {
    733                  protectionModuleOffTimer = page.VoutLimitCount;
   \   0000CD   12....       LCALL   ?Subroutine67
    734                }
    735              }
    736              
    737              /* Check if Iout has exceeded IoutLimit and has not yet been observed */
    738              if ((page.IoutLimitCount > 0) && ((ProtectionLimitsExceeded & IoutLimitMask) != IoutLimitMask) && ((INT16)adcs16[2] > page.IoutLimit))
   \                     ??CrossCallReturnLabel_200:
   \   0000D0   90....       MOV     DPTR,#(page + 140)
   \   0000D3   12....       LCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_29:
   \   0000D6   4027         JC      ??CrossCallReturnLabel_201
   \   0000D8   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   A2E7         MOV     C,0xE0 /* A   */.7
   \   0000DE   401F         JC      ??CrossCallReturnLabel_201
   \   0000E0   12....       LCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_168:
   \   0000E3   7583..       MOV     DPH,#(((page + 142) >> 8) & 0xff)
   \   0000E6   7582..       MOV     DPL,#((page + 142) & 0xff)
   \   0000E9   12....       LCALL   ??Subroutine0_1
   \                     ??CrossCallReturnLabel_375:
   \   0000EC   5011         JNC     ??CrossCallReturnLabel_201
    739              {
    740                P1_4 = 0; /* turn Module off */
   \   0000EE   12....       LCALL   ?Subroutine75
    741                P1_3 = 0; /* turn MPP off */
    742                
    743                *ModuleOffRememberedPtr = ModuleStatusOffProtection; /* Remember why module is off */
    744                ProtectionLimitsExceeded |= IoutLimitMask;          /* Set Protection byte to indicate Vout Protection */
   \                     ??CrossCallReturnLabel_240:
   \   0000F1   D2E7         SETB    0xE0 /* A   */.7
   \   0000F3   F0           MOVX    @DPTR,A
    745                
    746                if (protectionModuleOffTimer < page.IoutLimitCount) /* Set Protection timer to appropriate value */
   \   0000F4   90....       MOV     DPTR,#(page + 140)
   \   0000F7   12....       LCALL   ??Subroutine0_0
   \                     ??CrossCallReturnLabel_376:
   \   0000FA   5003         JNC     ??CrossCallReturnLabel_201
    747                {
    748                  protectionModuleOffTimer = page.IoutLimitCount;
   \   0000FC   12....       LCALL   ?Subroutine67
    749                }
    750              }
    751              
    752              /* Is Vout or Iout protection indicated? */
    753              if (ProtectionLimitsExceeded >= VoutLimitMask)
   \                     ??CrossCallReturnLabel_201:
   \   0000FF   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   000102   E0           MOVX    A,@DPTR
   \   000103   C3           CLR     C
   \   000104   9440         SUBB    A,#0x40
   \   000106   5003         JNC     $+5
   \   000108   02....       LJMP    ??checkVin_3
    754              {
    755                ProtectionLimitsExceeded |= CountDownTimerActive; /* Set the Countdown timer bit "true" until proven otherwise */
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   D2E0         SETB    0xE0 /* A   */.0
   \   00010E   F0           MOVX    @DPTR,A
    756                
    757                if ((ProtectionLimitsExceeded & IoutLimitMask) == IoutLimitMask) /* IoutLimit Protection has been recognized */
   \   00010F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000111   502B         JNC     ??CrossCallReturnLabel_202
    758                {
    759                  if ((INT16)adcs16[2] > (page.IoutLimit - Amps_1)) /* When Iout above IoutLimit - 1Amp, countdown timer is "re-maxed" */
   \   000113   90....       MOV     DPTR,#(page + 142)
   \   000116   E0           MOVX    A,@DPTR
   \   000117   2418         ADD     A,#0x18
   \   000119   FA           MOV     R2,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   34FC         ADDC    A,#-0x4
   \   00011E   FB           MOV     R3,A
   \   00011F   90....       MOV     DPTR,#(adcs16 + 4)
   \   000122   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_54:
   \   000125   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000127   65D0         XRL     A,PSW
   \   000129   33           RLC     A
   \   00012A   5012         JNC     ??CrossCallReturnLabel_202
    760                  {
    761                    ProtectionLimitsExceeded &= CountDownTimerNotActive; /* Countdown condition fails, so change timer bit */
   \   00012C   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   C2E0         CLR     0xE0 /* A   */.0
   \   000132   F0           MOVX    @DPTR,A
    762                    if (protectionModuleOffTimer < page.IoutLimitCount) /* Set Protection timer to appropriate value */
   \   000133   90....       MOV     DPTR,#(page + 140)
   \   000136   12....       LCALL   ??Subroutine0_0
   \                     ??CrossCallReturnLabel_377:
   \   000139   5003         JNC     ??CrossCallReturnLabel_202
    763                    {
    764                      protectionModuleOffTimer = page.IoutLimitCount;
   \   00013B   12....       LCALL   ?Subroutine67
    765                    }
    766                  }
    767                } /* END if ((protectionLimitsExceeded & IoutLimitMask) == IoutLimitMask) */
    768                
    769                if ((ProtectionLimitsExceeded & VoutLimitMask) == VoutLimitMask) /* VoutLimit Protection has been recognized */
   \                     ??CrossCallReturnLabel_202:
   \   00013E   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   000141   E0           MOVX    A,@DPTR
   \   000142   A2E6         MOV     C,0xE0 /* A   */.6
   \   000144   5022         JNC     ??CrossCallReturnLabel_203
    770                {
    771                  if (adcs16[0] > (page.VoutLimit - Volts_50)) /* When Vout above VoutLimit - 50 volts, countdown timer is "re-maxed" */
   \   000146   90....       MOV     DPTR,#(page + 138)
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   247E         ADD     A,#0x7e
   \   00014C   FA           MOV     R2,A
   \   00014D   A3           INC     DPTR
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   34F9         ADDC    A,#-0x7
   \   000151   FB           MOV     R3,A
   \   000152   90....       MOV     DPTR,#adcs16
   \   000155   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_55:
   \   000158   500E         JNC     ??CrossCallReturnLabel_203
    772                  {
    773                    ProtectionLimitsExceeded &= CountDownTimerNotActive;  /* Countdown condition fails, so change timer bit */
   \   00015A   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   C2E0         CLR     0xE0 /* A   */.0
   \   000160   12....       LCALL   ?Subroutine0
    774                    if (protectionModuleOffTimer < page.VoutLimitCount)   /* Set Protection timer to appropriate value */
   \                     ??CrossCallReturnLabel_371:
   \   000163   5003         JNC     ??CrossCallReturnLabel_203
    775                    {
    776                      protectionModuleOffTimer = page.VoutLimitCount;
   \   000165   12....       LCALL   ?Subroutine67
    777                    }
    778                  }
    779                } /* END if ((protectionLimitsExceeded & VoutLimitMask) == VoutLimitMask) */
    780                
    781                /* Is Countdown timer active? (meaning it is ok to decrement it) */
    782                if ((ProtectionLimitsExceeded & CountDownTimerActive) == CountDownTimerActive)
   \                     ??CrossCallReturnLabel_203:
   \   000168   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00016E   5047         JNC     ??checkVin_3
    783                {
    784                  protectionModuleOffTimer -= 120;
   \   000170   90....       MOV     DPTR,#??protectionModuleOffTimer
   \   000173   E0           MOVX    A,@DPTR
   \   000174   2488         ADD     A,#-0x78
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   34FF         ADDC    A,#-0x1
   \   00017B   F0           MOVX    @DPTR,A
    785                  if (protectionModuleOffTimer <= 0)
   \   00017C   90....       MOV     DPTR,#??protectionModuleOffTimer
   \   00017F   12....       LCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_30:
   \   000182   5033         JNC     ??checkVin_3
    786                  {
    787                    protectionModuleOffTimer = 0;
   \   000184   90....       MOV     DPTR,#??protectionModuleOffTimer
   \   000187   E4           CLR     A
   \   000188   F0           MOVX    @DPTR,A
   \   000189   A3           INC     DPTR
   \   00018A   12....       LCALL   ??Subroutine75_0
    788                    ProtectionLimitsExceeded &= NotVoutAndIoutLimitNoCountDownMask;
   \                     ??CrossCallReturnLabel_241:
   \   00018D   543E         ANL     A,#0x3e
   \   00018F   F0           MOVX    @DPTR,A
    789                    if (ProtectionLimitsExceeded == 0)
   \   000190   700D         JNZ     ??checkVin_4
    790                    {
    791                      *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \   000192   E4           CLR     A
   \   000193   90FFFD       MOV     DPTR,#-0x3
   \   000196   F0           MOVX    @DPTR,A
    792                      P1_3 = page.mpp;
   \   000197   12....       LCALL   ?Subroutine57
    793                      ov_startup();   
   \   00019A                ; Setup parameters for call to function ov_startup
   \                     ??CrossCallReturnLabel_156:
   \   00019A   12....       LCALL   ov_startup
   \   00019D   8018         SJMP    ??checkVin_3
    794                    } /* END if (ProtectionLimitsExceeded == 0) */
    795                    else /* Some form of Temperature Protection is on, act accordingly */
    796                    {
    797                      P1_3 = page.mpp;
   \                     ??checkVin_4:
   \   00019F   12....       LCALL   ?Subroutine57
    798                      if ((ProtectionLimitsExceeded & TemperatureModuleOffMask) == 0x00)
   \                     ??CrossCallReturnLabel_157:
   \   0001A2   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   A2E5         MOV     C,0xE0 /* A   */.5
   \   0001A8   4007         JC      ??checkVin_5
    799                      {
    800                        *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \   0001AA   E4           CLR     A
   \   0001AB   90FFFD       MOV     DPTR,#-0x3
   \   0001AE   F0           MOVX    @DPTR,A
    801                        ov_startup();                 
   \   0001AF                ; Setup parameters for call to function ov_startup
   \   0001AF   80E9         SJMP    ??CrossCallReturnLabel_156
    802                      }
    803                      else
    804                      {
    805                        *ModuleOffRememberedPtr = ModuleStatusOffTemperature;
   \                     ??checkVin_5:
   \   0001B1   74A6         MOV     A,#-0x5a
   \   0001B3   90FFFD       MOV     DPTR,#-0x3
   \                     ??checkVin_2:
   \   0001B6   F0           MOVX    @DPTR,A
    806                      }
    807                    }
    808                  } /* END if (protectionModuleOffTimer <= 0) */
    809                } /* END if ((ProtectionLimitsExceeded & CountDownTimerActive) == CountDownTimerActive)*/
    810              } /* END if (ProtectionLimitsExceeded >= VoutLimitMask)*/
    811            } /* END if (fetFailure == FALSE) */
    812            
    813            /* 12/29/2017 END Adding 1500V Protection Code */
    814              
    815          #endif
    816            
    817            checkVref = page.vrefPolynom[0] / ((float)last[4]);
   \                     ??checkVin_3:
   \   0001B7   90....       MOV     DPTR,#(page + 28)
   \   0001BA   78..         MOV     R0,#?V0 + 4
   \   0001BC   12....       LCALL   ?L_MOV_X
   \   0001BF   90....       MOV     DPTR,#(last + 8)
   \   0001C2   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_13:
   \   0001C5   12....       LCALL   ?UL_TO_FLT
   \   0001C8   78..         MOV     R0,#?V0 + 4
   \   0001CA   79..         MOV     R1,#?V0 + 0
   \   0001CC   12....       LCALL   ?FLT_DIV
   \   0001CF   90....       MOV     DPTR,#checkVref
   \   0001D2   78..         MOV     R0,#?V0 + 4
   \   0001D4   12....       LCALL   ?L_MOV_TO_X
    818            _coeff = page.linearK[3];
   \   0001D7   90....       MOV     DPTR,#_coeff
   \   0001DA   74..         MOV     A,#((page + 64) & 0xff)
   \   0001DC   F0           MOVX    @DPTR,A
   \   0001DD   A3           INC     DPTR
   \   0001DE   74..         MOV     A,#(((page + 64) >> 8) & 0xff)
   \   0001E0   F0           MOVX    @DPTR,A
    819            
    820            safe_vin_16  = convU( lin_coeff( ((float) last[5])*checkVref ) );
   \   0001E1                ; Setup parameters for call to function convU
   \   0001E1                ; Setup parameters for call to function lin_coeff
   \   0001E1   90....       MOV     DPTR,#(last + 10)
   \   0001E4   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_14:
   \   0001E7   12....       LCALL   ?UL_TO_FLT
   \   0001EA   90....       MOV     DPTR,#checkVref
   \   0001ED   78..         MOV     R0,#?V0 + 4
   \   0001EF   12....       LCALL   ?L_MOV_X
   \   0001F2   78..         MOV     R0,#?V0 + 0
   \   0001F4   79..         MOV     R1,#?V0 + 4
   \   0001F6   12....       LCALL   ?FLT_MUL
   \   0001F9   12....       LCALL   ?Subroutine82
    821          
    822          #ifndef MidString
    823            if ( P1_3 == 0 )
    824            {
    825              if( P1_4  && (safe_vin_16 < (100*(UINT16)page.vin_switch_off) ) )
    826              {
    827                ticks[ TurnOn ] = 3 * TICKS_IN_SEC;
    828                P1_4 = 0;
    829              }
    830              else if ( (P1_4 == 0) && turnOnFlag && ( safe_vin_16 > (100*(UINT16)page.vin_turn_on) ) )
    831              {
    832                turnOnFlag = 0;
    833                ticks[ BypassMode ] = TICKS_IN_SEC;
    834                P1_3 = 1;
    835                ov_startup();
    836              }
    837            }
    838          #endif
    839            
    840            if( (flags[ PackageReceived ]) || (flags[DataSent]) )
   \                     ??CrossCallReturnLabel_267:
   \   0001FC   90....       MOV     DPTR,#flags
   \   0001FF   12....       LCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_306:
   \   000202   E0           MOVX    A,@DPTR
   \   000203   700D         JNZ     ??checkVin_6
   \   000205   90....       MOV     DPTR,#(flags + 1)
   \   000208   E0           MOVX    A,@DPTR
   \   000209   F583         MOV     DPH,A
   \   00020B   8A82         MOV     DPL,R2
   \   00020D   A3           INC     DPTR
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   600E         JZ      ??checkVin_7
    841            {
    842              flags[AltCheckVin] = TRUE;
   \                     ??checkVin_6:
   \   000212   90....       MOV     DPTR,#flags
   \   000215   E0           MOVX    A,@DPTR
   \   000216   240B         ADD     A,#0xb
   \   000218   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_139:
   \   00021B   7401         MOV     A,#0x1
   \   00021D   02....       LJMP    ??checkVin_8
    843              return;
    844            }
    845            
    846            txDisabled = 0;
   \                     ??checkVin_7:
   \   000220   E4           CLR     A
   \   000221   90....       MOV     DPTR,#txDisabled
   \   000224   F0           MOVX    @DPTR,A
    847            if ( page.vin_disable_radio )
   \   000225   90....       MOV     DPTR,#(page + 156)
   \   000228   E0           MOVX    A,@DPTR
   \   000229   FA           MOV     R2,A
   \   00022A   6021         JZ      ??checkVin_9
    848              txDisabled = ( safe_vin_16 < (1000*(UINT16)page.vin_disable_radio) );
   \   00022C   75F0E8       MOV     B,#-0x18
   \   00022F   A4           MUL     AB
   \   000230   CA           XCH     A,R2
   \   000231   ACF0         MOV     R4,B
   \   000233   75F003       MOV     B,#0x3
   \   000236   A4           MUL     AB
   \   000237   2C           ADD     A,R4
   \   000238   FC           MOV     R4,A
   \   000239   E4           CLR     A
   \   00023A   2C           ADD     A,R4
   \   00023B   FB           MOV     R3,A
   \   00023C   E8           MOV     A,R0
   \   00023D   9A           SUBB    A,R2
   \   00023E   E9           MOV     A,R1
   \   00023F   9B           SUBB    A,R3
   \   000240   5004         JNC     ??checkVin_10
   \   000242   7A01         MOV     R2,#0x1
   \   000244   8002         SJMP    ??checkVin_11
   \                     ??checkVin_10:
   \   000246   7A00         MOV     R2,#0x0
   \                     ??checkVin_11:
   \   000248   EA           MOV     A,R2
   \   000249   90....       MOV     DPTR,#txDisabled
   \   00024C   F0           MOVX    @DPTR,A
    849          
    850          #ifndef MidString
    851            if ( page.vin_limit )
    852            {
    853              register BOOL flag = ( safe_vin_16 < (page.vin_limit*100) );
    854              if ( !ch255 && flag )
    855              {
    856                switchTo255();
    857              }
    858              else if ( ch255 && !flag )
    859              {
    860                BYTE curV255 = page.vin_limit;
    861                read_page();
    862                page.vin_limit = curV255;
    863                curChannel = page.channel;
    864                softKick();
    865              }
    866            }
    867            else if ( ch255 )
    868            {
    869              BYTE curV255 = page.vin_limit;
    870              read_page();
    871              page.vin_limit = curV255;
    872              curChannel = page.channel;
    873              softKick();
    874            }
    875          #endif
    876              
    877          #ifdef MidString
    878            /* 06/26/2017 - Added additional code regarding switching to and from channel 255, (looking at Iin1 (adcs16[6]) ) */
    879            if (!ch255)
   \                     ??checkVin_9:
   \   00024D   90....       MOV     DPTR,#(page + 134)
   \   000250   12....       LCALL   ??Subroutine45_0
   \                     ??CrossCallReturnLabel_105:
   \   000253   90....       MOV     DPTR,#ch255
   \   000256   E0           MOVX    A,@DPTR
   \   000257   C3           CLR     C
   \   000258   7029         JNZ     ??checkVin_12
    880            {
    881              if (safe_vin_16 > switchTo255Lim)
   \   00025A   E8           MOV     A,R0
   \   00025B   94D5         SUBB    A,#-0x2b
   \   00025D   E9           MOV     A,R1
   \   00025E   94AD         SUBB    A,#-0x53
   \   000260   400A         JC      ??checkVin_13
    882              {
    883                switchTo255();
   \   000262                ; Setup parameters for call to function switchTo255
   \   000262   12....       LCALL   switchTo255
    884                netValue = MainNetValueSafeVin;
   \   000265   90....       MOV     DPTR,#netValue
   \   000268   7450         MOV     A,#0x50
   \   00026A   804D         SJMP    ??checkVin_14
    885              }
    886              else if ((INT16)adcs16[6] < (INT16)page.LowCurrentLimitTo255)
   \                     ??checkVin_13:
   \   00026C   90....       MOV     DPTR,#(adcs16 + 12)
   \   00026F   C3           CLR     C
   \   000270   E0           MOVX    A,@DPTR
   \   000271   9A           SUBB    A,R2
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   12....       LCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_382:
   \   000277   5043         JNC     ??CrossCallReturnLabel_405
    887              {
    888                switchTo255();
   \   000279                ; Setup parameters for call to function switchTo255
   \   000279   12....       LCALL   switchTo255
    889                netValue = MainNetValueLowCurrentLimit;
   \   00027C   90....       MOV     DPTR,#netValue
   \   00027F   7451         MOV     A,#0x51
   \   000281   8036         SJMP    ??checkVin_14
    890              }
    891            }
    892            else if ( ch255 && (( safe_vin_16 < switchFrom255Lim ) && ((INT16)adcs[6] >= (INT16)page.LowCurrentLimitTo255)))
   \                     ??checkVin_12:
   \   000283   E8           MOV     A,R0
   \   000284   9410         SUBB    A,#0x10
   \   000286   E9           MOV     A,R1
   \   000287   94A4         SUBB    A,#-0x5c
   \   000289   5031         JNC     ??CrossCallReturnLabel_405
   \   00028B   90....       MOV     DPTR,#(adcs + 24)
   \   00028E   78..         MOV     R0,#?V0 + 0
   \   000290   12....       LCALL   ?L_MOV_X
   \   000293   C3           CLR     C
   \   000294   E5..         MOV     A,?V0 + 0
   \   000296   9A           SUBB    A,R2
   \   000297   E5..         MOV     A,?V0 + 1
   \   000299   12....       LCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_383:
   \   00029C   401E         JC      ??CrossCallReturnLabel_405
    893            {
    894              read_page();
   \   00029E                ; Setup parameters for call to function read_page
   \   00029E   12....       LCALL   read_page
    895              if( page.is500Always )
   \   0002A1   90....       MOV     DPTR,#(page + 194)
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   A2E6         MOV     C,0xE0 /* A   */.6
   \   0002A7   5008         JNC     ??checkVin_15
    896                curChannel = page.starting500Channel;
   \   0002A9   90....       MOV     DPTR,#(page + 218)
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   90....       MOV     DPTR,#curChannel
   \   0002B0   F0           MOVX    @DPTR,A
    897              softKick();
   \                     ??checkVin_15:
   \   0002B1                ; Setup parameters for call to function softKick
   \   0002B1   12....       LCALL   softKick
    898              netValue = MainNetValueStandard;
   \   0002B4   90....       MOV     DPTR,#netValue
   \   0002B7   7432         MOV     A,#0x32
   \                     ??checkVin_14:
   \   0002B9   12....       LCALL   ?Subroutine119
    899            }
    900          #endif
    901            
    902            if ( (flags[ PackageReceived ]) || (flags[DataSent]) )
   \                     ??CrossCallReturnLabel_405:
   \   0002BC   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_8:
   \   0002BF   6003         JZ      $+5
   \   0002C1   02....       LJMP    ??checkVin_6
   \   0002C4   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_21:
   \   0002C7   6003         JZ      $+5
   \   0002C9   02....       LJMP    ??checkVin_6
    903            {
    904              flags[AltCheckVin] = TRUE; 
    905              return; 
    906            }
    907            
    908            /* Start of Temperature protection code */
    909            _coeff = page.linearK[4];
   \   0002CC   90....       MOV     DPTR,#_coeff
   \   0002CF   74..         MOV     A,#((page + 72) & 0xff)
   \   0002D1   F0           MOVX    @DPTR,A
   \   0002D2   A3           INC     DPTR
   \   0002D3   74..         MOV     A,#(((page + 72) >> 8) & 0xff)
   \   0002D5   F0           MOVX    @DPTR,A
    910            t =  (INT16) lin_coeff_t( ((float)last[6]) * checkVref );
   \   0002D6                ; Setup parameters for call to function lin_coeff_t
   \   0002D6   90....       MOV     DPTR,#(last + 12)
   \   0002D9   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_15:
   \   0002DC   12....       LCALL   ?UL_TO_FLT
   \   0002DF   90....       MOV     DPTR,#checkVref
   \   0002E2   78..         MOV     R0,#?V0 + 4
   \   0002E4   12....       LCALL   ?L_MOV_X
   \   0002E7   78..         MOV     R0,#?V0 + 0
   \   0002E9   79..         MOV     R1,#?V0 + 4
   \   0002EB   12....       LCALL   ?FLT_MUL
   \   0002EE   AA..         MOV     R2,?V0 + 0
   \   0002F0   AB..         MOV     R3,?V0 + 1
   \   0002F2   AC..         MOV     R4,?V0 + 2
   \   0002F4   AD..         MOV     R5,?V0 + 3
   \   0002F6   12....       LCALL   lin_coeff_t
   \   0002F9   8A..         MOV     ?V0 + 0,R2
   \   0002FB   8B..         MOV     ?V0 + 1,R3
   \   0002FD   8C..         MOV     ?V0 + 2,R4
   \   0002FF   8D..         MOV     ?V0 + 3,R5
   \   000301   78..         MOV     R0,#?V0 + 0
   \   000303   12....       LCALL   ?FLT_TO_L
   \   000306   AA..         MOV     R2,?V0 + 0
   \   000308   AB..         MOV     R3,?V0 + 1
    911            
    912            /* if T_SUPER_HOT enabled, and temperature exceeds value, turn off unit.
    913               Critical Temperature Protection, i.e., T_SUPER_HOT */
    914            if( page.t_mod_off && (t > ((INT16)page.t_mod_off)) )
   \   00030A   90....       MOV     DPTR,#(page + 224)
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   601A         JZ      ??checkVin_16
   \   000310   12....       LCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_198:
   \   000313   5015         JNC     ??checkVin_16
    915            { 
    916              P1_4 = 0;
   \   000315   C294         CLR     0x90.4
    917              if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
   \   000317   90FFFD       MOV     DPTR,#-0x3
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   7003         JNZ     ??checkVin_17
    918                *ModuleOffRememberedPtr = ModuleStatusOffTemperature;
   \   00031D   74A6         MOV     A,#-0x5a
   \   00031F   F0           MOVX    @DPTR,A
    919              ProtectionLimitsExceeded |= TemperatureModuleOffAndSteppedDownMask;
   \                     ??checkVin_17:
   \   000320   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   000323   E0           MOVX    A,@DPTR
   \   000324   4430         ORL     A,#0x30
   \                     ??checkVin_18:
   \   000326   F0           MOVX    @DPTR,A
   \   000327   02....       LJMP    ??CrossCallReturnLabel_330
    920            }
    921            else if ( page.fallback_time && page.fallback_time!=0xFF )
   \                     ??checkVin_16:
   \   00032A   90....       MOV     DPTR,#(page + 227)
   \   00032D   E0           MOVX    A,@DPTR
   \   00032E   F5..         MOV     ?V0 + 0,A
   \   000330   7003         JNZ     $+5
   \   000332   02....       LJMP    ??CrossCallReturnLabel_330
   \   000335   74FF         MOV     A,#-0x1
   \   000337   65..         XRL     A,?V0 + 0
   \   000339   7003         JNZ     $+5
   \   00033B   02....       LJMP    ??CrossCallReturnLabel_330
    922            { /* Temperature above T_HOT */
    923              if ( checkVoutOnT )
   \   00033E   90....       MOV     DPTR,#checkVoutOnT
   \   000341   E0           MOVX    A,@DPTR
   \   000342   7002         JNZ     ??checkVin_19
   \   000344   A3           INC     DPTR
   \   000345   E0           MOVX    A,@DPTR
   \                     ??checkVin_19:
   \   000346   6008         JZ      ??checkVin_20
    924                checkVoutOnT--;
   \   000348   90....       MOV     DPTR,#checkVoutOnT
   \   00034B   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_124:
   \   00034E   80D6         SJMP    ??checkVin_18
    925              else
    926              {
    927                checkVoutOnT = 8 * (UINT16)page.fallback_time;
   \                     ??checkVin_20:
   \   000350   75..00       MOV     ?V0 + 1,#0x0
   \   000353   7403         MOV     A,#0x3
   \   000355   78..         MOV     R0,#?V0 + 0
   \   000357   12....       LCALL   ?S_SHL
   \   00035A   90....       MOV     DPTR,#checkVoutOnT
   \   00035D   E5..         MOV     A,?V0 + 0
   \   00035F   F0           MOVX    @DPTR,A
   \   000360   A3           INC     DPTR
   \   000361   E5..         MOV     A,?V0 + 1
   \   000363   12....       LCALL   ??Subroutine75_0
    928                if ((ProtectionLimitsExceeded & TemperatureSteppedDownMask) == TemperatureSteppedDownMask)
   \                     ??CrossCallReturnLabel_242:
   \   000366   A2E4         MOV     C,0xE0 /* A   */.4
   \   000368   503B         JNC     ??checkVin_21
    929                {
    930                  if ( t < ((INT16)page.ton_fallback) ) /* if temperature less than T_COLD */
   \   00036A   90....       MOV     DPTR,#(page + 226)
   \   00036D   E0           MOVX    A,@DPTR
   \   00036E   F8           MOV     R0,A
   \   00036F   C3           CLR     C
   \   000370   EA           MOV     A,R2
   \   000371   98           SUBB    A,R0
   \   000372   12....       LCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_191:
   \   000375   5020         JNC     ??checkVin_22
    931                  {
    932                    if ( !P1_4 )
   \   000377   A294         MOV     C,0x90.4
   \   000379   400D         JC      ??checkVin_23
    933                    {
    934                      if (*ModuleOffRememberedPtr == ModuleStatusOffTemperature)
   \   00037B   90FFFD       MOV     DPTR,#-0x3
   \   00037E   E0           MOVX    A,@DPTR
   \   00037F   64A6         XRL     A,#0xa6
   \   000381   7005         JNZ     ??checkVin_23
    935                      {
    936                        *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \   000383   E4           CLR     A
   \   000384   F0           MOVX    @DPTR,A
    937                        ov_startup(); /* module attempt turn on , starting OV seq */
   \   000385                ; Setup parameters for call to function ov_startup
   \   000385   12....       LCALL   ov_startup
    938                      }
    939                    }
    940                                
    941                    T3CC1 = oc2timer(theOC = setOC);
   \                     ??checkVin_23:
   \   000388   90....       MOV     DPTR,#setOC
   \   00038B   E0           MOVX    A,@DPTR
   \   00038C   12....       LCALL   ?Subroutine71
    942          
    943                    ProtectionLimitsExceeded &= NotTemperatureModuleOffAndSteppedDownMask; /* Both Protections cancelled here */
   \                     ??CrossCallReturnLabel_227:
   \   00038F   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   000392   E0           MOVX    A,@DPTR
   \   000393   54CF         ANL     A,#0xcf
   \   000395   808F         SJMP    ??checkVin_18
    944                  } /* END  if ( t < ((INT16)page.ton_fallback) )  */
    945                  else if ( P1_4 && theOC )
   \                     ??checkVin_22:
   \   000397   A294         MOV     C,0x90.4
   \   000399   5044         JNC     ??CrossCallReturnLabel_330
   \   00039B   90....       MOV     DPTR,#theOC
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   603E         JZ      ??CrossCallReturnLabel_330
    946                    T3CC1 = oc2timer( --theOC );
   \   0003A1   14           DEC     A
   \   0003A2   F0           MOVX    @DPTR,A
   \   0003A3                ; Setup parameters for call to function oc2timer
   \   0003A3   8037         SJMP    ??checkVin_24
    947                } /* END  if( isSteppedDown ) */
    948                else if ( P1_4 && ( t > ((INT16)page.toff_fallback)) )
   \                     ??checkVin_21:
   \   0003A5   A294         MOV     C,0x90.4
   \   0003A7   5036         JNC     ??CrossCallReturnLabel_330
   \   0003A9   90....       MOV     DPTR,#(page + 225)
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   12....       LCALL   ?Subroutine66
   \                     ??CrossCallReturnLabel_199:
   \   0003B0   502D         JNC     ??CrossCallReturnLabel_330
    949                {
    950                  if ( (theOC > page.oc_protection ) || (OcRamp <= 0))
   \   0003B2   90....       MOV     DPTR,#(page + 230)
   \   0003B5   E0           MOVX    A,@DPTR
   \   0003B6   FB           MOV     R3,A
   \   0003B7   90....       MOV     DPTR,#theOC
   \   0003BA   E0           MOVX    A,@DPTR
   \   0003BB   FA           MOV     R2,A
   \   0003BC   EB           MOV     A,R3
   \   0003BD   C3           CLR     C
   \   0003BE   9A           SUBB    A,R2
   \   0003BF   500F         JNC     ??checkVin_25
    951                  {
    952                    atomicChange( OcRamp, 0 ); 
   \   0003C1   90....       MOV     DPTR,#ticks
   \   0003C4   E0           MOVX    A,@DPTR
   \   0003C5   2418         ADD     A,#0x18
   \   0003C7   12....       LCALL   ??Subroutine2_1
    953                    theOC = page.oc_protection;
   \                     ??CrossCallReturnLabel_3:
   \   0003CA   EB           MOV     A,R3
   \   0003CB   90....       MOV     DPTR,#theOC
   \   0003CE   8002         SJMP    ??checkVin_26
    954                  }
    955                  else
    956                    theOC--;
   \                     ??checkVin_25:
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   14           DEC     A
   \                     ??checkVin_26:
   \   0003D2   12....       LCALL   ??Subroutine75_0
    957                  
    958                  ProtectionLimitsExceeded |= TemperatureSteppedDownMask;
   \                     ??CrossCallReturnLabel_243:
   \   0003D5   D2E4         SETB    0xE0 /* A   */.4
   \   0003D7   F0           MOVX    @DPTR,A
    959                  T3CC1 = oc2timer( theOC );
   \   0003D8                ; Setup parameters for call to function oc2timer
   \   0003D8   90....       MOV     DPTR,#theOC
   \   0003DB   E0           MOVX    A,@DPTR
   \                     ??checkVin_24:
   \   0003DC   12....       LCALL   ?Subroutine105
    960                } /* END else if ( P1_4 && (t > ((INT16)page.toff_fallback)) ) */
    961              } /* END else (checkVoutOnT == 0) */
    962            } /* END else if (page,fallback_time ... */
    963              
    964          #ifdef MidString
    965            if ( (flags[ PackageReceived ]) || (flags[DataSent]) )
   \                     ??CrossCallReturnLabel_330:
   \   0003DF   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_9:
   \   0003E2   6003         JZ      $+5
   \   0003E4   02....       LJMP    ??checkVin_6
   \   0003E7   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_22:
   \   0003EA   6003         JZ      $+5
   \   0003EC   02....       LJMP    ??checkVin_6
    966            { 
    967              flags[AltCheckVin] = TRUE;
    968              return;
    969            }
    970            
    971            if ( page.shortCircuitLevel && P1_4 )
   \   0003EF   90....       MOV     DPTR,#(page + 159)
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   6052         JZ      ??checkVin_27
   \   0003F5   A294         MOV     C,0x90.4
   \   0003F7   504E         JNC     ??checkVin_27
    972            { /* module on and shortCircuitLevel is not 0 */
    973              
    974              UINT16 vout;
    975              _coeff = page.linearK[0];
   \   0003F9   90....       MOV     DPTR,#_coeff
   \   0003FC   74..         MOV     A,#((page + 40) & 0xff)
   \   0003FE   F0           MOVX    @DPTR,A
   \   0003FF   A3           INC     DPTR
   \   000400   74..         MOV     A,#(((page + 40) >> 8) & 0xff)
   \   000402   F0           MOVX    @DPTR,A
    976              vout = convU( lin_coeff( ((float) last[0])*checkVref ) );
   \   000403                ; Setup parameters for call to function convU
   \   000403                ; Setup parameters for call to function lin_coeff
   \   000403   90....       MOV     DPTR,#last
   \   000406   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_16:
   \   000409   12....       LCALL   ?UL_TO_FLT
   \   00040C   90....       MOV     DPTR,#checkVref
   \   00040F   78..         MOV     R0,#?V0 + 4
   \   000411   12....       LCALL   ?L_MOV_X
   \   000414   78..         MOV     R0,#?V0 + 0
   \   000416   79..         MOV     R1,#?V0 + 4
   \   000418   12....       LCALL   ?FLT_MUL
   \   00041B   12....       LCALL   ?Subroutine82
    977              
    978              if ( ocShortCircuitLimit < 255 )
   \                     ??CrossCallReturnLabel_268:
   \   00041E   90....       MOV     DPTR,#ocShortCircuitLimit
   \   000421   E0           MOVX    A,@DPTR
   \   000422   64FF         XRL     A,#0xff
   \   000424   C3           CLR     C
   \   000425   600F         JZ      ??checkVin_28
    979              { /* Short Circuit Protection is currently ON */
    980                if ( vout > shortCircuitProtectionOff ) // was 8000 - 160V on Midstring 600V, 16000 (320 V) on MS1000 turning Short Circuit Protection OFF
   \   000427   E8           MOV     A,R0
   \   000428   9459         SUBB    A,#0x59
   \   00042A   E9           MOV     A,R1
   \   00042B   9434         SUBB    A,#0x34
   \   00042D   401E         JC      ??checkVin_29
    981                {
    982                  ocShortCircuitLimit = 255;
   \   00042F   74FF         MOV     A,#-0x1
   \                     ??checkVin_30:
   \   000431   12....       LCALL   ?Subroutine34
    983                  T3CC1 = oc2timer( theOC );
   \                     ??CrossCallReturnLabel_84:
   \   000434   8017         SJMP    ??checkVin_29
    984                }
    985              }
    986              else
    987              {  /* Short Circuit Protection is currently OFF */
    988                if ( vout < shortCircuitProtectionOn ) // was 6000 - 120V on Midstring 600V, was 1200 for MS1000, turning Short Circuit Protection ON
   \                     ??checkVin_28:
   \   000436   E8           MOV     A,R0
   \   000437   9410         SUBB    A,#0x10
   \   000439   E9           MOV     A,R1
   \   00043A   9427         SUBB    A,#0x27
   \   00043C   500F         JNC     ??checkVin_29
    989                {
    990                  ocShortCircuitLimit = page.shortCircuitLevel;
   \   00043E   90....       MOV     DPTR,#(page + 159)
   \   000441   E0           MOVX    A,@DPTR
   \   000442   90....       MOV     DPTR,#ocShortCircuitLimit
   \   000445   80EA         SJMP    ??checkVin_30
    991                  T3CC1 = oc2timer( theOC );
    992                }
    993              }
    994            }
    995            else 
    996              ocShortCircuitLimit = 255;  // if module OFF -> no Short Circuit Protection, turning it OFF
   \                     ??checkVin_27:
   \   000447   74FF         MOV     A,#-0x1
   \   000449   90....       MOV     DPTR,#ocShortCircuitLimit
   \                     ??checkVin_8:
   \   00044C   F0           MOVX    @DPTR,A
   \                     ??checkVin_29:
   \   00044D   02....       LJMP    ??Subroutine121_1
   \   000450                REQUIRE _A_P1
   \   000450                REQUIRE T3CC1
    997          #endif    
    998              
    999          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   AA..         MOV     R2,?V0 + 0
   \   000002   AB..         MOV     R3,?V0 + 1
   \   000004   AC..         MOV     R4,?V0 + 2
   \   000006   AD..         MOV     R5,?V0 + 3
   \   000008   12....       LCALL   lin_coeff
   \   00000B   12....       LCALL   convU
   \   00000E   8A..         MOV     ?V0 + 0,R2
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   A8..         MOV     R0,?V0 + 0
   \   000014   A9..         MOV     R1,?V0 + 1
   \   000016   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   C294         CLR     0x90.4
   \   000002   C293         CLR     0x90.3
   \   000004   746A         MOV     A,#0x6a
   \   000006   90FFFD       MOV     DPTR,#-0x3
   \                     ??Subroutine75_0:
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   90....       MOV     DPTR,#theOC
   \                     ??Subroutine71_0:
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function oc2timer
   \   000004                ; Setup parameters for call to function oc2timer
   \   000004                ; Setup parameters for call to function oc2timer
   \   000004   12....       LCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_331:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   C3           CLR     C
   \   000001   9A           SUBB    A,R2
   \   000002   E4           CLR     A
   \   000003   12....       LCALL   ?Subroutine103
   \                     ??CrossCallReturnLabel_384:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   9B           SUBB    A,R3
   \   000001   02....       LJMP    ?Subroutine116

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ??Subroutine94_0
   \                     ??CrossCallReturnLabel_393:
   \   000003   E8           MOV     A,R0
   \   000004   C3           CLR     C
   \   000005   9A           SUBB    A,R2
   \   000006   FA           MOV     R2,A
   \   000007   E9           MOV     A,R1
   \   000008   9B           SUBB    A,R3
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function oc2timer
   \   000001                ; Setup parameters for call to function oc2timer
   \                     ??Subroutine34_0:
   \   000001   90....       MOV     DPTR,#theOC
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine105
   \                     ??CrossCallReturnLabel_332:
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   F9           MOV     R1,A
   \                     ??Subroutine105_0:
   \   000001   12....       LCALL   oc2timer
   \   000004   E9           MOV     A,R1
   \   000005   F5CF         MOV     0xcf,A
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   75..00       MOV     ?V0 + 2,#0x0
   \   00000A   75..00       MOV     ?V0 + 3,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_325:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24FF         ADD     A,#-0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34FF         ADDC    A,#-0x1
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   90....       MOV     DPTR,#(page + 185)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   A2E0         MOV     C,0xE0 /* A   */.0
   \   000006   9293         MOV     0x90.3,C
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \                     ??Subroutine114_0:
   \   000004   EA           MOV     A,R2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   EB           MOV     A,R3
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(page + 136)
   \                     ??Subroutine0_0:
   \   000004   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_312:
   \   000007   90....       MOV     DPTR,#??protectionModuleOffTimer
   \                     ??Subroutine0_1:
   \   00000A   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_304:
   \   00000D                REQUIRE ?Subroutine116
   \   00000D                ; // Fall through to label ?Subroutine116

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_294:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \                     ??Subroutine45_0:
   \   000004   12....       LCALL   ??Subroutine94_0
   \                     ??CrossCallReturnLabel_394:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_314:
   \   000003   C3           CLR     C
   \   000004   EA           MOV     A,R2
   \   000005   98           SUBB    A,R0
   \   000006   EB           MOV     A,R3
   \   000007   99           SUBB    A,R1
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#(flags + 1)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \                     ??Subroutine3_0:
   \   000005   90....       MOV     DPTR,#flags
   \   000008   12....       LCALL   ?Subroutine100
   \                     ??CrossCallReturnLabel_320:
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#netValue
   \   000004   7446         MOV     A,#0x46
   \   000006                REQUIRE ?Subroutine119
   \   000006                ; // Fall through to label ?Subroutine119

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   90....       MOV     DPTR,#(adcs16 + 4)
   \                     ??Subroutine60_0:
   \   000003   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_319:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_337:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   90....       MOV     DPTR,#lastCycle
   \                     ??Subroutine94_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   02....       LJMP    ?Subroutine117

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   9401         SUBB    A,#0x1
   \   000004   12....       LCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_322:
   \   000007   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   12....       LCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_387:
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   90....       MOV     DPTR,#??protectionModuleOffTimer
   \                     ??Subroutine67_0:
   \   000003   12....       LCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_346:
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??currentFETTickCount:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??protectionModuleOffTimer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1000          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1001          BOOL checkItOut( BOOL *flag_ptr ){
   \                     checkItOut:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1002            if( *flag_ptr ){ *flag_ptr = FALSE; return TRUE; }
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6006         JZ      ??checkItOut_0
   \   00000B   E4           CLR     A
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   7901         MOV     R1,#0x1
   \   00000F   8002         SJMP    ??checkItOut_1
   1003            return FALSE;
   \                     ??checkItOut_0:
   \   000011   7900         MOV     R1,#0x0
   \                     ??checkItOut_1:
   \   000013   02....       LJMP    ??Subroutine115_0
   1004          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1005          UINT16 *ptr2RunningTick = NULL;
   \                     ptr2RunningTick:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1006          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1007          UINT16 computeTI(UINT16 _pt)
   \                     computeTI:
   1008          //    { return ( ( _pt <= (*ptr2RunningTick) ) ? ((*ptr2RunningTick) - _pt) : ((*ptr2RunningTick) + (65535 - _pt)) ); } 
   1009                { return ( ( (_pt&0xFF) <= *((BYTE *)0xF538) ) ? (*((BYTE *)0xF538) - (0xFF&_pt)) : (*((BYTE *)0xF538) + (255 - (0xFF&_pt))) ); } 
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   74FF         MOV     A,#-0x1
   \   000006   5A           ANL     A,R2
   \   000007   F8           MOV     R0,A
   \   000008   90F538       MOV     DPTR,#-0xac8
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C3           CLR     C
   \   00000D   9A           SUBB    A,R2
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   4006         JC      ??computeTI_0
   \   000011   C3           CLR     C
   \   000012   98           SUBB    A,R0
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   800D         SJMP    ??computeTI_1
   \                     ??computeTI_0:
   \   000017   FA           MOV     R2,A
   \   000018   74FF         MOV     A,#-0x1
   \   00001A   2A           ADD     A,R2
   \   00001B   1A           DEC     R2
   \   00001C   E4           CLR     A
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FB           MOV     R3,A
   \   000020   EA           MOV     A,R2
   \   000021   98           SUBB    A,R0
   \   000022   FA           MOV     R2,A
   \   000023   EB           MOV     A,R3
   \                     ??computeTI_1:
   \   000024   9400         SUBB    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   02....       LJMP    ??Subroutine115_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1010          void tickWait(BYTE wait){ 
   \                     tickWait:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1011              ticks[ TickWait ] = ( (INT16)wait ) + 1; //(reset of watchdog should be only in one place)
   \   000005   90....       MOV     DPTR,#ticks
   \   000008   E0           MOVX    A,@DPTR
   \   000009   241C         ADD     A,#0x1c
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FB           MOV     R3,A
   \   000011   89..         MOV     ?V0 + 0,R1
   \   000013   7401         MOV     A,#0x1
   \   000015   25..         ADD     A,?V0 + 0
   \   000017   F8           MOV     R0,A
   \   000018   E4           CLR     A
   \   000019   3400         ADDC    A,#0x0
   \   00001B   F9           MOV     R1,A
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_204:
   \   000023   8005         SJMP    ??tickWait_0
   1012              while( ticks[ TickWait ] > 0 ){ P1_2 ^= 1; };//{ WDCTL = 0xA8;  WDCTL = 0x58; *((BYTE *)0xFFFF) = 0x10; } 
   \                     ??tickWait_1:
   \   000025   639004       XRL     0x90,#0x4
   \   000028   E590         MOV     A,0x90
   \                     ??tickWait_0:
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   C3           CLR     C
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   9401         SUBB    A,#0x1
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   9400         SUBB    A,#0x0
   \   000036   C3           CLR     C
   \   000037   65D0         XRL     A,PSW
   \   000039   33           RLC     A
   \   00003A   50E9         JNC     ??tickWait_1
   1013              ticks[ TickWait ] = 0;
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   80..         SJMP    ?Subroutine122
   \   000045                REQUIRE _A_P1
   1014          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   F0           MOVX    @DPTR,A
   \                     ??Subroutine122_0:
   \   000001   7F02         MOV     R7,#0x2
   \   000003   02....       LJMP    ?FUNC_LEAVE_XDATA
   1015          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1016          void checkMore(){
   \                     checkMore:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1017          BYTE i; UINT16 j; BOOL go8k = FALSE;
   1018              P1_4 = 0;   P1DIR = 0xDB;    // module off
   \   000005   C294         CLR     0x90.4
   \   000007   75FEDB       MOV     0xfe,#-0x25
   1019              for( i = 0; (i<15); i++ ){ // the self check
   \   00000A   7E00         MOV     R6,#0x0
   1020                  BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
   \                     ??checkMore_0:
   \   00000C   8E..         MOV     ?V0 + 0,R6
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   740A         MOV     A,#0xa
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?S_SHL
   \   000018   12....       LCALL   ?Subroutine85
   1021                  BOOL flag = TRUE; 
   1022                  *((BYTE *)0xFFFF) = 0x10;
   1023                  for( j = 0; flag && (j < 0x400); j++ ) flag = ( (*ptr++)==0xFF );
   \                     ??CrossCallReturnLabel_273:
   \   00001B   E8           MOV     A,R0
   \   00001C   FA           MOV     R2,A
   \   00001D   E9           MOV     A,R1
   \   00001E   FB           MOV     R3,A
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A882         MOV     R0,DPL
   \   000026   A983         MOV     R1,DPH
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   64FF         XRL     A,#0xff
   \   00002F   7004         JNZ     ??checkMore_1
   \   000031   7A01         MOV     R2,#0x1
   \   000033   8002         SJMP    ??checkMore_2
   \                     ??checkMore_1:
   \   000035   7A00         MOV     R2,#0x0
   \                     ??checkMore_2:
   \   000037   12....       LCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_275:
   \   00003A   6006         JZ      ??checkMore_3
   \   00003C   C3           CLR     C
   \   00003D   ED           MOV     A,R5
   \   00003E   9404         SUBB    A,#0x4
   \   000040   40D9         JC      ??CrossCallReturnLabel_273
   1024                  go8k |= flag;
   1025              }
   \                     ??checkMore_3:
   \   000042   0E           INC     R6
   \   000043   EE           MOV     A,R6
   \   000044   C3           CLR     C
   \   000045   940F         SUBB    A,#0xf
   \   000047   40C3         JC      ??checkMore_0
   1026              //if( go8k ) {void (*f)( void ) = ( void (*)( void ) )0x603F; (*f)();} // commented jump to 8k image, Feb 12 2014, 16:35
   1027          }
   \   000049   80..         SJMP    ??Subroutine122_0
   \   00004B                REQUIRE _A_P1
   \   00004B                REQUIRE P1DIR

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   EA           MOV     A,R2
   \   000001   FB           MOV     R3,A
   \   000002   EC           MOV     A,R4
   \   000003   2401         ADD     A,#0x1
   \   000005   0C           INC     R4
   \   000006   ED           MOV     A,R5
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   EB           MOV     A,R3
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   2400         ADD     A,#0x0
   \   000002   F8           MOV     R0,A
   \   000003   7408         MOV     A,#0x8
   \   000005   35..         ADDC    A,?V0 + 1
   \   000007   F9           MOV     R1,A
   \   000008   7410         MOV     A,#0x10
   \   00000A   90FFFF       MOV     DPTR,#-0x1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7D00         MOV     R5,#0x0
   \   000012   22           RET
   1028          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1029          BOOL dec( UINT16 *cntPtr ){ --(*cntPtr); return (*((BYTE *)cntPtr)==0)?TRUE:FALSE; }
   \                     `dec`:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_125:
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7004         JNZ     ??dec_0
   \   000013   7901         MOV     R1,#0x1
   \   000015   8002         SJMP    ??dec_1
   \                     ??dec_0:
   \   000017   7900         MOV     R1,#0x0
   \                     ??dec_1:
   \   000019   02....       LJMP    ??Subroutine115_0
   1030          /******************************************************************************
   1031          * @fn  main
   1032          * @brief
   1033          *      Main function. Triggers setup menus and main loops for both receiver
   1034          *      and transmitter. This function supports both CC1110 and CC2510.
   1035          * Parameters:
   1036          * @param  void
   1037          * @return void
   1038          ******************************************************************************/

   \                                 In  segment XDATA_I, align 1, keep-with-next
   1039          BYTE sleepCounter = 5, saved_channel;
   \                     sleepCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for sleepCounter>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     saved_channel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1040          

   \                                 In  segment XDATA_I, align 1, keep-with-next
   1041          static BOOL   wasAHardResetOrPowerOn = TRUE;
   \                     wasAHardResetOrPowerOn:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for wasAHardResetOrPowerOn>`
   \   000001                REQUIRE __INIT_XDATA_I
   1042          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1043          UINT16 milliSeconds = 0;
   \                     milliSeconds:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1044          BYTE   seconds = 0, minutes = 0;
   \                     seconds:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     minutes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1045          BYTE was_repeater = 0;
   \                     was_repeater:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1046          void main_loop(void)
   \                     main_loop:
   1047          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1048            BYTE idx; 
   1049            static BYTE xored = 1;
   1050            
   1051            for ( idx = 0; idx < N_Of_Flags; idx ++ )
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   1052            {
   1053              if( flags[ idx ] )
   \                     ??main_loop_0:
   \   000008   A8..         MOV     R0,?V0 + 0
   \   00000A   90....       MOV     DPTR,#flags
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   28           ADD     A,R0
   \   00000F   12....       LCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_137:
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??main_loop_1
   1054              {
   1055                flags[ idx ] = FALSE;
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   1056                switch( idx )
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for main_loop>_0`:
   \   00001E   00           DB        0
   \   00001F   05           DB        5
   \   000020   01           DB        1
   \   000021   ....         DW        ??main_loop_2
   \   000023   02           DB        2
   \   000024   ....         DW        ??main_loop_3
   \   000026   03           DB        3
   \   000027   ....         DW        ??main_loop_4
   \   000029   09           DB        9
   \   00002A   ....         DW        ??main_loop_5
   \   00002C   0B           DB        11
   \   00002D   ....         DW        ??main_loop_6
   \   00002F   ....         DW        ??main_loop_7
   1057                {
   1058                case DataSent:
   1059                  rc();
   1060                  if ( was_listening )
   \                     ??main_loop_3:
   \   000031   90....       MOV     DPTR,#was_listening
   \   000034   E0           MOVX    A,@DPTR
   \   000035   600B         JZ      ??main_loop_8
   1061                  { 
   1062                    setupRepeater( FALSE );
   \   000037                ; Setup parameters for call to function setupRepeater
   \   000037   7900         MOV     R1,#0x0
   \                     ??main_loop_9:
   \   000039   12....       LCALL   setupRepeater
   1063                    receive();
   \   00003C                ; Setup parameters for call to function receive
   \   00003C   12....       LCALL   receive
   \   00003F   02....       LJMP    ??main_loop_7
   1064                  }
   1065                  else if ( page.isRelay && (!page.is500Always) )
   \                     ??main_loop_8:
   \   000042   90....       MOV     DPTR,#(page + 194)
   \   000045   E0           MOVX    A,@DPTR
   \   000046   5460         ANL     A,#0x60
   \   000048   6420         XRL     A,#0x20
   \   00004A   6003         JZ      $+5
   \   00004C   02....       LJMP    ??main_loop_7
   1066                  { 
   1067                    setupRepeater( got_gw );
   \   00004F                ; Setup parameters for call to function setupRepeater
   \   00004F   90....       MOV     DPTR,#got_gw
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   80E3         SJMP    ??main_loop_9
   1068                    receive();
   1069                  }
   1070                  break;
   1071                
   1072                case PrepareJoin:
   1073                  prepareJoinRequest();
   \                     ??main_loop_4:
   \   000056                ; Setup parameters for call to function prepareJoinRequest
   \   000056   12....       LCALL   prepareJoinRequest
   \   000059   02....       LJMP    ??main_loop_7
   1074                  break;
   1075                                    
   1076                case PackageReceived:
   1077                  parseGWPackage();
   \                     ??main_loop_2:
   \   00005C                ; Setup parameters for call to function parseGWPackage
   \   00005C   12....       LCALL   parseGWPackage
   \   00005F   02....       LJMP    ??main_loop_7
   1078                  break;
   1079                              
   1080                case AltCheckVin:
   1081                  if ( ( PKTSTATUS & 0x4 ) && ( ( MARCSTATE > 0xC ) && ( MARCSTATE < 0x10 ) ) )
   \                     ??main_loop_6:
   \   000062   90DF3C       MOV     DPTR,#-0x20c4
   \   000065   E0           MOVX    A,@DPTR
   \   000066   A2E2         MOV     C,0xE0 /* A   */.2
   \   000068   5014         JNC     ??main_loop_10
   \   00006A   90DF3B       MOV     DPTR,#-0x20c5
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   C3           CLR     C
   \   00006F   940D         SUBB    A,#0xd
   \   000071   400B         JC      ??main_loop_10
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C3           CLR     C
   \   000075   9410         SUBB    A,#0x10
   \   000077   5005         JNC     ??main_loop_10
   1082                    flags[AltCheckVin] = TRUE; /* receving a packet */
   \                     ??main_loop_11:
   \   000079   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_42:
   \   00007C   802D         SJMP    ??main_loop_12
   1083                  else if( flags[PackageReceived] || flags[DataSent] )
   \                     ??main_loop_10:
   \   00007E   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_10:
   \   000081   70F6         JNZ     ??main_loop_11
   \   000083   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_23:
   \   000086   70F1         JNZ     ??main_loop_11
   1084                    flags[AltCheckVin] = TRUE; /* receving a packet */
   1085                  else if( ( ( ticks[SendData] > 14*TICKS_IN_MS ) || ( ticks[SendData] == 0 ) ) && ( ( ticks[DelayedPrepareData] > 14*TICKS_IN_MS ) || ( ticks[DelayedPrepareData] == 0 ) ) ) 
   \   000088   12....       LCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_76:
   \   00008B   12....       LCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_57:
   \   00008E   5006         JNC     ??main_loop_13
   \   000090   E8           MOV     A,R0
   \   000091   7001         JNZ     ??main_loop_14
   \   000093   E9           MOV     A,R1
   \                     ??main_loop_14:
   \   000094   70E3         JNZ     ??main_loop_11
   \                     ??main_loop_13:
   \   000096   12....       LCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_93:
   \   000099   12....       LCALL   ?Subroutine21
   \                     ??CrossCallReturnLabel_58:
   \   00009C   5006         JNC     ??main_loop_15
   \   00009E   E8           MOV     A,R0
   \   00009F   7001         JNZ     ??main_loop_16
   \   0000A1   E9           MOV     A,R1
   \                     ??main_loop_16:
   \   0000A2   70D5         JNZ     ??main_loop_11
   1086                    computeADCs( FALSE, TRUE ); /*checkVin(); */
   \                     ??main_loop_15:
   \   0000A4                ; Setup parameters for call to function computeADCs
   \   0000A4   7A01         MOV     R2,#0x1
   \   0000A6   7900         MOV     R1,#0x0
   \   0000A8   12....       LCALL   computeADCs
   1087                  else
   1088                    flags[AltCheckVin] = TRUE;
   1089                  if( (((INT16)adcs16[ 2 ]) < page.cur_noise ) )
   \                     ??main_loop_12:
   \   0000AB   90....       MOV     DPTR,#(page + 232)
   \   0000AE   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_169:
   \   0000B1   7583..       MOV     DPH,#(((adcs16 + 4) >> 8) & 0xff)
   \   0000B4   7582..       MOV     DPL,#((adcs16 + 4) & 0xff)
   \   0000B7   12....       LCALL   ??Subroutine0_1
   \                     ??CrossCallReturnLabel_378:
   \   0000BA   4003         JC      $+5
   \   0000BC   02....       LJMP    ??main_loop_7
   1090                  {
   1091                    T3CC1 = theOC = 0;
   \   0000BF   E4           CLR     A
   \   0000C0   90....       MOV     DPTR,#theOC
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   75CF00       MOV     0xcf,#0x0
   1092                    atomicChange( OcRamp, TICKS_IN_SEC ); 
   \   0000C7   90....       MOV     DPTR,#ticks
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   2418         ADD     A,#0x18
   \   0000CD   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_140:
   \   0000D0   74D0         MOV     A,#-0x30
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   7407         MOV     A,#0x7
   \   0000D6   02....       LJMP    ??main_loop_17
   1093                  }
   1094                  break;
   1095                
   1096                case Cycle:
   1097                  if ( dec( &cycles2SoftKick )  )
   \                     ??main_loop_5:
   \   0000D9                ; Setup parameters for call to function dec
   \   0000D9   7A..         MOV     R2,#(cycles2SoftKick & 0xff)
   \   0000DB   7B..         MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
   \   0000DD   12....       LCALL   `dec`
   \   0000E0   E9           MOV     A,R1
   \   0000E1   6006         JZ      ??CrossCallReturnLabel_87
   1098                  { 
   1099                    softKick();
   \   0000E3                ; Setup parameters for call to function softKick
   \   0000E3   12....       LCALL   softKick
   1100                    cycles2SoftKick  = page.defCycles2SoftKick;  
   \   0000E6   12....       LCALL   ?Subroutine35
   1101                  }
   1102                  if ( cycles2HardKick < 10 )
   \                     ??CrossCallReturnLabel_87:
   \   0000E9   90....       MOV     DPTR,#cycles2HardKick
   \   0000EC   C3           CLR     C
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   940A         SUBB    A,#0xa
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   9400         SUBB    A,#0x0
   \   0000F4   5003         JNC     ??CrossCallReturnLabel_272
   1103                  {
   1104                    switchTo255();
   \   0000F6                ; Setup parameters for call to function switchTo255
   \   0000F6   12....       LCALL   ?Subroutine84
   1105                    ch255 = FALSE;
   1106                  }
   1107                                      
   1108                  if ( ++cyclesFromStart > 50 )
   \                     ??CrossCallReturnLabel_272:
   \   0000F9   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_40:
   \   0000FC   4007         JC      ??main_loop_18
   1109                    wasAHardResetOrPowerOn = FALSE;
   \   0000FE   E4           CLR     A
   \   0000FF   90....       MOV     DPTR,#wasAHardResetOrPowerOn
   \   000102   F0           MOVX    @DPTR,A
   \   000103   8009         SJMP    ??main_loop_19
   1110                                      
   1111                  if ( (!wasAHardResetOrPowerOn) && page.searchCommunication )
   \                     ??main_loop_18:
   \   000105   90....       MOV     DPTR,#wasAHardResetOrPowerOn
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6003         JZ      $+5
   \   00010B   02....       LJMP    ??main_loop_7
   \                     ??main_loop_19:
   \   00010E   90....       MOV     DPTR,#(page + 194)
   \   000111   E0           MOVX    A,@DPTR
   \   000112   A2E7         MOV     C,0xE0 /* A   */.7
   \   000114   4003         JC      $+5
   \   000116   02....       LJMP    ??main_loop_7
   1112                  {
   1113                    if ( page.is500Always )
   \   000119   A2E6         MOV     C,0xE0 /* A   */.6
   \   00011B   504F         JNC     ??main_loop_20
   1114                    {
   1115                      if ( dec( &cyclesTo10 ) ) 
   \   00011D                ; Setup parameters for call to function dec
   \   00011D   7A..         MOV     R2,#(cyclesTo10 & 0xff)
   \   00011F   7B..         MOV     R3,#((cyclesTo10 >> 8) & 0xff)
   \   000121   12....       LCALL   `dec`
   \   000124   E9           MOV     A,R1
   \   000125   6018         JZ      ??main_loop_21
   1116                      { 
   1117                        cyclesTo500 = page.defCyclesTo500;
   \   000127   12....       LCALL   ?Subroutine9
   1118                        cycles2Step10Channel = page.defCyclesToStep10Channel;
   1119                                                  
   1120                        page.is500Always = FALSE;
   \                     ??CrossCallReturnLabel_32:
   \   00012A   90....       MOV     DPTR,#(page + 194)
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   C2E6         CLR     0xE0 /* A   */.6
   \   000130   F0           MOVX    @DPTR,A
   1121                        setupRadio( curChannel = page.channel );
   \   000131   90....       MOV     DPTR,#(page + 164)
   \   000134   E0           MOVX    A,@DPTR
   \   000135   90....       MOV     DPTR,#curChannel
   \                     ??main_loop_22:
   \   000138   F0           MOVX    @DPTR,A
   \   000139                ; Setup parameters for call to function setupRadio
   \                     ??main_loop_23:
   \   000139   F9           MOV     R1,A
   \   00013A   12....       LCALL   setupRadio
   \   00013D   8073         SJMP    ??main_loop_7
   1122                      }
   1123                      else if ( dec( &cyclesToStep500Channel ) )
   \                     ??main_loop_21:
   \   00013F                ; Setup parameters for call to function dec
   \   00013F   7A..         MOV     R2,#(cyclesToStep500Channel & 0xff)
   \   000141   7B..         MOV     R3,#((cyclesToStep500Channel >> 8) & 0xff)
   \   000143   12....       LCALL   `dec`
   \   000146   E9           MOV     A,R1
   \   000147   6069         JZ      ??main_loop_7
   1124                      { 
   1125                        cyclesToStep500Channel = page.defCyclesToStep500Channel;
   \   000149   12....       LCALL   ?Subroutine36
   1126                        page.starting500Channel = curChannel = (curChannel + page.repStep) % 250;
   \                     ??CrossCallReturnLabel_89:
   \   00014C   90....       MOV     DPTR,#curChannel
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F8           MOV     R0,A
   \   000151   90....       MOV     DPTR,#(page + 222)
   \   000154   E0           MOVX    A,@DPTR
   \   000155   28           ADD     A,R0
   \   000156   F8           MOV     R0,A
   \   000157   E4           CLR     A
   \   000158   3400         ADDC    A,#0x0
   \   00015A   F9           MOV     R1,A
   \   00015B   7AFA         MOV     R2,#-0x6
   \   00015D   7B00         MOV     R3,#0x0
   \   00015F   12....       LCALL   ?S_DIV_MOD
   \   000162   EA           MOV     A,R2
   \   000163   90....       MOV     DPTR,#curChannel
   \   000166   F0           MOVX    @DPTR,A
   \   000167   90....       MOV     DPTR,#(page + 218)
   \   00016A   80CC         SJMP    ??main_loop_22
   1127                        setupRadio( curChannel );
   1128                      }
   1129                    }
   1130                    else
   1131                    {
   1132                      if( dec( &cyclesTo500 ) )
   \                     ??main_loop_20:
   \   00016C                ; Setup parameters for call to function dec
   \   00016C   7A..         MOV     R2,#(cyclesTo500 & 0xff)
   \   00016E   7B..         MOV     R3,#((cyclesTo500 >> 8) & 0xff)
   \   000170   12....       LCALL   `dec`
   \   000173   E9           MOV     A,R1
   \   000174   6027         JZ      ??main_loop_24
   1133                      { 
   1134                        cyclesTo10 = page.defCyclesTo10;
   \   000176   12....       LCALL   ?Subroutine37
   1135                        cycles2Step10Channel = 0;
   \                     ??CrossCallReturnLabel_91:
   \   000179   90....       MOV     DPTR,#cycles2Step10Channel
   \   00017C   E4           CLR     A
   \   00017D   F0           MOVX    @DPTR,A
   \   00017E   A3           INC     DPTR
   \   00017F   12....       LCALL   ?Subroutine78
   1136                        
   1137                        page.is500Always = TRUE;
   \                     ??CrossCallReturnLabel_253:
   \   000182   D2E6         SETB    0xE0 /* A   */.6
   \   000184   12....       LCALL   ?Subroutine22
   1138                        cyclesToStep500Channel = page.defCyclesToStep500Channel;
   1139                        
   1140                        if( page.starting500Channel == 0xFF )
   \                     ??CrossCallReturnLabel_59:
   \   000187   64FF         XRL     A,#0xff
   \   000189   7008         JNZ     ??main_loop_25
   1141                          page.starting500Channel = page.channel;
   \   00018B   90....       MOV     DPTR,#(page + 164)
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   90....       MOV     DPTR,#(page + 218)
   \   000192   F0           MOVX    @DPTR,A
   1142                        
   1143                        curChannel = page.starting500Channel;
   \                     ??main_loop_25:
   \   000193   E0           MOVX    A,@DPTR
   \   000194   12....       LCALL   ?Subroutine2
   1144                        ticks[ Hop ] = 0;
   1145                        setupRadio( curChannel );
   \                     ??CrossCallReturnLabel_0:
   \   000197                ; Setup parameters for call to function setupRadio
   \   000197   90....       MOV     DPTR,#curChannel
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   809C         SJMP    ??main_loop_23
   1146                      }
   1147                      else if( dec( &cycles2Step10Channel ) )
   \                     ??main_loop_24:
   \   00019D                ; Setup parameters for call to function dec
   \   00019D   7A..         MOV     R2,#(cycles2Step10Channel & 0xff)
   \   00019F   7B..         MOV     R3,#((cycles2Step10Channel >> 8) & 0xff)
   \   0001A1   12....       LCALL   `dec`
   \   0001A4   E9           MOV     A,R1
   \   0001A5   600B         JZ      ??main_loop_7
   1148                      {
   1149                        CHANNR = curChannel;
   \   0001A7   12....       LCALL   ?Subroutine40
   1150                        hop(); 
   1151                        curChannel = CHANNR; 
   1152                        cycles2Step10Channel = page.defCyclesToStep10Channel;
   \                     ??CrossCallReturnLabel_95:
   \   0001AA   12....       LCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_160:
   \   0001AD   E8           MOV     A,R0
   \   0001AE   F0           MOVX    @DPTR,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E9           MOV     A,R1
   \                     ??main_loop_17:
   \   0001B1   F0           MOVX    @DPTR,A
   1153                      }
   1154                    }
   1155                  }
   1156                  break;
   1157                } /* END switch */
   1158                
   1159                if( flags[ PackageReceived ] || flags[DataSent] )
   \                     ??main_loop_7:
   \   0001B2   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_11:
   \   0001B5   7011         JNZ     ??main_loop_26
   \   0001B7   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_24:
   \   0001BA   700C         JNZ     ??main_loop_26
   1160                  break;
   1161              } /* if ( flags ) */
   1162                  
   1163            }/* END   for ( idx = 0; idx < N_Of_Flags; idx ++ ) */
   \                     ??main_loop_1:
   \   0001BC   05..         INC     ?V0 + 0
   \   0001BE   E5..         MOV     A,?V0 + 0
   \   0001C0   C3           CLR     C
   \   0001C1   9410         SUBB    A,#0x10
   \   0001C3   5003         JNC     $+5
   \   0001C5   02....       LJMP    ??main_loop_0
   1164            
   1165            for ( idx = 0; idx < N_Of_Ticks; idx++ )
   \                     ??main_loop_26:
   \   0001C8   75..00       MOV     ?V0 + 0,#0x0
   1166            {
   1167              if ( ticks[ idx ] < 0 )
   \                     ??main_loop_27:
   \   0001CB   E5..         MOV     A,?V0 + 0
   \   0001CD   C3           CLR     C
   \   0001CE   33           RLC     A
   \   0001CF   F8           MOV     R0,A
   \   0001D0   E4           CLR     A
   \   0001D1   33           RLC     A
   \   0001D2   F9           MOV     R1,A
   \   0001D3   90....       MOV     DPTR,#ticks
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   28           ADD     A,R0
   \   0001D8   F8           MOV     R0,A
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   39           ADDC    A,R1
   \   0001DC   F9           MOV     R1,A
   \   0001DD   8882         MOV     DPL,R0
   \   0001DF   8983         MOV     DPH,R1
   \   0001E1   12....       LCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_186:
   \   0001E4   4003         JC      $+5
   \   0001E6   02....       LJMP    ??main_loop_28
   1168              {
   1169                ticks[ idx ] = 0;
   \   0001E9   8882         MOV     DPL,R0
   \   0001EB   8983         MOV     DPH,R1
   \   0001ED   E4           CLR     A
   \   0001EE   F0           MOVX    @DPTR,A
   \   0001EF   A3           INC     DPTR
   \   0001F0   F0           MOVX    @DPTR,A
   1170                
   1171                switch( idx )
   \   0001F1   E5..         MOV     A,?V0 + 0
   \   0001F3   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for main_loop>_1`:
   \   0001F6   02           DB        2
   \   0001F7   0D           DB        13
   \   0001F8   ....         DW        ??main_loop_28
   \   0001FA   ....         DW        ??main_loop_29
   \   0001FC   ....         DW        ??main_loop_30
   \   0001FE   ....         DW        ??main_loop_31
   \   000200   ....         DW        ??main_loop_32
   \   000202   ....         DW        ??main_loop_33
   \   000204   ....         DW        ??main_loop_28
   \   000206   ....         DW        ??main_loop_34
   \   000208   ....         DW        ??main_loop_35
   \   00020A   ....         DW        ??main_loop_36
   \   00020C   ....         DW        ??main_loop_37
   \   00020E   ....         DW        ??main_loop_38
   \   000210   ....         DW        ??main_loop_39
   \   000212   ....         DW        ??main_loop_28
   \   000214   ....         DW        ??main_loop_40
   1172                {
   1173                case FeedTheDog:
   1174                  WDCTL = 0xA8;
   \                     ??main_loop_29:
   \   000216   75C9A8       MOV     0xc9,#-0x58
   1175                  WDCTL = 0x58;
   \   000219   75C958       MOV     0xc9,#0x58
   1176                  ticks[ FeedTheDog ] = _dogFeeding;
   \   00021C   12....       LCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_78:
   \   00021F   F0           MOVX    @DPTR,A
   \   000220   A3           INC     DPTR
   \   000221   E4           CLR     A
   \   000222   02....       LJMP    ??CrossCallReturnLabel_197
   1177                  break;
   1178                
   1179                case SendData:
   1180                  if ( !bunchCount )
   \                     ??main_loop_30:
   \   000225   90....       MOV     DPTR,#bunchCount
   \   000228   E0           MOVX    A,@DPTR
   \   000229   7003         JNZ     $+5
   \   00022B   02....       LJMP    ??main_loop_28
   1181                    break;
   1182                  if ( bunchCount )
   1183                    bunchCount--;
   \   00022E   14           DEC     A
   \   00022F   F0           MOVX    @DPTR,A
   1184                  
   1185                  *((BYTE *)0xF538) = 0;
   \   000230   E4           CLR     A
   \   000231   90F538       MOV     DPTR,#-0xac8
   \   000234   F0           MOVX    @DPTR,A
   1186                  was_repeater = ( ADDR == page.gwAddr );
   \   000235   90DF05       MOV     DPTR,#-0x20fb
   \   000238   E0           MOVX    A,@DPTR
   \   000239   FA           MOV     R2,A
   \   00023A   90....       MOV     DPTR,#(page + 191)
   \   00023D   E0           MOVX    A,@DPTR
   \   00023E   6A           XRL     A,R2
   \   00023F   7004         JNZ     ??main_loop_41
   \   000241   7A01         MOV     R2,#0x1
   \   000243   8002         SJMP    ??main_loop_42
   \                     ??main_loop_41:
   \   000245   7A00         MOV     R2,#0x0
   \                     ??main_loop_42:
   \   000247   EA           MOV     A,R2
   \   000248   90....       MOV     DPTR,#was_repeater
   \   00024B   F0           MOVX    @DPTR,A
   1187                  
   1188                  if ( packagePrepared )
   \   00024C   90....       MOV     DPTR,#packagePrepared
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   7003         JNZ     $+5
   \   000252   02....       LJMP    ??main_loop_28
   1189                  {
   1190                    if ( !was_repeater )
   \   000255   90....       MOV     DPTR,#was_repeater
   \   000258   E0           MOVX    A,@DPTR
   \   000259   7012         JNZ     ??main_loop_43
   1191                      was_listening = (si->radioMode == RADIO_MODE_RX);
   \   00025B   12....       LCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_80:
   \   00025E   6420         XRL     A,#0x20
   \   000260   7004         JNZ     ??main_loop_44
   \   000262   7A01         MOV     R2,#0x1
   \   000264   8002         SJMP    ??main_loop_45
   \                     ??main_loop_44:
   \   000266   7A00         MOV     R2,#0x0
   \                     ??main_loop_45:
   \   000268   EA           MOV     A,R2
   \   000269   90....       MOV     DPTR,#was_listening
   \   00026C   F0           MOVX    @DPTR,A
   1192                    
   1193                    if ( isCalibrationPackage && reportScaling )
   \                     ??main_loop_43:
   \   00026D   90....       MOV     DPTR,#isCalibrationPackage
   \   000270   E0           MOVX    A,@DPTR
   \   000271   601C         JZ      ??main_loop_46
   \   000273   90....       MOV     DPTR,#reportScaling
   \   000276   E0           MOVX    A,@DPTR
   \   000277   6016         JZ      ??main_loop_46
   1194                    {
   1195                      isCalibrationPackage--;
   \   000279   90....       MOV     DPTR,#isCalibrationPackage
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   14           DEC     A
   \   00027E   F0           MOVX    @DPTR,A
   1196                      reportScaling--; 
   \   00027F   90....       MOV     DPTR,#reportScaling
   \   000282   E0           MOVX    A,@DPTR
   \   000283   14           DEC     A
   \   000284   F0           MOVX    @DPTR,A
   1197                      
   1198                      if ( !reportScaling )
   \   000285   7010         JNZ     ??main_loop_47
   1199                        base_ptr = NULL;
   \   000287   90....       MOV     DPTR,#base_ptr
   \   00028A   E4           CLR     A
   \   00028B   F0           MOVX    @DPTR,A
   \   00028C   A3           INC     DPTR
   \   00028D   8007         SJMP    ??main_loop_48
   1200                    }
   1201                    else if ( reportFlashCheck )
   \                     ??main_loop_46:
   \   00028F   90....       MOV     DPTR,#reportFlashCheck
   \   000292   E0           MOVX    A,@DPTR
   \   000293   6002         JZ      ??main_loop_47
   1202                      reportFlashCheck--;
   \   000295   14           DEC     A
   \                     ??main_loop_48:
   \   000296   F0           MOVX    @DPTR,A
   1203                    
   1204                    sendData( radioPktBufferTx, FALSE );
   \                     ??main_loop_47:
   \   000297                ; Setup parameters for call to function sendData
   \   000297   7900         MOV     R1,#0x0
   \   000299   7A..         MOV     R2,#(radioPktBufferTx & 0xff)
   \   00029B   7B..         MOV     R3,#((radioPktBufferTx >> 8) & 0xff)
   \   00029D   12....       LCALL   sendData
   1205                    
   1206                    if ( page.gbunch && ( ( page.gbunch <= 7 ) || ( page.rbunch <= 7 ) ) )
   \   0002A0   90....       MOV     DPTR,#(page + 158)
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   FA           MOV     R2,A
   \   0002A5   7003         JNZ     $+5
   \   0002A7   02....       LJMP    ??main_loop_28
   \   0002AA   90....       MOV     DPTR,#(page + 157)
   \   0002AD   E0           MOVX    A,@DPTR
   \   0002AE   FB           MOV     R3,A
   \   0002AF   EA           MOV     A,R2
   \   0002B0   C3           CLR     C
   \   0002B1   9408         SUBB    A,#0x8
   \   0002B3   4009         JC      ??main_loop_49
   \   0002B5   EB           MOV     A,R3
   \   0002B6   C3           CLR     C
   \   0002B7   9408         SUBB    A,#0x8
   \   0002B9   4003         JC      $+5
   \   0002BB   02....       LJMP    ??main_loop_28
   1207                    {
   1208                      BYTE b;
   1209                      if ( page.rbunch && ( page.rbunch < page.gbunch ) )
   \                     ??main_loop_49:
   \   0002BE   EB           MOV     A,R3
   \   0002BF   6008         JZ      ??main_loop_50
   \   0002C1   C3           CLR     C
   \   0002C2   9A           SUBB    A,R2
   \   0002C3   5004         JNC     ??main_loop_50
   1210                        b = page.rbunch;
   \   0002C5   8B..         MOV     ?V0 + 2,R3
   \   0002C7   8002         SJMP    ??main_loop_51
   1211                      else
   1212                        b = page.gbunch;
   \                     ??main_loop_50:
   \   0002C9   8A..         MOV     ?V0 + 2,R2
   1213                      
   1214                      if ( page.use12kbod )
   \                     ??main_loop_51:
   \   0002CB   90....       MOV     DPTR,#ticks
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   2406         ADD     A,#0x6
   \   0002D1   12....       LCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_71:
   \   0002D4   5013         JNC     ??main_loop_52
   1215                      {
   1216                        if ( b <= 18 )
   \   0002D6   E5..         MOV     A,?V0 + 2
   \   0002D8   C3           CLR     C
   \   0002D9   9413         SUBB    A,#0x13
   \   0002DB   502E         JNC     ??main_loop_53
   1217                          atomicChange( SendData, lastCycle*b - 1 -*((BYTE *)0xF538)-xored);
   \   0002DD   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_36:
   \   0002E0   74FF         MOV     A,#-0x1
   \   0002E2   2A           ADD     A,R2
   \   0002E3   1A           DEC     R2
   \   0002E4   74FF         MOV     A,#-0x1
   \   0002E6   3B           ADDC    A,R3
   \   0002E7   8011         SJMP    ??main_loop_54
   1218                      }
   1219                      else
   1220                      {
   1221                        if ( b == 1 )
   \                     ??main_loop_52:
   \   0002E9   7401         MOV     A,#0x1
   \   0002EB   65..         XRL     A,?V0 + 2
   \   0002ED   701C         JNZ     ??main_loop_53
   1222                          atomicChange( SendData, lastCycle   - 1 -*((BYTE *)0xF538)-xored);
   \   0002EF   90....       MOV     DPTR,#lastCycle
   \   0002F2   E0           MOVX    A,@DPTR
   \   0002F3   24FF         ADD     A,#-0x1
   \   0002F5   FA           MOV     R2,A
   \   0002F6   A3           INC     DPTR
   \   0002F7   E0           MOVX    A,@DPTR
   \   0002F8   34FF         ADDC    A,#-0x1
   \                     ??main_loop_54:
   \   0002FA   FB           MOV     R3,A
   \   0002FB   90F538       MOV     DPTR,#-0xac8
   \   0002FE   E0           MOVX    A,@DPTR
   \   0002FF   FE           MOV     R6,A
   \   000300   EA           MOV     A,R2
   \   000301   C3           CLR     C
   \   000302   9E           SUBB    A,R6
   \   000303   FA           MOV     R2,A
   \   000304   EB           MOV     A,R3
   \   000305   9400         SUBB    A,#0x0
   \   000307   12....       LCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_196:
   \   00030A   F0           MOVX    @DPTR,A
   1223                      }
   1224                      xored ^= 1;
   \                     ??main_loop_53:
   \   00030B   90....       MOV     DPTR,#??xored
   \   00030E   E0           MOVX    A,@DPTR
   \   00030F   6401         XRL     A,#0x1
   \   000311   02....       LJMP    ??CrossCallReturnLabel_197
   1225                    }
   1226                  }/* END if ( packagePrepared ) */
   1227                  break;
   1228                
   1229                case BypassMode:
   1230                  P1_3 = 0;
   \                     ??main_loop_32:
   \   000314   C293         CLR     0x90.3
   \   000316   02....       LJMP    ??main_loop_28
   1231                  break;
   1232                
   1233                case TurnOn:            
   1234          #ifdef MIDSTRING 
   1235                  if (fetFailure == FALSE)
   \                     ??main_loop_36:
   \   000319   90....       MOV     DPTR,#fetFailure
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   6003         JZ      $+5
   \   00031F   02....       LJMP    ??main_loop_28
   1236                  {
   1237                    turnOnFlag = TRUE;
   \   000322   7401         MOV     A,#0x1
   \   000324   90....       MOV     DPTR,#turnOnFlag
   \   000327   02....       LJMP    ??CrossCallReturnLabel_197
   1238                  }
   1239          #else
   1240                  if ( page.ov == T3CC0 )
   1241                    P1_4 = 1;
   1242                  else 
   1243                    turnOnFlag = TRUE;                                          
   1244          #endif
   1245                  break;                
   1246                
   1247                case Init:
   1248                  if ( (!page.mpp) && page.module )
   \                     ??main_loop_33:
   \   00032A   90....       MOV     DPTR,#(page + 185)
   \   00032D   E0           MOVX    A,@DPTR
   \   00032E   700E         JNZ     ??main_loop_55
   \   000330   90....       MOV     DPTR,#(page + 186)
   \   000333   E0           MOVX    A,@DPTR
   \   000334   6008         JZ      ??main_loop_55
   1249                  {
   1250                    P1_3 = 1; 
   \   000336   D293         SETB    0x90.3
   1251                    atomicChange( BypassMode, TICKS_IN_SEC ); // switching mpp on and switching it off (bypass mode) only after delay
   \   000338   12....       LCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_34:
   \   00033B   F0           MOVX    @DPTR,A
   \   00033C   8003         SJMP    ??CrossCallReturnLabel_158
   1252                  }
   1253                  else
   1254                    P1_3 = page.mpp;
   \                     ??main_loop_55:
   \   00033E   12....       LCALL   ?Subroutine57
   1255                  if( page.module )
   \                     ??CrossCallReturnLabel_158:
   \   000341   90....       MOV     DPTR,#(page + 186)
   \   000344   E0           MOVX    A,@DPTR
   \   000345   7003         JNZ     $+5
   \   000347   02....       LJMP    ??main_loop_28
   1256                    ov_startup();
   \   00034A                ; Setup parameters for call to function ov_startup
   \   00034A   12....       LCALL   ov_startup
   \   00034D   02....       LJMP    ??main_loop_28
   1257                  break;
   1258                
   1259                case Hop:
   1260                  if ( page.hoppingAllowed && !page.is500Always )
   \                     ??main_loop_34:
   \   000350   90....       MOV     DPTR,#(page + 194)
   \   000353   E0           MOVX    A,@DPTR
   \   000354   5450         ANL     A,#0x50
   \   000356   6410         XRL     A,#0x10
   \   000358   703E         JNZ     ??main_loop_31
   1261                  {
   1262                    if ( si->radioMode == RADIO_MODE_TX  )
   \   00035A   12....       LCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_65:
   \   00035D   7008         JNZ     ??main_loop_56
   1263                    {
   1264                      atomicChange( Hop, 1 );
   \   00035F   12....       LCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_97:
   \   000362   7401         MOV     A,#0x1
   \   000364   02....       LJMP    ??CrossCallReturnLabel_78
   1265                      break;
   1266                    }
   1267                    
   1268                    if ( cyclesToHop-- )
   \                     ??main_loop_56:
   \   000367   90....       MOV     DPTR,#cyclesToHop
   \   00036A   E0           MOVX    A,@DPTR
   \   00036B   FA           MOV     R2,A
   \   00036C   74FF         MOV     A,#-0x1
   \   00036E   2A           ADD     A,R2
   \   00036F   F0           MOVX    @DPTR,A
   \   000370   EA           MOV     A,R2
   \   000371   6012         JZ      ??main_loop_57
   1269                    { 
   1270                      CHANNR = curChannel;
   \   000373   12....       LCALL   ?Subroutine40
   1271                      hop();
   1272                      curChannel = CHANNR; 
   1273                      atomicChange( Hop, lastCycle );
   \                     ??CrossCallReturnLabel_96:
   \   000376   90....       MOV     DPTR,#lastCycle
   \   000379   12....       LCALL   ??Subroutine45_0
   \                     ??CrossCallReturnLabel_106:
   \   00037C   12....       LCALL   ?Subroutine41
   \                     ??CrossCallReturnLabel_98:
   \   00037F   EA           MOV     A,R2
   \   000380   F0           MOVX    @DPTR,A
   \   000381   A3           INC     DPTR
   \   000382   EB           MOV     A,R3
   \   000383   800B         SJMP    ??main_loop_58
   1274                    } 
   1275                    else
   1276                    {
   1277                      curChannel = page.channel;
   \                     ??main_loop_57:
   \   000385   90....       MOV     DPTR,#(page + 164)
   \   000388   E0           MOVX    A,@DPTR
   \   000389   90....       MOV     DPTR,#curChannel
   \   00038C   F0           MOVX    @DPTR,A
   1278                      CHANNR = curChannel;
   \   00038D   90DF06       MOV     DPTR,#-0x20fa
   \                     ??main_loop_58:
   \   000390   F0           MOVX    @DPTR,A
   1279                    }
   1280                    ticks[ ReceiveData ] = 0;
   \   000391   12....       LCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_47:
   \   000394   E4           CLR     A
   \   000395   F0           MOVX    @DPTR,A
   \   000396   A3           INC     DPTR
   \   000397   F0           MOVX    @DPTR,A
   1281                  } /* fall through to ReceiveData */
   1282                
   1283                case ReceiveData:
   1284                  setupRepeater( FALSE );
   \                     ??main_loop_31:
   \   000398                ; Setup parameters for call to function setupRepeater
   \   000398   7900         MOV     R1,#0x0
   \   00039A   12....       LCALL   setupRepeater
   1285                  was_listening = TRUE;
   \   00039D   7401         MOV     A,#0x1
   \   00039F   90....       MOV     DPTR,#was_listening
   \   0003A2   F0           MOVX    @DPTR,A
   1286                  receive();
   \   0003A3                ; Setup parameters for call to function receive
   \   0003A3   12....       LCALL   receive
   \   0003A6   02....       LJMP    ??main_loop_28
   1287                  break;
   1288                
   1289                case Ms:
   1290                  atomicChange( Ms, TICKS_IN_SEC );
   \                     ??main_loop_37:
   \   0003A9   12....       LCALL   ?Subroutine5
   1291                  cycles2HardKick--;
   \                     ??CrossCallReturnLabel_18:
   \   0003AC   90....       MOV     DPTR,#cycles2HardKick
   \   0003AF   12....       LCALL   ?Subroutine49
   \                     ??CrossCallReturnLabel_126:
   \   0003B2   02....       LJMP    ??CrossCallReturnLabel_197
   1292                  break;
   1293                
   1294                case Cycle: /* kicking and search logic */
   1295                  atomicChange( Cycle, lastCycle );
   \                     ??main_loop_35:
   \   0003B5   12....       LCALL   ?Subroutine7
   1296                  atomicChange( ReceiveData, lastCycle - _slot - 5*TICKS_IN_MS );
   \                     ??CrossCallReturnLabel_363:
   \   0003B8   90....       MOV     DPTR,#_slot
   \   0003BB   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_170:
   \   0003BE   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   0003C1   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   0003C4   E0           MOVX    A,@DPTR
   \   0003C5   C3           CLR     C
   \   0003C6   98           SUBB    A,R0
   \   0003C7   F8           MOV     R0,A
   \   0003C8   A3           INC     DPTR
   \   0003C9   E0           MOVX    A,@DPTR
   \   0003CA   99           SUBB    A,R1
   \   0003CB   F9           MOV     R1,A
   \   0003CC   74F6         MOV     A,#-0xa
   \   0003CE   28           ADD     A,R0
   \   0003CF   F8           MOV     R0,A
   \   0003D0   74FF         MOV     A,#-0x1
   \   0003D2   39           ADDC    A,R1
   \   0003D3   F9           MOV     R1,A
   \   0003D4   90....       MOV     DPTR,#ticks
   \   0003D7   12....       LCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_127:
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   A3           INC     DPTR
   \   0003DD   A3           INC     DPTR
   \   0003DE   A3           INC     DPTR
   \   0003DF   12....       LCALL   ??Subroutine67_0
   1297                  flags[ Cycle ] = TRUE;
   \                     ??CrossCallReturnLabel_205:
   \   0003E2   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_45:
   \   0003E5   F0           MOVX    @DPTR,A
   1298                  if (got_gw)
   \   0003E6   90....       MOV     DPTR,#got_gw
   \   0003E9   E0           MOVX    A,@DPTR
   \   0003EA   6002         JZ      ??main_loop_59
   1299                    got_gw--;
   \   0003EC   14           DEC     A
   \   0003ED   F0           MOVX    @DPTR,A
   1300                  if ( isOnTestStand )
   \                     ??main_loop_59:
   \   0003EE   90....       MOV     DPTR,#isOnTestStand
   \   0003F1   E0           MOVX    A,@DPTR
   \   0003F2   7003         JNZ     $+5
   \   0003F4   02....       LJMP    ??main_loop_28
   1301                    isOnTestStand--;
   \   0003F7   14           DEC     A
   \   0003F8   02....       LJMP    ??CrossCallReturnLabel_197
   1302                  break;
   1303                
   1304                case OvStartup:
   1305                  if ( T3CC0 < page.ov )
   \                     ??main_loop_40:
   \   0003FB   90....       MOV     DPTR,#(page + 187)
   \   0003FE   E0           MOVX    A,@DPTR
   \   0003FF   FB           MOV     R3,A
   \   000400   E5CD         MOV     A,0xcd
   \   000402   C3           CLR     C
   \   000403   9B           SUBB    A,R3
   \   000404   4003         JC      $+5
   \   000406   02....       LJMP    ??main_loop_28
   1306                  { 
   1307                    BYTE cnt = page.ov_step, a = T3CC0;
   \   000409   90....       MOV     DPTR,#(page + 234)
   \   00040C   E0           MOVX    A,@DPTR
   \   00040D   FC           MOV     R4,A
   \   00040E   E5CD         MOV     A,0xcd
   \   000410   FA           MOV     R2,A
   1308                    if ( cnt == 0 )
   \   000411   EC           MOV     A,R4
   \   000412   7005         JNZ     ??main_loop_60
   1309                      cnt = 1;
   \   000414   7C01         MOV     R4,#0x1
   \   000416   8001         SJMP    ??main_loop_60
   1310                    
   1311                    while ( cnt-- && (a < page.ov) )
   1312                      a++;
   \                     ??main_loop_61:
   \   000418   0A           INC     R2
   \                     ??main_loop_60:
   \   000419   EC           MOV     A,R4
   \   00041A   1C           DEC     R4
   \   00041B   6005         JZ      ??main_loop_62
   \   00041D   EA           MOV     A,R2
   \   00041E   C3           CLR     C
   \   00041F   9B           SUBB    A,R3
   \   000420   40F6         JC      ??main_loop_61
   1313                    
   1314                    T3CC0 = a;
   \                     ??main_loop_62:
   \   000422   8ACD         MOV     0xcd,R2
   1315                    atomicChange( OvStartup, TICKS_IN_SEC ); 
   \   000424   90....       MOV     DPTR,#ticks
   \   000427   E0           MOVX    A,@DPTR
   \   000428   241E         ADD     A,#0x1e
   \   00042A   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_141:
   \   00042D   74D0         MOV     A,#-0x30
   \   00042F   F0           MOVX    @DPTR,A
   \   000430   A3           INC     DPTR
   \   000431   7407         MOV     A,#0x7
   \   000433   02....       LJMP    ??CrossCallReturnLabel_197
   1316                  }
   1317                  break;
   1318                
   1319                case OcRamp:
   1320          #ifdef MidString
   1321                  if ( (((INT16)adcs16[ 2 ]) > page.cur_noise ) )
   \                     ??main_loop_38:
   \   000436   90....       MOV     DPTR,#ticks
   \   000439   E0           MOVX    A,@DPTR
   \   00043A   2418         ADD     A,#0x18
   \   00043C   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_149:
   \   00043F   E8           MOV     A,R0
   \   000440   FE           MOV     R6,A
   \   000441   E9           MOV     A,R1
   \   000442   FF           MOV     R7,A
   \   000443   12....       LCALL   ?Subroutine60
   \                     ??CrossCallReturnLabel_171:
   \   000446   7583..       MOV     DPH,#(((page + 232) >> 8) & 0xff)
   \   000449   7582..       MOV     DPL,#((page + 232) & 0xff)
   \   00044C   12....       LCALL   ??Subroutine0_1
   \                     ??CrossCallReturnLabel_379:
   \   00044F   5039         JNC     ??main_loop_63
   1322                  {
   1323                    if ( theOC < setOC )
   \   000451   90....       MOV     DPTR,#theOC
   \   000454   E0           MOVX    A,@DPTR
   \   000455   C0E0         PUSH    A
   \   000457   90....       MOV     DPTR,#setOC
   \   00045A   E0           MOVX    A,@DPTR
   \   00045B   FA           MOV     R2,A
   \   00045C   D0E0         POP     A
   \   00045E   C3           CLR     C
   \   00045F   9A           SUBB    A,R2
   \   000460   4003         JC      $+5
   \   000462   02....       LJMP    ??main_loop_28
   1324                    {
   1325                      BYTE cnt = page.oc_step, a = theOC;
   \   000465   90....       MOV     DPTR,#(page + 231)
   \   000468   E0           MOVX    A,@DPTR
   \   000469   FC           MOV     R4,A
   \   00046A   90....       MOV     DPTR,#theOC
   \   00046D   E0           MOVX    A,@DPTR
   \   00046E   FB           MOV     R3,A
   1326                      if ( cnt == 0 )
   \   00046F   EC           MOV     A,R4
   \   000470   7005         JNZ     ??main_loop_64
   1327                        cnt = 10;
   \   000472   7C0A         MOV     R4,#0xa
   \   000474   8001         SJMP    ??main_loop_64
   1328                      
   1329                      while ( cnt-- && ( a < setOC ) )
   1330                        a++;
   \                     ??main_loop_65:
   \   000476   0B           INC     R3
   \                     ??main_loop_64:
   \   000477   EC           MOV     A,R4
   \   000478   1C           DEC     R4
   \   000479   6005         JZ      ??main_loop_66
   \   00047B   EB           MOV     A,R3
   \   00047C   C3           CLR     C
   \   00047D   9A           SUBB    A,R2
   \   00047E   40F6         JC      ??main_loop_65
   1331                      
   1332                      T3CC1 = oc2timer( theOC = a );
   \                     ??main_loop_66:
   \   000480   EB           MOV     A,R3
   \   000481   12....       LCALL   ??Subroutine71_0
   1333                      atomicChange( OcRamp, TICKS_IN_SEC );
   \                     ??CrossCallReturnLabel_229:
   \   000484   8E82         MOV     DPL,R6
   \   000486   8F83         MOV     DPH,R7
   \   000488   80A3         SJMP    ??CrossCallReturnLabel_141
   1334                    }
   1335                  }
   1336                  else
   1337                  {
   1338                    T3CC1 = theOC = 0;
   \                     ??main_loop_63:
   \   00048A   E4           CLR     A
   \   00048B   90....       MOV     DPTR,#theOC
   \   00048E   F0           MOVX    @DPTR,A
   \   00048F   75CF00       MOV     0xcf,#0x0
   1339                    atomicChange( OcRamp, TICKS_IN_SEC );
   \   000492   80F0         SJMP    ??CrossCallReturnLabel_229
   1340                  }
   1341          #endif
   1342                  break;
   1343                
   1344                case DelayedPrepareData:
   1345                  { /* most of the time is spent here*/
   1346                    *((BYTE *)0xF538) = 0;
   \                     ??main_loop_39:
   \   000494   E4           CLR     A
   \   000495   90F538       MOV     DPTR,#-0xac8
   \   000498   F0           MOVX    @DPTR,A
   1347                    prepareData();
   \   000499                ; Setup parameters for call to function prepareData
   \   000499   12....       LCALL   prepareData
   1348                    
   1349                    if ( page.gbunch )
   \   00049C   90....       MOV     DPTR,#(page + 158)
   \   00049F   E0           MOVX    A,@DPTR
   \   0004A0   F5..         MOV     ?V0 + 2,A
   \   0004A2   6046         JZ      ??main_loop_28
   1350                    {
   1351                      if (page.use12kbod && ( page.gbunch <= 18 ) )
   \   0004A4   90....       MOV     DPTR,#ticks
   \   0004A7   E0           MOVX    A,@DPTR
   \   0004A8   241A         ADD     A,#0x1a
   \   0004AA   12....       LCALL   ?Subroutine27
   \                     ??CrossCallReturnLabel_72:
   \   0004AD   5016         JNC     ??main_loop_67
   \   0004AF   E5..         MOV     A,?V0 + 2
   \   0004B1   C3           CLR     C
   \   0004B2   9413         SUBB    A,#0x13
   \   0004B4   5034         JNC     ??main_loop_28
   1352                      {
   1353                        atomicChange( DelayedPrepareData, page.gbunch * lastCycle - *((BYTE *)0xF538) - 1 -xored);
   \   0004B6   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_37:
   \   0004B9   90F538       MOV     DPTR,#-0xac8
   \   0004BC   E0           MOVX    A,@DPTR
   \   0004BD   FE           MOV     R6,A
   \   0004BE   EA           MOV     A,R2
   \   0004BF   C3           CLR     C
   \   0004C0   9E           SUBB    A,R6
   \   0004C1   FA           MOV     R2,A
   \   0004C2   EB           MOV     A,R3
   \   0004C3   8017         SJMP    ??main_loop_68
   1354                      }
   1355                      else if ( !page.use12kbod && ( page.gbunch == 1 ) )
   \                     ??main_loop_67:
   \   0004C5   7401         MOV     A,#0x1
   \   0004C7   65..         XRL     A,?V0 + 2
   \   0004C9   701F         JNZ     ??main_loop_28
   1356                      {
   1357                        atomicChange( DelayedPrepareData, lastCycle - *((BYTE *)0xF538) - 1 -xored);
   \   0004CB   90F538       MOV     DPTR,#-0xac8
   \   0004CE   E0           MOVX    A,@DPTR
   \   0004CF   FA           MOV     R2,A
   \   0004D0   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   0004D3   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   0004D6   E0           MOVX    A,@DPTR
   \   0004D7   C3           CLR     C
   \   0004D8   9A           SUBB    A,R2
   \   0004D9   FA           MOV     R2,A
   \   0004DA   A3           INC     DPTR
   \   0004DB   E0           MOVX    A,@DPTR
   \                     ??main_loop_68:
   \   0004DC   9400         SUBB    A,#0x0
   \   0004DE   FB           MOV     R3,A
   \   0004DF   74FF         MOV     A,#-0x1
   \   0004E1   2A           ADD     A,R2
   \   0004E2   1A           DEC     R2
   \   0004E3   74FF         MOV     A,#-0x1
   \   0004E5   3B           ADDC    A,R3
   \   0004E6   12....       LCALL   ?Subroutine65
   \                     ??CrossCallReturnLabel_197:
   \   0004E9   F0           MOVX    @DPTR,A
   1358                      }
   1359                    }
   1360                  }
   1361                  break;
   1362                  
   1363                } /* END switch( idx ) */
   1364              } /* END if ( ticks[ idx ] < 0 ) */
   1365            }/* END for ( idx = 0; idx < N_Of_Ticks; idx++ ) */
   \                     ??main_loop_28:
   \   0004EA   05..         INC     ?V0 + 0
   \   0004EC   E5..         MOV     A,?V0 + 0
   \   0004EE   C3           CLR     C
   \   0004EF   9410         SUBB    A,#0x10
   \   0004F1   5003         JNC     $+5
   \   0004F3   02....       LJMP    ??main_loop_27
   1366          }
   \   0004F6                REQUIRE ?Subroutine123
   \   0004F6                REQUIRE _A_P1
   \   0004F6                REQUIRE WDCTL
   \   0004F6                REQUIRE T3CC0
   \   0004F6                REQUIRE T3CC1
   \   0004F6                ; // Fall through to label ?Subroutine123

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   FB           MOV     R3,A
   \   000001   EA           MOV     A,R2
   \   000002   C3           CLR     C
   \   000003   9C           SUBB    A,R4
   \   000004   FA           MOV     R2,A
   \   000005   EB           MOV     A,R3
   \   000006   9400         SUBB    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   EA           MOV     A,R2
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EB           MOV     A,R3
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2410         ADD     A,#0x10
   \   000006   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_291:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   90....       MOV     DPTR,#curChannel
   \   000003   E0           MOVX    A,@DPTR
   \   000004   90DF06       MOV     DPTR,#-0x20fa
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function hop
   \   000008                ; Setup parameters for call to function hop
   \   000008   12....       LCALL   hop
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   90....       MOV     DPTR,#curChannel
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#??xored
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FC           MOV     R4,A
   \   00000B   90....       MOV     DPTR,#(page + 194)
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   A2E2         MOV     C,0xE0 /* A   */.2
   \   000011   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_315:
   \   000003   C3           CLR     C
   \   000004   E8           MOV     A,R0
   \   000005   941D         SUBB    A,#0x1d
   \   000007   E9           MOV     A,R1
   \   000008   12....       LCALL   ?Subroutine110
   \                     ??CrossCallReturnLabel_385:
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   E0           MOVX    A,@DPTR
   \   000004   240B         ADD     A,#0xb
   \                     ??Subroutine15_0:
   \   000006   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_288:
   \   000009   7401         MOV     A,#0x1
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_391:
   \   000003   EA           MOV     A,R2
   \   000004   85..F0       MOV     B,?V0 + 2
   \   000007   A4           MUL     AB
   \   000008   FA           MOV     R2,A
   \   000009   AEF0         MOV     R6,B
   \   00000B   85..F0       MOV     B,?V0 + 2
   \   00000E   EB           MOV     A,R3
   \   00000F   A4           MUL     AB
   \   000010   2E           ADD     A,R6
   \   000011   FB           MOV     R3,A
   \   000012   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#lastCycle
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \                     ??Subroutine7_0:
   \   000007   FB           MOV     R3,A
   \   000008   90....       MOV     DPTR,#ticks
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   2412         ADD     A,#0x12
   \   00000E   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_287:
   \   000011   80..         SJMP    ??Subroutine114_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV     DPTR,#(page + 208)
   \   000003   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_317:
   \   000006   90....       MOV     DPTR,#cycles2SoftKick
   \   000009   12....       LCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_344:
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_396:
   \   000003   747D         MOV     A,#0x7d
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine91
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   C3           CLR     C
   \   000001   12....       LCALL   ?Subroutine101
   \                     ??CrossCallReturnLabel_323:
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_311:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   90....       MOV     DPTR,#(page + 206)
   \   000003   12....       LCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_336:
   \   000006   90....       MOV     DPTR,#cycles2Step10Channel
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine96
   \                     ??CrossCallReturnLabel_307:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   E0           MOVX    A,@DPTR
   \   000004   241A         ADD     A,#0x1a
   \   000006   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_290:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   90....       MOV     DPTR,#(page + 204)
   \   000003   12....       LCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_334:
   \   000006   90....       MOV     DPTR,#cyclesToStep500Channel
   \   000009   12....       LCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_347:
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   12....       LCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_296:
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#cyclesFromStart
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2401         ADD     A,#0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   90....       MOV     DPTR,#cyclesFromStart
   \   00000F   C3           CLR     C
   \   000010   E0           MOVX    A,@DPTR
   \   000011   9433         SUBB    A,#0x33
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   9400         SUBB    A,#0x0
   \   000017   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_280:
   \   000003   6410         XRL     A,#0x10
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine88
   \                     ??CrossCallReturnLabel_281:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   90....       MOV     DPTR,#si
   \   000003   E0           MOVX    A,@DPTR
   \   000004   243A         ADD     A,#0x3a
   \                     ??Subroutine88_0:
   \   000006   12....       LCALL   ?Subroutine108
   \                     ??CrossCallReturnLabel_338:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ??Subroutine88_0
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   90....       MOV     DPTR,#(page + 202)
   \   000003   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_318:
   \   000006   90....       MOV     DPTR,#cyclesTo10
   \   000009   12....       LCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_345:
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine92
   \                     ??CrossCallReturnLabel_395:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine93
   \                     ??CrossCallReturnLabel_299:
   \   000004   90....       MOV     DPTR,#(page + 218)
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#ticks
   \   000003   12....       LCALL   ?Subroutine90
   \                     ??CrossCallReturnLabel_295:
   \   000006   A3           INC     DPTR
   \   000007   74D0         MOV     A,#-0x30
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7407         MOV     A,#0x7
   \   00000D   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ?Subroutine106
   \                     ??CrossCallReturnLabel_398:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#(page + 200)
   \   000003   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_313:
   \   000006   90....       MOV     DPTR,#cyclesTo500
   \   000009   12....       LCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_342:
   \   00000C   12....       LCALL   ?Subroutine98
   \                     ??CrossCallReturnLabel_310:
   \   00000F   12....       LCALL   ?Subroutine111
   \                     ??CrossCallReturnLabel_343:
   \   000012   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??xored:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for xored>`
   \   000001                REQUIRE __INIT_XDATA_I
   1367          #define BARRIER  0xAA
   1368          void quartz();
   1369          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1370          void longTickWait( BYTE q )
   \                     longTickWait:
   1371          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV     A,R1
   \   000004   FE           MOV     R6,A
   \   000005   8005         SJMP    ??longTickWait_0
   1372            while( q-- )
   1373              tickWait( 50*TICKS_IN_MS );
   \                     ??longTickWait_1:
   \   000007                ; Setup parameters for call to function tickWait
   \   000007   7964         MOV     R1,#0x64
   \   000009   12....       LCALL   tickWait
   \                     ??longTickWait_0:
   \   00000C   EE           MOV     A,R6
   \   00000D   1E           DEC     R6
   \   00000E   70F7         JNZ     ??longTickWait_1
   1374          }
   \   000010   D0E0         POP     A
   \   000012   FE           MOV     R6,A
   \   000013   22           RET
   1375          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1376          void main(void)
   \                     main:
   1377          {
   \   000000                ; Auto size: 0
   1378            UINT16 i, j;
   1379            *((BYTE *)0xF53B) = 0xAA;
   \   000000   74AA         MOV     A,#-0x56
   \   000002   90F53B       MOV     DPTR,#-0xac5
   \   000005   F0           MOVX    @DPTR,A
   1380            *((BYTE *)0xFFFF) = 0x10; // was 0x80 on Dec 19th
   \   000006   7410         MOV     A,#0x10
   \   000008   90FFFF       MOV     DPTR,#-0x1
   \   00000B   F0           MOVX    @DPTR,A
   1381              
   1382            if ( PARTNUM != 0x81 )
   \   00000C   90DF36       MOV     DPTR,#-0x20ca
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6481         XRL     A,#0x81
   \   000012   6003         JZ      ??main_0
   1383              reset();
   \   000014                ; Setup parameters for call to function reset
   \   000014   12....       LCALL   reset
   1384            
   1385            if ( *((BYTE *)0xFFFE) == 0x5A )
   \                     ??main_0:
   \   000017   90FFFE       MOV     DPTR,#-0x2
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   645A         XRL     A,#0x5a
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??main_1
   1386              goto MainLoopLabel;
   1387              
   1388            *((BYTE *)0xFFFE) = 0x5A;
   \   000022   745A         MOV     A,#0x5a
   \   000024   F0           MOVX    @DPTR,A
   1389            
   1390            HAL_INT_ENABLE(INUM_T1,  INT_ON); // enable Timer1 interrupt
   \   000025   D2B9         SETB    0xb8.1
   1391            
   1392            for( i = 0; i<15; i++ )
   \   000027   7E00         MOV     R6,#0x0
   \   000029   7F00         MOV     R7,#0x0
   1393            { // was 15 the self check !!!! check line 663 if loop limit changed !!!
   1394              BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
   \                     ??main_2:
   \   00002B   8E..         MOV     ?V0 + 0,R6
   \   00002D   8F..         MOV     ?V0 + 1,R7
   \   00002F   740A         MOV     A,#0xa
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?S_SHL
   \   000036   12....       LCALL   ?Subroutine85
   1395              BOOL flag = TRUE;
   1396              *((BYTE *)0xFFFF) = 0x10;
   1397              for ( j = 0; flag && (j < 0x400); j++ )
   1398                flag = ( (*ptr++)==0xFF );
   \                     ??CrossCallReturnLabel_274:
   \   000039   E8           MOV     A,R0
   \   00003A   FA           MOV     R2,A
   \   00003B   E9           MOV     A,R1
   \   00003C   FB           MOV     R3,A
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   A3           INC     DPTR
   \   000042   A882         MOV     R0,DPL
   \   000044   A983         MOV     R1,DPH
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   64FF         XRL     A,#0xff
   \   00004D   7004         JNZ     ??main_3
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   8002         SJMP    ??main_4
   \                     ??main_3:
   \   000053   7A00         MOV     R2,#0x0
   \                     ??main_4:
   \   000055   12....       LCALL   ?Subroutine86
   \                     ??CrossCallReturnLabel_276:
   \   000058   6009         JZ      ??main_5
   \   00005A   C3           CLR     C
   \   00005B   ED           MOV     A,R5
   \   00005C   9404         SUBB    A,#0x4
   \   00005E   40D9         JC      ??CrossCallReturnLabel_274
   1399              if ( flag )
   1400                checkMore();
   \   000060                ; Setup parameters for call to function checkMore
   \   000060   12....       LCALL   checkMore
   1401            }
   \                     ??main_5:
   \   000063   EE           MOV     A,R6
   \   000064   2401         ADD     A,#0x1
   \   000066   0E           INC     R6
   \   000067   EF           MOV     A,R7
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FF           MOV     R7,A
   \   00006B   C3           CLR     C
   \   00006C   EE           MOV     A,R6
   \   00006D   940F         SUBB    A,#0xf
   \   00006F   EF           MOV     A,R7
   \   000070   9400         SUBB    A,#0x0
   \   000072   40B7         JC      ??main_2
   1402            
   1403            si->armAdcs       = &armAdcs;
   \   000074   90....       MOV     DPTR,#si
   \   000077   E0           MOVX    A,@DPTR
   \   000078   2430         ADD     A,#0x30
   \   00007A   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_142:
   \   00007D   74..         MOV     A,#(armAdcs & 0xff)
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74..         MOV     A,#((armAdcs >> 8) & 0xff)
   \   000083   12....       LCALL   ??Subroutine72_0
   1404            si->readNextValue = &readNextValue;
   \                     ??CrossCallReturnLabel_232:
   \   000086   2432         ADD     A,#0x32
   \   000088   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_143:
   \   00008B   74..         MOV     A,#(readNextValue & 0xff)
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74..         MOV     A,#((readNextValue >> 8) & 0xff)
   \   000091   12....       LCALL   ??Subroutine72_0
   1405            si->flashCallback = &flashCallback;
   \                     ??CrossCallReturnLabel_233:
   \   000094   2434         ADD     A,#0x34
   \   000096   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_144:
   \   000099   74..         MOV     A,#(flashCallback & 0xff)
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   74..         MOV     A,#((flashCallback >> 8) & 0xff)
   \   00009F   12....       LCALL   ??Subroutine72_0
   1406            si->adcEnabled    = TRUE;
   \                     ??CrossCallReturnLabel_234:
   \   0000A2   2437         ADD     A,#0x37
   \   0000A4   12....       LCALL   ??Subroutine15_0
   1407            /* added in order to setup correct MPP frequecy */
   1408            si->mppCycle      = _mppCycle;
   \                     ??CrossCallReturnLabel_43:
   \   0000A7   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_99:
   \   0000AA   7478         MOV     A,#0x78
   \   0000AC   12....       LCALL   ?Subroutine72
   1409            si->firstAdcReading = _firstAdcMeasurement;
   \                     ??CrossCallReturnLabel_230:
   \   0000AF   245D         ADD     A,#0x5d
   \   0000B1   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_145:
   \   0000B4   7428         MOV     A,#0x28
   \   0000B6   12....       LCALL   ?Subroutine72
   1410            flags = si->flags;
   \                     ??CrossCallReturnLabel_231:
   \   0000B9   2420         ADD     A,#0x20
   \   0000BB   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_150:
   \   0000BE   90....       MOV     DPTR,#flags
   \   0000C1   12....       LCALL   ??Subroutine67_0
   1411            ticks = si->ticks;
   \                     ??CrossCallReturnLabel_206:
   \   0000C4   90....       MOV     DPTR,#si
   \   0000C7   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_172:
   \   0000CA   90....       MOV     DPTR,#ticks
   \   0000CD   12....       LCALL   ??Subroutine67_0
   1412            ptr2RunningTick = & (si->runningTick);
   \                     ??CrossCallReturnLabel_207:
   \   0000D0   90....       MOV     DPTR,#si
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   2438         ADD     A,#0x38
   \   0000D6   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_151:
   \   0000D9   90....       MOV     DPTR,#ptr2RunningTick
   \   0000DC   12....       LCALL   ??Subroutine67_0
   1413            
   1414            resetReason = (SLEEP & 0x18)>>3;
   \                     ??CrossCallReturnLabel_208:
   \   0000DF   7418         MOV     A,#0x18
   \   0000E1   55BE         ANL     A,0xbe
   \   0000E3   C3           CLR     C
   \   0000E4   13           RRC     A
   \   0000E5   13           RRC     A
   \   0000E6   13           RRC     A
   \   0000E7   90....       MOV     DPTR,#resetReason
   \   0000EA   F0           MOVX    @DPTR,A
   1415            zerofill( (BYTE *)&page, 240 );
   \   0000EB                ; Setup parameters for call to function zerofill
   \   0000EB   79F0         MOV     R1,#-0x10
   \   0000ED   7A..         MOV     R2,#(page & 0xff)
   \   0000EF   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   0000F1   12....       LCALL   zerofill
   1416            read_page(); 
   \   0000F4                ; Setup parameters for call to function read_page
   \   0000F4   12....       LCALL   read_page
   1417            
   1418            if (page.fetFailureCount != 0)
   \   0000F7   90....       MOV     DPTR,#(page + 128)
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   7002         JNZ     ??main_6
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \                     ??main_6:
   \   0000FF   6004         JZ      ??main_7
   1419              checkForFETFailure = TRUE;
   \   000101   7401         MOV     A,#0x1
   \   000103   8001         SJMP    ??main_8
   1420            else
   1421              checkForFETFailure = FALSE;
   \                     ??main_7:
   \   000105   E4           CLR     A
   \                     ??main_8:
   \   000106   90....       MOV     DPTR,#checkForFETFailure
   \   000109   12....       LCALL   ?Subroutine70
   1422            
   1423            mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 );
   1424            curChannel = page.is500Always ? page.starting500Channel : page.channel; 
   \                     ??CrossCallReturnLabel_225:
   \   00010C   90....       MOV     DPTR,#(page + 194)
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   A2E6         MOV     C,0xE0 /* A   */.6
   \   000112   5005         JNC     ??main_9
   \   000114   90....       MOV     DPTR,#(page + 218)
   \   000117   8003         SJMP    ??main_10
   \                     ??main_9:
   \   000119   90....       MOV     DPTR,#(page + 164)
   \                     ??main_10:
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FA           MOV     R2,A
   \   00011E   EA           MOV     A,R2
   \   00011F   90....       MOV     DPTR,#curChannel
   \   000122   F0           MOVX    @DPTR,A
   1425            search_stat = page.searchCommunication;
   \   000123   12....       LCALL   ?Subroutine52
   1426            
   1427            switch( resetReason )
   \                     ??CrossCallReturnLabel_133:
   \   000126   90....       MOV     DPTR,#resetReason
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for main>_0`:
   \   00012D   00           DB        0
   \   00012E   03           DB        3
   \   00012F   ....         DW        ??CrossCallReturnLabel_19
   \   000131   ....         DW        ??main_11
   \   000133   ....         DW        ??main_11
   \   000135   ....         DW        ??main_12
   \   000137   ....         DW        ??main_11
   1428            {
   1429            case 2:  /* Watchdog Reset  */
   1430          #ifdef MidString
   1431              if (*ModuleOffRememberedPtr == ModuleStatusOffFetFailure)
   \                     ??main_12:
   \   000139   90FFFD       MOV     DPTR,#-0x3
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   647E         XRL     A,#0x7e
   \   00013F   700E         JNZ     ??main_13
   1432              {
   1433                fetFailure = TRUE;
   \   000141   7401         MOV     A,#0x1
   \   000143   90....       MOV     DPTR,#fetFailure
   \   000146   12....       LCALL   ?Subroutine73
   1434                netValue = MainNetValueFETFailed;
   1435                checkForFETFailure = FALSE;
   \                     ??CrossCallReturnLabel_401:
   \   000149   90....       MOV     DPTR,#checkForFETFailure
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8005         SJMP    ??main_14
   1436                P1_4 = 0;
   1437              }
   1438              else if (*ModuleOffRememberedPtr == ModuleStatusOff)
   \                     ??main_13:
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   64E7         XRL     A,#0xe7
   \   000152   7004         JNZ     ??main_15
   1439              {
   1440                P1_4 = 0;
   \                     ??main_14:
   \   000154   C294         CLR     0x90.4
   \   000156   800C         SJMP    ??main_16
   1441              }
   1442              else if (*ModuleOffRememberedPtr == ModuleStatusOffProtection)
   \                     ??main_15:
   \   000158   E0           MOVX    A,@DPTR
   \   000159   646A         XRL     A,#0x6a
   \   00015B   60F7         JZ      ??main_14
   1443              {
   1444                P1_4 = 0;
   1445              }
   1446              else if (*ModuleOffRememberedPtr == ModuleStatusOffTemperature)
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   64A6         XRL     A,#0xa6
   \   000160   60F2         JZ      ??main_14
   1447              {
   1448                P1_4 = 0;
   1449              }
   1450              else
   1451              {
   1452                *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \   000162   E4           CLR     A
   \   000163   F0           MOVX    @DPTR,A
   1453              }
   1454              
   1455              if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
   \                     ??main_16:
   \   000164   90FFFD       MOV     DPTR,#-0x3
   \   000167   E0           MOVX    A,@DPTR
   \   000168   700C         JNZ     ??main_17
   1456              {
   1457                if(page.module)
   \   00016A   90....       MOV     DPTR,#(page + 186)
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   6004         JZ      ??main_18
   1458                  P1_4 = 1;
   \   000170   D294         SETB    0x90.4
   \   000172   8002         SJMP    ??main_17
   1459                else
   1460                  P1_4 = 0;
   \                     ??main_18:
   \   000174   C294         CLR     0x90.4
   1461              }
   1462              
   1463              if ( page.mpp )
   \                     ??main_17:
   \   000176   90....       MOV     DPTR,#(page + 185)
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   6004         JZ      ??main_19
   1464              {
   1465                P1_3 = 1;
   \   00017C   D293         SETB    0x90.3
   \   00017E   8002         SJMP    ??main_20
   1466              }
   1467              else 
   1468                P1_3 = 0;
   \                     ??main_19:
   \   000180   C293         CLR     0x90.3
   1469          #else
   1470              /* SPT: MPP On, Module On */
   1471              P1_3 = 1; 
   1472              P1_4 = 1; 
   1473          #endif
   1474                    
   1475              T3CC0 = page.ov; 
   \                     ??main_20:
   \   000182   90....       MOV     DPTR,#(page + 187)
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F5CD         MOV     0xcd,A
   1476              T3CC1 = oc2timer( setOC = theOC = page.oc );
   \   000188   90....       MOV     DPTR,#(page + 188)
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F9           MOV     R1,A
   \   00018D   90....       MOV     DPTR,#theOC
   \   000190   F0           MOVX    @DPTR,A
   \   000191   90....       MOV     DPTR,#setOC
   \   000194   F0           MOVX    @DPTR,A
   \   000195                ; Setup parameters for call to function oc2timer
   \   000195   12....       LCALL   ??Subroutine105_0
   \                     ??CrossCallReturnLabel_333:
   \   000198   8042         SJMP    ??CrossCallReturnLabel_19
   1477              
   1478              break; 
   1479                  
   1480            case 1: case 3: case 0: /* Power On Reset */
   1481              *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
   \                     ??main_11:
   \   00019A   E4           CLR     A
   \   00019B   90FFFD       MOV     DPTR,#-0x3
   \   00019E   F0           MOVX    @DPTR,A
   1482              
   1483              if ( page.ov_startup )
   \   00019F   90....       MOV     DPTR,#(page + 223)
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   FA           MOV     R2,A
   \   0001A4   6004         JZ      ??main_21
   1484                T3CC0 = page.ov_startup;
   \   0001A6   8ACD         MOV     0xcd,R2
   \   0001A8   8006         SJMP    ??main_22
   1485              else 
   1486                T3CC0 = page.ov;    
   \                     ??main_21:
   \   0001AA   90....       MOV     DPTR,#(page + 187)
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F5CD         MOV     0xcd,A
   1487                      
   1488              P1_3 = 0; 
   \                     ??main_22:
   \   0001B0   C293         CLR     0x90.3
   1489              P1_4 = 0; 
   \   0001B2   C294         CLR     0x90.4
   1490          
   1491          #ifdef MidString
   1492              P1_3 = page.mpp;
   \   0001B4   12....       LCALL   ?Subroutine57
   1493              T3CC1 = theOC = 0; 
   \                     ??CrossCallReturnLabel_159:
   \   0001B7   E4           CLR     A
   \   0001B8   90....       MOV     DPTR,#theOC
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC   75CF00       MOV     0xcf,#0x0
   1494              setOC = page.oc;
   \   0001BF   90....       MOV     DPTR,#(page + 188)
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   90....       MOV     DPTR,#setOC
   \   0001C6   12....       LCALL   ?Subroutine76
   1495          #else
   1496              P1_3 = 1;
   1497              T3CC1 = oc2timer( setOC = theOC = page.oc );
   1498          #endif
   1499              atomicChange( Init, ((INT16) TICKS_IN_SEC) * 3 );
   \                     ??CrossCallReturnLabel_244:
   \   0001C9   240C         ADD     A,#0xc
   \   0001CB   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_146:
   \   0001CE   7470         MOV     A,#0x70
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   7417         MOV     A,#0x17
   \   0001D4   12....       LCALL   ?Subroutine76
   1500              atomicChange( OcRamp, TICKS_IN_SEC );
   \                     ??CrossCallReturnLabel_245:
   \   0001D7   2418         ADD     A,#0x18
   \   0001D9   12....       LCALL   ??Subroutine5_0
   1501              
   1502              break;
   1503            
   1504            } /* END switch( resetReason ) */
   1505            
   1506            zerofill( (BYTE *)adcBuf, 2*N_CHANNELS*BUFFER_SIZE );
   \                     ??CrossCallReturnLabel_19:
   \   0001DC                ; Setup parameters for call to function zerofill
   \   0001DC   7990         MOV     R1,#-0x70
   \   0001DE   7A..         MOV     R2,#(adcBuf & 0xff)
   \   0001E0   7B..         MOV     R3,#((adcBuf >> 8) & 0xff)
   \   0001E2   12....       LCALL   zerofill
   1507            init();             // turn the crystall on, exit from third state
   \   0001E5                ; Setup parameters for call to function init
   \   0001E5   12....       LCALL   init
   1508            
   1509            ticks[ Ms       ]    = TICKS_IN_SEC;     
   \   0001E8   12....       LCALL   ?Subroutine5
   1510            ticks[ ReceiveData ] = TICKS_IN_MS;
   \                     ??CrossCallReturnLabel_20:
   \   0001EB   12....       LCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_48:
   \   0001EE   7402         MOV     A,#0x2
   \   0001F0   12....       LCALL   ?Subroutine119
   1511            ticks[ FeedTheDog ]  = _dogFeeding; 
   \                     ??CrossCallReturnLabel_406:
   \   0001F3   12....       LCALL   ?Subroutine31
   \                     ??CrossCallReturnLabel_79:
   \   0001F6   12....       LCALL   ?Subroutine119
   1512            ticks[ Cycle ]       = lastCycle;
   \                     ??CrossCallReturnLabel_407:
   \   0001F9   12....       LCALL   ?Subroutine7
   1513            
   1514            loadKey( page.curKey );
   \                     ??CrossCallReturnLabel_364:
   \   0001FC                ; Setup parameters for call to function load
   \   0001FC   12....       LCALL   ?Subroutine81
   1515            RNDL = page.myMac[4];
   \                     ??CrossCallReturnLabel_260:
   \   0001FF   12....       LCALL   ?Subroutine28
   1516            RNDL = page.myMac[5];
   1517            
   1518            T1CTL &= 0xFC;
   \                     ??CrossCallReturnLabel_73:
   \   000202   53E4FC       ANL     0xe4,#0xfc
   \   000205   E5E4         MOV     A,0xe4
   1519            SET_WORD(T1CNTH, T1CNTL, 0);
   \   000207   75E300       MOV     0xe3,#0x0
   \   00020A   75E200       MOV     0xe2,#0x0
   1520            SET_WORD(T1CC0H, T1CC0L, 750 - 1);
   \   00020D   75DB02       MOV     0xdb,#0x2
   \   000210   75DAED       MOV     0xda,#-0x13
   1521            T1CTL |= 0x04  | 0x02;
   \   000213   43E406       ORL     0xe4,#0x6
   \   000216   E5E4         MOV     A,0xe4
   1522            T1CCTL0 = 0x44;
   \   000218   75E544       MOV     0xe5,#0x44
   1523            longTickWait( 10 ); //20 ); was 20
   \   00021B                ; Setup parameters for call to function longTickWait
   \   00021B   790A         MOV     R1,#0xa
   \   00021D   12....       LCALL   longTickWait
   1524            
   1525            if ( mymemcmp( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ) )
   \   000220                ; Setup parameters for call to function mymemcmp
   \   000220   7904         MOV     R1,#0x4
   \   000222   7C..         MOV     R4,#((page + 208) & 0xff)
   \   000224   7D..         MOV     R5,#(((page + 208) >> 8) & 0xff)
   \   000226   7A..         MOV     R2,#(cycles2SoftKick & 0xff)
   \   000228   7B..         MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
   \   00022A   12....       LCALL   mymemcmp
   \   00022D   E9           MOV     A,R1
   \   00022E   6003         JZ      ??main_23
   1526              reset();
   \   000230                ; Setup parameters for call to function reset
   \   000230   12....       LCALL   reset
   1527            
   1528            P1_1 = 0;
   \                     ??main_23:
   \   000233   C291         CLR     0x90.1
   1529            
   1530          MainLoopLabel:
   1531          
   1532              quartz();
   \                     ??main_1:
   \   000235                ; Setup parameters for call to function quartz
   \   000235   12....       LCALL   quartz
   1533              softKick();
   \   000238                ; Setup parameters for call to function softKick
   \   000238   12....       LCALL   softKick
   \   00023B   8011         SJMP    ??main_24
   1534              
   1535              for (;;)
   1536              { 
   1537                if ( *((BYTE *)0xF53B) != 0xAA )
   1538                  reset();
   1539                if ( PARTNUM != 0x81 )
   1540                  reset();
   1541                
   1542                WDCTL = 8;
   1543                main_loop();
   1544                
   1545                if( flags[ PackageReceived ] || flags[DataSent] )
   1546                  continue;
   1547                
   1548                if ( lastCycle > (840*TICKS_IN_MS) )
   1549                  lastCycle = 840*TICKS_IN_MS;
   1550                if ( lastCycle == 0 )
   1551                  lastCycle = 840*TICKS_IN_MS;
   1552                if ( ticks[ Cycle ] > lastCycle )
   1553                  ticks[ Cycle ] = lastCycle;
   1554                if ( ticks[ Cycle ] == 0        )
   1555                  ticks[ Cycle ] = lastCycle;
   1556                if ( cycles2SoftKick > page.defCycles2SoftKick )
   1557                  cycles2SoftKick = page.defCycles2SoftKick;
   1558                if ( cycles2SoftKick == 0 )
   1559                  cycles2SoftKick = page.defCycles2SoftKick;
   1560                if ( (cycles2HardKick&0xFF) == 0 )
   1561                  reset();
   1562                if ( ticks[ Ms ] > TICKS_IN_SEC )
   1563                  ticks[ Ms ] = TICKS_IN_SEC;
   1564                if ( ticks[ Ms ] == 0 )
   \                     ??main_25:
   \   00023D   EA           MOV     A,R2
   \   00023E   7001         JNZ     ??main_26
   \   000240   EB           MOV     A,R3
   \                     ??main_26:
   \   000241   700B         JNZ     ??main_24
   1565                  ticks[ Ms ] = TICKS_IN_SEC;
   \                     ??main_27:
   \   000243   8882         MOV     DPL,R0
   \   000245   8983         MOV     DPH,R1
   \   000247   74D0         MOV     A,#-0x30
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   A3           INC     DPTR
   \   00024B   7407         MOV     A,#0x7
   \   00024D   F0           MOVX    @DPTR,A
   \                     ??main_24:
   \   00024E   90F53B       MOV     DPTR,#-0xac5
   \   000251   E0           MOVX    A,@DPTR
   \   000252   64AA         XRL     A,#0xaa
   \   000254   6003         JZ      ??main_28
   \   000256                ; Setup parameters for call to function reset
   \   000256   12....       LCALL   reset
   \                     ??main_28:
   \   000259   90DF36       MOV     DPTR,#-0x20ca
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   6481         XRL     A,#0x81
   \   00025F   6003         JZ      ??main_29
   \   000261                ; Setup parameters for call to function reset
   \   000261   12....       LCALL   reset
   \                     ??main_29:
   \   000264   75C908       MOV     0xc9,#0x8
   \   000267                ; Setup parameters for call to function main_loop
   \   000267   12....       LCALL   main_loop
   \   00026A   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_12:
   \   00026D   70DF         JNZ     ??main_24
   \   00026F   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_25:
   \   000272   70DA         JNZ     ??main_24
   \   000274   90....       MOV     DPTR,#lastCycle
   \   000277   C3           CLR     C
   \   000278   E0           MOVX    A,@DPTR
   \   000279   9491         SUBB    A,#-0x6f
   \   00027B   A3           INC     DPTR
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   9406         SUBB    A,#0x6
   \   00027F   500A         JNC     ??main_30
   \   000281   90....       MOV     DPTR,#lastCycle
   \   000284   E0           MOVX    A,@DPTR
   \   000285   7002         JNZ     ??main_31
   \   000287   A3           INC     DPTR
   \   000288   E0           MOVX    A,@DPTR
   \                     ??main_31:
   \   000289   700A         JNZ     ??main_32
   \                     ??main_30:
   \   00028B   90....       MOV     DPTR,#lastCycle
   \   00028E   7490         MOV     A,#-0x70
   \   000290   F0           MOVX    @DPTR,A
   \   000291   A3           INC     DPTR
   \   000292   7406         MOV     A,#0x6
   \   000294   F0           MOVX    @DPTR,A
   \                     ??main_32:
   \   000295   90....       MOV     DPTR,#ticks
   \   000298   E0           MOVX    A,@DPTR
   \   000299   2412         ADD     A,#0x12
   \   00029B   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_388:
   \   00029E   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   0002A1   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   0002A4   C3           CLR     C
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   9A           SUBB    A,R2
   \   0002A7   A3           INC     DPTR
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   9B           SUBB    A,R3
   \   0002AA   5003         JNC     ??CrossCallReturnLabel_368
   \   0002AC   12....       LCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_368:
   \   0002AF   8882         MOV     DPL,R0
   \   0002B1   8983         MOV     DPH,R1
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   7002         JNZ     ??main_33
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \                     ??main_33:
   \   0002B8   7003         JNZ     ??CrossCallReturnLabel_369
   \   0002BA   12....       LCALL   ?Subroutine29
   \                     ??CrossCallReturnLabel_369:
   \   0002BD   90....       MOV     DPTR,#(page + 208)
   \   0002C0   12....       LCALL   ??Subroutine45_0
   \                     ??CrossCallReturnLabel_107:
   \   0002C3   90....       MOV     DPTR,#cycles2SoftKick
   \   0002C6   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_56:
   \   0002C9   5006         JNC     ??CrossCallReturnLabel_352
   \   0002CB   90....       MOV     DPTR,#cycles2SoftKick
   \   0002CE   12....       LCALL   ??Subroutine114_0
   \                     ??CrossCallReturnLabel_352:
   \   0002D1   90....       MOV     DPTR,#cycles2SoftKick
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   7002         JNZ     ??main_34
   \   0002D7   A3           INC     DPTR
   \   0002D8   E0           MOVX    A,@DPTR
   \                     ??main_34:
   \   0002D9   7003         JNZ     ??CrossCallReturnLabel_88
   \   0002DB   12....       LCALL   ?Subroutine35
   \                     ??CrossCallReturnLabel_88:
   \   0002DE   90....       MOV     DPTR,#cycles2HardKick
   \   0002E1   E0           MOVX    A,@DPTR
   \   0002E2   7003         JNZ     ??main_35
   \   0002E4                ; Setup parameters for call to function reset
   \   0002E4   12....       LCALL   reset
   \                     ??main_35:
   \   0002E7   90....       MOV     DPTR,#ticks
   \   0002EA   E0           MOVX    A,@DPTR
   \   0002EB   2416         ADD     A,#0x16
   \   0002ED   12....       LCALL   ?Subroutine38
   \                     ??CrossCallReturnLabel_389:
   \   0002F0   C3           CLR     C
   \   0002F1   EA           MOV     A,R2
   \   0002F2   94D1         SUBB    A,#-0x2f
   \   0002F4   EB           MOV     A,R3
   \   0002F5   9407         SUBB    A,#0x7
   \   0002F7   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0002F9   65D0         XRL     A,PSW
   \   0002FB   33           RLC     A
   \   0002FC   5003         JNC     $+5
   \   0002FE   02....       LJMP    ??main_25
   \   000301   02....       LJMP    ??main_27
   \   000304                REQUIRE _A_P1
   \   000304                REQUIRE IEN2
   \   000304                REQUIRE _A_IEN0
   \   000304                REQUIRE _A_IEN1
   \   000304                REQUIRE RNDL
   \   000304                REQUIRE SLEEP
   \   000304                REQUIRE WDCTL
   \   000304                REQUIRE T3CC0
   \   000304                REQUIRE T3CC1
   \   000304                REQUIRE T1CC0L
   \   000304                REQUIRE T1CC0H
   \   000304                REQUIRE T1CNTL
   \   000304                REQUIRE T1CNTH
   \   000304                REQUIRE T1CTL
   \   000304                REQUIRE T1CCTL0
   1566          
   1567              } /* END for(::) */
   1568          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ??Subroutine88_0
   \                     ??CrossCallReturnLabel_283:
   \   000003                REQUIRE ?Subroutine117
   \   000003                ; // Fall through to label ?Subroutine117

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine94
   \                     ??CrossCallReturnLabel_392:
   \   000003   02....       LJMP    ?Subroutine114

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ticks
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function mymemcpy
   \   000001                ; Setup parameters for call to function mymemcpy
   \   000001   7904         MOV     R1,#0x4
   \   000003   7C..         MOV     R4,#((page + 208) & 0xff)
   \   000005   7D..         MOV     R5,#(((page + 208) >> 8) & 0xff)
   \   000007   7A..         MOV     R2,#(cycles2SoftKick & 0xff)
   \   000009   7B..         MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
   \   00000B   12....       LCALL   mymemcpy
   \   00000E   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \                     ??Subroutine72_0:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   90....       MOV     DPTR,#si
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   90....       MOV     DPTR,#si
   \   000003   E0           MOVX    A,@DPTR
   \   000004   245B         ADD     A,#0x5b
   \   000006   12....       LCALL   ??Subroutine89_0
   \                     ??CrossCallReturnLabel_292:
   \   000009   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   90....       MOV     DPTR,#(page + 10)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5BC         MOV     0xbc,A
   \   000006   90....       MOV     DPTR,#(page + 11)
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F5BC         MOV     0xbc,A
   \   00000C   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   90....       MOV     DPTR,#(page + 194)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   A2E7         MOV     C,0xE0 /* A   */.7
   \   000006   E4           CLR     A
   \   000007   92E0         MOV     0xE0 /* A   */.0,C
   \   000009   90....       MOV     DPTR,#search_stat
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
   1569          /*==== PRIVATE FUNCTIONS =====================================================*/
   1570          /******************************************************************************
   1571          * Work with watchdogs and LED's
   1572          ******************************************************************************/
   1573          //void feedTheDog(void){ WDCTL = 0xA8;  WDCTL = 0x58; }
   1574          /******************************************************************************
   1575          * initiate reading of adc channels
   1576          ******************************************************************************/
   1577          //#pragma optimize=s 9

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1578          void armAdcs(void){  
   \                     armAdcs:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1579              adcCount = 0;
   \   000004   E4           CLR     A
   \   000005   90....       MOV     DPTR,#adcCount
   \   000008   12....       LCALL   ?Subroutine33
   1580              si->inCurCycle++; 
   \                     ??CrossCallReturnLabel_82:
   \   00000B   04           INC     A
   \   00000C   12....       LCALL   ?Subroutine33
   1581              if( si->inCurCycle < 4 ) ticks[ AdcMeasurement ] = _adcMeasurement;  // 5ms
   \                     ??CrossCallReturnLabel_83:
   \   00000F   C3           CLR     C
   \   000010   9404         SUBB    A,#0x4
   \   000012   500A         JNC     ??CrossCallReturnLabel_408
   \   000014   12....       LCALL   ??Subroutine47_0
   \                     ??CrossCallReturnLabel_120:
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?Subroutine119
   1582              ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
   \                     ??CrossCallReturnLabel_408:
   \   00001E   90....       MOV     DPTR,#adcCount
   \   000021   E0           MOVX    A,@DPTR
   \   000022   24..         ADD     A,#(adcChannels & 0xff)
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   34..         ADDC    A,#((adcChannels >> 8) & 0xff)
   \   000029   F583         MOV     DPH,A
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5B6         MOV     0xb6,A
   1583          }
   \   00002E   02....       LJMP    ??Subroutine115_0
   \   000031                REQUIRE ADCCON3

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#si
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2436         ADD     A,#0x36
   \   000007   12....       LCALL   ??Subroutine88_0
   \                     ??CrossCallReturnLabel_282:
   \   00000A   22           RET
   1584          /******************************************************************************
   1585          * Read ADC's once into buffer
   1586          ******************************************************************************/
   1587          
   1588          #pragma optimize=s 9

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1589          void readNextValue(void){ //Scheduled(void){  // 
   \                     readNextValue:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1590            INT16 value;
   1591            static int theShift = 50;
   1592            
   1593            ADC_GET_VALUE( value ); value >>= 2; value += theShift;  // 200 >> 2 = 50
   \   000005   E5BB         MOV     A,0xbb
   \   000007   F5..         MOV     ?V0 + 1,A
   \   000009   E5BA         MOV     A,0xba
   \   00000B   F5..         MOV     ?V0 + 0,A
   1594            
   1595            //while( value < 0 ){ value++; theShift++; } // adaptive
   1596            adcsTemp[ adcCount++ ] += (UINT16)value; 
   \   00000D   90....       MOV     DPTR,#adcCount
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FC           MOV     R4,A
   \   000012   7401         MOV     A,#0x1
   \   000014   2C           ADD     A,R4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   7402         MOV     A,#0x2
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?SS_SHR
   \   00001D   90....       MOV     DPTR,#??theShift
   \   000020   E0           MOVX    A,@DPTR
   \   000021   25..         ADD     A,?V0 + 0
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   35..         ADDC    A,?V0 + 1
   \   000028   FB           MOV     R3,A
   \   000029   EC           MOV     A,R4
   \   00002A   C3           CLR     C
   \   00002B   33           RLC     A
   \   00002C   F8           MOV     R0,A
   \   00002D   E4           CLR     A
   \   00002E   33           RLC     A
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   24..         ADD     A,#(adcsTemp & 0xff)
   \   000033   F582         MOV     DPL,A
   \   000035   E9           MOV     A,R1
   \   000036   34..         ADDC    A,#((adcsTemp >> 8) & 0xff)
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   2A           ADD     A,R2
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   3B           ADDC    A,R3
   \   000040   F0           MOVX    @DPTR,A
   1597            
   1598            if( adcCount < N_CHANNELS )
   \   000041   90....       MOV     DPTR,#adcCount
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C3           CLR     C
   \   000046   9409         SUBB    A,#0x9
   \   000048   5010         JNC     ??readNextValue_0
   1599            {
   1600              ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   24..         ADD     A,#(adcChannels & 0xff)
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   34..         ADDC    A,#((adcChannels >> 8) & 0xff)
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5B6         MOV     0xb6,A
   \   000057   02....       LJMP    ??readNextValue_1
   1601            }
   1602            else
   1603            {
   1604              if( ++tempAdcsCount >= 8 )
   \                     ??readNextValue_0:
   \   00005A   90....       MOV     DPTR,#tempAdcsCount
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   04           INC     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   C3           CLR     C
   \   000061   9408         SUBB    A,#0x8
   \   000063   5003         JNC     $+5
   \   000065   02....       LJMP    ??readNextValue_2
   1605              {
   1606                BYTE idx; 
   1607                INT16 grnd = adcsTemp[ 3 ];
   \   000068   90....       MOV     DPTR,#(adcsTemp + 6)
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FE           MOV     R6,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FF           MOV     R7,A
   1608                
   1609                for( idx = 0; idx < N_CHANNELS; idx++ )
   \   000070   7C..         MOV     R4,#(adcsTemp & 0xff)
   \   000072   7D..         MOV     R5,#((adcsTemp >> 8) & 0xff)
   \   000074   7A..         MOV     R2,#(last & 0xff)
   \   000076   7B..         MOV     R3,#((last >> 8) & 0xff)
   \   000078   90....       MOV     DPTR,#bufferCount
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   C3           CLR     C
   \   00007D   33           RLC     A
   \   00007E   F8           MOV     R0,A
   \   00007F   E4           CLR     A
   \   000080   33           RLC     A
   \   000081   F9           MOV     R1,A
   \   000082   E8           MOV     A,R0
   \   000083   24..         ADD     A,#(adcBuf & 0xff)
   \   000085   F8           MOV     R0,A
   \   000086   E9           MOV     A,R1
   \   000087   34..         ADDC    A,#((adcBuf >> 8) & 0xff)
   \   000089   F9           MOV     R1,A
   \   00008A   75..09       MOV     ?V0 + 2,#0x9
   1610                {
   1611                  adcBuf[ idx ][ bufferCount ] = adcsTemp[ idx ];
   \                     ??readNextValue_3:
   \   00008D   8C82         MOV     DPL,R4
   \   00008F   8D83         MOV     DPH,R5
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F5..         MOV     ?V0 + 0,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   F5..         MOV     ?V0 + 1,A
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   E5..         MOV     A,?V0 + 0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E5..         MOV     A,?V0 + 1
   \   0000A2   F0           MOVX    @DPTR,A
   1612          
   1613                  if( adcsTemp[ idx ] < grnd )
   \   0000A3   C3           CLR     C
   \   0000A4   E5..         MOV     A,?V0 + 0
   \   0000A6   9E           SUBB    A,R6
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   9F           SUBB    A,R7
   \   0000AA   5009         JNC     ??readNextValue_4
   1614                    last[idx] = 0; 
   \   0000AC   8A82         MOV     DPL,R2
   \   0000AE   8B83         MOV     DPH,R3
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   8015         SJMP    ??readNextValue_5
   1615                  else 
   1616                    last[idx] = adcsTemp[ idx ] - grnd;
   \                     ??readNextValue_4:
   \   0000B5   E5..         MOV     A,?V0 + 0
   \   0000B7   C3           CLR     C
   \   0000B8   9E           SUBB    A,R6
   \   0000B9   F5..         MOV     ?V0 + 0,A
   \   0000BB   E5..         MOV     A,?V0 + 1
   \   0000BD   9F           SUBB    A,R7
   \   0000BE   F5..         MOV     ?V0 + 1,A
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   E5..         MOV     A,?V0 + 0
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E5..         MOV     A,?V0 + 1
   \                     ??readNextValue_5:
   \   0000CA   F0           MOVX    @DPTR,A
   1617                }
   \   0000CB   E8           MOV     A,R0
   \   0000CC   2410         ADD     A,#0x10
   \   0000CE   F8           MOV     R0,A
   \   0000CF   E9           MOV     A,R1
   \   0000D0   3400         ADDC    A,#0x0
   \   0000D2   F9           MOV     R1,A
   \   0000D3   EA           MOV     A,R2
   \   0000D4   2402         ADD     A,#0x2
   \   0000D6   0A           INC     R2
   \   0000D7   0A           INC     R2
   \   0000D8   EB           MOV     A,R3
   \   0000D9   3400         ADDC    A,#0x0
   \   0000DB   FB           MOV     R3,A
   \   0000DC   EC           MOV     A,R4
   \   0000DD   2402         ADD     A,#0x2
   \   0000DF   0C           INC     R4
   \   0000E0   0C           INC     R4
   \   0000E1   ED           MOV     A,R5
   \   0000E2   3400         ADDC    A,#0x0
   \   0000E4   FD           MOV     R5,A
   \   0000E5   15..         DEC     ?V0 + 2
   \   0000E7   E5..         MOV     A,?V0 + 2
   \   0000E9   70A2         JNZ     ??readNextValue_3
   1618          
   1619                flags[ AltCheckVin ] = TRUE;
   \   0000EB   90....       MOV     DPTR,#flags
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   240B         ADD     A,#0xb
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   3400         ADDC    A,#0x0
   \   0000F6   F9           MOV     R1,A
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   8983         MOV     DPH,R1
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   F0           MOVX    @DPTR,A
   1620                zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
   \   0000FE                ; Setup parameters for call to function zerofill
   \   0000FE   7912         MOV     R1,#0x12
   \   000100   7A..         MOV     R2,#(adcsTemp & 0xff)
   \   000102   7B..         MOV     R3,#((adcsTemp >> 8) & 0xff)
   \   000104   12....       LCALL   zerofill
   1621                tempAdcsCount = 0;
   \   000107   E4           CLR     A
   \   000108   90....       MOV     DPTR,#tempAdcsCount
   \   00010B   F0           MOVX    @DPTR,A
   1622                if( ++bufferCount == BUFFER_SIZE )
   \   00010C   90....       MOV     DPTR,#bufferCount
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   04           INC     A
   \   000111   F0           MOVX    @DPTR,A
   \   000112   6408         XRL     A,#0x8
   \   000114   700B         JNZ     ??readNextValue_2
   1623                {
   1624                  enable2SendData = TRUE; 
   \   000116   7401         MOV     A,#0x1
   \   000118   90....       MOV     DPTR,#enable2SendData
   \   00011B   F0           MOVX    @DPTR,A
   1625                  bufferCount = 0; 
   \   00011C   E4           CLR     A
   \   00011D   90....       MOV     DPTR,#bufferCount
   \   000120   F0           MOVX    @DPTR,A
   1626                }
   1627              }
   1628              adcCount = 0;
   \                     ??readNextValue_2:
   \   000121   E4           CLR     A
   \   000122   90....       MOV     DPTR,#adcCount
   \   000125   F0           MOVX    @DPTR,A
   1629            }
   1630          }
   \                     ??readNextValue_1:
   \   000126   02....       LJMP    ?Subroutine123
   \   000129                REQUIRE ADCCON3
   \   000129                REQUIRE ADCL
   \   000129                REQUIRE ADCH

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??theShift:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for theShift>`
   \   000002                REQUIRE __INIT_XDATA_I
   1631          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1632          void prepareTxBuffer()
   \                     prepareTxBuffer:
   1633          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1634               loadIV( page.curIV );  
   \   000005                ; Setup parameters for call to function load
   \   000005   7A..         MOV     R2,#((page + 112) & 0xff)
   \   000007   7B..         MOV     R3,#(((page + 112) >> 8) & 0xff)
   \   000009   7906         MOV     R1,#0x6
   \   00000B   12....       LCALL   ??Subroutine81_1
   1635               encode( 32, (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2) );
   \                     ??CrossCallReturnLabel_264:
   \   00000E                ; Setup parameters for call to function code
   \   00000E   75....       MOV     ?V0 + 0,#((radioPktBufferTx + 2) & 0xff)
   \   000011   75....       MOV     ?V0 + 1,#(((radioPktBufferTx + 2) >> 8) & 0xff)
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7C..         MOV     R4,#(radioPktBuffer & 0xff)
   \   00001B   7D..         MOV     R5,#((radioPktBuffer >> 8) & 0xff)
   \   00001D   7A20         MOV     R2,#0x20
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   `code`
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   1636          
   1637               
   1638               radioPktBufferTx[0] = PACKET_LENGTH_ED;               // Length byte
   \   000029   7422         MOV     A,#0x22
   \   00002B   90....       MOV     DPTR,#radioPktBufferTx
   \   00002E   F0           MOVX    @DPTR,A
   1639               radioPktBufferTx[1] = page.gwAddr;                    // GW address
   \   00002F   90....       MOV     DPTR,#(page + 191)
   \   000032   E0           MOVX    A,@DPTR
   \   000033   90....       MOV     DPTR,#(radioPktBufferTx + 1)
   \   000036   F0           MOVX    @DPTR,A
   1640               packagePrepared = TRUE; 
   \   000037   7401         MOV     A,#0x1
   \   000039   90....       MOV     DPTR,#packagePrepared
   \   00003C   02....       LJMP    ?Subroutine122
   1641          }
   1642          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1643          void copyMac( BYTE *ptr) { mymemcpy( ptr, page.myMac, 6); }
   \                     copyMac:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function mymemcpy
   \   000000   7906         MOV     R1,#0x6
   \   000002   7C..         MOV     R4,#((page + 6) & 0xff)
   \   000004   7D..         MOV     R5,#(((page + 6) >> 8) & 0xff)
   \   000006   12....       LCALL   mymemcpy
   \   000009   22           RET
   1644          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1645          BYTE ndev = 0;
   \                     ndev:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1646          INT16 prevRssi = 0;
   \                     prevRssi:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1647          BYTE coefficients_buffer[ 24 ];
   \                     coefficients_buffer:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
   1648          void prepareCoeff(void);
   1649          /******************************************************************************
   1650          * Prepare data - average the round robin buffer into 10 values
   1651          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1652          void prepareData(void)
   \                     prepareData:
   1653          {  
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   1654            UINT16 reportStatus = netValue;
   \   000005   90....       MOV     DPTR,#netValue
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
   1655            isCalibrationPackage = FALSE;
   \   00000D   E4           CLR     A
   \   00000E   90....       MOV     DPTR,#isCalibrationPackage
   \   000011   F0           MOVX    @DPTR,A
   1656          
   1657            if ( reportScaling )
   \   000012   90....       MOV     DPTR,#reportScaling
   \   000015   E0           MOVX    A,@DPTR
   \   000016   601E         JZ      ??prepareData_0
   1658            { 
   1659              if ( base_ptr==coefficients_buffer )
   \   000018   90....       MOV     DPTR,#base_ptr
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   64..         XRL     A,#(coefficients_buffer & 0xff)
   \   00001E   7004         JNZ     ??prepareData_1
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   64..         XRL     A,#((coefficients_buffer >> 8) & 0xff)
   \                     ??prepareData_1:
   \   000024   7005         JNZ     ??prepareData_2
   1660                prepareCoeff();
   \   000026                ; Setup parameters for call to function prepareCoeff
   \   000026   12....       LCALL   prepareCoeff
   \   000029   8003         SJMP    ??prepareData_3
   1661              else 
   1662                prepareScaling();
   \                     ??prepareData_2:
   \   00002B                ; Setup parameters for call to function prepareScaling
   \   00002B   12....       LCALL   prepareScaling
   1663              isCalibrationPackage = TRUE;
   \                     ??prepareData_3:
   \   00002E   7401         MOV     A,#0x1
   \   000030   90....       MOV     DPTR,#isCalibrationPackage
   \   000033   02....       LJMP    ??prepareData_4
   1664            }
   1665            else if ( enable2SendData )
   \                     ??prepareData_0:
   \   000036   90....       MOV     DPTR,#enable2SendData
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   7003         JNZ     $+5
   \   00003C   02....       LJMP    ??prepareData_5
   1666            {
   1667              BYTE *ptr  = radioPktBuffer;
   1668              computeADCs( FALSE, FALSE );
   \   00003F                ; Setup parameters for call to function computeADCs
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7900         MOV     R1,#0x0
   \   000043   12....       LCALL   computeADCs
   1669              
   1670              mymemcpy( ptr, (BYTE *)&utc, 4 );
   \   000046                ; Setup parameters for call to function mymemcpy
   \   000046   7904         MOV     R1,#0x4
   \   000048   7C..         MOV     R4,#(utc & 0xff)
   \   00004A   7D..         MOV     R5,#((utc >> 8) & 0xff)
   \   00004C   7A..         MOV     R2,#(radioPktBuffer & 0xff)
   \   00004E   7B..         MOV     R3,#((radioPktBuffer >> 8) & 0xff)
   \   000050   12....       LCALL   mymemcpy
   1671              ptr +=4;
   1672              *ptr++ = (BYTE)curChannel;
   \   000053   90....       MOV     DPTR,#curChannel
   \   000056   E0           MOVX    A,@DPTR
   \   000057   90....       MOV     DPTR,#(radioPktBuffer + 4)
   \   00005A   F0           MOVX    @DPTR,A
   1673              *ptr++ = ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );
   \   00005B   7418         MOV     A,#0x18
   \   00005D   5590         ANL     A,0x90
   \   00005F   C3           CLR     C
   \   000060   33           RLC     A
   \   000061   C0E0         PUSH    A
   \   000063   90....       MOV     DPTR,#(page + 2)
   \   000066   E0           MOVX    A,@DPTR
   \   000067   540F         ANL     A,#0xf
   \   000069   FA           MOV     R2,A
   \   00006A   D0E0         POP     A
   \   00006C   4A           ORL     A,R2
   \   00006D   33           RLC     A
   \   00006E   33           RLC     A
   \   00006F   54FC         ANL     A,#0xfc
   \   000071   12....       LCALL   ?Subroutine79
   1674              
   1675              copyMac( ptr );
   1676              ptr += 6; /* mac address is 6 bytes (12 characters) */
   1677              /* At this point, 12 bytes gone */
   1678              
   1679              mymemcpy( ptr, (BYTE *)adcs16, 16 );
   \                     ??CrossCallReturnLabel_255:
   \   000074                ; Setup parameters for call to function mymemcpy
   \   000074   7910         MOV     R1,#0x10
   \   000076   7C..         MOV     R4,#(adcs16 & 0xff)
   \   000078   7D..         MOV     R5,#((adcs16 >> 8) & 0xff)
   \   00007A   7A..         MOV     R2,#((radioPktBuffer + 12) & 0xff)
   \   00007C   7B..         MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
   \   00007E   12....       LCALL   mymemcpy
   1680              
   1681              /* 06/26/2017 To help debug new functionality in checkVin(), only add this values if reportStatus is 50 or below */
   1682              if (reportStatus <= 50)
   \   000081   C3           CLR     C
   \   000082   EE           MOV     A,R6
   \   000083   9433         SUBB    A,#0x33
   \   000085   EF           MOV     A,R7
   \   000086   9400         SUBB    A,#0x0
   \   000088   5067         JNC     ??prepareData_6
   1683              {
   1684                if (ProtectionLimitsExceeded != 0)
   \   00008A   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6008         JZ      ??prepareData_7
   1685                {
   1686                  reportStatus = 180 + ProtectionLimitsExceeded;
   \   000090   F8           MOV     R0,A
   \   000091   74B4         MOV     A,#-0x4c
   \   000093   28           ADD     A,R0
   \   000094   FE           MOV     R6,A
   \   000095   E4           CLR     A
   \   000096   8056         SJMP    ??prepareData_8
   1687                }
   1688                else
   1689                {
   1690                  if (page.is500Always )
   \                     ??prepareData_7:
   \   000098   90....       MOV     DPTR,#(page + 194)
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00009E   500C         JNC     ??prepareData_9
   1691                    reportStatus += 2 + ((UINT16)CHANNR)*100;
   \   0000A0   90DF06       MOV     DPTR,#-0x20fa
   \   0000A3   12....       LCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_188:
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   28           ADD     A,R0
   \   0000A9   08           INC     R0
   \   0000AA   800D         SJMP    ??prepareData_10
   1692                  else if (page.isRelay  )
   \                     ??prepareData_9:
   \   0000AC   A2E5         MOV     C,0xE0 /* A   */.5
   \   0000AE   5013         JNC     ??prepareData_11
   1693                    reportStatus += 1 + page.repeaterChannel*100;
   \   0000B0   90....       MOV     DPTR,#(page + 192)
   \   0000B3   12....       LCALL   ?Subroutine62
   \                     ??CrossCallReturnLabel_189:
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   28           ADD     A,R0
   \                     ??prepareData_10:
   \   0000B9   08           INC     R0
   \   0000BA   E4           CLR     A
   \   0000BB   39           ADDC    A,R1
   \   0000BC   F9           MOV     R1,A
   \   0000BD   EE           MOV     A,R6
   \   0000BE   28           ADD     A,R0
   \   0000BF   FE           MOV     R6,A
   \   0000C0   EF           MOV     A,R7
   \   0000C1   39           ADDC    A,R1
   \   0000C2   FF           MOV     R7,A
   1694                  if ( page.searchCommunication )
   \                     ??prepareData_11:
   \   0000C3   90....       MOV     DPTR,#(page + 194)
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   A2E7         MOV     C,0xE0 /* A   */.7
   \   0000C9   5008         JNC     ??prepareData_12
   1695                    reportStatus += 4;
   \   0000CB   EE           MOV     A,R6
   \   0000CC   2404         ADD     A,#0x4
   \   0000CE   FE           MOV     R6,A
   \   0000CF   EF           MOV     A,R7
   \   0000D0   3400         ADDC    A,#0x0
   \   0000D2   FF           MOV     R7,A
   1696                  if ( page.use250kbod )
   \                     ??prepareData_12:
   \   0000D3   90....       MOV     DPTR,#(page + 219)
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000D9   5008         JNC     ??prepareData_13
   1697                    reportStatus += 8;
   \   0000DB   EE           MOV     A,R6
   \   0000DC   2408         ADD     A,#0x8
   \   0000DE   FE           MOV     R6,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   3400         ADDC    A,#0x0
   \   0000E2   FF           MOV     R7,A
   1698                  if ( isOnTestStand )
   \                     ??prepareData_13:
   \   0000E3   90....       MOV     DPTR,#isOnTestStand
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   6008         JZ      ??prepareData_6
   1699                    reportStatus += 16;
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2410         ADD     A,#0x10
   \   0000EC   FE           MOV     R6,A
   \   0000ED   EF           MOV     A,R7
   \                     ??prepareData_8:
   \   0000EE   3400         ADDC    A,#0x0
   \   0000F0   FF           MOV     R7,A
   1700                }
   1701              }
   1702              *((INT16 *)(ptr+14)) = reportStatus;
   \                     ??prepareData_6:
   \   0000F1   90....       MOV     DPTR,#(radioPktBuffer + 26)
   \   0000F4   EE           MOV     A,R6
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   EF           MOV     A,R7
   \   0000F8   F0           MOVX    @DPTR,A
   1703              
   1704              ptr += 16;
   1705              *ptr++ = lastRssi ? ((BYTE) theRealOffset) : 0x3F;
   \   0000F9   90....       MOV     DPTR,#lastRssi
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   7002         JNZ     ??prepareData_14
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \                     ??prepareData_14:
   \   000101   6007         JZ      ??prepareData_15
   \   000103   90....       MOV     DPTR,#theRealOffset
   \   000106   E0           MOVX    A,@DPTR
   \   000107   FA           MOV     R2,A
   \   000108   8002         SJMP    ??prepareData_16
   \                     ??prepareData_15:
   \   00010A   7A3F         MOV     R2,#0x3f
   \                     ??prepareData_16:
   \   00010C   EA           MOV     A,R2
   \   00010D   90....       MOV     DPTR,#(radioPktBuffer + 28)
   \   000110   F0           MOVX    @DPTR,A
   1706              
   1707              if( !lastRssi )
   \   000111   90....       MOV     DPTR,#lastRssi
   \   000114   E0           MOVX    A,@DPTR
   \   000115   7002         JNZ     ??prepareData_17
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \                     ??prepareData_17:
   \   000119   700B         JNZ     ??prepareData_18
   1708                lastRssi = prevRssi;
   \   00011B   90....       MOV     DPTR,#prevRssi
   \   00011E   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_173:
   \   000121   90....       MOV     DPTR,#lastRssi
   \   000124   8009         SJMP    ??prepareData_19
   1709              else
   1710                prevRssi = lastRssi;
   \                     ??prepareData_18:
   \   000126   90....       MOV     DPTR,#lastRssi
   \   000129   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_174:
   \   00012C   90....       MOV     DPTR,#prevRssi
   \                     ??prepareData_19:
   \   00012F   12....       LCALL   ??Subroutine67_0
   1711              
   1712              *ptr++ = (BYTE) ( lastRssi );    // 29
   \                     ??CrossCallReturnLabel_209:
   \   000132   90....       MOV     DPTR,#lastRssi
   \   000135   E0           MOVX    A,@DPTR
   \   000136   90....       MOV     DPTR,#(radioPktBuffer + 29)
   \   000139   F0           MOVX    @DPTR,A
   1713              
   1714              if( P1_4 )
   \   00013A   A294         MOV     C,0x90.4
   \   00013C   5024         JNC     ??prepareData_20
   1715              {
   1716                *ptr++ = (BYTE) T3CC0;
   \   00013E   E5CD         MOV     A,0xcd
   \   000140   90....       MOV     DPTR,#(radioPktBuffer + 30)
   \   000143   F0           MOVX    @DPTR,A
   1717                *ptr   = (BYTE)   theOC;
   \   000144   90....       MOV     DPTR,#theOC
   \   000147   E0           MOVX    A,@DPTR
   \   000148   90....       MOV     DPTR,#(radioPktBuffer + 31)
   \   00014B   F0           MOVX    @DPTR,A
   1718          #ifdef MidString
   1719                if( *ptr > ocShortCircuitLimit )
   \   00014C   90....       MOV     DPTR,#ocShortCircuitLimit
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   C0E0         PUSH    A
   \   000152   90....       MOV     DPTR,#(radioPktBuffer + 31)
   \   000155   E0           MOVX    A,@DPTR
   \   000156   FA           MOV     R2,A
   \   000157   D0E0         POP     A
   \   000159   C3           CLR     C
   \   00015A   9A           SUBB    A,R2
   \   00015B   5015         JNC     ??prepareData_21
   1720                  *ptr = ocShortCircuitLimit;
   \   00015D   90....       MOV     DPTR,#ocShortCircuitLimit
   \   000160   800B         SJMP    ??prepareData_22
   1721          #endif
   1722              }
   1723              else
   1724              {
   1725                *ptr++ = page.ov;
   \                     ??prepareData_20:
   \   000162   90....       MOV     DPTR,#(page + 187)
   \   000165   E0           MOVX    A,@DPTR
   \   000166   90....       MOV     DPTR,#(radioPktBuffer + 30)
   \   000169   F0           MOVX    @DPTR,A
   1726                *ptr   = (BYTE)   setOC;
   \   00016A   90....       MOV     DPTR,#setOC
   \                     ??prepareData_22:
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   90....       MOV     DPTR,#(radioPktBuffer + 31)
   \   000171   F0           MOVX    @DPTR,A
   1727              }
   1728              lastRssi = 0;
   \                     ??prepareData_21:
   \   000172   90....       MOV     DPTR,#lastRssi
   \   000175   E4           CLR     A
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \                     ??prepareData_4:
   \   000178   F0           MOVX    @DPTR,A
   1729            }
   1730            else
   1731              return;
   1732            
   1733            prepareTxBuffer();        
   \   000179                ; Setup parameters for call to function prepareTxBuffer
   \   000179   12....       LCALL   prepareTxBuffer
   1734          }
   \                     ??prepareData_5:
   \   00017C   02....       LJMP    ?Subroutine120
   \   00017F                REQUIRE _A_P1
   \   00017F                REQUIRE T3CC0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F064       MOV     B,#0x64
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   90....       MOV     DPTR,#(radioPktBuffer + 5)
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function copyMac
   \   000004                ; Setup parameters for call to function copyMac
   \   000004   7A..         MOV     R2,#((radioPktBuffer + 6) & 0xff)
   \   000006   7B..         MOV     R3,#(((radioPktBuffer + 6) >> 8) & 0xff)
   \   000008   12....       LCALL   copyMac
   \   00000B   22           RET
   1735          /******************************************************************************
   1736          * Prepare scaling coeff to send
   1737          ******************************************************************************/
   1738          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1739          void prepareSpecial( BYTE tag, BYTE *p )
   \                     prepareSpecial:
   1740          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1741            BYTE *ptr = radioPktBuffer;
   1742            mymemcpy( ptr,    p,   4 ); 
   \   00000B                ; Setup parameters for call to function mymemcpy
   \   00000B   7904         MOV     R1,#0x4
   \   00000D   EE           MOV     A,R6
   \   00000E   FC           MOV     R4,A
   \   00000F   EF           MOV     A,R7
   \   000010   FD           MOV     R5,A
   \   000011   7A..         MOV     R2,#(radioPktBuffer & 0xff)
   \   000013   7B..         MOV     R3,#((radioPktBuffer >> 8) & 0xff)
   \   000015   12....       LCALL   mymemcpy
   1743            ptr+=4;
   1744            
   1745            *ptr++ = tag;
   \   000018   E5..         MOV     A,?V0 + 0
   \   00001A   90....       MOV     DPTR,#(radioPktBuffer + 4)
   \   00001D   F0           MOVX    @DPTR,A
   1746            *ptr++ = 3 | (page.netId << 2);
   \   00001E   90....       MOV     DPTR,#(page + 2)
   \   000021   E0           MOVX    A,@DPTR
   \   000022   33           RLC     A
   \   000023   33           RLC     A
   \   000024   54FC         ANL     A,#0xfc
   \   000026   4403         ORL     A,#0x3
   \   000028   12....       LCALL   ?Subroutine79
   1747            copyMac( ptr );
   1748            mymemcpy( ptr+6, p+4, 20 );
   \                     ??CrossCallReturnLabel_256:
   \   00002B                ; Setup parameters for call to function mymemcpy
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   EE           MOV     A,R6
   \   00002E   2404         ADD     A,#0x4
   \   000030   FC           MOV     R4,A
   \   000031   EF           MOV     A,R7
   \   000032   3400         ADDC    A,#0x0
   \   000034   FD           MOV     R5,A
   \   000035   7A..         MOV     R2,#((radioPktBuffer + 12) & 0xff)
   \   000037   7B..         MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
   \   000039   12....       LCALL   mymemcpy
   1749          }
   \   00003C   02....       LJMP    ?Subroutine120
   1750          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1751          void prepareCoeff(void)
   \                     prepareCoeff:
   1752          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   1753              BYTE idx;
   1754              
   1755              UINT16 *ptrU16 = (UINT16 *)coefficients_buffer;
   \   000005   7E..         MOV     R6,#(coefficients_buffer & 0xff)
   \   000007   7F..         MOV     R7,#((coefficients_buffer >> 8) & 0xff)
   1756              INT16  *ptrI16 = (INT16 *)&(coefficients_buffer[12]);
   1757              for( idx = 0;  idx < 7;  idx++) if( idx != 4 ) *ptrU16 ++ = convU( 1E3 * page.linearK[ idx ][0] );  
   \   000009   75..00       MOV     ?V0 + 0,#0x0
   \   00000C   8006         SJMP    ??prepareCoeff_0
   \                     ??prepareCoeff_1:
   \   00000E   7404         MOV     A,#0x4
   \   000010   65..         XRL     A,?V0 + 0
   \   000012   6048         JZ      ??prepareCoeff_2
   \                     ??prepareCoeff_0:
   \   000014                ; Setup parameters for call to function convU
   \   000014   85....       MOV     ?V0 + 2,?V0 + 0
   \   000017   75..00       MOV     ?V0 + 3,#0x0
   \   00001A   7403         MOV     A,#0x3
   \   00001C   78..         MOV     R0,#?V0 + 2
   \   00001E   12....       LCALL   ?S_SHL
   \   000021   E5..         MOV     A,?V0 + 2
   \   000023   24..         ADD     A,#((page + 40) & 0xff)
   \   000025   F582         MOV     DPL,A
   \   000027   E5..         MOV     A,?V0 + 3
   \   000029   34..         ADDC    A,#(((page + 40) >> 8) & 0xff)
   \   00002B   F583         MOV     DPH,A
   \   00002D   78..         MOV     R0,#?V0 + 4
   \   00002F   12....       LCALL   ?L_MOV_X
   \   000032   90....       MOV     DPTR,#__Constant_447a0000
   \   000035   78..         MOV     R0,#?V0 + 8
   \   000037   12....       LCALL   ?L_MOV_X
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   79..         MOV     R1,#?V0 + 8
   \   00003E   12....       LCALL   ?FLT_MUL
   \   000041   AA..         MOV     R2,?V0 + 4
   \   000043   AB..         MOV     R3,?V0 + 5
   \   000045   AC..         MOV     R4,?V0 + 6
   \   000047   AD..         MOV     R5,?V0 + 7
   \   000049   12....       LCALL   convU
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   12....       LCALL   ??Subroutine114_0
   \                     ??CrossCallReturnLabel_353:
   \   000053   EE           MOV     A,R6
   \   000054   2402         ADD     A,#0x2
   \   000056   EF           MOV     A,R7
   \   000057   3400         ADDC    A,#0x0
   \   000059   0E           INC     R6
   \   00005A   0E           INC     R6
   \   00005B   FF           MOV     R7,A
   \                     ??prepareCoeff_2:
   \   00005C   05..         INC     ?V0 + 0
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   C3           CLR     C
   \   000061   9407         SUBB    A,#0x7
   \   000063   40A9         JC      ??prepareCoeff_1
   1758              *ptrI16++ = convS( page.linearK[0][1] );
   \   000065                ; Setup parameters for call to function convS
   \   000065   90....       MOV     DPTR,#(page + 44)
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?L_MOV_X
   \   00006D   AA..         MOV     R2,?V0 + 0
   \   00006F   AB..         MOV     R3,?V0 + 1
   \   000071   AC..         MOV     R4,?V0 + 2
   \   000073   AD..         MOV     R5,?V0 + 3
   \   000075   12....       LCALL   convS
   \   000078   90....       MOV     DPTR,#(coefficients_buffer + 12)
   \   00007B   12....       LCALL   ??Subroutine114_0
   1759              *ptrI16++ = convS( page.linearK[2][1] );
   \                     ??CrossCallReturnLabel_354:
   \   00007E                ; Setup parameters for call to function convS
   \   00007E   90....       MOV     DPTR,#(page + 60)
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?L_MOV_X
   \   000086   AA..         MOV     R2,?V0 + 0
   \   000088   AB..         MOV     R3,?V0 + 1
   \   00008A   AC..         MOV     R4,?V0 + 2
   \   00008C   AD..         MOV     R5,?V0 + 3
   \   00008E   12....       LCALL   convS
   \   000091   90....       MOV     DPTR,#(coefficients_buffer + 14)
   \   000094   12....       LCALL   ??Subroutine114_0
   1760              *ptrI16++ = convS( page.linearK[5][1] );
   \                     ??CrossCallReturnLabel_355:
   \   000097                ; Setup parameters for call to function convS
   \   000097   90....       MOV     DPTR,#(page + 84)
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?L_MOV_X
   \   00009F   AA..         MOV     R2,?V0 + 0
   \   0000A1   AB..         MOV     R3,?V0 + 1
   \   0000A3   AC..         MOV     R4,?V0 + 2
   \   0000A5   AD..         MOV     R5,?V0 + 3
   \   0000A7   12....       LCALL   convS
   \   0000AA   90....       MOV     DPTR,#(coefficients_buffer + 16)
   \   0000AD   12....       LCALL   ??Subroutine114_0
   1761              *ptrI16++ = convS( page.linearK[6][1] );
   \                     ??CrossCallReturnLabel_356:
   \   0000B0                ; Setup parameters for call to function convS
   \   0000B0   90....       MOV     DPTR,#(page + 92)
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?L_MOV_X
   \   0000B8   AA..         MOV     R2,?V0 + 0
   \   0000BA   AB..         MOV     R3,?V0 + 1
   \   0000BC   AC..         MOV     R4,?V0 + 2
   \   0000BE   AD..         MOV     R5,?V0 + 3
   \   0000C0   12....       LCALL   convS
   \   0000C3   90....       MOV     DPTR,#(coefficients_buffer + 18)
   \   0000C6   12....       LCALL   ??Subroutine114_0
   1762              *ptrI16++ = convS( page.dFk[3] );    
   \                     ??CrossCallReturnLabel_357:
   \   0000C9                ; Setup parameters for call to function convS
   \   0000C9   90....       MOV     DPTR,#(page + 24)
   \   0000CC   78..         MOV     R0,#?V0 + 0
   \   0000CE   12....       LCALL   ?L_MOV_X
   \   0000D1   AA..         MOV     R2,?V0 + 0
   \   0000D3   AB..         MOV     R3,?V0 + 1
   \   0000D5   AC..         MOV     R4,?V0 + 2
   \   0000D7   AD..         MOV     R5,?V0 + 3
   \   0000D9   12....       LCALL   convS
   \   0000DC   90....       MOV     DPTR,#(coefficients_buffer + 20)
   \   0000DF   12....       LCALL   ??Subroutine114_0
   1763              coefficients_buffer[ 22 ] = (BYTE) T3CC0; 
   \                     ??CrossCallReturnLabel_358:
   \   0000E2   E5CD         MOV     A,0xcd
   \   0000E4   90....       MOV     DPTR,#(coefficients_buffer + 22)
   \   0000E7   F0           MOVX    @DPTR,A
   1764              coefficients_buffer[ 23 ] = (BYTE) theOC;
   \   0000E8   90....       MOV     DPTR,#theOC
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   90....       MOV     DPTR,#(coefficients_buffer + 23)
   \   0000EF   F0           MOVX    @DPTR,A
   1765              prepareSpecial( 0xEC, coefficients_buffer ); 
   \   0000F0                ; Setup parameters for call to function prepareSpecial
   \   0000F0   7A..         MOV     R2,#(coefficients_buffer & 0xff)
   \   0000F2   7B..         MOV     R3,#((coefficients_buffer >> 8) & 0xff)
   \   0000F4   79EC         MOV     R1,#-0x14
   \   0000F6   12....       LCALL   prepareSpecial
   1766          }
   \   0000F9   02....       LJMP    ?Subroutine113
   \   0000FC                REQUIRE T3CC0
   1767          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1768          void prepareScaling(void)
   \                     prepareScaling:
   1769          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   1770            BYTE k = (reportScaling-1) / calibrationRepeat;
   \   000005   90....       MOV     DPTR,#reportScaling
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   28           ADD     A,R0
   \   00000D   18           DEC     R0
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   3400         ADDC    A,#0x0
   \   000012   F9           MOV     R1,A
   \   000013   90....       MOV     DPTR,#calibrationRepeat
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FA           MOV     R2,A
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   ?S_DIV_MOD
   \   00001D   E8           MOV     A,R0
   \   00001E   FC           MOV     R4,A
   1771            page.prepAddr = (UINT16)(&prepareScaling);
   \   00001F   90....       MOV     DPTR,#(page + 220)
   \   000022   74..         MOV     A,#(prepareScaling & 0xff)
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#((prepareScaling >> 8) & 0xff)
   \   000028   F0           MOVX    @DPTR,A
   1772            prepareSpecial( 0xED + k, base_ptr + k * 24 ); 
   \   000029                ; Setup parameters for call to function prepareSpecial
   \   000029   EC           MOV     A,R4
   \   00002A   75F018       MOV     B,#0x18
   \   00002D   A4           MUL     AB
   \   00002E   F8           MOV     R0,A
   \   00002F   A9F0         MOV     R1,B
   \   000031   90....       MOV     DPTR,#base_ptr
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   FA           MOV     R2,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   39           ADDC    A,R1
   \   00003A   FB           MOV     R3,A
   \   00003B   74ED         MOV     A,#-0x13
   \   00003D   2C           ADD     A,R4
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   prepareSpecial
   1773          }
   \   000042                REQUIRE ?Subroutine120
   \   000042                ; // Fall through to label ?Subroutine120
   1774          
   1775          /******************************************************************************
   1776          * Prepare request to join network
   1777          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1778          void prepareJoinRequest(void){  
   \                     prepareJoinRequest:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1779          BYTE *ptr  = radioPktBuffer;
   1780              //mymemset( ptr, 0xFF, 4); ptr+=4; 
   1781              *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF;
   \   000004   74FF         MOV     A,#-0x1
   \   000006   90....       MOV     DPTR,#radioPktBuffer
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   90....       MOV     DPTR,#(radioPktBuffer + 1)
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   90....       MOV     DPTR,#(radioPktBuffer + 2)
   \   000011   F0           MOVX    @DPTR,A
   \   000012   90....       MOV     DPTR,#(radioPktBuffer + 3)
   \   000015   F0           MOVX    @DPTR,A
   1782              //mymemcpy( ptr, (BYTE *)&utc, 4 );     mymemcpy( ptr+4, (BYTE *)&ms, 2 ); 
   1783              mymemcpy( ptr, (BYTE *)&utc, 6 ); 
   \   000016                ; Setup parameters for call to function mymemcpy
   \   000016   7906         MOV     R1,#0x6
   \   000018   7C..         MOV     R4,#(utc & 0xff)
   \   00001A   7D..         MOV     R5,#((utc >> 8) & 0xff)
   \   00001C   7A..         MOV     R2,#((radioPktBuffer + 4) & 0xff)
   \   00001E   7B..         MOV     R3,#(((radioPktBuffer + 4) >> 8) & 0xff)
   \   000020   12....       LCALL   mymemcpy
   1784              copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6 );
   \   000023                ; Setup parameters for call to function copyMac
   \   000023   7A..         MOV     R2,#((radioPktBuffer + 10) & 0xff)
   \   000025   7B..         MOV     R3,#(((radioPktBuffer + 10) >> 8) & 0xff)
   \   000027   12....       LCALL   copyMac
   1785              prepareTxBuffer();      
   \   00002A                ; Setup parameters for call to function prepareTxBuffer
   \   00002A   12....       LCALL   prepareTxBuffer
   1786              radioPktBufferTx[0] = PACKET_LENGTH_GW_2;
   \   00002D   7412         MOV     A,#0x12
   \   00002F   90....       MOV     DPTR,#radioPktBufferTx
   \   000032   02....       LJMP    ?Subroutine115
   1787          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1788          void quartz(void)
   \                     quartz:
   1789          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   1790            BYTE counter = 127;
   \   000005   7E7F         MOV     R6,#0x7f
   1791            static BOOL q = 0;
   1792            
   1793            if ( q )
   \   000007   90....       MOV     DPTR,#??q
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   7024         JNZ     ??quartz_0
   1794              return;
   1795            else q = 1;
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   1796            
   1797            if ( rcgen )
   \   000010   90....       MOV     DPTR,#rcgen
   \   000013   E0           MOVX    A,@DPTR
   \   000014   701B         JNZ     ??quartz_0
   1798              return;
   1799            
   1800            SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
   \   000016   53BEFB       ANL     0xbe,#0xfb
   \   000019   8005         SJMP    ??quartz_1
   1801            while(!XOSC_STABLE && counter-- )
   1802              halWait(2);      // waiting until the oscillator is stable
   \                     ??quartz_2:
   \   00001B                ; Setup parameters for call to function halWait
   \   00001B   7902         MOV     R1,#0x2
   \   00001D   12....       LCALL   halWait
   \                     ??quartz_1:
   \   000020   E5BE         MOV     A,0xbe
   \   000022   A2E6         MOV     C,0xE0 /* A   */.6
   \   000024   4004         JC      ??quartz_3
   \   000026   EE           MOV     A,R6
   \   000027   1E           DEC     R6
   \   000028   70F1         JNZ     ??quartz_2
   1803            
   1804            asm("NOP");
   \                     ??quartz_3:
   \   00002A   00           NOP
   1805            CLKCON = 0x89;
   \   00002B   75C689       MOV     0xc6,#-0x77
   1806            SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
   \   00002E   43BE04       ORL     0xbe,#0x4
   1807          }
   \                     ??quartz_0:
   \   000031   80..         SJMP    ?Subroutine120
   \   000033                REQUIRE SLEEP
   \   000033                REQUIRE CLKCON

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??q:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
   1808          /******************************************************************************
   1809          * Send the previously prepared data package
   1810          ******************************************************************************/
   1811          extern DMA_DESC dmaConfig[3]; 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1812          void sendData(BYTE *buffer, BOOL isRepeater ){  
   \                     sendData:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1813              //if( page.fuseComm ) return;
   1814              if( ((buffer[0] != PACKET_LENGTH_ED) && (buffer[0] != PACKET_LENGTH_GW_2)) || txDisabled  )  return; 
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FC           MOV     R4,A
   \   00000A   7422         MOV     A,#0x22
   \   00000C   6C           XRL     A,R4
   \   00000D   6005         JZ      ??sendData_0
   \   00000F   7412         MOV     A,#0x12
   \   000011   6C           XRL     A,R4
   \   000012   7035         JNZ     ??sendData_1
   \                     ??sendData_0:
   \   000014   90....       MOV     DPTR,#txDisabled
   \   000017   E0           MOVX    A,@DPTR
   \   000018   702F         JNZ     ??sendData_1
   1815              RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \   00001A   75E104       MOV     0xe1,#0x4
   \   00001D   90....       MOV     DPTR,#si
   \   000020   E0           MOVX    A,@DPTR
   \   000021   243A         ADD     A,#0x3a
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FD           MOV     R5,A
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   74F0         MOV     A,#-0x10
   \   00002F   F0           MOVX    @DPTR,A
   1816              //setupTxBuffer( buffer );
   1817              SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, buffer );
   \   000030   EB           MOV     A,R3
   \   000031   90....       MOV     DPTR,#(dmaConfig + 8)
   \   000034   F0           MOVX    @DPTR,A
   \   000035   EA           MOV     A,R2
   \   000036   90....       MOV     DPTR,#(dmaConfig + 9)
   \   000039   F0           MOVX    @DPTR,A
   1818              setupRepeater( isRepeater );
   \   00003A                ; Setup parameters for call to function setupRepeater
   \   00003A   12....       LCALL   setupRepeater
   1819              /*
   1820              if( page.is500Always || (page.isRelay && isRepeater) ){
   1821                                                                       atomicChange( CheckFlag, 5*TICKS_IN_MS );
   1822                                                                     //if( page.use250kbod ) need_wiggle = TRUE; 
   1823              }else if( page.use12kbod && page.useFEC )                atomicChange( CheckFlag, 2*_slot - TICKS_IN_MS );
   1824              else                                                     atomicChange( CheckFlag, _slot   - TICKS_IN_MS );
   1825              */
   1826              //quartz();
   1827              //INT_GLOBAL_ENABLE(INT_OFF);
   1828                  si->radioMode = RADIO_MODE_TX;        
   \   00003D   12....       LCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_101:
   \   000040   7410         MOV     A,#0x10
   \   000042   F0           MOVX    @DPTR,A
   1829                  // Send the packet
   1830                  DMAARM = DMAARM_CHANNEL1;     // Arm DMA channel 1
   \   000043   75D602       MOV     0xd6,#0x2
   1831                  RFST   = STROBE_TX;            // Switch radio to TX
   \   000046   75E103       MOV     0xe1,#0x3
   1832              //INT_GLOBAL_ENABLE(INT_ON); 
   1833          }
   \                     ??sendData_1:
   \   000049   02....       LJMP    ??Subroutine115_0
   \   00004C                REQUIRE DMAARM
   \   00004C                REQUIRE RFST

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine89
   \                     ??CrossCallReturnLabel_293:
   \   000003   22           RET
   1834          /******************************************************************************
   1835          * @fn  25*.84
   1836          WPackage
   1837          * @brief       This function makes appropriate actions after receiving message from Gateway
   1838          * Parameters:
   1839          * @return void
   1840          ******************************************************************************/
   1841          #define NDEV_MASK   0x1F
   1842          #define JOIN_MASK   0x80
   1843          #define HOP_MASK    0x40
   1844          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1845          static UINT32 utcLocal = 0;
   \                     utcLocal:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   1846          static UINT16 msLocal  = 0;
   \                     msLocal:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
   1847          
   1848          extern INT16 perRssiOffset;

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   1849          void parseGWPackage(void){
   \                     parseGWPackage:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   1850          static BYTE bunch, plen;
   1851          signed char o = FREQEST, sh = FSCTRL0;
   \   000005   90DF38       MOV     DPTR,#-0x20c8
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FF           MOV     R7,A
   \   00000A   90DF08       MOV     DPTR,#-0x20f8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
   1852          INT16 shift, networkDelay;
   1853          BYTE tmp;
   1854          //UINT16 temperatureProtectionDelay;
   1855          BOOL goodForCommands = FALSE;
   1856          //BOOL newProtocol;
   1857              //if( page.fuseComm ) return;
   1858              rc(); was_listening =  FALSE;
   \   000010   E4           CLR     A
   \   000011   90....       MOV     DPTR,#was_listening
   \   000014   F0           MOVX    @DPTR,A
   1859              ticks2ProcessCmd = 0;    
   \   000015   90....       MOV     DPTR,#ticks2ProcessCmd
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
   1860              plen = radioPktBufferRx[0];
   \   00001B   90....       MOV     DPTR,#radioPktBufferRx
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   90....       MOV     DPTR,#??plen
   \   000022   12....       LCALL   ?Subroutine78
   1861              /*
   1862              if( ( ( plen != PACKET_LENGTH ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
   1863                  atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
   1864                  return;
   1865              }
   1866              */
   1867              if( ( 0 == ( radioPktBufferRx[ plen + 2 ] & 0x80 ) ) || ( ( plen != PACKET_LENGTH_GW ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
   \                     ??CrossCallReturnLabel_254:
   \   000025   5460         ANL     A,#0x60
   \   000027   FA           MOV     R2,A
   \   000028   90....       MOV     DPTR,#??plen
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   24..         ADD     A,#((radioPktBufferRx + 2) & 0xff)
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   34..         ADDC    A,#(((radioPktBufferRx + 2) >> 8) & 0xff)
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   A2E7         MOV     C,0xE0 /* A   */.7
   \   000038   500D         JNC     ??parseGWPackage_0
   \   00003A   90....       MOV     DPTR,#??plen
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6422         XRL     A,#0x22
   \   000040   601C         JZ      ??parseGWPackage_1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6412         XRL     A,#0x12
   \   000045   6017         JZ      ??parseGWPackage_1
   1868                  //atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
   1869                  if( page.isRelay && (!page.is500Always) ) setupRepeater( got_gw );  else setupRepeater( FALSE ); 
   \                     ??parseGWPackage_0:
   \   000047   7420         MOV     A,#0x20
   \   000049   6A           XRL     A,R2
   \   00004A   7007         JNZ     ??parseGWPackage_2
   \                     ??parseGWPackage_3:
   \   00004C                ; Setup parameters for call to function setupRepeater
   \   00004C   90....       MOV     DPTR,#got_gw
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   8002         SJMP    ??parseGWPackage_4
   \                     ??parseGWPackage_2:
   \   000053                ; Setup parameters for call to function setupRepeater
   \   000053   7900         MOV     R1,#0x0
   \                     ??parseGWPackage_4:
   \   000055   12....       LCALL   setupRepeater
   1870                  receive();
   \   000058                ; Setup parameters for call to function receive
   \   000058   12....       LCALL   receive
   1871                  return;
   \   00005B   02....       LJMP    ??parseGWPackage_5
   1872              }
   1873              
   1874              if( page.isRelay && (!page.is500Always) && ( radioPktBufferRx[1] == page.gwAddr ) && (ADDR == page.gwAddr) ){ 
   \                     ??parseGWPackage_1:
   \   00005E   90....       MOV     DPTR,#(radioPktBufferRx + 1)
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FB           MOV     R3,A
   \   000063   7420         MOV     A,#0x20
   \   000065   6A           XRL     A,R2
   \   000066   701B         JNZ     ??parseGWPackage_6
   \   000068   90....       MOV     DPTR,#(page + 191)
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FC           MOV     R4,A
   \   00006D   6B           XRL     A,R3
   \   00006E   7013         JNZ     ??parseGWPackage_6
   \   000070   90DF05       MOV     DPTR,#-0x20fb
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6C           XRL     A,R4
   \   000075   700C         JNZ     ??parseGWPackage_6
   1875                  sendData( radioPktBufferRx, FALSE );  return;
   \   000077                ; Setup parameters for call to function sendData
   \   000077   7900         MOV     R1,#0x0
   \   000079   7A..         MOV     R2,#(radioPktBufferRx & 0xff)
   \   00007B   7B..         MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
   \   00007D   12....       LCALL   sendData
   \   000080   02....       LJMP    ??parseGWPackage_5
   1876              }else if( radioPktBufferRx[1] == page.edAddr ){
   \                     ??parseGWPackage_6:
   \   000083   90....       MOV     DPTR,#(page + 190)
   \   000086   E0           MOVX    A,@DPTR
   \   000087   6B           XRL     A,R3
   \   000088   6003         JZ      $+5
   \   00008A   02....       LJMP    ??parseGWPackage_7
   1877                  goodForCommands = ( 0 != (PKTSTATUS&0x80) ); 
   \   00008D   90DF3C       MOV     DPTR,#-0x20c4
   \   000090   E0           MOVX    A,@DPTR
   \   000091   A2E7         MOV     C,0xE0 /* A   */.7
   \   000093   5004         JNC     ??parseGWPackage_8
   \   000095   D2F0         SETB    B.0
   \   000097   8002         SJMP    ??parseGWPackage_9
   \                     ??parseGWPackage_8:
   \   000099   C2F0         CLR     B.0
   \                     ??parseGWPackage_9:
   \   00009B   A2F0         MOV     C,B.0
   \   00009D   E4           CLR     A
   \   00009E   92E0         MOV     0xE0 /* A   */.0,C
   \   0000A0   FE           MOV     R6,A
   1878                  //P1_1 ^= 1;
   1879                  //decodeDelay = *((BYTE *)0xF538);
   1880                  if( (!page.is500Always) && page.isRelay ) sendData( radioPktBufferRx, TRUE );  
   \   0000A1   7420         MOV     A,#0x20
   \   0000A3   6A           XRL     A,R2
   \   0000A4   7009         JNZ     ??parseGWPackage_10
   \   0000A6                ; Setup parameters for call to function sendData
   \   0000A6   7901         MOV     R1,#0x1
   \   0000A8   7A..         MOV     R2,#(radioPktBufferRx & 0xff)
   \   0000AA   7B..         MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
   \   0000AC   12....       LCALL   sendData
   1881                  decodeDelay = *((BYTE *)0xF538);
   \                     ??parseGWPackage_10:
   \   0000AF   90F538       MOV     DPTR,#-0xac8
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   90....       MOV     DPTR,#decodeDelay
   \   0000B6   12....       LCALL   ?Subroutine119
   1882                  loadIV( page.curIV );  decode( (plen-2), (char *)(radioPktBufferRx+2), (char *)radioPktBuffer );
   \                     ??CrossCallReturnLabel_409:
   \   0000B9                ; Setup parameters for call to function load
   \   0000B9   7A..         MOV     R2,#((page + 112) & 0xff)
   \   0000BB   7B..         MOV     R3,#(((page + 112) >> 8) & 0xff)
   \   0000BD   7906         MOV     R1,#0x6
   \   0000BF   12....       LCALL   ??Subroutine81_1
   \                     ??CrossCallReturnLabel_265:
   \   0000C2                ; Setup parameters for call to function code
   \   0000C2   75....       MOV     ?V0 + 2,#(radioPktBuffer & 0xff)
   \   0000C5   75....       MOV     ?V0 + 3,#((radioPktBuffer >> 8) & 0xff)
   \   0000C8   78..         MOV     R0,#?V0 + 2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   7C..         MOV     R4,#((radioPktBufferRx + 2) & 0xff)
   \   0000CF   7D..         MOV     R5,#(((radioPktBufferRx + 2) >> 8) & 0xff)
   \   0000D1   90....       MOV     DPTR,#??plen
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   24FE         ADD     A,#-0x2
   \   0000D7   FA           MOV     R2,A
   \   0000D8   7902         MOV     R1,#0x2
   \   0000DA   12....       LCALL   `code`
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   1883                  
   1884                  // for SDAG debug
   1885                  //mymemcpy( (BYTE *)radioPktBuffer, (BYTE *)(radioPktBufferRx+2), (plen-2));
   1886                  
   1887                  bunch = radioPktBuffer[0]; ndev = radioPktBuffer[1]; 
   \   0000E2   90....       MOV     DPTR,#radioPktBuffer
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   90....       MOV     DPTR,#??bunch
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA   90....       MOV     DPTR,#(radioPktBuffer + 1)
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   90....       MOV     DPTR,#ndev
   \   0000F1   F0           MOVX    @DPTR,A
   1888                  //mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 4 );   mymemcpy( (BYTE *)&msLocal, radioPktBuffer+6, 2);
   1889                  mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 6) ; //ndev& 0x20 ? 5 : 6 );
   \   0000F2                ; Setup parameters for call to function mymemcpy
   \   0000F2   7906         MOV     R1,#0x6
   \   0000F4   7C..         MOV     R4,#((radioPktBuffer + 2) & 0xff)
   \   0000F6   7D..         MOV     R5,#(((radioPktBuffer + 2) >> 8) & 0xff)
   \   0000F8   7A..         MOV     R2,#(utcLocal & 0xff)
   \   0000FA   7B..         MOV     R3,#((utcLocal >> 8) & 0xff)
   \   0000FC   12....       LCALL   mymemcpy
   1890                  if( 
   1891                      ((ndev & NDEV_MASK ) <= 16) && ( msLocal < 1000 ) &&
   1892                      //((utcLocal > utcLast) || ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4 )==0 && msLocal>msLast)) // ver G
   1893                      ((utcLocal > utcLast) || ( (mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal != msLast) ) ) //protects ONLY from replay attack
   1894                  ){
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   541F         ANL     A,#0x1f
   \   000102   C3           CLR     C
   \   000103   9411         SUBB    A,#0x11
   \   000105   4003         JC      $+5
   \   000107   02....       LJMP    ??parseGWPackage_7
   \   00010A   90....       MOV     DPTR,#msLocal
   \   00010D   C3           CLR     C
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   94E8         SUBB    A,#-0x18
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   9403         SUBB    A,#0x3
   \   000115   4003         JC      $+5
   \   000117   02....       LJMP    ??parseGWPackage_7
   \   00011A   90....       MOV     DPTR,#utcLocal
   \   00011D   78..         MOV     R0,#?V0 + 4
   \   00011F   12....       LCALL   ?L_MOV_X
   \   000122   7583..       MOV     DPH,#((utcLast >> 8) & 0xff)
   \   000125   7582..       MOV     DPL,#(utcLast & 0xff)
   \   000128   78..         MOV     R0,#?V0 + 4
   \   00012A   12....       LCALL   ?UL_GT_X
   \   00012D   4028         JC      ??parseGWPackage_11
   \   00012F                ; Setup parameters for call to function mymemcmp
   \   00012F   7904         MOV     R1,#0x4
   \   000131   7C..         MOV     R4,#(utcLast & 0xff)
   \   000133   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000135   7A..         MOV     R2,#(utcLocal & 0xff)
   \   000137   7B..         MOV     R3,#((utcLocal >> 8) & 0xff)
   \   000139   12....       LCALL   mymemcmp
   \   00013C   E9           MOV     A,R1
   \   00013D   6003         JZ      $+5
   \   00013F   02....       LJMP    ??parseGWPackage_7
   \   000142   90....       MOV     DPTR,#msLocal
   \   000145   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_175:
   \   000148   90....       MOV     DPTR,#msLast
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   68           XRL     A,R0
   \   00014D   7003         JNZ     ??parseGWPackage_12
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   69           XRL     A,R1
   \                     ??parseGWPackage_12:
   \   000152   7003         JNZ     $+5
   \   000154   02....       LJMP    ??parseGWPackage_7
   1895                      BYTE goodTime = ( (utcLocal > utcLast) || ( ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal > msLast) ) ); 
   \                     ??parseGWPackage_11:
   \   000157   90....       MOV     DPTR,#utcLocal
   \   00015A   78..         MOV     R0,#?V0 + 4
   \   00015C   12....       LCALL   ?L_MOV_X
   \   00015F   7583..       MOV     DPH,#((utcLast >> 8) & 0xff)
   \   000162   7582..       MOV     DPL,#(utcLast & 0xff)
   \   000165   78..         MOV     R0,#?V0 + 4
   \   000167   12....       LCALL   ?UL_GT_X
   \   00016A   4021         JC      ??parseGWPackage_13
   \   00016C                ; Setup parameters for call to function mymemcmp
   \   00016C   7904         MOV     R1,#0x4
   \   00016E   7C..         MOV     R4,#(utcLast & 0xff)
   \   000170   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000172   7A..         MOV     R2,#(utcLocal & 0xff)
   \   000174   7B..         MOV     R3,#((utcLocal >> 8) & 0xff)
   \   000176   12....       LCALL   mymemcmp
   \   000179   E9           MOV     A,R1
   \   00017A   7015         JNZ     ??parseGWPackage_14
   \   00017C   90....       MOV     DPTR,#msLocal
   \   00017F   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_176:
   \   000182   7583..       MOV     DPH,#((msLast >> 8) & 0xff)
   \   000185   7582..       MOV     DPL,#(msLast & 0xff)
   \   000188   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_303:
   \   00018B   5004         JNC     ??parseGWPackage_14
   \                     ??parseGWPackage_13:
   \   00018D   7A01         MOV     R2,#0x1
   \   00018F   8002         SJMP    ??parseGWPackage_15
   \                     ??parseGWPackage_14:
   \   000191   7A00         MOV     R2,#0x0
   \                     ??parseGWPackage_15:
   \   000193   8A..         MOV     ?V0 + 2,R2
   1896                      //P1_1 ^= 1;
   1897                      //newProtocol = radioPktBufferRx[ plen ] & 1;
   1898                      //temperatureProtectionDelay = computeTI( si->packetReceived );
   1899                      temperatureProtectionDelay = *((BYTE *)0xF538);
   \   000195   90F538       MOV     DPTR,#-0xac8
   \   000198   E0           MOVX    A,@DPTR
   \   000199   90....       MOV     DPTR,#temperatureProtectionDelay
   \   00019C   12....       LCALL   ?Subroutine119
   1900                      if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
   \                     ??CrossCallReturnLabel_410:
   \   00019F   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_41:
   \   0001A2   4005         JC      ??parseGWPackage_16
   \   0001A4   E4           CLR     A
   \   0001A5   90....       MOV     DPTR,#wasAHardResetOrPowerOn
   \   0001A8   F0           MOVX    @DPTR,A
   1901          
   1902                      //lastRssi = convertRssiByte( (radioPktBufferRx[ plen + 1 ]) );
   1903                      tmp = radioPktBufferRx[ plen + 1 ];
   \                     ??parseGWPackage_16:
   \   0001A9   90....       MOV     DPTR,#??plen
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   24..         ADD     A,#((radioPktBufferRx + 1) & 0xff)
   \   0001AF   F582         MOV     DPL,A
   \   0001B1   E4           CLR     A
   \   0001B2   34..         ADDC    A,#(((radioPktBufferRx + 1) >> 8) & 0xff)
   \   0001B4   F583         MOV     DPH,A
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F5..         MOV     ?V0 + 4,A
   1904                      if(tmp < 128)   lastRssi = (tmp >> 1) - perRssiOffset;
   \   0001B9   C3           CLR     C
   \   0001BA   9480         SUBB    A,#-0x80
   \   0001BC   5010         JNC     ??parseGWPackage_17
   \   0001BE   E5..         MOV     A,?V0 + 4
   \   0001C0   C3           CLR     C
   \   0001C1   13           RRC     A
   \   0001C2   FA           MOV     R2,A
   \   0001C3   90....       MOV     DPTR,#perRssiOffset
   \   0001C6   12....       LCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_162:
   \   0001C9   F8           MOV     R0,A
   \   0001CA   E4           CLR     A
   \   0001CB   99           SUBB    A,R1
   \   0001CC   8017         SJMP    ??parseGWPackage_18
   1905                      else            lastRssi =(((UINT16)tmp - 256) >> 1) - perRssiOffset;
   \                     ??parseGWPackage_17:
   \   0001CE   E4           CLR     A
   \   0001CF   25..         ADD     A,?V0 + 4
   \   0001D1   F8           MOV     R0,A
   \   0001D2   74FF         MOV     A,#-0x1
   \   0001D4   13           RRC     A
   \   0001D5   E8           MOV     A,R0
   \   0001D6   13           RRC     A
   \   0001D7   F8           MOV     R0,A
   \   0001D8   90....       MOV     DPTR,#perRssiOffset
   \   0001DB   12....       LCALL   ??Subroutine45_0
   \                     ??CrossCallReturnLabel_108:
   \   0001DE   E8           MOV     A,R0
   \   0001DF   C3           CLR     C
   \   0001E0   9A           SUBB    A,R2
   \   0001E1   F8           MOV     R0,A
   \   0001E2   747F         MOV     A,#0x7f
   \   0001E4   9B           SUBB    A,R3
   \                     ??parseGWPackage_18:
   \   0001E5   F9           MOV     R1,A
   \   0001E6   90....       MOV     DPTR,#lastRssi
   \   0001E9   12....       LCALL   ??Subroutine67_0
   1906          
   1907                      if( !page.is500Always ){
   \                     ??CrossCallReturnLabel_210:
   \   0001EC   90....       MOV     DPTR,#(page + 194)
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001F2   406D         JC      ??parseGWPackage_19
   1908                          //if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
   1909                          //else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
   1910                          if(       (o > 0) && (o >  1) ) o = 1;
   \   0001F4   EF           MOV     A,R7
   \   0001F5   C3           CLR     C
   \   0001F6   9401         SUBB    A,#0x1
   \   0001F8   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0001FA   65D0         XRL     A,PSW
   \   0001FC   33           RLC     A
   \   0001FD   EF           MOV     A,R7
   \   0001FE   400E         JC      ??parseGWPackage_20
   \   000200   C3           CLR     C
   \   000201   9402         SUBB    A,#0x2
   \   000203   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000205   65D0         XRL     A,PSW
   \   000207   33           RLC     A
   \   000208   4017         JC      ??parseGWPackage_21
   \   00020A   7F01         MOV     R7,#0x1
   \   00020C   8013         SJMP    ??parseGWPackage_21
   1911                          else if(  (o < 0) && (o < -1) ) o = -1;
   \                     ??parseGWPackage_20:
   \   00020E   C3           CLR     C
   \   00020F   12....       LCALL   ??Subroutine64_0
   \                     ??CrossCallReturnLabel_192:
   \   000212   500D         JNC     ??parseGWPackage_21
   \   000214   EF           MOV     A,R7
   \   000215   C3           CLR     C
   \   000216   94FF         SUBB    A,#-0x1
   \   000218   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00021A   65D0         XRL     A,PSW
   \   00021C   33           RLC     A
   \   00021D   5002         JNC     ??parseGWPackage_21
   \   00021F   7FFF         MOV     R7,#-0x1
   1912                          shift = (INT16)sh + (INT16)o;
   \                     ??parseGWPackage_21:
   \   000221   E5..         MOV     A,?V0 + 0
   \   000223   F8           MOV     R0,A
   \   000224   33           RLC     A
   \   000225   95E0         SUBB    A,0xE0 /* A   */
   \   000227   F9           MOV     R1,A
   \   000228   EF           MOV     A,R7
   \   000229   FA           MOV     R2,A
   \   00022A   33           RLC     A
   \   00022B   95E0         SUBB    A,0xE0 /* A   */
   \   00022D   FB           MOV     R3,A
   \   00022E   EA           MOV     A,R2
   \   00022F   28           ADD     A,R0
   \   000230   F5..         MOV     ?V0 + 0,A
   \   000232   EB           MOV     A,R3
   \   000233   39           ADDC    A,R1
   \   000234   F5..         MOV     ?V0 + 1,A
   1913                          if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
   \   000236                ; Setup parameters for call to function abs
   \   000236   AA..         MOV     R2,?V0 + 0
   \   000238   FB           MOV     R3,A
   \   000239   12....       LCALL   abs
   \   00023C   C3           CLR     C
   \   00023D   EA           MOV     A,R2
   \   00023E   9461         SUBB    A,#0x61
   \   000240   12....       LCALL   ?Subroutine64
   \                     ??CrossCallReturnLabel_193:
   \   000243   4016         JC      ??parseGWPackage_22
   \   000245                ; Setup parameters for call to function addDF
   \   000245   7402         MOV     A,#0x2
   \   000247   78..         MOV     R0,#?V0 + 0
   \   000249   12....       LCALL   ?S_SHL
   \   00024C   AA..         MOV     R2,?V0 + 0
   \   00024E   E5..         MOV     A,?V0 + 1
   \   000250   FB           MOV     R3,A
   \   000251   33           RLC     A
   \   000252   95E0         SUBB    A,0xE0 /* A   */
   \   000254   FC           MOV     R4,A
   \   000255   FD           MOV     R5,A
   \   000256   12....       LCALL   addDF
   \   000259   8006         SJMP    ??parseGWPackage_19
   \                     ??parseGWPackage_22:
   \   00025B   E5..         MOV     A,?V0 + 0
   \   00025D   90DF08       MOV     DPTR,#-0x20f8
   \   000260   F0           MOVX    @DPTR,A
   1914                      }
   1915          //            INT32 f = 0; ((BYTE *)(&f))[0] = FREQ0; ((BYTE *)(&f))[1] = FREQ1; ((BYTE *)(&f))[2] = FREQ2; decodeDelay = (INT16)( f-defFreq );
   1916          
   1917                      if( goodForCommands /*&& ( page.is500Always || ( 0!=(LQI & 0x7F) ) )*/ ){
   \                     ??parseGWPackage_19:
   \   000261   EE           MOV     A,R6
   \   000262   7003         JNZ     $+5
   \   000264   02....       LJMP    ??parseGWPackage_7
   1918                          if( isOnTestStand ){ isOnTestStand--; /* cmdCount--; */}
   \   000267   90....       MOV     DPTR,#isOnTestStand
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   6002         JZ      ??parseGWPackage_23
   \   00026D   14           DEC     A
   \   00026E   F0           MOVX    @DPTR,A
   1919                          if( alignMPP ){ alignMPP = FALSE; ticks[ MppCycle ] = _mppCycle; }
   \                     ??parseGWPackage_23:
   \   00026F   90....       MOV     DPTR,#alignMPP
   \   000272   E0           MOVX    A,@DPTR
   \   000273   6009         JZ      ??CrossCallReturnLabel_411
   \   000275   E4           CLR     A
   \   000276   12....       LCALL   ?Subroutine47
   \                     ??CrossCallReturnLabel_115:
   \   000279   7478         MOV     A,#0x78
   \   00027B   12....       LCALL   ?Subroutine119
   1920                          P1_1 ^= 1;
   \                     ??CrossCallReturnLabel_411:
   \   00027E   639002       XRL     0x90,#0x2
   \   000281   E590         MOV     A,0x90
   1921                          bunchCount = 18;
   \   000283   7412         MOV     A,#0x12
   \   000285   90....       MOV     DPTR,#bunchCount
   \   000288   12....       LCALL   ?Subroutine70
   1922                          mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); //&cyclesDefaults[4], 4 );//(BYTE *)&page.defCycles2SoftKick, 4 );
   1923                          if( goodTime ) mymemcpy( (BYTE *)&utcLast, (BYTE *)&utcLocal, 6 );
   \                     ??CrossCallReturnLabel_226:
   \   00028B   E5..         MOV     A,?V0 + 2
   \   00028D   600D         JZ      ??parseGWPackage_24
   \   00028F                ; Setup parameters for call to function mymemcpy
   \   00028F   7906         MOV     R1,#0x6
   \   000291   7C..         MOV     R4,#(utcLocal & 0xff)
   \   000293   7D..         MOV     R5,#((utcLocal >> 8) & 0xff)
   \   000295   7A..         MOV     R2,#(utcLast & 0xff)
   \   000297   7B..         MOV     R3,#((utcLast >> 8) & 0xff)
   \   000299   12....       LCALL   mymemcpy
   1924                          lastCycle = _slot * ( (ndev & NDEV_MASK) + ((ndev & JOIN_MASK)?1:4) ) + _loop_delay;
   \                     ??parseGWPackage_24:
   \   00029C   90....       MOV     DPTR,#ndev
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   A2E7         MOV     C,0xE0 /* A   */.7
   \   0002A2   5004         JNC     ??parseGWPackage_25
   \   0002A4   7A01         MOV     R2,#0x1
   \   0002A6   8002         SJMP    ??parseGWPackage_26
   \                     ??parseGWPackage_25:
   \   0002A8   7A04         MOV     R2,#0x4
   \                     ??parseGWPackage_26:
   \   0002AA   90....       MOV     DPTR,#_slot
   \   0002AD   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_68:
   \   0002B0   90....       MOV     DPTR,#ndev
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   F8           MOV     R0,A
   \   0002B5   741F         MOV     A,#0x1f
   \   0002B7   58           ANL     A,R0
   \   0002B8   F8           MOV     R0,A
   \   0002B9   EA           MOV     A,R2
   \   0002BA   28           ADD     A,R0
   \   0002BB   F8           MOV     R0,A
   \   0002BC   E4           CLR     A
   \   0002BD   3400         ADDC    A,#0x0
   \   0002BF   F9           MOV     R1,A
   \   0002C0   E8           MOV     A,R0
   \   0002C1   85..F0       MOV     B,?V0 + 0
   \   0002C4   A4           MUL     AB
   \   0002C5   C8           XCH     A,R0
   \   0002C6   AAF0         MOV     R2,B
   \   0002C8   85..F0       MOV     B,?V0 + 1
   \   0002CB   A4           MUL     AB
   \   0002CC   2A           ADD     A,R2
   \   0002CD   FA           MOV     R2,A
   \   0002CE   85..F0       MOV     B,?V0 + 0
   \   0002D1   E9           MOV     A,R1
   \   0002D2   A4           MUL     AB
   \   0002D3   2A           ADD     A,R2
   \   0002D4   F9           MOV     R1,A
   \   0002D5   90....       MOV     DPTR,#_loop_delay
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   28           ADD     A,R0
   \   0002DA   F8           MOV     R0,A
   \   0002DB   A3           INC     DPTR
   \   0002DC   E0           MOVX    A,@DPTR
   \   0002DD   39           ADDC    A,R1
   \   0002DE   F9           MOV     R1,A
   \   0002DF   90....       MOV     DPTR,#lastCycle
   \   0002E2   E8           MOV     A,R0
   \   0002E3   F0           MOVX    @DPTR,A
   \   0002E4   A3           INC     DPTR
   \   0002E5   E9           MOV     A,R1
   \   0002E6   12....       LCALL   ?Subroutine47
   1925                          //if( ( (2+(ndev & NDEV_MASK)) % 3 ) == 0 ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  _mppCycle; cnt = 255; } }
   1926                          decodeDelay = ticks[ MppCycle ];
   \                     ??CrossCallReturnLabel_116:
   \   0002E9   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_177:
   \   0002EC   90....       MOV     DPTR,#decodeDelay
   \   0002EF   12....       LCALL   ??Subroutine67_0
   1927                          // if( page.synch_freq && ((2+(ndev & NDEV_MASK)%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  page.synch_phase; cnt = page.synch_freq; } }
   1928                          if( page.synch_freq && (((2+(ndev & NDEV_MASK))%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ *((INT16 *)0xF500) = page.synch_phase; cnt = page.synch_freq; } }
   \                     ??CrossCallReturnLabel_211:
   \   0002F2   90....       MOV     DPTR,#(page + 162)
   \   0002F5   E0           MOVX    A,@DPTR
   \   0002F6   602C         JZ      ??parseGWPackage_27
   \   0002F8   90....       MOV     DPTR,#ndev
   \   0002FB   E0           MOVX    A,@DPTR
   \   0002FC   541F         ANL     A,#0x1f
   \   0002FE   2402         ADD     A,#0x2
   \   000300   75F003       MOV     B,#0x3
   \   000303   12....       LCALL   ?SC_DIV_MOD
   \   000306   E5F0         MOV     A,B
   \   000308   701A         JNZ     ??parseGWPackage_27
   \   00030A   90....       MOV     DPTR,#??cnt
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   14           DEC     A
   \   00030F   F0           MOVX    @DPTR,A
   \   000310   7012         JNZ     ??parseGWPackage_27
   \   000312   90....       MOV     DPTR,#(page + 161)
   \   000315   E0           MOVX    A,@DPTR
   \   000316   90F500       MOV     DPTR,#-0xb00
   \   000319   12....       LCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_412:
   \   00031C   90....       MOV     DPTR,#(page + 162)
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   90....       MOV     DPTR,#??cnt
   \   000323   F0           MOVX    @DPTR,A
   1929                          networkDelay = page.is500Always ? 0 : (2*TICKS_IN_MS);
   \                     ??parseGWPackage_27:
   \   000324   90....       MOV     DPTR,#(page + 194)
   \   000327   E0           MOVX    A,@DPTR
   \   000328   A2E6         MOV     C,0xE0 /* A   */.6
   \   00032A   5004         JNC     ??parseGWPackage_28
   \   00032C   7A00         MOV     R2,#0x0
   \   00032E   8002         SJMP    ??parseGWPackage_29
   \                     ??parseGWPackage_28:
   \   000330   7A04         MOV     R2,#0x4
   1930                          if( bunch == 0 ){ 
   \                     ??parseGWPackage_29:
   \   000332   90....       MOV     DPTR,#ticks
   \   000335   E0           MOVX    A,@DPTR
   \   000336   241A         ADD     A,#0x1a
   \   000338   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_152:
   \   00033B   E8           MOV     A,R0
   \   00033C   FC           MOV     R4,A
   \   00033D   E9           MOV     A,R1
   \   00033E   FD           MOV     R5,A
   \   00033F   90....       MOV     DPTR,#??bunch
   \   000342   E0           MOVX    A,@DPTR
   \   000343   702E         JNZ     ??parseGWPackage_30
   1931                              packagePrepared = FALSE;
   \   000345   E4           CLR     A
   \   000346   90....       MOV     DPTR,#packagePrepared
   \   000349   F0           MOVX    @DPTR,A
   1932                              atomicChange( DelayedPrepareData, 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay ); // was 40, give more time 
   \   00034A   740A         MOV     A,#0xa
   \   00034C   C3           CLR     C
   \   00034D   9A           SUBB    A,R2
   \   00034E   FA           MOV     R2,A
   \   00034F   E4           CLR     A
   \   000350   12....       LCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_38:
   \   000353   F0           MOVX    @DPTR,A
   1933                              mymemcpy( (BYTE *)&utc, (BYTE *)&utcLocal, 6 ); 
   \   000354                ; Setup parameters for call to function mymemcpy
   \   000354   7906         MOV     R1,#0x6
   \   000356   7C..         MOV     R4,#(utcLocal & 0xff)
   \   000358   7D..         MOV     R5,#((utcLocal >> 8) & 0xff)
   \   00035A   7A..         MOV     R2,#(utc & 0xff)
   \   00035C   7B..         MOV     R3,#((utc >> 8) & 0xff)
   \   00035E   12....       LCALL   mymemcpy
   1934                              if( ticks[ DelayedPrepareData ] <= 0 ) ticks[ DelayedPrepareData ] = -1;
   \   000361   12....       LCALL   ?Subroutine39
   \                     ??CrossCallReturnLabel_94:
   \   000364   12....       LCALL   ?Subroutine8
   \                     ??CrossCallReturnLabel_31:
   \   000367   5073         JNC     ??parseGWPackage_31
   \   000369   8882         MOV     DPL,R0
   \   00036B   8983         MOV     DPH,R1
   \   00036D   74FF         MOV     A,#-0x1
   \   00036F   F0           MOVX    @DPTR,A
   \   000370   A3           INC     DPTR
   \   000371   8068         SJMP    ??CrossCallReturnLabel_39
   1935                              //zeroPackageWasNotReceived = FALSE;
   1936                          } else {
   1937                              if( page.use12kbod ){
   \                     ??parseGWPackage_30:
   \   000373   90....       MOV     DPTR,#(page + 158)
   \   000376   E0           MOVX    A,@DPTR
   \   000377   FE           MOV     R6,A
   \   000378   90....       MOV     DPTR,#??bunch
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   F8           MOV     R0,A
   \   00037D   EE           MOV     A,R6
   \   00037E   C3           CLR     C
   \   00037F   98           SUBB    A,R0
   \   000380   F8           MOV     R0,A
   \   000381   E4           CLR     A
   \   000382   9400         SUBB    A,#0x0
   \   000384   F9           MOV     R1,A
   \   000385   90....       MOV     DPTR,#(page + 194)
   \   000388   E0           MOVX    A,@DPTR
   \   000389   A2E2         MOV     C,0xE0 /* A   */.2
   \   00038B   EE           MOV     A,R6
   \   00038C   502F         JNC     ??parseGWPackage_32
   1938                                  if( page.gbunch && (page.gbunch - bunch) <= 18 )
   \   00038E   604C         JZ      ??parseGWPackage_31
   \   000390   C3           CLR     C
   \   000391   E8           MOV     A,R0
   \   000392   9413         SUBB    A,#0x13
   \   000394   E9           MOV     A,R1
   \   000395   12....       LCALL   ??Subroutine64_0
   \                     ??CrossCallReturnLabel_194:
   \   000398   5042         JNC     ??parseGWPackage_31
   1939                                      atomicChange( DelayedPrepareData, lastCycle*( page.gbunch - bunch ) + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
   \   00039A   90....       MOV     DPTR,#lastCycle
   \   00039D   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_69:
   \   0003A0   E8           MOV     A,R0
   \   0003A1   85..F0       MOV     B,?V0 + 0
   \   0003A4   A4           MUL     AB
   \   0003A5   C8           XCH     A,R0
   \   0003A6   AEF0         MOV     R6,B
   \   0003A8   85..F0       MOV     B,?V0 + 1
   \   0003AB   A4           MUL     AB
   \   0003AC   2E           ADD     A,R6
   \   0003AD   FE           MOV     R6,A
   \   0003AE   85..F0       MOV     B,?V0 + 0
   \   0003B1   E9           MOV     A,R1
   \   0003B2   A4           MUL     AB
   \   0003B3   2E           ADD     A,R6
   \   0003B4   F9           MOV     R1,A
   \   0003B5   740A         MOV     A,#0xa
   \   0003B7   28           ADD     A,R0
   \   0003B8   F8           MOV     R0,A
   \   0003B9   E4           CLR     A
   \   0003BA   39           ADDC    A,R1
   \   0003BB   8015         SJMP    ??parseGWPackage_33
   1940                              }else{
   1941                                  if( page.gbunch && (page.gbunch - bunch) == 1 )
   \                     ??parseGWPackage_32:
   \   0003BD   601D         JZ      ??parseGWPackage_31
   \   0003BF   7401         MOV     A,#0x1
   \   0003C1   68           XRL     A,R0
   \   0003C2   7001         JNZ     ??parseGWPackage_34
   \   0003C4   E9           MOV     A,R1
   \                     ??parseGWPackage_34:
   \   0003C5   7015         JNZ     ??parseGWPackage_31
   1942                                      atomicChange( DelayedPrepareData, lastCycle + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
   \   0003C7   90....       MOV     DPTR,#lastCycle
   \   0003CA   E0           MOVX    A,@DPTR
   \   0003CB   240A         ADD     A,#0xa
   \   0003CD   F8           MOV     R0,A
   \   0003CE   A3           INC     DPTR
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   3400         ADDC    A,#0x0
   \                     ??parseGWPackage_33:
   \   0003D2   F9           MOV     R1,A
   \   0003D3   E8           MOV     A,R0
   \   0003D4   C3           CLR     C
   \   0003D5   9A           SUBB    A,R2
   \   0003D6   FA           MOV     R2,A
   \   0003D7   E9           MOV     A,R1
   \   0003D8   12....       LCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_39:
   \   0003DB   F0           MOVX    @DPTR,A
   1943                              }
   1944                          }
   1945                          got_gw = 8;
   \                     ??parseGWPackage_31:
   \   0003DC   7408         MOV     A,#0x8
   \   0003DE   90....       MOV     DPTR,#got_gw
   \   0003E1   12....       LCALL   ?Subroutine76
   1946                          atomicChange( ReceiveData, lastCycle - _slot - 9*TICKS_IN_MS - temperatureProtectionDelay );  
   \                     ??CrossCallReturnLabel_246:
   \   0003E4   2408         ADD     A,#0x8
   \   0003E6   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_153:
   \   0003E9   90....       MOV     DPTR,#_slot
   \   0003EC   12....       LCALL   ??Subroutine45_0
   \                     ??CrossCallReturnLabel_109:
   \   0003EF   7583..       MOV     DPH,#((lastCycle >> 8) & 0xff)
   \   0003F2   7582..       MOV     DPL,#(lastCycle & 0xff)
   \   0003F5   E0           MOVX    A,@DPTR
   \   0003F6   C3           CLR     C
   \   0003F7   9A           SUBB    A,R2
   \   0003F8   FA           MOV     R2,A
   \   0003F9   A3           INC     DPTR
   \   0003FA   E0           MOVX    A,@DPTR
   \   0003FB   9B           SUBB    A,R3
   \   0003FC   FB           MOV     R3,A
   \   0003FD   74EE         MOV     A,#-0x12
   \   0003FF   2A           ADD     A,R2
   \   000400   FC           MOV     R4,A
   \   000401   74FF         MOV     A,#-0x1
   \   000403   12....       LCALL   ?Subroutine11
   1947                          curBunch = bunch;
   \                     ??CrossCallReturnLabel_366:
   \   000406   90....       MOV     DPTR,#??bunch
   \   000409   E0           MOVX    A,@DPTR
   \   00040A   90....       MOV     DPTR,#curBunch
   \   00040D   12....       LCALL   ?Subroutine74
   1948                          //if( bunch != 0xFF && maxBunch < curBunch ) maxBunch = curBunch;
   1949                          if( !page.is500Always ) {                
   \                     ??CrossCallReturnLabel_236:
   \   000410   4035         JC      ??parseGWPackage_35
   1950                              /*
   1951                              if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
   1952                              else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
   1953                              shift = (INT16)sh + (INT16)o;
   1954                              if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
   1955                              */
   1956                              if( ndev & HOP_MASK ){ 
   \   000412   90....       MOV     DPTR,#ticks
   \   000415   E0           MOVX    A,@DPTR
   \   000416   2410         ADD     A,#0x10
   \   000418   FA           MOV     R2,A
   \   000419   A3           INC     DPTR
   \   00041A   E0           MOVX    A,@DPTR
   \   00041B   3400         ADDC    A,#0x0
   \   00041D   FB           MOV     R3,A
   \   00041E   90....       MOV     DPTR,#ndev
   \   000421   E0           MOVX    A,@DPTR
   \   000422   A2E6         MOV     C,0xE0 /* A   */.6
   \   000424   5015         JNC     ??parseGWPackage_36
   1957                                  atomicChange( Hop, ticks[ ReceiveData ] - 0*TICKS_IN_MS /*- temperatureProtectionDelay*/ ); 
   \   000426   8882         MOV     DPL,R0
   \   000428   8983         MOV     DPH,R1
   \   00042A   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_178:
   \   00042D   8A82         MOV     DPL,R2
   \   00042F   8B83         MOV     DPH,R3
   \   000431   12....       LCALL   ??Subroutine67_0
   1958                                  cyclesToHop = 8;
   \                     ??CrossCallReturnLabel_212:
   \   000434   7408         MOV     A,#0x8
   \   000436   90....       MOV     DPTR,#cyclesToHop
   \   000439   800B         SJMP    ??parseGWPackage_37
   1959                              }else                { cyclesToHop = 0;    atomicChange( Hop, 0 ); }
   \                     ??parseGWPackage_36:
   \   00043B   E4           CLR     A
   \   00043C   90....       MOV     DPTR,#cyclesToHop
   \   00043F   F0           MOVX    @DPTR,A
   \   000440   8A82         MOV     DPL,R2
   \   000442   8B83         MOV     DPH,R3
   \   000444   F0           MOVX    @DPTR,A
   \   000445   A3           INC     DPTR
   \                     ??parseGWPackage_37:
   \   000446   F0           MOVX    @DPTR,A
   1960                          }
   1961              
   1962                          atomicChange( Cycle, lastCycle + 1 );
   \                     ??parseGWPackage_35:
   \   000447   90....       MOV     DPTR,#lastCycle
   \   00044A   E0           MOVX    A,@DPTR
   \   00044B   2401         ADD     A,#0x1
   \   00044D   FA           MOV     R2,A
   \   00044E   A3           INC     DPTR
   \   00044F   E0           MOVX    A,@DPTR
   \   000450   3400         ADDC    A,#0x0
   \   000452   12....       LCALL   ??Subroutine7_0
   1963          
   1964                          if( page.is500Always ){
   \                     ??CrossCallReturnLabel_365:
   \   000455   90....       MOV     DPTR,#(page + 194)
   \   000458   E0           MOVX    A,@DPTR
   \   000459   A2E6         MOV     C,0xE0 /* A   */.6
   \   00045B   90....       MOV     DPTR,#lastRssi
   \   00045E   501C         JNC     ??parseGWPackage_38
   1965                                if( lastRssi > -95 ) //page.CriticalLevel500 ) 
   \   000460   C3           CLR     C
   \   000461   E0           MOVX    A,@DPTR
   \   000462   94A2         SUBB    A,#-0x5e
   \   000464   12....       LCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_380:
   \   000467   400E         JC      ??parseGWPackage_39
   1966                                    { cyclesToStep500Channel = page.defCyclesToStep500Channel; cyclesTo10 = page.defCyclesTo10; }
   \   000469   12....       LCALL   ?Subroutine36
   \                     ??CrossCallReturnLabel_90:
   \   00046C   90....       MOV     DPTR,#(page + 202)
   \   00046F   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_179:
   \   000472   90....       MOV     DPTR,#cyclesTo10
   \   000475   801D         SJMP    ??CrossCallReturnLabel_161
   1967                                    //{ cyclesToStep500Channel = cyclesDefaults[2]; cyclesTo10 = cyclesDefaults[1]; }
   1968                                else flags[ Cycle ] = TRUE;
   \                     ??parseGWPackage_39:
   \   000477   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_46:
   \   00047A   801C         SJMP    ??parseGWPackage_40
   1969                          }else if( lastRssi > -102 ) //page.CriticalLevel10 )  
   \                     ??parseGWPackage_38:
   \   00047C   C3           CLR     C
   \   00047D   E0           MOVX    A,@DPTR
   \   00047E   949B         SUBB    A,#-0x65
   \   000480   12....       LCALL   ?Subroutine63
   \                     ??CrossCallReturnLabel_381:
   \   000483   40F2         JC      ??parseGWPackage_39
   1970                                    { cyclesTo500 = page.defCyclesTo500;                       cycles2Step10Channel = page.defCyclesToStep10Channel; }
   \   000485   90....       MOV     DPTR,#(page + 200)
   \   000488   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_180:
   \   00048B   90....       MOV     DPTR,#cyclesTo500
   \   00048E   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_213:
   \   000491   12....       LCALL   ?Subroutine58
   \                     ??CrossCallReturnLabel_161:
   \   000494   E8           MOV     A,R0
   \   000495   F0           MOVX    @DPTR,A
   \   000496   A3           INC     DPTR
   \   000497   E9           MOV     A,R1
   \                     ??parseGWPackage_40:
   \   000498   F0           MOVX    @DPTR,A
   1971                                    //{ cyclesTo500 = cyclesDefaults[0];                       cycles2Step10Channel = cyclesDefaults[3]; }
   1972                                else flags[ Cycle ] = TRUE;
   1973                      
   1974                          BYTE b = bunch;
   \   000499   90....       MOV     DPTR,#??bunch
   \   00049C   E0           MOVX    A,@DPTR
   \   00049D   FC           MOV     R4,A
   1975                          if( b!=255 && page.rbunch ) b %= page.rbunch;
   \   00049E   74FF         MOV     A,#-0x1
   \   0004A0   6C           XRL     A,R4
   \   0004A1   600C         JZ      ??parseGWPackage_41
   \   0004A3   90....       MOV     DPTR,#(page + 157)
   \   0004A6   E0           MOVX    A,@DPTR
   \   0004A7   6006         JZ      ??parseGWPackage_41
   \   0004A9   F5F0         MOV     B,A
   \   0004AB   EC           MOV     A,R4
   \   0004AC   84           DIV     AB
   \   0004AD   ACF0         MOV     R4,B
   1976                      
   1977                          networkDelay = _slot * page.netId + _gw_delay - temperatureProtectionDelay;
   \                     ??parseGWPackage_41:
   \   0004AF   90....       MOV     DPTR,#(page + 2)
   \   0004B2   E0           MOVX    A,@DPTR
   \   0004B3   FD           MOV     R5,A
   \   0004B4   90....       MOV     DPTR,#_slot
   \   0004B7   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_181:
   \   0004BA   E8           MOV     A,R0
   \   0004BB   8DF0         MOV     B,R5
   \   0004BD   A4           MUL     AB
   \   0004BE   F8           MOV     R0,A
   \   0004BF   AAF0         MOV     R2,B
   \   0004C1   8DF0         MOV     B,R5
   \   0004C3   E9           MOV     A,R1
   \   0004C4   A4           MUL     AB
   \   0004C5   2A           ADD     A,R2
   \   0004C6   F9           MOV     R1,A
   \   0004C7   90....       MOV     DPTR,#_gw_delay
   \   0004CA   E0           MOVX    A,@DPTR
   \   0004CB   28           ADD     A,R0
   \   0004CC   FA           MOV     R2,A
   \   0004CD   A3           INC     DPTR
   \   0004CE   E0           MOVX    A,@DPTR
   \   0004CF   39           ADDC    A,R1
   \   0004D0   FB           MOV     R3,A
   \   0004D1   90....       MOV     DPTR,#temperatureProtectionDelay
   \   0004D4   12....       LCALL   ?Subroutine59
   \                     ??CrossCallReturnLabel_163:
   \   0004D7   FA           MOV     R2,A
   \   0004D8   EB           MOV     A,R3
   \   0004D9   99           SUBB    A,R1
   \   0004DA   FB           MOV     R3,A
   1978          
   1979                          if(    (b!=0xFF) && ( b == page.myBunch ) )
   \   0004DB   90....       MOV     DPTR,#ticks
   \   0004DE   E0           MOVX    A,@DPTR
   \   0004DF   2406         ADD     A,#0x6
   \   0004E1   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_154:
   \   0004E4   90....       MOV     DPTR,#(page + 3)
   \   0004E7   E0           MOVX    A,@DPTR
   \   0004E8   FE           MOV     R6,A
   \   0004E9   74FF         MOV     A,#-0x1
   \   0004EB   6C           XRL     A,R4
   \   0004EC   600F         JZ      ??parseGWPackage_42
   \   0004EE   EE           MOV     A,R6
   \   0004EF   6C           XRL     A,R4
   \   0004F0   700B         JNZ     ??parseGWPackage_42
   1980                              atomicChange( SendData, networkDelay );
   \                     ??parseGWPackage_43:
   \   0004F2   8882         MOV     DPL,R0
   \   0004F4   8983         MOV     DPH,R1
   \   0004F6   EA           MOV     A,R2
   \   0004F7   F0           MOVX    @DPTR,A
   \   0004F8   A3           INC     DPTR
   \   0004F9   EB           MOV     A,R3
   \   0004FA   02....       LJMP    ??parseGWPackage_44
   1981                          else if( page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)<=18 ) && ((ndev & NDEV_MASK ) > page.netId) )
   \                     ??parseGWPackage_42:
   \   0004FD   8C..         MOV     ?V0 + 0,R4
   \   0004FF   EE           MOV     A,R6
   \   000500   C3           CLR     C
   \   000501   95..         SUBB    A,?V0 + 0
   \   000503   F5..         MOV     ?V0 + 0,A
   \   000505   E4           CLR     A
   \   000506   9400         SUBB    A,#0x0
   \   000508   F5..         MOV     ?V0 + 1,A
   \   00050A   90....       MOV     DPTR,#ndev
   \   00050D   E0           MOVX    A,@DPTR
   \   00050E   541F         ANL     A,#0x1f
   \   000510   FF           MOV     R7,A
   \   000511   90....       MOV     DPTR,#(page + 158)
   \   000514   E0           MOVX    A,@DPTR
   \   000515   F5..         MOV     ?V0 + 2,A
   \   000517   90....       MOV     DPTR,#(page + 194)
   \   00051A   E0           MOVX    A,@DPTR
   \   00051B   A2E2         MOV     C,0xE0 /* A   */.2
   \   00051D   E5..         MOV     A,?V0 + 2
   \   00051F   5044         JNC     ??parseGWPackage_45
   \   000521   6071         JZ      ??parseGWPackage_46
   \   000523   74FF         MOV     A,#-0x1
   \   000525   6E           XRL     A,R6
   \   000526   606C         JZ      ??parseGWPackage_46
   \   000528   EC           MOV     A,R4
   \   000529   C3           CLR     C
   \   00052A   9E           SUBB    A,R6
   \   00052B   4003         JC      $+5
   \   00052D   02....       LJMP    ??parseGWPackage_47
   \   000530   C3           CLR     C
   \   000531   E5..         MOV     A,?V0 + 0
   \   000533   9413         SUBB    A,#0x13
   \   000535   E5..         MOV     A,?V0 + 1
   \   000537   12....       LCALL   ??Subroutine64_0
   \                     ??CrossCallReturnLabel_195:
   \   00053A   4003         JC      $+5
   \   00053C   02....       LJMP    ??parseGWPackage_47
   \   00053F   ED           MOV     A,R5
   \   000540   C3           CLR     C
   \   000541   9F           SUBB    A,R7
   \   000542   4003         JC      $+5
   \   000544   02....       LJMP    ??parseGWPackage_47
   1982                              atomicChange( SendData, (page.myBunch-b)*lastCycle + networkDelay );
   \   000547   90....       MOV     DPTR,#lastCycle
   \   00054A   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_135:
   \   00054D   CC           XCH     A,R4
   \   00054E   AEF0         MOV     R6,B
   \   000550   85..F0       MOV     B,?V0 + 1
   \   000553   A4           MUL     AB
   \   000554   2E           ADD     A,R6
   \   000555   FE           MOV     R6,A
   \   000556   85..F0       MOV     B,?V0 + 0
   \   000559   ED           MOV     A,R5
   \   00055A   A4           MUL     AB
   \   00055B   2E           ADD     A,R6
   \   00055C   FD           MOV     R5,A
   \   00055D   EA           MOV     A,R2
   \   00055E   2C           ADD     A,R4
   \   00055F   FA           MOV     R2,A
   \   000560   EB           MOV     A,R3
   \   000561   3D           ADDC    A,R5
   \                     ??parseGWPackage_48:
   \   000562   FB           MOV     R3,A
   \   000563   808D         SJMP    ??parseGWPackage_43
   1983                          else if( !page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)==1 ) && ((ndev & NDEV_MASK ) > page.netId) )
   \                     ??parseGWPackage_45:
   \   000565   602D         JZ      ??parseGWPackage_46
   \   000567   74FF         MOV     A,#-0x1
   \   000569   6E           XRL     A,R6
   \   00056A   6028         JZ      ??parseGWPackage_46
   \   00056C   EC           MOV     A,R4
   \   00056D   C3           CLR     C
   \   00056E   9E           SUBB    A,R6
   \   00056F   4003         JC      $+5
   \   000571   02....       LJMP    ??parseGWPackage_47
   \   000574   7401         MOV     A,#0x1
   \   000576   65..         XRL     A,?V0 + 0
   \   000578   7002         JNZ     ??parseGWPackage_49
   \   00057A   E5..         MOV     A,?V0 + 1
   \                     ??parseGWPackage_49:
   \   00057C   6003         JZ      $+5
   \   00057E   02....       LJMP    ??parseGWPackage_47
   \   000581   ED           MOV     A,R5
   \   000582   C3           CLR     C
   \   000583   9F           SUBB    A,R7
   \   000584   4003         JC      $+5
   \   000586   02....       LJMP    ??parseGWPackage_47
   1984                              atomicChange( SendData, lastCycle + networkDelay );
   \   000589   90....       MOV     DPTR,#lastCycle
   \   00058C   E0           MOVX    A,@DPTR
   \   00058D   2A           ADD     A,R2
   \   00058E   FA           MOV     R2,A
   \   00058F   A3           INC     DPTR
   \   000590   E0           MOVX    A,@DPTR
   \   000591   3B           ADDC    A,R3
   \   000592   80CE         SJMP    ??parseGWPackage_48
   1985                          else if( (page.myBunch == 0xFF) && (page.netId == 0xFF) && ((ndev & JOIN_MASK) == 0) ) {
   \                     ??parseGWPackage_46:
   \   000594   74FF         MOV     A,#-0x1
   \   000596   6E           XRL     A,R6
   \   000597   6003         JZ      $+5
   \   000599   02....       LJMP    ??parseGWPackage_47
   \   00059C   74FF         MOV     A,#-0x1
   \   00059E   6D           XRL     A,R5
   \   00059F   6003         JZ      $+5
   \   0005A1   02....       LJMP    ??parseGWPackage_47
   \   0005A4   90....       MOV     DPTR,#ndev
   \   0005A7   E0           MOVX    A,@DPTR
   \   0005A8   A2E7         MOV     C,0xE0 /* A   */.7
   \   0005AA   5003         JNC     $+5
   \   0005AC   02....       LJMP    ??parseGWPackage_47
   1986                              ticks[ DelayedPrepareData ] = 0; 
   \   0005AF   90....       MOV     DPTR,#ticks
   \   0005B2   E0           MOVX    A,@DPTR
   \   0005B3   241A         ADD     A,#0x1a
   \   0005B5   FA           MOV     R2,A
   \   0005B6   A3           INC     DPTR
   \   0005B7   E0           MOVX    A,@DPTR
   \   0005B8   3400         ADDC    A,#0x0
   \   0005BA   FB           MOV     R3,A
   \   0005BB   8A82         MOV     DPL,R2
   \   0005BD   8B83         MOV     DPH,R3
   \   0005BF   E4           CLR     A
   \   0005C0   F0           MOVX    @DPTR,A
   \   0005C1   A3           INC     DPTR
   \   0005C2   F0           MOVX    @DPTR,A
   1987                              if( joinRequestWasSend > 0 )  joinRequestWasSend --;    
   \   0005C3   90....       MOV     DPTR,#joinRequestWasSend
   \   0005C6   E0           MOVX    A,@DPTR
   \   0005C7   6003         JZ      ??parseGWPackage_50
   \   0005C9   14           DEC     A
   \   0005CA   806E         SJMP    ??parseGWPackage_44
   1988                              else {
   1989                                  ADCCON1 &= 0xF3; ADCCON1 |= 4;
   \                     ??parseGWPackage_50:
   \   0005CC   53B4F3       ANL     0xb4,#0xf3
   \   0005CF   E5B4         MOV     A,0xb4
   \   0005D1   43B404       ORL     0xb4,#0x4
   1990                                  joinRequestWasSend = page.network_cnst_1 + RNDH % page.network_cnst_2; 
   \   0005D4   E5BD         MOV     A,0xbd
   \   0005D6   C0E0         PUSH    A
   \   0005D8   90....       MOV     DPTR,#(page + 229)
   \   0005DB   E0           MOVX    A,@DPTR
   \   0005DC   F5F0         MOV     B,A
   \   0005DE   D0E0         POP     A
   \   0005E0   84           DIV     AB
   \   0005E1   90....       MOV     DPTR,#(page + 228)
   \   0005E4   AAF0         MOV     R2,B
   \   0005E6   E0           MOVX    A,@DPTR
   \   0005E7   2A           ADD     A,R2
   \   0005E8   90....       MOV     DPTR,#joinRequestWasSend
   \   0005EB   F0           MOVX    @DPTR,A
   1991                                  atomicChange( SendData, (ndev & NDEV_MASK) * _slot + (RNDL % 5) * _join_slot + _gw_delay - temperatureProtectionDelay );    // 12 * 
   \   0005EC   90....       MOV     DPTR,#ndev
   \   0005EF   E0           MOVX    A,@DPTR
   \   0005F0   FA           MOV     R2,A
   \   0005F1   741F         MOV     A,#0x1f
   \   0005F3   5A           ANL     A,R2
   \   0005F4   F5..         MOV     ?V0 + 0,A
   \   0005F6   90....       MOV     DPTR,#_slot
   \   0005F9   12....       LCALL   ?Subroutine53
   \                     ??CrossCallReturnLabel_136:
   \   0005FC   FC           MOV     R4,A
   \   0005FD   AAF0         MOV     R2,B
   \   0005FF   85..F0       MOV     B,?V0 + 0
   \   000602   ED           MOV     A,R5
   \   000603   A4           MUL     AB
   \   000604   2A           ADD     A,R2
   \   000605   FD           MOV     R5,A
   \   000606   E5BC         MOV     A,0xbc
   \   000608   75F005       MOV     B,#0x5
   \   00060B   84           DIV     AB
   \   00060C   85F0..       MOV     ?V0 + 0,B
   \   00060F   90....       MOV     DPTR,#_join_slot
   \   000612   12....       LCALL   ??Subroutine45_0
   \                     ??CrossCallReturnLabel_110:
   \   000615   EA           MOV     A,R2
   \   000616   A4           MUL     AB
   \   000617   FA           MOV     R2,A
   \   000618   AEF0         MOV     R6,B
   \   00061A   85..F0       MOV     B,?V0 + 0
   \   00061D   EB           MOV     A,R3
   \   00061E   A4           MUL     AB
   \   00061F   2E           ADD     A,R6
   \   000620   FB           MOV     R3,A
   \   000621   EA           MOV     A,R2
   \   000622   2C           ADD     A,R4
   \   000623   FA           MOV     R2,A
   \   000624   EB           MOV     A,R3
   \   000625   3D           ADDC    A,R5
   \   000626   FB           MOV     R3,A
   \   000627   90....       MOV     DPTR,#_gw_delay
   \   00062A   E0           MOVX    A,@DPTR
   \   00062B   2A           ADD     A,R2
   \   00062C   FC           MOV     R4,A
   \   00062D   A3           INC     DPTR
   \   00062E   E0           MOVX    A,@DPTR
   \   00062F   12....       LCALL   ?Subroutine11
   1992                                  flags[ PrepareJoin ] = TRUE; 
   \                     ??CrossCallReturnLabel_367:
   \   000632   90....       MOV     DPTR,#flags
   \   000635   12....       LCALL   ?Subroutine50
   \                     ??CrossCallReturnLabel_128:
   \   000638   7401         MOV     A,#0x1
   \                     ??parseGWPackage_44:
   \   00063A   F0           MOVX    @DPTR,A
   1993                              }
   1994                          }            
   1995          
   1996                          if( ticks[ SendData ] ){
   \                     ??parseGWPackage_47:
   \   00063B   8882         MOV     DPL,R0
   \   00063D   8983         MOV     DPH,R1
   \   00063F   E0           MOVX    A,@DPTR
   \   000640   7002         JNZ     ??parseGWPackage_51
   \   000642   A3           INC     DPTR
   \   000643   E0           MOVX    A,@DPTR
   \                     ??parseGWPackage_51:
   \   000644   6034         JZ      ??parseGWPackage_52
   1997                          //signed char adjustment = 5*TICKS_IN_MS; // was 24;
   1998                          //    if( bunch == 0 )                adjustment -= 8*TICKS_IN_MS;  // was 41;
   1999                          signed char adjustment = -3*TICKS_IN_MS; 
   \   000646   7AFA         MOV     R2,#-0x6
   2000                              if( plen == PACKET_LENGTH_GW_2) adjustment += 11*TICKS_IN_MS; // was 57; 
   \   000648   90....       MOV     DPTR,#??plen
   \   00064B   E0           MOVX    A,@DPTR
   \   00064C   6412         XRL     A,#0x12
   \   00064E   7002         JNZ     ??parseGWPackage_53
   \   000650   7A10         MOV     R2,#0x10
   2001                              if( page.is500Always ){
   \                     ??parseGWPackage_53:
   \   000652   90....       MOV     DPTR,#(page + 194)
   \   000655   E0           MOVX    A,@DPTR
   \   000656   A2E6         MOV     C,0xE0 /* A   */.6
   \   000658   5010         JNC     ??parseGWPackage_54
   2002                                  if( page.use250kbod )     adjustment -= 5*TICKS_IN_MS+3; 
   \   00065A   90....       MOV     DPTR,#(page + 219)
   \   00065D   E0           MOVX    A,@DPTR
   \   00065E   A2E1         MOV     C,0xE0 /* A   */.1
   \   000660   5004         JNC     ??parseGWPackage_55
   \   000662   74F3         MOV     A,#-0xd
   \   000664   8002         SJMP    ??parseGWPackage_56
   2003                                  else                      adjustment -= 5*TICKS_IN_MS; // was 22;
   \                     ??parseGWPackage_55:
   \   000666   74F6         MOV     A,#-0xa
   \                     ??parseGWPackage_56:
   \   000668   2A           ADD     A,R2
   \   000669   FA           MOV     R2,A
   2004                              }//else if( page.isRelay )        adjustment -= TICKS_IN_MS/2; // 2; // commented 20 Feb 16:45 in order to make sure that repeater works when it is right after slave
   2005                              ticks[ SendData ] +=  adjustment;
   \                     ??parseGWPackage_54:
   \   00066A   EA           MOV     A,R2
   \   00066B   33           RLC     A
   \   00066C   95E0         SUBB    A,0xE0 /* A   */
   \   00066E   FB           MOV     R3,A
   \   00066F   8882         MOV     DPL,R0
   \   000671   8983         MOV     DPH,R1
   \   000673   E0           MOVX    A,@DPTR
   \   000674   2A           ADD     A,R2
   \   000675   F0           MOVX    @DPTR,A
   \   000676   A3           INC     DPTR
   \   000677   E0           MOVX    A,@DPTR
   \   000678   3B           ADDC    A,R3
   \   000679   F0           MOVX    @DPTR,A
   2006                          }
   2007          
   2008                          if( (!page.is500Always) && page.isRelay ) tickWait( 2*TICKS_IN_MS+1 ); // was 12
   \                     ??parseGWPackage_52:
   \   00067A   90....       MOV     DPTR,#(page + 194)
   \   00067D   E0           MOVX    A,@DPTR
   \   00067E   5460         ANL     A,#0x60
   \   000680   6420         XRL     A,#0x20
   \   000682   7005         JNZ     ??parseGWPackage_57
   \   000684                ; Setup parameters for call to function tickWait
   \   000684   7905         MOV     R1,#0x5
   \   000686   12....       LCALL   tickWait
   2009                          parseCommands( plen-10 );
   \                     ??parseGWPackage_57:
   \   000689                ; Setup parameters for call to function parseCommands
   \   000689   90....       MOV     DPTR,#??plen
   \   00068C   E0           MOVX    A,@DPTR
   \   00068D   24F6         ADD     A,#-0xa
   \   00068F   F9           MOV     R1,A
   \   000690   12....       LCALL   parseCommands
   2010                          if( page.treatLastByteAsChannel ){ if( !page.is500Always && (cyclesTo500 < 200) ){ curChannel = CHANNR = radioPktBufferRx[ plen ]; } }
   \   000693   90....       MOV     DPTR,#(page + 194)
   \   000696   E0           MOVX    A,@DPTR
   \   000697   5448         ANL     A,#0x48
   \   000699   6408         XRL     A,#0x8
   \   00069B   7023         JNZ     ??parseGWPackage_58
   \   00069D   90....       MOV     DPTR,#cyclesTo500
   \   0006A0   C3           CLR     C
   \   0006A1   E0           MOVX    A,@DPTR
   \   0006A2   94C8         SUBB    A,#-0x38
   \   0006A4   A3           INC     DPTR
   \   0006A5   E0           MOVX    A,@DPTR
   \   0006A6   9400         SUBB    A,#0x0
   \   0006A8   5016         JNC     ??parseGWPackage_58
   \   0006AA   90....       MOV     DPTR,#??plen
   \   0006AD   E0           MOVX    A,@DPTR
   \   0006AE   24..         ADD     A,#(radioPktBufferRx & 0xff)
   \   0006B0   F582         MOV     DPL,A
   \   0006B2   E4           CLR     A
   \   0006B3   34..         ADDC    A,#((radioPktBufferRx >> 8) & 0xff)
   \   0006B5   F583         MOV     DPH,A
   \   0006B7   E0           MOVX    A,@DPTR
   \   0006B8   90DF06       MOV     DPTR,#-0x20fa
   \   0006BB   F0           MOVX    @DPTR,A
   \   0006BC   90....       MOV     DPTR,#curChannel
   \   0006BF   F0           MOVX    @DPTR,A
   2011                          
   2012                          //lastRssi = radioPktBufferRx[ plen ];
   2013                          //setByte( SET_CUR_CHANNEL, radioPktBuffer[7] );
   2014                          
   2015                          if( ticks[ SendData ] < 0 ) ticks[ SendData ] = 0;
   \                     ??parseGWPackage_58:
   \   0006C0   90....       MOV     DPTR,#ticks
   \   0006C3   E0           MOVX    A,@DPTR
   \   0006C4   2406         ADD     A,#0x6
   \   0006C6   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_147:
   \   0006C9   12....       LCALL   ?Subroutine61
   \                     ??CrossCallReturnLabel_187:
   \   0006CC   5008         JNC     ??parseGWPackage_7
   \   0006CE   8882         MOV     DPL,R0
   \   0006D0   8983         MOV     DPH,R1
   \   0006D2   E4           CLR     A
   \   0006D3   F0           MOVX    @DPTR,A
   \   0006D4   A3           INC     DPTR
   \   0006D5   F0           MOVX    @DPTR,A
   2016                      }
   2017                  }//else ticks[ ReceiveData ] = 2;
   2018              }
   2019              setupRepeater( FALSE ); 
   \                     ??parseGWPackage_7:
   \   0006D6                ; Setup parameters for call to function setupRepeater
   \   0006D6   7900         MOV     R1,#0x0
   \   0006D8   12....       LCALL   setupRepeater
   2020              //if( !enable2SendData ){
   2021              //    flags[ PrepareData ] = 0; flags[ SendData ] = 0; 
   2022              //}else 
   2023          //    if( (!page.is500Always) && page.isRelay ) setupRepeater( got_gw ); 
   2024              if( (!page.is500Always) && page.isRelay ){ setupRepeater( got_gw ); receive(); }
   \   0006DB   90....       MOV     DPTR,#(page + 194)
   \   0006DE   E0           MOVX    A,@DPTR
   \   0006DF   5460         ANL     A,#0x60
   \   0006E1   6420         XRL     A,#0x20
   \   0006E3   7003         JNZ     $+5
   \   0006E5   02....       LJMP    ??parseGWPackage_3
   \                     ??parseGWPackage_5:
   \   0006E8   02....       LJMP    ??Subroutine121_1
   \   0006EB                REQUIRE _A_P1
   \   0006EB                REQUIRE ADCCON1
   \   0006EB                REQUIRE RNDL
   \   0006EB                REQUIRE RNDH
   2025          //    receive();  // uncomment to get G+ behaviour
   2026          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   94FF         SUBB    A,#-0x1
   \   000004   02....       LJMP    ?Subroutine116

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_309:
   \   000003   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ?Subroutine107
   \                     ??CrossCallReturnLabel_335:
   \   000003   EA           MOV     A,R2
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   85..F0       MOV     B,?V0 + 0
   \   000009   A4           MUL     AB
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   9400         SUBB    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   90....       MOV     DPTR,#temperatureProtectionDelay
   \   000006   12....       LCALL   ?Subroutine97
   \                     ??CrossCallReturnLabel_308:
   \   000009   F8           MOV     R0,A
   \   00000A   EB           MOV     A,R3
   \   00000B   99           SUBB    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   E8           MOV     A,R0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E9           MOV     A,R1
   \   000015   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   3B           ADDC    A,R3
   \   000001   FD           MOV     R5,A
   \   000002   90....       MOV     DPTR,#temperatureProtectionDelay
   \   000005   12....       LCALL   ??Subroutine94_0
   \                     ??CrossCallReturnLabel_390:
   \   000008   EC           MOV     A,R4
   \   000009   C3           CLR     C
   \   00000A   9A           SUBB    A,R2
   \   00000B   FA           MOV     R2,A
   \   00000C   ED           MOV     A,R5
   \   00000D   9B           SUBB    A,R3
   \   00000E   FB           MOV     R3,A
   \   00000F   02....       LJMP    ?Subroutine114

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(page + 194)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   A2E6         MOV     C,0xE0 /* A   */.6
   \   000007   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??bunch:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??plen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??cnt:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for cnt>`
   \   000001                REQUIRE __INIT_XDATA_I
   2027          /******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2028          BYTE *nextSlot(){
   \                     nextSlot:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2029              BYTE *ptr = (BYTE *)(PAGEADDR + PAGESIZE); 
   \   000005   7AF2         MOV     R2,#-0xe
   \   000007   7B5C         MOV     R3,#0x5c
   \   000009   8009         SJMP    ??nextSlot_0
   2030              while( ptr && ( ptr <= (BYTE *)(PAGEADDR+0x3FF) ) ){ 
   2031                  BYTE i = 4; 
   2032                  do{ if( ptr[--i] != 0xFF ) break; }while(i);
   2033                  if( i ) ptr += 4; else return ptr; 
   \                     ??nextSlot_1:
   \   00000B   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_277:
   \   00000E   EA           MOV     A,R2
   \   00000F   7001         JNZ     ??nextSlot_2
   \   000011   EB           MOV     A,R3
   \                     ??nextSlot_2:
   \   000012   6022         JZ      ??nextSlot_3
   \                     ??nextSlot_0:
   \   000014   C3           CLR     C
   \   000015   EB           MOV     A,R3
   \   000016   9460         SUBB    A,#0x60
   \   000018   501C         JNC     ??nextSlot_3
   \   00001A   7C04         MOV     R4,#0x4
   \                     ??nextSlot_4:
   \   00001C   1C           DEC     R4
   \   00001D   8C..         MOV     ?V0 + 0,R4
   \   00001F   EA           MOV     A,R2
   \   000020   25..         ADD     A,?V0 + 0
   \   000022   F582         MOV     DPL,A
   \   000024   EB           MOV     A,R3
   \   000025   3400         ADDC    A,#0x0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   64FF         XRL     A,#0xff
   \   00002C   7003         JNZ     ??nextSlot_5
   \   00002E   EC           MOV     A,R4
   \   00002F   70EB         JNZ     ??nextSlot_4
   \                     ??nextSlot_5:
   \   000031   EC           MOV     A,R4
   \   000032   70D7         JNZ     ??nextSlot_1
   \   000034   8004         SJMP    ??nextSlot_6
   2034              }
   2035              return NULL;
   \                     ??nextSlot_3:
   \   000036   7A00         MOV     R2,#0x0
   \   000038   7B00         MOV     R3,#0x0
   \                     ??nextSlot_6:
   \   00003A   02....       LJMP    ??Subroutine122_0
   2036          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET
   2037          /******************************************************************************
   2038          * @fn  receive
   2039          * @brief       This function switch radio into receiving radioMode
   2040          * Parameters:
   2041          * @return void
   2042          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2043          void receive(void){
   \                     receive:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2044              //if( page.fuseComm ) return;
   2045              if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( ReceiveData, 1 ); return; }
   \   000004   12....       LCALL   ?Subroutine25
   \                     ??CrossCallReturnLabel_66:
   \   000007   7005         JNZ     ??receive_0
   \   000009   12....       LCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_417:
   \   00000C   8027         SJMP    ??receive_1
   2046              RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
   \                     ??receive_0:
   \   00000E   75E104       MOV     0xe1,#0x4
   \   000011   74F0         MOV     A,#-0x10
   \   000013   12....       LCALL   ??Subroutine72_0
   2047              //INT_GLOBAL_ENABLE( INT_OFF );
   2048                  si->packetReceived = 0;
   \                     ??CrossCallReturnLabel_235:
   \   000016   245F         ADD     A,#0x5f
   \   000018   12....       LCALL   ??Subroutine2_1
   2049                  radioPktBufferRx[0] = 0;    radioPktBufferRx[1] = 0;
   \                     ??CrossCallReturnLabel_4:
   \   00001B   90....       MOV     DPTR,#radioPktBufferRx
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   90....       MOV     DPTR,#(radioPktBufferRx + 1)
   \   000022   F0           MOVX    @DPTR,A
   2050                  //quartz();
   2051                  si->radioMode = RADIO_MODE_RX;
   \   000023   12....       LCALL   ?Subroutine43
   \                     ??CrossCallReturnLabel_102:
   \   000026   7420         MOV     A,#0x20
   \   000028   F0           MOVX    @DPTR,A
   2052                  PKTLEN = PACKET_LENGTH_GW;  
   \   000029   7422         MOV     A,#0x22
   \   00002B   90DF02       MOV     DPTR,#-0x20fe
   \   00002E   F0           MOVX    @DPTR,A
   2053                  DMAARM = DMAARM_CHANNEL0;             // Arm DMA channel 0
   \   00002F   75D601       MOV     0xd6,#0x1
   2054          //        P1_1 = 0;        
   2055                  RFST = STROBE_RX;                     // Switch radio to RX
   \   000032   75E102       MOV     0xe1,#0x2
   2056              //INT_GLOBAL_ENABLE( INT_ON );
   2057          }
   \                     ??receive_1:
   \   000035   02....       LJMP    ??Subroutine115_0
   \   000038                REQUIRE DMAARM
   \   000038                REQUIRE RFST
   2058          /******************************************************************************
   2059          * @fn  computeADCs
   2060          * @brief       This function makes all the regular computations
   2061          * Parameters:  
   2062          * @return void
   2063          ******************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   2064          float vref, t;
   \                     vref:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     t:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
   2065          //static float p1, c1, corrP, corrC;

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2066          float computeAdjustment( float *k ){ return 1.0 + t*(*k); } 
   \                     computeAdjustment:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   90....       MOV     DPTR,#t
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?L_MOV_X
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   78..         MOV     R0,#?V0 + 4
   \   000013   12....       LCALL   ?L_MOV_X
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   79..         MOV     R1,#?V0 + 4
   \   00001A   12....       LCALL   ?FLT_MUL
   \   00001D   90....       MOV     DPTR,#__Constant_3f800000
   \   000020   78..         MOV     R0,#?V0 + 4
   \   000022   12....       LCALL   ?L_MOV_X
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   79..         MOV     R1,#?V0 + 4
   \   000029   12....       LCALL   ?FLT_ADD
   \   00002C   02....       LJMP    ?Subroutine124

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2067          float multSaver( INT32 *p32, float *fptr ){ return ((float) *p32) * invRef * (*fptr); }
   \                     multSaver:
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   12....       LCALL   ?L_MOV_X
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?L_TO_FLT
   \   000013   90....       MOV     DPTR,#invRef
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   79..         MOV     R1,#?V0 + 4
   \   00001F   12....       LCALL   ?FLT_MUL
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   78..         MOV     R0,#?V0 + 4
   \   000028   12....       LCALL   ?L_MOV_X
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   79..         MOV     R1,#?V0 + 4
   \   00002F   12....       LCALL   ?FLT_MUL
   \   000032   02....       LJMP    ?Subroutine124
   2068          
   2069          //#pragma optimize=s 9

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2070          void computeADCs(BOOL timeout, BOOL accumulateEnergy){
   \                     computeADCs:
   \   000000   74E1         MOV     A,#-0x1f
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 31
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 3,R2
   2071          BYTE i, counter;
   2072          // static is a way to reduce stack usage 
   2073          INT32  *accptr;
   2074          UINT16  *adcptr;
   2075          static INT32  acc, df;//, thirtyThree_mV; 
   2076          static float mV, rOff;
   2077          #ifndef MidString
   2078          static float tin;
   2079          #endif
   2080          static float temp[N_CHANNELS];
   2081          float *coeff;
   2082          signed char off = FSCTRL0;
   \   000009   90DF08       MOV     DPTR,#-0x20f8
   \   00000C   E0           MOVX    A,@DPTR
   2083          
   2084              lastOff  = (INT32)off; 
   \   00000D   F8           MOV     R0,A
   \   00000E   33           RLC     A
   \   00000F   95E0         SUBB    A,0xE0 /* A   */
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#lastOff
   \   000015   12....       LCALL   ??Subroutine67_0
   2085              accptr = adcs;
   \                     ??CrossCallReturnLabel_214:
   \   000018   7A..         MOV     R2,#(adcs & 0xff)
   \   00001A   7B..         MOV     R3,#((adcs >> 8) & 0xff)
   2086              adcptr = adcBuf[0]; // using the fact that one buffer is defined right after another
   \   00001C   75....       MOV     ?V0 + 0,#(adcBuf & 0xff)
   \   00001F   75....       MOV     ?V0 + 1,#((adcBuf >> 8) & 0xff)
   2087                                  // in general it is a VERY DANGEROUS ASSUMPTION, but with this C compiler it works
   2088              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000022   90....       MOV     DPTR,#flags
   \   000025   E0           MOVX    A,@DPTR
   \   000026   2401         ADD     A,#0x1
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 5,A
   \   000030   85..82       MOV     DPL,?V0 + 4
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   7014         JNZ     ??computeADCs_0
   \   000038   90....       MOV     DPTR,#flags
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2402         ADD     A,#0x2
   \   00003E   12....       LCALL   ?Subroutine56
   \                     ??CrossCallReturnLabel_155:
   \   000041   88..         MOV     ?V0 + 6,R0
   \   000043   89..         MOV     ?V0 + 7,R1
   \   000045   8882         MOV     DPL,R0
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6006         JZ      ??computeADCs_1
   \                     ??computeADCs_0:
   \   00004C   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_44:
   \   00004F   02....       LJMP    ??computeADCs_2
   2089              if( accumulateEnergy ){
   \                     ??computeADCs_1:
   \   000052   E5..         MOV     A,?V0 + 3
   \   000054   6054         JZ      ??computeADCs_3
   2090                  adcptr += (bufferCount - 1) & ( BUFFER_SIZE-1 );
   \   000056   90....       MOV     DPTR,#bufferCount
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   18           DEC     R0
   \   00005C   7407         MOV     A,#0x7
   \   00005E   58           ANL     A,R0
   \   00005F   C3           CLR     C
   \   000060   33           RLC     A
   \   000061   24..         ADD     A,#(adcBuf & 0xff)
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   E4           CLR     A
   \   000066   34..         ADDC    A,#((adcBuf >> 8) & 0xff)
   \   000068   F5..         MOV     ?V0 + 1,A
   2091                  for( i = 0; i < N_CHANNELS; i++, adcptr+=BUFFER_SIZE )
   \   00006A   7909         MOV     R1,#0x9
   2092                      *accptr++ = *adcptr; 
   \                     ??computeADCs_4:
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FC           MOV     R4,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FD           MOV     R5,A
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   EC           MOV     A,R4
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   ED           MOV     A,R5
   \   00007F   12....       LCALL   ?Subroutine119
   \                     ??CrossCallReturnLabel_413:
   \   000082   A3           INC     DPTR
   \   000083   F0           MOVX    @DPTR,A
   \   000084   12....       LCALL   ?Subroutine87
   \                     ??CrossCallReturnLabel_278:
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   2410         ADD     A,#0x10
   \   00008B   F5..         MOV     ?V0 + 0,A
   \   00008D   E5..         MOV     A,?V0 + 1
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F5..         MOV     ?V0 + 1,A
   \   000093   19           DEC     R1
   \   000094   E9           MOV     A,R1
   \   000095   70D5         JNZ     ??computeADCs_4
   2093                  adcs[ 3 ] += gnd_shift/8;
   \   000097   90....       MOV     DPTR,#gnd_shift
   \   00009A   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_182:
   \   00009D   7A08         MOV     R2,#0x8
   \   00009F   7B00         MOV     R3,#0x0
   \   0000A1   12....       LCALL   ?S_DIV_MOD
   \   0000A4   88..         MOV     ?V0 + 8,R0
   \   0000A6   E9           MOV     A,R1
   \   0000A7   02....       LJMP    ??computeADCs_5
   2094              }else{
   2095                  for( i = 0; i < N_CHANNELS; i++ ){ // 128 averaging
   \                     ??computeADCs_3:
   \   0000AA   75..00       MOV     ?V0 + 8,#0x0
   2096                      counter = BUFFER_SIZE;
   \                     ??computeADCs_6:
   \   0000AD   7C08         MOV     R4,#0x8
   2097                      acc = 0; while( counter-- )  acc += *adcptr++;
   \   0000AF   90....       MOV     DPTR,#__Constant_0
   \   0000B2   78..         MOV     R0,#?V0 + 12
   \   0000B4   12....       LCALL   ?L_MOV_X
   \   0000B7   90....       MOV     DPTR,#??acc
   \   0000BA   78..         MOV     R0,#?V0 + 12
   \   0000BC   12....       LCALL   ?L_MOV_TO_X
   \   0000BF   8027         SJMP    ??computeADCs_7
   \                     ??computeADCs_8:
   \   0000C1   85..82       MOV     DPL,?V0 + 0
   \   0000C4   85..83       MOV     DPH,?V0 + 1
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F5..         MOV     ?V0 + 12,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F5..         MOV     ?V0 + 13,A
   \   0000CE   75..00       MOV     ?V0 + 14,#0x0
   \   0000D1   75..00       MOV     ?V0 + 15,#0x0
   \   0000D4   90....       MOV     DPTR,#??acc
   \   0000D7   78..         MOV     R0,#?V0 + 12
   \   0000D9   12....       LCALL   ?L_ADD_TO_X
   \   0000DC   E5..         MOV     A,?V0 + 0
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   F5..         MOV     ?V0 + 0,A
   \   0000E2   E5..         MOV     A,?V0 + 1
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   F5..         MOV     ?V0 + 1,A
   \                     ??computeADCs_7:
   \   0000E8   EC           MOV     A,R4
   \   0000E9   1C           DEC     R4
   \   0000EA   70D5         JNZ     ??computeADCs_8
   2098                      if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0000EC   85..82       MOV     DPL,?V0 + 4
   \   0000EF   85..83       MOV     DPH,?V0 + 5
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6003         JZ      $+5
   \   0000F5   02....       LJMP    ??computeADCs_0
   \   0000F8   85..82       MOV     DPL,?V0 + 6
   \   0000FB   8983         MOV     DPH,R1
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   6003         JZ      $+5
   \   000100   02....       LJMP    ??computeADCs_0
   2099                     *accptr++ = acc;
   \   000103   90....       MOV     DPTR,#??acc
   \   000106   78..         MOV     R0,#?V0 + 12
   \   000108   12....       LCALL   ?L_MOV_X
   \   00010B   8A82         MOV     DPL,R2
   \   00010D   8B83         MOV     DPH,R3
   \   00010F   78..         MOV     R0,#?V0 + 12
   \   000111   12....       LCALL   ?L_MOV_TO_X
   \   000114   12....       LCALL   ?Subroutine87
   2100                  }
   \                     ??CrossCallReturnLabel_279:
   \   000117   05..         INC     ?V0 + 8
   \   000119   E5..         MOV     A,?V0 + 8
   \   00011B   C3           CLR     C
   \   00011C   9409         SUBB    A,#0x9
   \   00011E   408D         JC      ??computeADCs_6
   2101                  adcs[ 3 ] += gnd_shift;
   \   000120   90....       MOV     DPTR,#gnd_shift
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F5..         MOV     ?V0 + 0,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   85....       MOV     ?V0 + 8,?V0 + 0
   \                     ??computeADCs_5:
   \   00012B   F5..         MOV     ?V0 + 9,A
   \   00012D   33           RLC     A
   \   00012E   95E0         SUBB    A,0xE0 /* A   */
   \   000130   F5..         MOV     ?V0 + 10,A
   \   000132   F5..         MOV     ?V0 + 11,A
   \   000134   90....       MOV     DPTR,#(adcs + 12)
   \   000137   78..         MOV     R0,#?V0 + 8
   \   000139   12....       LCALL   ?L_ADD_TO_X
   2102              }
   2103              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   00013C   85..82       MOV     DPL,?V0 + 4
   \   00013F   85..83       MOV     DPH,?V0 + 5
   \   000142   E0           MOVX    A,@DPTR
   \   000143   6003         JZ      $+5
   \   000145   02....       LJMP    ??computeADCs_0
   \   000148   85..82       MOV     DPL,?V0 + 6
   \   00014B   85..83       MOV     DPH,?V0 + 7
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   6003         JZ      $+5
   \   000151   02....       LJMP    ??computeADCs_0
   2104              /*
   2105              if( page.thirty_three_mv ){
   2106                  thirtyThree_mV = (INT32) ( 33 * ( adcs[ REF ] - adcs[ EXT_GND ] ) / ( page.vrefPolynom[0] - 33 ) );
   2107                  adcs[ EXT_GND ] -= thirtyThree_mV;
   2108              }
   2109              */
   2110              substractGround( adcs, 0, N_CHANNELS );
   \   000154                ; Setup parameters for call to function substractGround
   \   000154   7C09         MOV     R4,#0x9
   \   000156   7900         MOV     R1,#0x0
   \   000158   7A..         MOV     R2,#(adcs & 0xff)
   \   00015A   7B..         MOV     R3,#((adcs >> 8) & 0xff)
   \   00015C   12....       LCALL   substractGround
   2111              //if( page.thirty_three_mv ) adcs[ EXT_GND ] += thirtyThree_mV;
   2112              
   2113              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   00015F   12....       LCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_50:
   \   000162   7005         JNZ     ??computeADCs_9
   \   000164   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_52:
   \   000167   6003         JZ      ??computeADCs_10
   \                     ??computeADCs_9:
   \   000169   02....       LJMP    ??computeADCs_0
   2114              if( adcs[ REF ] == 0 ) return; 
   \                     ??computeADCs_10:
   \   00016C   90....       MOV     DPTR,#(adcs + 16)
   \   00016F   78..         MOV     R0,#?V0 + 4
   \   000171   12....       LCALL   ?L_MOV_X
   \   000174   90....       MOV     DPTR,#__Constant_0
   \   000177   78..         MOV     R0,#?V0 + 4
   \   000179   12....       LCALL   ?L_EQ_X
   \   00017C   7003         JNZ     $+5
   \   00017E   02....       LJMP    ??computeADCs_2
   2115              invRef = 1.0 / (float)adcs[ REF ];
   \   000181   75..00       MOV     ?V0 + 8,#0x0
   \   000184   75..00       MOV     ?V0 + 9,#0x0
   \   000187   75..80       MOV     ?V0 + 10,#-0x80
   \   00018A   75..3F       MOV     ?V0 + 11,#0x3f
   \   00018D   78..         MOV     R0,#?V0 + 4
   \   00018F   12....       LCALL   ?L_TO_FLT
   \   000192   78..         MOV     R0,#?V0 + 8
   \   000194   79..         MOV     R1,#?V0 + 4
   \   000196   12....       LCALL   ?FLT_DIV
   \   000199   90....       MOV     DPTR,#invRef
   \   00019C   78..         MOV     R0,#?V0 + 8
   \   00019E   12....       LCALL   ?L_MOV_TO_X
   2116              // compute correct temperature, correct vref, coeffcient to convert sum of counts to physical values
   2117              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   70C1         JNZ     ??computeADCs_9
   \   0001A8   85..82       MOV     DPL,?V0 + 0
   \   0001AB   85..83       MOV     DPH,?V0 + 1
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   70B8         JNZ     ??computeADCs_9
   2118              _coeff = page.linearK[4];    t   = lin(  TEXT );
   \   0001B1   90....       MOV     DPTR,#_coeff
   \   0001B4   74..         MOV     A,#((page + 72) & 0xff)
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   A3           INC     DPTR
   \   0001B8   74..         MOV     A,#(((page + 72) >> 8) & 0xff)
   \   0001BA   F0           MOVX    @DPTR,A
   \   0001BB                ; Setup parameters for call to function lin
   \   0001BB   7906         MOV     R1,#0x6
   \   0001BD   12....       LCALL   lin
   \   0001C0   8A..         MOV     ?V0 + 4,R2
   \   0001C2   8B..         MOV     ?V0 + 5,R3
   \   0001C4   8C..         MOV     ?V0 + 6,R4
   \   0001C6   8D..         MOV     ?V0 + 7,R5
   \   0001C8   90....       MOV     DPTR,#t
   \   0001CB   78..         MOV     R0,#?V0 + 4
   \   0001CD   12....       LCALL   ?L_MOV_TO_X
   2119          #ifndef MidString
   2120              _coeff = page.linearK[5];    tin = -lin( TINT );
   2121          #endif
   2122              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0001D0   8E82         MOV     DPL,R6
   \   0001D2   8F83         MOV     DPH,R7
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   7092         JNZ     ??computeADCs_9
   \   0001D7   85..82       MOV     DPL,?V0 + 0
   \   0001DA   85..83       MOV     DPH,?V0 + 1
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   7089         JNZ     ??computeADCs_9
   2123              adcs16[ 4 ]  = (INT16)mult(t,   100);
   \   0001E0   90....       MOV     DPTR,#t
   \   0001E3   78..         MOV     R0,#?V0 + 4
   \   0001E5   12....       LCALL   ?L_MOV_X
   \   0001E8   90....       MOV     DPTR,#__Constant_42c80000
   \   0001EB   78..         MOV     R0,#?V0 + 8
   \   0001ED   12....       LCALL   ?L_MOV_X
   \   0001F0   78..         MOV     R0,#?V0 + 4
   \   0001F2   79..         MOV     R1,#?V0 + 8
   \   0001F4   12....       LCALL   ?FLT_MUL
   \   0001F7   78..         MOV     R0,#?V0 + 4
   \   0001F9   12....       LCALL   ?FLT_TO_L
   \   0001FC   90....       MOV     DPTR,#(adcs16 + 8)
   \   0001FF   E5..         MOV     A,?V0 + 4
   \   000201   F0           MOVX    @DPTR,A
   \   000202   A3           INC     DPTR
   \   000203   E5..         MOV     A,?V0 + 5
   \   000205   F0           MOVX    @DPTR,A
   2124          #ifndef MidString
   2125              adcs16[ 5 ] = ((INT16)mult(tin, 100));
   2126          #endif
   2127              
   2128              _coeff = page.dFk;
   \   000206   90....       MOV     DPTR,#_coeff
   \   000209   74..         MOV     A,#((page + 12) & 0xff)
   \   00020B   F0           MOVX    @DPTR,A
   \   00020C   A3           INC     DPTR
   \   00020D   74..         MOV     A,#(((page + 12) >> 8) & 0xff)
   \   00020F   12....       LCALL   ?Subroutine104
   2129              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_326:
   \   000212   E0           MOVX    A,@DPTR
   \   000213   6003         JZ      $+5
   \   000215   02....       LJMP    ??computeADCs_0
   \   000218   85..82       MOV     DPL,?V0 + 0
   \   00021B   85..83       MOV     DPH,?V0 + 1
   \   00021E   E0           MOVX    A,@DPTR
   \   00021F   6003         JZ      $+5
   \   000221   02....       LJMP    ??computeADCs_0
   2130              /*
   2131              if( abs( t - tin ) > 20.0 ){
   2132                       rOff = cube_coeff( 0.5*( tin+t ) );
   2133              }else    rOff = cube_coeff( t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
   2134              */
   2135              //if( abs( adcs16[ 4 ] - adcs16[ 5 ] ) > 2000 ) t = 0.5*( tin+t );
   2136              rOff = cube_coeff( &t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
   \   000224                ; Setup parameters for call to function cube_coeff
   \   000224   7A..         MOV     R2,#(t & 0xff)
   \   000226   7B..         MOV     R3,#((t >> 8) & 0xff)
   \   000228   12....       LCALL   cube_coeff
   \   00022B   8A..         MOV     ?V0 + 4,R2
   \   00022D   8B..         MOV     ?V0 + 5,R3
   \   00022F   8C..         MOV     ?V0 + 6,R4
   \   000231   8D..         MOV     ?V0 + 7,R5
   \   000233   90....       MOV     DPTR,#??rOff
   \   000236   78..         MOV     R0,#?V0 + 4
   \   000238   12....       LCALL   ?L_MOV_TO_X
   2137              
   2138              df = (INT32) rOff;
   \   00023B   90....       MOV     DPTR,#??rOff
   \   00023E   78..         MOV     R0,#?V0 + 4
   \   000240   12....       LCALL   ?L_MOV_X
   \   000243   78..         MOV     R0,#?V0 + 4
   \   000245   12....       LCALL   ?FLT_TO_L
   \   000248   90....       MOV     DPTR,#??df
   \   00024B   78..         MOV     R0,#?V0 + 4
   \   00024D   12....       LCALL   ?L_MOV_TO_X
   2139              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000250   8E82         MOV     DPL,R6
   \   000252   8F83         MOV     DPH,R7
   \   000254   E0           MOVX    A,@DPTR
   \   000255   6003         JZ      $+5
   \   000257   02....       LJMP    ??computeADCs_0
   \   00025A   85..82       MOV     DPL,?V0 + 0
   \   00025D   85..83       MOV     DPH,?V0 + 1
   \   000260   E0           MOVX    A,@DPTR
   \   000261   6003         JZ      $+5
   \   000263   02....       LJMP    ??computeADCs_0
   2140              theRealOffset = (INT8)( (delta + (lastOff<<2) - ( df )) >> 2 );
   \   000266   90....       MOV     DPTR,#delta
   \   000269   78..         MOV     R0,#?V0 + 4
   \   00026B   12....       LCALL   ?L_MOV_X
   \   00026E   90....       MOV     DPTR,#lastOff
   \   000271   12....       LCALL   ?Subroutine26
   \                     ??CrossCallReturnLabel_70:
   \   000274   7402         MOV     A,#0x2
   \   000276   78..         MOV     R0,#?V0 + 0
   \   000278   12....       LCALL   ?S_SHL
   \   00027B   E5..         MOV     A,?V0 + 0
   \   00027D   25..         ADD     A,?V0 + 4
   \   00027F   FA           MOV     R2,A
   \   000280   E5..         MOV     A,?V0 + 1
   \   000282   35..         ADDC    A,?V0 + 5
   \   000284   FB           MOV     R3,A
   \   000285   90....       MOV     DPTR,#??df
   \   000288   78..         MOV     R0,#?V0 + 4
   \   00028A   12....       LCALL   ?L_MOV_X
   \   00028D   EA           MOV     A,R2
   \   00028E   C3           CLR     C
   \   00028F   95..         SUBB    A,?V0 + 4
   \   000291   F5..         MOV     ?V0 + 0,A
   \   000293   EB           MOV     A,R3
   \   000294   95..         SUBB    A,?V0 + 5
   \   000296   F5..         MOV     ?V0 + 1,A
   \   000298   7402         MOV     A,#0x2
   \   00029A   78..         MOV     R0,#?V0 + 0
   \   00029C   12....       LCALL   ?SS_SHR
   \   00029F   E5..         MOV     A,?V0 + 0
   \   0002A1   90....       MOV     DPTR,#theRealOffset
   \   0002A4   F0           MOVX    @DPTR,A
   2141          
   2142              // adjust frequency by temperature
   2143              if( timeout && ( si->radioMode == RADIO_MODE_UNDEF ) ) addDF( df /*+ page.theDelta*/ - delta ); 
   \   0002A5   E5..         MOV     A,?V0 + 2
   \   0002A7   6022         JZ      ??computeADCs_11
   \   0002A9   12....       LCALL   ?Subroutine32
   \                     ??CrossCallReturnLabel_81:
   \   0002AC   64F0         XRL     A,#0xf0
   \   0002AE   701B         JNZ     ??computeADCs_11
   \   0002B0                ; Setup parameters for call to function addDF
   \   0002B0   90....       MOV     DPTR,#??df
   \   0002B3   78..         MOV     R0,#?V0 + 4
   \   0002B5   12....       LCALL   ?L_MOV_X
   \   0002B8   90....       MOV     DPTR,#delta
   \   0002BB   78..         MOV     R0,#?V0 + 4
   \   0002BD   12....       LCALL   ?L_SUB_X
   \   0002C0   AA..         MOV     R2,?V0 + 4
   \   0002C2   AB..         MOV     R3,?V0 + 5
   \   0002C4   AC..         MOV     R4,?V0 + 6
   \   0002C6   AD..         MOV     R5,?V0 + 7
   \   0002C8   12....       LCALL   addDF
   2144              //RFST = STROBE_CAL; 
   2145          
   2146              coeff = page.vrefPolynom;
   2147              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??computeADCs_11:
   \   0002CB   12....       LCALL   ?Subroutine18
   \                     ??CrossCallReturnLabel_51:
   \   0002CE   7005         JNZ     ??computeADCs_12
   \   0002D0   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_53:
   \   0002D3   6003         JZ      ??computeADCs_13
   \                     ??computeADCs_12:
   \   0002D5   02....       LJMP    ??computeADCs_0
   2148              vref  = coeff[0] * ( 1.0 - coeff[1]*sqr( t - coeff[2] ) );
   \                     ??computeADCs_13:
   \   0002D8   90....       MOV     DPTR,#t
   \   0002DB   78..         MOV     R0,#?V0 + 8
   \   0002DD   12....       LCALL   ?L_MOV_X
   \   0002E0   90....       MOV     DPTR,#(page + 36)
   \   0002E3   78..         MOV     R0,#?V0 + 4
   \   0002E5   12....       LCALL   ?L_MOV_X
   \   0002E8   78..         MOV     R0,#?V0 + 8
   \   0002EA   79..         MOV     R1,#?V0 + 4
   \   0002EC   12....       LCALL   ?FLT_SUB
   \   0002EF   90....       MOV     DPTR,#(page + 28)
   \   0002F2   78..         MOV     R0,#?V0 + 12
   \   0002F4   12....       LCALL   ?L_MOV_X
   \   0002F7   75..00       MOV     ?V0 + 16,#0x0
   \   0002FA   75..00       MOV     ?V0 + 17,#0x0
   \   0002FD   75..80       MOV     ?V0 + 18,#-0x80
   \   000300   75..3F       MOV     ?V0 + 19,#0x3f
   \   000303   90....       MOV     DPTR,#(page + 32)
   \   000306   78..         MOV     R0,#?V0 + 20
   \   000308   12....       LCALL   ?L_MOV_X
   \   00030B   85....       MOV     ?V0 + 4,?V0 + 8
   \   00030E   85....       MOV     ?V0 + 5,?V0 + 9
   \   000311   85....       MOV     ?V0 + 6,?V0 + 10
   \   000314   85....       MOV     ?V0 + 7,?V0 + 11
   \   000317   78..         MOV     R0,#?V0 + 4
   \   000319   79..         MOV     R1,#?V0 + 8
   \   00031B   12....       LCALL   ?FLT_MUL
   \   00031E   78..         MOV     R0,#?V0 + 20
   \   000320   79..         MOV     R1,#?V0 + 4
   \   000322   12....       LCALL   ?FLT_MUL
   \   000325   78..         MOV     R0,#?V0 + 16
   \   000327   79..         MOV     R1,#?V0 + 20
   \   000329   12....       LCALL   ?FLT_SUB
   \   00032C   78..         MOV     R0,#?V0 + 12
   \   00032E   79..         MOV     R1,#?V0 + 16
   \   000330   12....       LCALL   ?FLT_MUL
   \   000333   90....       MOV     DPTR,#vref
   \   000336   78..         MOV     R0,#?V0 + 12
   \   000338   12....       LCALL   ?L_MOV_TO_X
   2149              t -= 25.0;
   \   00033B   90....       MOV     DPTR,#t
   \   00033E   78..         MOV     R0,#?V0 + 4
   \   000340   12....       LCALL   ?L_MOV_X
   \   000343   90....       MOV     DPTR,#__Constant_c1c80000
   \   000346   78..         MOV     R0,#?V0 + 8
   \   000348   12....       LCALL   ?L_MOV_X
   \   00034B   78..         MOV     R0,#?V0 + 4
   \   00034D   79..         MOV     R1,#?V0 + 8
   \   00034F   12....       LCALL   ?FLT_ADD
   \   000352   90....       MOV     DPTR,#t
   \   000355   78..         MOV     R0,#?V0 + 4
   \   000357   12....       LCALL   ?L_MOV_TO_X
   2150              invRef  *= vref; // / ((float)adcs[ REF ]);  
   \   00035A   90....       MOV     DPTR,#invRef
   \   00035D   78..         MOV     R0,#?V0 + 4
   \   00035F   12....       LCALL   ?L_MOV_X
   \   000362   90....       MOV     DPTR,#vref
   \   000365   78..         MOV     R0,#?V0 + 8
   \   000367   12....       LCALL   ?L_MOV_X
   \   00036A   78..         MOV     R0,#?V0 + 4
   \   00036C   79..         MOV     R1,#?V0 + 8
   \   00036E   12....       LCALL   ?FLT_MUL
   \   000371   90....       MOV     DPTR,#invRef
   \   000374   78..         MOV     R0,#?V0 + 4
   \   000376   12....       LCALL   ?L_MOV_TO_X
   2151              // scale everything to physical units
   2152              // Vout  0      Pin   1     Iout  2      Gnd ext 3        Ref 4      Vin  5       Text  6     Tin 7
   2153              for( i = 0; i<N_CHANNELS; i++) 
   \   000379   75..00       MOV     ?V0 + 8,#0x0
   2154                  /*if( indices[ i ] != 0xFF )*/ {
   2155                      mV = invRef * ((float)adcs[i]); //temp[i]; // adcs values (all but REF) should be scaled to fit into UINT16 - k should be accordingly set
   \                     ??computeADCs_14:
   \   00037C   85..82       MOV     DPL,?V0 + 8
   \   00037F   8582..       MOV     ?V0 + 6,DPL
   \   000382   85....       MOV     ?V0 + 10,?V0 + 6
   \   000385   75..00       MOV     ?V0 + 11,#0x0
   \   000388   7402         MOV     A,#0x2
   \   00038A   78..         MOV     R0,#?V0 + 10
   \   00038C   12....       LCALL   ?S_SHL
   \   00038F   85....       MOV     ?V0 + 4,?V0 + 10
   \   000392   85....       MOV     ?V0 + 5,?V0 + 11
   \   000395   90....       MOV     DPTR,#invRef
   \   000398   78..         MOV     R0,#?V0 + 12
   \   00039A   12....       LCALL   ?L_MOV_X
   \   00039D   E5..         MOV     A,?V0 + 4
   \   00039F   24..         ADD     A,#(adcs & 0xff)
   \   0003A1   F582         MOV     DPL,A
   \   0003A3   E5..         MOV     A,?V0 + 5
   \   0003A5   34..         ADDC    A,#((adcs >> 8) & 0xff)
   \   0003A7   F583         MOV     DPH,A
   \   0003A9   78..         MOV     R0,#?V0 + 16
   \   0003AB   12....       LCALL   ?L_MOV_X
   \   0003AE   78..         MOV     R0,#?V0 + 16
   \   0003B0   12....       LCALL   ?L_TO_FLT
   \   0003B3   78..         MOV     R0,#?V0 + 12
   \   0003B5   79..         MOV     R1,#?V0 + 16
   \   0003B7   12....       LCALL   ?FLT_MUL
   \   0003BA   90....       MOV     DPTR,#??mV
   \   0003BD   78..         MOV     R0,#?V0 + 12
   \   0003BF   12....       LCALL   ?L_MOV_TO_X
   2156                      if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   0003C2   8E82         MOV     DPL,R6
   \   0003C4   8F83         MOV     DPH,R7
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   6003         JZ      $+5
   \   0003C9   02....       LJMP    ??computeADCs_0
   \   0003CC   85..82       MOV     DPL,?V0 + 0
   \   0003CF   85..83       MOV     DPH,?V0 + 1
   \   0003D2   E0           MOVX    A,@DPTR
   \   0003D3   6003         JZ      $+5
   \   0003D5   02....       LJMP    ??computeADCs_0
   2157          #ifdef MidString
   2158                      if( (i == 8) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
   \   0003D8   7408         MOV     A,#0x8
   \   0003DA   65..         XRL     A,?V0 + 8
   \   0003DC   600C         JZ      ??computeADCs_15
   2159                      if( (i == 7) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
   \   0003DE   7407         MOV     A,#0x7
   \   0003E0   65..         XRL     A,?V0 + 8
   \   0003E2   6006         JZ      ??computeADCs_15
   2160          #else
   2161                      if( i == 1 )  mV *= computeAdjustment( &page.tkPower );   // t - 25
   2162          #endif
   2163                      if( i == 2 )  mV *= computeAdjustment( &page.tkCurrent ); // t - 25
   \   0003E4   7402         MOV     A,#0x2
   \   0003E6   65..         XRL     A,?V0 + 8
   \   0003E8   7026         JNZ     ??computeADCs_16
   \                     ??computeADCs_15:
   \   0003EA   90....       MOV     DPTR,#??mV
   \   0003ED   78..         MOV     R0,#?V0 + 12
   \   0003EF   12....       LCALL   ?L_MOV_X
   \   0003F2                ; Setup parameters for call to function computeAdjustment
   \   0003F2   7A..         MOV     R2,#((page + 177) & 0xff)
   \   0003F4   7B..         MOV     R3,#(((page + 177) >> 8) & 0xff)
   \   0003F6   12....       LCALL   computeAdjustment
   \   0003F9   8A..         MOV     ?V0 + 16,R2
   \   0003FB   8B..         MOV     ?V0 + 17,R3
   \   0003FD   8C..         MOV     ?V0 + 18,R4
   \   0003FF   8D..         MOV     ?V0 + 19,R5
   \   000401   78..         MOV     R0,#?V0 + 12
   \   000403   79..         MOV     R1,#?V0 + 16
   \   000405   12....       LCALL   ?FLT_MUL
   \   000408   90....       MOV     DPTR,#??mV
   \   00040B   78..         MOV     R0,#?V0 + 12
   \   00040D   12....       LCALL   ?L_MOV_TO_X
   2164                      if( indices[ i ] == 0xFF ){ temp[i] = mV; continue; }
   \                     ??computeADCs_16:
   \   000410   E5..         MOV     A,?V0 + 4
   \   000412   24..         ADD     A,#(??temp & 0xff)
   \   000414   F8           MOV     R0,A
   \   000415   E5..         MOV     A,?V0 + 5
   \   000417   34..         ADDC    A,#((??temp >> 8) & 0xff)
   \   000419   F9           MOV     R1,A
   \   00041A   88..         MOV     ?V0 + 4,R0
   \   00041C   89..         MOV     ?V0 + 5,R1
   \   00041E   E5..         MOV     A,?V0 + 6
   \   000420   24..         ADD     A,#(indices & 0xff)
   \   000422   F582         MOV     DPL,A
   \   000424   E4           CLR     A
   \   000425   34..         ADDC    A,#((indices >> 8) & 0xff)
   \   000427   F583         MOV     DPH,A
   \   000429   E0           MOVX    A,@DPTR
   \   00042A   F5..         MOV     ?V0 + 6,A
   \   00042C   74FF         MOV     A,#-0x1
   \   00042E   65..         XRL     A,?V0 + 6
   \   000430   7014         JNZ     ??computeADCs_17
   \   000432   90....       MOV     DPTR,#??mV
   \   000435   78..         MOV     R0,#?V0 + 12
   \   000437   12....       LCALL   ?L_MOV_X
   \   00043A   85..82       MOV     DPL,?V0 + 4
   \   00043D   8983         MOV     DPH,R1
   \   00043F   78..         MOV     R0,#?V0 + 12
   \   000441   12....       LCALL   ?L_MOV_TO_X
   \   000444   8056         SJMP    ??computeADCs_18
   2165                      _coeff = page.linearK[  indices[i] ];
   \                     ??computeADCs_17:
   \   000446   75..00       MOV     ?V0 + 7,#0x0
   \   000449   7403         MOV     A,#0x3
   \   00044B   78..         MOV     R0,#?V0 + 6
   \   00044D   12....       LCALL   ?S_SHL
   \   000450   E5..         MOV     A,?V0 + 6
   \   000452   24..         ADD     A,#((page + 40) & 0xff)
   \   000454   F8           MOV     R0,A
   \   000455   E5..         MOV     A,?V0 + 7
   \   000457   34..         ADDC    A,#(((page + 40) >> 8) & 0xff)
   \   000459   F9           MOV     R1,A
   \   00045A   90....       MOV     DPTR,#_coeff
   \   00045D   12....       LCALL   ??Subroutine67_0
   2166                      temp[i] = lin_coeff( mV );
   \                     ??CrossCallReturnLabel_215:
   \   000460                ; Setup parameters for call to function lin_coeff
   \   000460   90....       MOV     DPTR,#??mV
   \   000463   78..         MOV     R0,#?V0 + 12
   \   000465   12....       LCALL   ?L_MOV_X
   \   000468   AA..         MOV     R2,?V0 + 12
   \   00046A   AB..         MOV     R3,?V0 + 13
   \   00046C   AC..         MOV     R4,?V0 + 14
   \   00046E   AD..         MOV     R5,?V0 + 15
   \   000470   12....       LCALL   lin_coeff
   \   000473   8A..         MOV     ?V0 + 12,R2
   \   000475   8B..         MOV     ?V0 + 13,R3
   \   000477   8C..         MOV     ?V0 + 14,R4
   \   000479   8D..         MOV     ?V0 + 15,R5
   \   00047B   85..82       MOV     DPL,?V0 + 4
   \   00047E   85..83       MOV     DPH,?V0 + 5
   \   000481   78..         MOV     R0,#?V0 + 12
   \   000483   12....       LCALL   ?L_MOV_TO_X
   2167                      if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \   000486   8E82         MOV     DPL,R6
   \   000488   8F83         MOV     DPH,R7
   \   00048A   E0           MOVX    A,@DPTR
   \   00048B   6003         JZ      $+5
   \   00048D   02....       LJMP    ??computeADCs_0
   \   000490   85..82       MOV     DPL,?V0 + 0
   \   000493   85..83       MOV     DPH,?V0 + 1
   \   000496   E0           MOVX    A,@DPTR
   \   000497   6003         JZ      $+5
   \   000499   02....       LJMP    ??computeADCs_0
   2168                  }
   \                     ??computeADCs_18:
   \   00049C   05..         INC     ?V0 + 8
   \   00049E   E5..         MOV     A,?V0 + 8
   \   0004A0   C3           CLR     C
   \   0004A1   9409         SUBB    A,#0x9
   \   0004A3   5003         JNC     $+5
   \   0004A5   02....       LJMP    ??computeADCs_14
   2169          
   2170              //temp[ 1 ] *= vref * invVref0;               // power correction
   2171              // crosstalk   Istr
   2172          
   2173              //temp[ 0 ] -= mult( temp[2]*0.0001,  page.shunt );                  // Vout
   2174              //                  Power           Vin
   2175              //temp[ 5 ] += mult( temp[1]/temp[5], page.shunt );      // Vin
   2176              
   2177              #ifdef MidString    
   2178                  adcs16[ 0 ] = convU( temp[ 0 ] ); // temp[ 0 ] ); 
   \   0004A8                ; Setup parameters for call to function convU
   \   0004A8   90....       MOV     DPTR,#??temp
   \   0004AB   78..         MOV     R0,#?V0 + 4
   \   0004AD   12....       LCALL   ?L_MOV_X
   \   0004B0   AA..         MOV     R2,?V0 + 4
   \   0004B2   AB..         MOV     R3,?V0 + 5
   \   0004B4   AC..         MOV     R4,?V0 + 6
   \   0004B6   AD..         MOV     R5,?V0 + 7
   \   0004B8   12....       LCALL   convU
   \   0004BB   90....       MOV     DPTR,#adcs16
   \   0004BE   12....       LCALL   ??Subroutine114_0
   2179                  adcs16[ 1 ] = convU( temp[ 1 ] ); // temp[ 1 ] ); 
   \                     ??CrossCallReturnLabel_359:
   \   0004C1                ; Setup parameters for call to function convU
   \   0004C1   90....       MOV     DPTR,#(??temp + 4)
   \   0004C4   78..         MOV     R0,#?V0 + 4
   \   0004C6   12....       LCALL   ?L_MOV_X
   \   0004C9   AA..         MOV     R2,?V0 + 4
   \   0004CB   AB..         MOV     R3,?V0 + 5
   \   0004CD   AC..         MOV     R4,?V0 + 6
   \   0004CF   AD..         MOV     R5,?V0 + 7
   \   0004D1   12....       LCALL   convU
   \   0004D4   90....       MOV     DPTR,#(adcs16 + 2)
   \   0004D7   12....       LCALL   ?Subroutine3
   2180                  if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_6:
   \   0004DA   7005         JNZ     ??computeADCs_19
   \   0004DC   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_26:
   \   0004DF   6003         JZ      ??computeADCs_20
   \                     ??computeADCs_19:
   \   0004E1   02....       LJMP    ??computeADCs_0
   2181                  adcs16[ 3 ] = convU( temp[ 5 ] ); // temp[ 5 ] );
   \                     ??computeADCs_20:
   \   0004E4                ; Setup parameters for call to function convU
   \   0004E4   90....       MOV     DPTR,#(??temp + 20)
   \   0004E7   78..         MOV     R0,#?V0 + 4
   \   0004E9   12....       LCALL   ?L_MOV_X
   \   0004EC   AA..         MOV     R2,?V0 + 4
   \   0004EE   AB..         MOV     R3,?V0 + 5
   \   0004F0   AC..         MOV     R4,?V0 + 6
   \   0004F2   AD..         MOV     R5,?V0 + 7
   \   0004F4   12....       LCALL   convU
   \   0004F7   90....       MOV     DPTR,#(adcs16 + 6)
   \   0004FA   12....       LCALL   ??Subroutine114_0
   2182                  adcs16[ 5 ] = convS( temp[ 8 ] ); // Iin2 
   \                     ??CrossCallReturnLabel_360:
   \   0004FD                ; Setup parameters for call to function convS
   \   0004FD   90....       MOV     DPTR,#(??temp + 32)
   \   000500   78..         MOV     R0,#?V0 + 4
   \   000502   12....       LCALL   ?L_MOV_X
   \   000505   AA..         MOV     R2,?V0 + 4
   \   000507   AB..         MOV     R3,?V0 + 5
   \   000509   AC..         MOV     R4,?V0 + 6
   \   00050B   AD..         MOV     R5,?V0 + 7
   \   00050D   12....       LCALL   convS
   \   000510   90....       MOV     DPTR,#(adcs16 + 10)
   \   000513   12....       LCALL   ??Subroutine114_0
   2183                  //adcs16[ 7 ] = (INT16)(adcs[7]+adcs[3]);  //temp.debug stuff
   2184                  adcs16[ 6 ] = convS( temp[ 7 ] );
   \                     ??CrossCallReturnLabel_361:
   \   000516                ; Setup parameters for call to function convS
   \   000516   90....       MOV     DPTR,#(??temp + 28)
   \   000519   78..         MOV     R0,#?V0 + 4
   \   00051B   12....       LCALL   ?L_MOV_X
   \   00051E   AA..         MOV     R2,?V0 + 4
   \   000520   AB..         MOV     R3,?V0 + 5
   \   000522   AC..         MOV     R4,?V0 + 6
   \   000524   AD..         MOV     R5,?V0 + 7
   \   000526   12....       LCALL   convS
   \   000529   90....       MOV     DPTR,#(adcs16 + 12)
   \   00052C   12....       LCALL   ??Subroutine114_0
   2185              #else
   2186                  adcs16[ 0 ] = convU( temp[ 0 ] - mult( temp[2]*0.0001,  page.shunt ) ); //temp[ 0 ] ); 
   2187                  adcs16[ 1 ] = convU( temp[ 1 ] *= vref * invVref0 );   //temp[ 1 ] ); 
   2188                  adcs16[ 3 ] = convU( temp[ 5 ] + mult( temp[1]/temp[5], page.shunt ) );// temp[ 5 ] );
   2189              #endif    
   2190              adcs16[ 2 ] = convS( temp[ 2 ] );
   \                     ??CrossCallReturnLabel_362:
   \   00052F                ; Setup parameters for call to function convS
   \   00052F   90....       MOV     DPTR,#(??temp + 8)
   \   000532   78..         MOV     R0,#?V0 + 4
   \   000534   12....       LCALL   ?L_MOV_X
   \   000537   AA..         MOV     R2,?V0 + 4
   \   000539   AB..         MOV     R3,?V0 + 5
   \   00053B   AC..         MOV     R4,?V0 + 6
   \   00053D   AD..         MOV     R5,?V0 + 7
   \   00053F   12....       LCALL   convS
   \   000542   90....       MOV     DPTR,#(adcs16 + 4)
   \   000545   12....       LCALL   ?Subroutine3
   2191              
   2192              //adcs16[ 6 ] = (UINT16)adcs[ EXT_GND ];
   2193              if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
   \                     ??CrossCallReturnLabel_7:
   \   000548   7097         JNZ     ??computeADCs_19
   \   00054A   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_27:
   \   00054D   6003         JZ      $+5
   \   00054F   02....       LJMP    ??computeADCs_0
   2194              
   2195              if( accumulateEnergy ){    
   \   000552   E5..         MOV     A,?V0 + 3
   \   000554   6003         JZ      ??computeADCs_2
   2196                  //static BYTE _history = 0;
   2197                  checkVin();
   \   000556                ; Setup parameters for call to function checkVin
   \   000556   12....       LCALL   checkVin
   \                     ??computeADCs_2:
   \   000559   7F18         MOV     R7,#0x18
   \   00055B   02....       LJMP    ?FUNC_LEAVE_XDATA
   2198                  /*_history <<= 1; 
   2199                  if( ((INT16)adcs16[ 2 ]) > 15000 ){ //page.cur_noise ){ 
   2200                      deltaEnergy += (double) ( temp[2] * temp[0] * KE ); // W*h
   2201                      _history |= 1;
   2202                  }else{
   2203                      if( _history == 0xFE ){
   2204                          //BYTE *ptr = nextSlot();
   2205                          energy += deltaEnergy; 
   2206                          zerofill( (BYTE *)&deltaEnergy, 4 ); 
   2207                          //if(      ptr > ENERGY_WRITE_LIMIT ) savePB();
   2208                          //else if( ptr ) initiateTransfer( (BYTE *)&energy, ptr, 4 );
   2209                      }
   2210                  }*/
   2211              }
   2212          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   08           INC     R0
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   88..         MOV     ?V0 + 0,R0
   \   00000E   89..         MOV     ?V0 + 1,R1
   \   000010   8882         MOV     DPL,R0
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#flags
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2401         ADD     A,#0x1
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??acc:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??df:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??mV:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??rOff:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??temp:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
   2213          //______________________________________________________________________________________________________________________________
   2214          //BOOL checkPage( BYTE val ){ return val && val != 0x1F && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ); }
   2215          //______________________________________________________________________________________________________________________________
   2216          /******************************************************************************
   2217          * @fn  setByte
   2218          * @brief       set the byte value to register
   2219          * Parameters:  byte reg - register, byte val - value
   2220          * @return      void
   2221          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2222          void setByte( BYTE reg, BYTE val ){
   \                     setByte:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   2223          BYTE *ptr; BYTE *pptr = (BYTE *)&page;
   \   000007   7C..         MOV     R4,#(page & 0xff)
   \   000009   7D..         MOV     R5,#((page >> 8) & 0xff)
   2224              /*
   2225              if(page.isRelay && !page.is500Always ) switch(reg){
   2226                  case SET_CUR_CHANNEL: case SET_CHANNEL:     case RADIO_POWER:
   2227                  case IS_RELAY:        case IS_500_ALWAYS:   case REPEATER_POWER:
   2228                      tickWait( 3+2*TICKS_IN_MS );  // give repeater chance to finish transmission
   2229                  break;
   2230              }*/
   2231              switch(reg){
   \   00000B   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   54C0         ANL     A,#0xc0
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   8982         MOV     DPL,R1
   \   000015   8582..       MOV     ?V0 + 0,DPL
   \   000018   75..00       MOV     ?V0 + 1,#0x0
   \   00001B   E9           MOV     A,R1
   \   00001C   24..         ADD     A,#(page & 0xff)
   \   00001E   FE           MOV     R6,A
   \   00001F   E4           CLR     A
   \   000020   34..         ADDC    A,#((page >> 8) & 0xff)
   \   000022   FF           MOV     R7,A
   \   000023   E9           MOV     A,R1
   \   000024   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for setByte>_0`:
   \   000027   07           DB        7
   \   000028   10           DB        16
   \   000029   15           DB        21
   \   00002A   ....         DW        ??setByte_0
   \   00002C   2E           DB        46
   \   00002D   30           DB        48
   \   00002E   ....         DW        ??setByte_1
   \   000030   3D           DB        61
   \   000031   46           DB        70
   \   000032   ....         DW        ??setByte_2
   \   000034   49           DB        73
   \   000035   4E           DB        78
   \   000036   ....         DW        ??setByte_2
   \   000038   4F           DB        79
   \   000039   51           DB        81
   \   00003A   ....         DW        ??CrossCallReturnLabel_85
   \   00003C   55           DB        85
   \   00003D   56           DB        86
   \   00003E   ....         DW        ??setByte_3
   \   000040   57           DB        87
   \   000041   58           DB        88
   \   000042   ....         DW        ??setByte_4
   \   000044   28           DB        40
   \   000045   01           DB        1
   \   000046   ....         DW        ??setByte_5
   \   000048   04           DB        4
   \   000049   ....         DW        ??setByte_6
   \   00004B   05           DB        5
   \   00004C   ....         DW        ??setByte_7
   \   00004E   0B           DB        11
   \   00004F   ....         DW        ??setByte_8
   \   000051   0C           DB        12
   \   000052   ....         DW        ??setByte_9
   \   000054   0D           DB        13
   \   000055   ....         DW        ??setByte_10
   \   000057   0E           DB        14
   \   000058   ....         DW        ??setByte_11
   \   00005A   16           DB        22
   \   00005B   ....         DW        ??setByte_12
   \   00005D   17           DB        23
   \   00005E   ....         DW        ??setByte_13
   \   000060   1A           DB        26
   \   000061   ....         DW        ??setByte_14
   \   000063   1C           DB        28
   \   000064   ....         DW        ??setByte_15
   \   000066   1D           DB        29
   \   000067   ....         DW        ??setByte_16
   \   000069   1F           DB        31
   \   00006A   ....         DW        ??setByte_17
   \   00006C   20           DB        32
   \   00006D   ....         DW        ??setByte_18
   \   00006F   21           DB        33
   \   000070   ....         DW        ??setByte_19
   \   000072   23           DB        35
   \   000073   ....         DW        ??setByte_20
   \   000075   25           DB        37
   \   000076   ....         DW        ??setByte_21
   \   000078   28           DB        40
   \   000079   ....         DW        ??setByte_22
   \   00007B   29           DB        41
   \   00007C   ....         DW        ??setByte_23
   \   00007E   2A           DB        42
   \   00007F   ....         DW        ??setByte_24
   \   000081   2B           DB        43
   \   000082   ....         DW        ??setByte_25
   \   000084   2C           DB        44
   \   000085   ....         DW        ??setByte_26
   \   000087   2D           DB        45
   \   000088   ....         DW        ??setByte_27
   \   00008A   31           DB        49
   \   00008B   ....         DW        ??setByte_28
   \   00008D   33           DB        51
   \   00008E   ....         DW        ??setByte_29
   \   000090   35           DB        53
   \   000091   ....         DW        ??setByte_30
   \   000093   36           DB        54
   \   000094   ....         DW        ??setByte_31
   \   000096   38           DB        56
   \   000097   ....         DW        ??setByte_32
   \   000099   39           DB        57
   \   00009A   ....         DW        ??setByte_33
   \   00009C   3A           DB        58
   \   00009D   ....         DW        ??setByte_34
   \   00009F   3B           DB        59
   \   0000A0   ....         DW        ??setByte_35
   \   0000A2   52           DB        82
   \   0000A3   ....         DW        ??setByte_36
   \   0000A5   5C           DB        92
   \   0000A6   ....         DW        ??setByte_37
   \   0000A8   5D           DB        93
   \   0000A9   ....         DW        ??setByte_38
   \   0000AB   5E           DB        94
   \   0000AC   ....         DW        ??setByte_39
   \   0000AE   5F           DB        95
   \   0000AF   ....         DW        ??setByte_40
   \   0000B1   60           DB        96
   \   0000B2   ....         DW        ??setByte_41
   \   0000B4   61           DB        97
   \   0000B5   ....         DW        ??setByte_42
   \   0000B7   64           DB        100
   \   0000B8   ....         DW        ??setByte_43
   \   0000BA   71           DB        113
   \   0000BB   ....         DW        ??setByte_44
   \   0000BD   ....         DW        ??setByte_45
   2232                  case MPP:  /* MPP on (1) / off (0) */
   2233                      if( val > 1 )
   \                     ??setByte_6:
   \   0000BF   EA           MOV     A,R2
   \   0000C0   C3           CLR     C
   \   0000C1   9402         SUBB    A,#0x2
   \   0000C3   4003         JC      $+5
   \   0000C5   02....       LJMP    ??setByte_45
   2234                        break;
   2235                      if ((ProtectionLimitsExceeded & VoutAndIoutLimitMask) != 0)
   \   0000C8   E5..         MOV     A,?V0 + 3
   \   0000CA   6003         JZ      $+5
   \   0000CC   02....       LJMP    ??setByte_45
   2236                        break;
   2237                      if( val )
   \   0000CF   EA           MOV     A,R2
   \   0000D0   6038         JZ      ??setByte_46
   2238                        P1_3 = 1;
   \   0000D2   D293         SETB    0x90.3
   2239                      else 
   2240                        P1_3 = 0;
   2241                      if( val )
   2242                      { 
   2243                        atomicChange( BypassMode, 0 ); // do not need that delayed mpp off anymore
   \   0000D4   12....       LCALL   ?Subroutine17
   \                     ??CrossCallReturnLabel_49:
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E4           CLR     A
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   F0           MOVX    @DPTR,A
   2244                        if( turnOnFlag || ticks[ TurnOn ] )
   \   0000DD   90....       MOV     DPTR,#turnOnFlag
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   7012         JNZ     ??setByte_47
   \   0000E3   90....       MOV     DPTR,#ticks
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   2414         ADD     A,#0x14
   \   0000E9   12....       LCALL   ?Subroutine54
   \                     ??CrossCallReturnLabel_138:
   \   0000EC   7002         JNZ     ??setByte_48
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \                     ??setByte_48:
   \   0000F0   7003         JNZ     $+5
   \   0000F2   02....       LJMP    ??setByte_45
   2245                        {
   2246                          ov_startup();
   \                     ??setByte_47:
   \   0000F5                ; Setup parameters for call to function ov_startup
   \   0000F5   12....       LCALL   ov_startup
   2247                          turnOnFlag = FALSE; 
   \   0000F8   E4           CLR     A
   \   0000F9   90....       MOV     DPTR,#turnOnFlag
   \   0000FC   12....       LCALL   ?Subroutine76
   2248                          ticks[ TurnOn ] = 0; } 
   \                     ??CrossCallReturnLabel_247:
   \   0000FF   2414         ADD     A,#0x14
   \                     ??setByte_49:
   \   000101   12....       LCALL   ?Subroutine55
   \                     ??CrossCallReturnLabel_148:
   \   000104   E4           CLR     A
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A3           INC     DPTR
   \   000107   02....       LJMP    ??setByte_50
   2249                      }
   \                     ??setByte_46:
   \   00010A   C293         CLR     0x90.3
   \   00010C   02....       LJMP    ??setByte_45
   2250                      break;
   2251                      
   2252                  case MODULE: /* Module on (1) / off (0) */
   2253                      if( val > 1 ) 
   \                     ??setByte_7:
   \   00010F   EA           MOV     A,R2
   \   000110   C3           CLR     C
   \   000111   9402         SUBB    A,#0x2
   \   000113   4003         JC      $+5
   \   000115   02....       LJMP    ??setByte_45
   2254                        break;
   2255                      if ((ProtectionLimitsExceeded & VoutAndIoutLimitMask) != 0)
   \   000118   E5..         MOV     A,?V0 + 3
   \   00011A   6003         JZ      $+5
   \   00011C   02....       LJMP    ??setByte_45
   2256                        break;            
   2257                      if (val == 1) // If Module on, then set FET failure check appropriately
   \   00011F   7401         MOV     A,#0x1
   \   000121   65..         XRL     A,?V0 + 2
   \   000123   702A         JNZ     ??setByte_51
   2258                      {
   2259                        *ModuleOffRememberedPtr = ModuleStatusCanTurnOn; // Module On command resets this
   \   000125   E4           CLR     A
   \   000126   90FFFD       MOV     DPTR,#-0x3
   \   000129   F0           MOVX    @DPTR,A
   2260                        ProtectionLimitsExceeded = NoProtectionsSetMask;
   \   00012A   90....       MOV     DPTR,#ProtectionLimitsExceeded
   \   00012D   F0           MOVX    @DPTR,A
   2261                        fetFailure = FALSE; // Module On command resets this
   \   00012E   90....       MOV     DPTR,#fetFailure
   \   000131   F0           MOVX    @DPTR,A
   2262                        netValue = MainNetValueStandard;  // Set base value back for main image
   \   000132   90....       MOV     DPTR,#netValue
   \   000135   7432         MOV     A,#0x32
   \   000137   12....       LCALL   ?Subroutine119
   2263                        if (page.fetFailureCount != 0)
   \                     ??CrossCallReturnLabel_414:
   \   00013A   90....       MOV     DPTR,#(page + 128)
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   7002         JNZ     ??setByte_52
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \                     ??setByte_52:
   \   000142   6008         JZ      ??setByte_53
   2264                          checkForFETFailure = TRUE; // Re-enable check
   \   000144   7401         MOV     A,#0x1
   \                     ??setByte_54:
   \   000146   90....       MOV     DPTR,#checkForFETFailure
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   8006         SJMP    ??setByte_55
   2265                        else
   2266                          checkForFETFailure = FALSE; // PB indicates don't check
   \                     ??setByte_53:
   \   00014C   E4           CLR     A
   \   00014D   80F7         SJMP    ??setByte_54
   2267                      }
   2268                      if( val && ((P1 & 0x18)==0) )
   \                     ??setByte_51:
   \   00014F   EA           MOV     A,R2
   \   000150   6011         JZ      ??setByte_56
   \                     ??setByte_55:
   \   000152   7418         MOV     A,#0x18
   \   000154   5590         ANL     A,0x90
   \   000156   7015         JNZ     ??setByte_57
   2269                      { 
   2270                        P1_3 = 1; 
   \   000158   D293         SETB    0x90.3
   2271                        ov_startup(); /*P1 |= 0x18;*/ 
   \   00015A                ; Setup parameters for call to function ov_startup
   \   00015A   12....       LCALL   ov_startup
   2272                        atomicChange( BypassMode, TICKS_IN_SEC );
   \   00015D   12....       LCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_35:
   \   000160   02....       LJMP    ??setByte_50
   2273                      } // bypass mode with delay
   2274                      else 
   2275                      { 
   2276                        if( val )
   2277                        { 
   2278                          if( P1_4 == 0 ) 
   2279                            ov_startup(); 
   2280                        }
   2281                        else 
   2282                        { 
   2283                          P1_4 = 0; 
   \                     ??setByte_56:
   \   000163   C294         CLR     0x90.4
   2284                          *ModuleOffRememberedPtr = ModuleStatusOff; 
   \   000165   74E7         MOV     A,#-0x19
   \   000167   90FFFD       MOV     DPTR,#-0x3
   \   00016A   02....       LJMP    ??setByte_50
   2285                        } 
   \                     ??setByte_57:
   \   00016D   A294         MOV     C,0x90.4
   \   00016F   5003         JNC     $+5
   \   000171   02....       LJMP    ??setByte_45
   \   000174                ; Setup parameters for call to function ov_startup
   \   000174   12....       LCALL   ov_startup
   \   000177   02....       LJMP    ??setByte_45
   2286                      }
   2287                      break;
   2288                      
   2289                  case SET_T3CH0:  
   2290                      //if( !page.fuseOVOC ){ 
   2291                          T3CC0 = val;                                      
   \                     ??setByte_12:
   \   00017A   85..CD       MOV     0xcd,?V0 + 2
   \   00017D   02....       LJMP    ??setByte_45
   2292                      //}
   2293                  break;
   2294                  
   2295                  case SET_T3CH1:
   2296                    //if( !page.fuseOVOC ){
   2297                        T3CC1 = oc2timer( theOC = ( setOC = val ) ); 
   \                     ??setByte_13:
   \   000180   EA           MOV     A,R2
   \   000181   90....       MOV     DPTR,#setOC
   \   000184   F0           MOVX    @DPTR,A
   \   000185   12....       LCALL   ?Subroutine71
   \                     ??CrossCallReturnLabel_228:
   \   000188   02....       LJMP    ??setByte_45
   2298                        // 06/29/2017 -- added next 4 lines
   2299                        /*
   2300          #ifdef MidString
   2301                        ocLimit1 = FALSE;
   2302                        ocLimit2 = FALSE;
   2303          #endif
   2304                        */
   2305          //              #ifdef MidString
   2306          //              compute98();
   2307          //              #endif
   2308                    //}
   2309                  break;
   2310          
   2311                  case MAC0: case MAC1: case MAC2: case MAC3: case MAC4: case MAC5:   page.myMac[ reg-MAC0 ] = val;         break;
   \                     ??setByte_0:
   \   00018B   EE           MOV     A,R6
   \   00018C   24F6         ADD     A,#-0xa
   \   00018E   F582         MOV     DPL,A
   \   000190   EF           MOV     A,R7
   \   000191   34FF         ADDC    A,#-0x1
   \                     ??setByte_58:
   \   000193   F583         MOV     DPH,A
   \   000195   EA           MOV     A,R2
   \   000196   02....       LJMP    ??setByte_50
   2312                  /*
   2313                  case SET_CUR_CHANNEL:
   2314                      if( !page.is500Always && (cyclesTo500 < 200) ){ RFST = STROBE_IDLE; curChannel = CHANNR = val;  }
   2315                  break;
   2316                  */
   2317                  case SET_CHANNEL:    
   2318                      page.channel = val;  setup_hopper( page.channel );   
   \                     ??setByte_14:
   \   000199   EA           MOV     A,R2
   \   00019A   90....       MOV     DPTR,#(page + 164)
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E                ; Setup parameters for call to function setup_hopper
   \   00019E   F9           MOV     R1,A
   \   00019F   12....       LCALL   setup_hopper
   2319                      if( !page.is500Always ){
   \   0001A2   90....       MOV     DPTR,#(page + 194)
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001A8   4025         JC      ??setByte_9
   2320                          //P1_1 ^= 1;
   2321                          curChannel = CHANNR = page.channel;
   \   0001AA   90....       MOV     DPTR,#(page + 164)
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   90DF06       MOV     DPTR,#-0x20fa
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   12....       LCALL   ?Subroutine2
   2322                          ticks[ Hop ] = 0; 
   2323                          cycles2Step10Channel = cyclesTo500 = 300;
   \                     ??CrossCallReturnLabel_1:
   \   0001B5   90....       MOV     DPTR,#cyclesTo500
   \   0001B8   742C         MOV     A,#0x2c
   \   0001BA   F0           MOVX    @DPTR,A
   \   0001BB   A3           INC     DPTR
   \   0001BC   7401         MOV     A,#0x1
   \   0001BE   F0           MOVX    @DPTR,A
   \   0001BF   90....       MOV     DPTR,#cycles2Step10Channel
   \   0001C2   742C         MOV     A,#0x2c
   \   0001C4   F0           MOVX    @DPTR,A
   \   0001C5   A3           INC     DPTR
   \   0001C6   7401         MOV     A,#0x1
   \   0001C8   F0           MOVX    @DPTR,A
   2324                          RFST = STROBE_IDLE; 
   \   0001C9   75E104       MOV     0xe1,#0x4
   2325                          softKick(); 
   \   0001CC                ; Setup parameters for call to function softKick
   \   0001CC   12....       LCALL   softKick
   2326                      }
   2327                  case RANDOMIZE:
   2328                      RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
   \                     ??setByte_9:
   \   0001CF   12....       LCALL   ?Subroutine28
   \                     ??CrossCallReturnLabel_74:
   \   0001D2   02....       LJMP    ??setByte_45
   2329                      //srand( page.myMac[4]*256 + page.myMac[5] ); 
   2330                  break;
   2331          
   2332                  case FLASH_REFRESH2:   refreshTheFlash();   break;
   \                     ??setByte_8:
   \   0001D5                ; Setup parameters for call to function refreshTheFlash
   \   0001D5   12....       LCALL   refreshTheFlash
   \   0001D8   02....       LJMP    ??setByte_45
   2333            
   2334                  //case FUSE_Comm:  page.fuseComm = 1; savePB();   break;
   2335                  //case FUSE_OVOC:  if( !page.fuseOVOC ){ page.fuseOVOC = 1; page.ov = T3CC0; page.oc = setOC; savePB(); }  break;
   2336          
   2337                  case FLASH_AVAILABLE: 
   2338                      page.mpp    = P1_3;
   \                     ??setByte_15:
   \   0001DB   A293         MOV     C,0x90.3
   \   0001DD   E4           CLR     A
   \   0001DE   92E0         MOV     0xE0 /* A   */.0,C
   \   0001E0   90....       MOV     DPTR,#(page + 185)
   \   0001E3   F0           MOVX    @DPTR,A
   2339                      page.module = P1_4;
   \   0001E4   A294         MOV     C,0x90.4
   \   0001E6   E4           CLR     A
   \   0001E7   92E0         MOV     0xE0 /* A   */.0,C
   \   0001E9   90....       MOV     DPTR,#(page + 186)
   \   0001EC   F0           MOVX    @DPTR,A
   2340                      //if( !page.fuseOVOC ){ page.ov = T3CC0; page.oc = setOC; }
   2341                      page.ov = T3CC0; page.oc = setOC;
   \   0001ED   E5CD         MOV     A,0xcd
   \   0001EF   90....       MOV     DPTR,#(page + 187)
   \   0001F2   F0           MOVX    @DPTR,A
   \   0001F3   90....       MOV     DPTR,#setOC
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   90....       MOV     DPTR,#(page + 188)
   \   0001FA   F0           MOVX    @DPTR,A
   2342                      // go through
   2343                  case COEFFICIENTS_AVAILABLE:  
   2344                      savePB();
   \                     ??setByte_19:
   \   0001FB                ; Setup parameters for call to function savePB
   \   0001FB   12....       LCALL   savePB
   \   0001FE   02....       LJMP    ??setByte_45
   2345                  break;
   2346                  /*
   2347                  case CW_MODE:   
   2348                      //HAL_INT_ENABLE(INUM_RF,  INT_OFF);    // Disable RF general interrupt
   2349                      real_cw_mode = TRUE;
   2350                      //ticks[ SendData ] = 1; ticks[ ReceiveData ] = 0;
   2351                  break;
   2352                  */
   2353                  //case RESTART_MEASUREMENT:   bufferCount = 0; adcCount = 0xFF; tempAdcsCount = 0; enable2SendData = FALSE;    break;
   2354                  case DISSOLVE_NETWORK:      
   2355                    RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
   \                     ??setByte_17:
   \   000201   12....       LCALL   ?Subroutine28
   2356                    //srand( page.myMac[4]*256 + page.myMac[5] );
   2357                    page.netId = page.myBunch =  0xFF;  
   \                     ??CrossCallReturnLabel_75:
   \   000204   74FF         MOV     A,#-0x1
   \   000206   90....       MOV     DPTR,#(page + 3)
   \   000209   F0           MOVX    @DPTR,A
   \   00020A   90....       MOV     DPTR,#(page + 2)
   \   00020D   12....       LCALL   ?Subroutine76
   2358                    //savePB();
   2359                    //maxBunch = 0;  
   2360                    ticks[ DelayedPrepareData ] = 0; ticks[ SendData ] = 0; 
   \                     ??CrossCallReturnLabel_248:
   \   000210   241A         ADD     A,#0x1a
   \   000212   12....       LCALL   ??Subroutine2_1
   \                     ??CrossCallReturnLabel_5:
   \   000215   12....       LCALL   ?Subroutine30
   \                     ??CrossCallReturnLabel_77:
   \   000218   02....       LJMP    ??CrossCallReturnLabel_148
   2361                  break;
   2362          
   2363                  case CALIBRATION_FROM_FLASH:   pptr = (BYTE *)PAGEADDR; //0x400;        /* go through */
   \                     ??setByte_33:
   \   00021B   7C00         MOV     R4,#0x0
   \   00021D   7D5C         MOV     R5,#0x5c
   2364                  case REPORT_SCALING:   
   2365                    if( !reportScaling ){
   \                     ??setByte_18:
   \   00021F   90....       MOV     DPTR,#reportScaling
   \   000222   E0           MOVX    A,@DPTR
   \   000223   6003         JZ      $+5
   \   000225   02....       LJMP    ??setByte_45
   2366                          if( base_ptr==NULL ){
   \   000228   90....       MOV     DPTR,#base_ptr
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   7002         JNZ     ??setByte_59
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \                     ??setByte_59:
   \   000230   7018         JNZ     ??setByte_60
   2367                              base_ptr = pptr; //(BYTE *)&page;
   \   000232   EC           MOV     A,R4
   \   000233   F8           MOV     R0,A
   \   000234   ED           MOV     A,R5
   \   000235   F9           MOV     R1,A
   \   000236   90....       MOV     DPTR,#base_ptr
   \   000239   12....       LCALL   ??Subroutine67_0
   2368                              reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
   \                     ??CrossCallReturnLabel_216:
   \   00023C   75F00A       MOV     B,#0xa
   \   00023F   90....       MOV     DPTR,#calibrationRepeat
   \   000242   E0           MOVX    A,@DPTR
   \                     ??setByte_61:
   \   000243   A4           MUL     AB
   \   000244   90....       MOV     DPTR,#reportScaling
   \   000247   02....       LJMP    ??setByte_50
   2369                          }else reportScaling    = val * calibrationRepeat;
   \                     ??setByte_60:
   \   00024A   90....       MOV     DPTR,#calibrationRepeat
   \   00024D   E0           MOVX    A,@DPTR
   \   00024E   C0E0         PUSH    A
   \   000250   EA           MOV     A,R2
   \   000251   F5F0         MOV     B,A
   \   000253   D0E0         POP     A
   \   000255   80EC         SJMP    ??setByte_61
   2370                    }
   2371                  break;
   2372                  case READ_COEFFICIENTS: reportScaling = val; base_ptr = coefficients_buffer; if( reportScaling == 0 ) reportScaling = 1; break;
   \                     ??setByte_44:
   \   000257   EA           MOV     A,R2
   \   000258   90....       MOV     DPTR,#reportScaling
   \   00025B   F0           MOVX    @DPTR,A
   \   00025C   90....       MOV     DPTR,#base_ptr
   \   00025F   74..         MOV     A,#(coefficients_buffer & 0xff)
   \   000261   F0           MOVX    @DPTR,A
   \   000262   A3           INC     DPTR
   \   000263   74..         MOV     A,#((coefficients_buffer >> 8) & 0xff)
   \   000265   F0           MOVX    @DPTR,A
   \   000266   90....       MOV     DPTR,#reportScaling
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   6003         JZ      $+5
   \   00026C   02....       LJMP    ??setByte_45
   \   00026F   7401         MOV     A,#0x1
   \   000271   02....       LJMP    ??setByte_50
   2373          
   2374                  //case CHECK_FLASH:            reportFlashCheck = calibrationRepeat*5 + 1; /* 5*4-1 */;    break;
   2375                  
   2376                  case RADIO_POWER: page.radioPower = val;      PA_TABLE0 = val;  break;
   \                     ??setByte_20:
   \   000274   EA           MOV     A,R2
   \   000275   90....       MOV     DPTR,#(page + 189)
   \   000278   F0           MOVX    @DPTR,A
   \   000279   90DF2E       MOV     DPTR,#-0x20d2
   \   00027C   02....       LJMP    ??setByte_50
   2377                  
   2378          //        case PRODUCTION:       page.production = val;                   break;
   2379                  case ENSURE_WD_RESET:  page.ensureWDReset = val;                break;
   \                     ??setByte_21:
   \   00027F   90....       MOV     DPTR,#(page + 194)
   \   000282   EA           MOV     A,R2
   \   000283   A2E0         MOV     C,0xE0 /* A   */.0
   \   000285   E0           MOVX    A,@DPTR
   \   000286   92E1         MOV     0xE0 /* A   */.1,C
   \   000288   02....       LJMP    ??setByte_50
   2380                  //case USE_12_kBod:   
   2381                  //  page.use12kbod = val;  
   2382                    //savePB();
   2383                    //tickWait(8*TICKS_IN_MS); 
   2384                  //  softKick(); 
   2385                  //break; /* write to flash as well */
   2386                  
   2387                  //case USE_FEC:          page.useFEC = val;     if( page.useFEC ) MDMCFG1 |= 0x80; else MDMCFG1 &= 0x7F;     break;
   2388                  case ENABLE_HOPPING:   page.hoppingAllowed  = val; break;     
   \                     ??setByte_22:
   \   00028B   90....       MOV     DPTR,#(page + 194)
   \   00028E   EA           MOV     A,R2
   \   00028F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000291   E0           MOVX    A,@DPTR
   \   000292   92E4         MOV     0xE0 /* A   */.4,C
   \   000294   02....       LJMP    ??setByte_50
   2389                  case REPEATER_CHANNEL: page.repeaterChannel = val; break;     
   \                     ??setByte_25:
   \   000297   EA           MOV     A,R2
   \   000298   90....       MOV     DPTR,#(page + 192)
   \   00029B   02....       LJMP    ??setByte_50
   2390                  case IS_RELAY:         page.isRelay = val;   
   \                     ??setByte_23:
   \   00029E   90....       MOV     DPTR,#(page + 194)
   \   0002A1   EA           MOV     A,R2
   \   0002A2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   92E5         MOV     0xE0 /* A   */.5,C
   \   0002A7   F0           MOVX    @DPTR,A
   2391                                         if( !val ) setupRadio( curChannel );     
   \   0002A8   EA           MOV     A,R2
   \   0002A9   6003         JZ      $+5
   \   0002AB   02....       LJMP    ??setByte_45
   \                     ??setByte_62:
   \   0002AE                ; Setup parameters for call to function setupRadio
   \   0002AE   90....       MOV     DPTR,#curChannel
   \                     ??setByte_63:
   \   0002B1   12....       LCALL   ??Subroutine51_0
   \                     ??CrossCallReturnLabel_131:
   \   0002B4   02....       LJMP    ??setByte_45
   2392                  break;   
   2393                  case USE250:           page.use250kbod = val; 
   \                     ??setByte_35:
   \   0002B7   90....       MOV     DPTR,#(page + 219)
   \   0002BA   EA           MOV     A,R2
   \   0002BB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   92E1         MOV     0xE0 /* A   */.1,C
   \   0002C0   F0           MOVX    @DPTR,A
   2394                                         // go through
   2395                  case IS_500_ALWAYS:    
   2396                      if( reg == IS_500_ALWAYS ) page.is500Always = val;     
   \                     ??setByte_24:
   \   0002C1   742A         MOV     A,#0x2a
   \   0002C3   69           XRL     A,R1
   \   0002C4   700A         JNZ     ??setByte_64
   \   0002C6   90....       MOV     DPTR,#(page + 194)
   \   0002C9   EA           MOV     A,R2
   \   0002CA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002CC   E0           MOVX    A,@DPTR
   \   0002CD   92E6         MOV     0xE0 /* A   */.6,C
   \   0002CF   F0           MOVX    @DPTR,A
   2397                      if( page.is500Always ){ 
   \                     ??setByte_64:
   \   0002D0   90....       MOV     DPTR,#(page + 194)
   \   0002D3   E0           MOVX    A,@DPTR
   \   0002D4   A2E6         MOV     C,0xE0 /* A   */.6
   \   0002D6   501D         JNC     ??setByte_65
   2398                           cyclesTo10 = page.defCyclesTo10; //cyclesDefaults[1]; //page.defCyclesTo10; 
   \   0002D8   12....       LCALL   ?Subroutine37
   2399                           cyclesTo500 = 0;             
   \                     ??CrossCallReturnLabel_92:
   \   0002DB   90....       MOV     DPTR,#cyclesTo500
   \   0002DE   E4           CLR     A
   \   0002DF   F0           MOVX    @DPTR,A
   \   0002E0   A3           INC     DPTR
   \   0002E1   12....       LCALL   ?Subroutine22
   2400                           cyclesToStep500Channel =  page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
   2401                           setupRadio( curChannel = page.starting500Channel );
   \                     ??CrossCallReturnLabel_60:
   \   0002E4   90....       MOV     DPTR,#curChannel
   \   0002E7   F0           MOVX    @DPTR,A
   \   0002E8                ; Setup parameters for call to function setupRadio
   \   0002E8   F9           MOV     R1,A
   \   0002E9   12....       LCALL   setupRadio
   2402                           atomicChange( Hop, 0 );                  
   \   0002EC   90....       MOV     DPTR,#ticks
   \   0002EF   E0           MOVX    A,@DPTR
   \   0002F0   2410         ADD     A,#0x10
   \   0002F2   02....       LJMP    ??setByte_49
   2403                      }else{      
   2404                           cyclesTo10 = 0;                  
   \                     ??setByte_65:
   \   0002F5   90....       MOV     DPTR,#cyclesTo10
   \   0002F8   E4           CLR     A
   \   0002F9   F0           MOVX    @DPTR,A
   \   0002FA   A3           INC     DPTR
   \   0002FB   F0           MOVX    @DPTR,A
   2405                           cyclesTo500 = page.defCyclesTo500; 
   \   0002FC   12....       LCALL   ?Subroutine9
   2406                           cycles2Step10Channel   = page.defCyclesToStep10Channel;//cyclesDefaults[3]; //page.defCyclesToStep10Channel;
   2407                           curChannel = page.channel;
   \                     ??CrossCallReturnLabel_33:
   \   0002FF   90....       MOV     DPTR,#(page + 164)
   \   000302   E0           MOVX    A,@DPTR
   \   000303   90....       MOV     DPTR,#curChannel
   \   000306   02....       LJMP    ??setByte_50
   2408                           //setupRadio( curChannel = page.channel ); 
   2409                      }    
   2410                      //softKick();
   2411                  break;     
   2412                  case REPEATER_POWER:           page.repeaterPower = val;   if( page.is500Always ) setupRadio( page.channel ); break;
   \                     ??setByte_26:
   \   000309   EA           MOV     A,R2
   \   00030A   90....       MOV     DPTR,#(page + 193)
   \   00030D   12....       LCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_237:
   \   000310   4003         JC      $+5
   \   000312   02....       LJMP    ??setByte_45
   \   000315                ; Setup parameters for call to function setupRadio
   \   000315   90....       MOV     DPTR,#(page + 164)
   \   000318   8097         SJMP    ??setByte_63
   2413                  case SEARCH_FOR_COMMUNICATION: page.searchCommunication = search_stat = val;  break;
   \                     ??setByte_27:
   \   00031A   EA           MOV     A,R2
   \   00031B   90....       MOV     DPTR,#search_stat
   \   00031E   F0           MOVX    @DPTR,A
   \   00031F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000321   7583..       MOV     DPH,#(((page + 194) >> 8) & 0xff)
   \   000324   7582..       MOV     DPL,#((page + 194) & 0xff)
   \                     ??setByte_66:
   \   000327   E0           MOVX    A,@DPTR
   \   000328   92E7         MOV     0xE0 /* A   */.7,C
   \   00032A   02....       LJMP    ??setByte_50
   2414          
   2415                  // win 7 bytes. 
   2416                  case SET_SHOW_STATE:  case SetCriticalLevel500:   case SetCriticalLevel10:
   2417                      (&page.showState)[ reg-SET_SHOW_STATE ]  = (signed char)val;            
   \                     ??setByte_1:
   \   00032D   EE           MOV     A,R6
   \   00032E   2495         ADD     A,#-0x6b
   \                     ??setByte_67:
   \   000330   F582         MOV     DPL,A
   \   000332   EF           MOV     A,R7
   \   000333   3400         ADDC    A,#0x0
   \   000335   02....       LJMP    ??setByte_58
   2418                  break;
   2419                  
   2420                  case END_OF_TEST: 
   2421                      page.channel = 0;
   \                     ??setByte_28:
   \   000338   E4           CLR     A
   \   000339   90....       MOV     DPTR,#(page + 164)
   \   00033C   F0           MOVX    @DPTR,A
   2422                      page.myBunch = 0xFF; page.netId = 0xFF;  page.groupId = 0xFFFF;
   \   00033D   74FF         MOV     A,#-0x1
   \   00033F   90....       MOV     DPTR,#(page + 3)
   \   000342   F0           MOVX    @DPTR,A
   \   000343   90....       MOV     DPTR,#(page + 2)
   \   000346   F0           MOVX    @DPTR,A
   \   000347   90....       MOV     DPTR,#(page + 4)
   \   00034A   12....       LCALL   ?Subroutine68
   2423                      page.edAddr = 2; page.gwAddr = 1;
   2424                      savePB();
   \                     ??CrossCallReturnLabel_224:
   \   00034D                ; Setup parameters for call to function savePB
   \   00034D   12....       LCALL   savePB
   2425                  // go through ...
   2426                  //case CLEAR_MAX_BUNCH:             maxBunch = 0;                         break;
   2427                  case SYNCHRONIZE_MPP_CYCLES:      ticks[ MppCycle ]        = _mppCycle; break; 
   \                     ??setByte_29:
   \   000350   12....       LCALL   ??Subroutine47_0
   \                     ??CrossCallReturnLabel_121:
   \   000353   7478         MOV     A,#0x78
   \                     ??setByte_68:
   \   000355   F0           MOVX    @DPTR,A
   \   000356   A3           INC     DPTR
   \   000357   E4           CLR     A
   \   000358   02....       LJMP    ??setByte_50
   2428                  case SET_START500_CHANNEL:
   2429                      page.starting500Channel = val; if( page.is500Always ) setupRadio( curChannel = val );
   \                     ??setByte_30:
   \   00035B   EA           MOV     A,R2
   \   00035C   90....       MOV     DPTR,#(page + 218)
   \   00035F   12....       LCALL   ?Subroutine74
   \                     ??CrossCallReturnLabel_238:
   \   000362   4003         JC      $+5
   \   000364   02....       LJMP    ??setByte_45
   \   000367   EA           MOV     A,R2
   \   000368   90....       MOV     DPTR,#curChannel
   \   00036B   F0           MOVX    @DPTR,A
   \   00036C   02....       LJMP    ??setByte_62
   2430                  break;
   2431                  /*
   2432                  case CLEAR_THE_PAGE:
   2433                    val <<= 1;  
   2434                    if( !P1_4 && ( val > 48 ) && ( val < 64 ) ){
   2435                       tickWait( 8 * TICKS_IN_MS );
   2436                       clearAndHop( val );
   2437                       //clearThePage( val );
   2438                       ticks[ ReceiveData ] = 25*TICKS_IN_MS;
   2439                       //ticks[ ClearThePage ] = 12*TICKS_IN_MS;
   2440                       //page2clear = val;
   2441                    }
   2442                      //val <<= 1;  if( val && (val < 0x3E) && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ) ) clearThePage( val );
   2443                  break;
   2444                  */
   2445                  case TRY_OTHER_IMAGE:            page.tryOtherImageFirst = val;        break;
   \                     ??setByte_31:
   \   00036F   90....       MOV     DPTR,#(page + 219)
   \   000372   EA           MOV     A,R2
   \   000373   A2E0         MOV     C,0xE0 /* A   */.0
   \   000375   E0           MOVX    A,@DPTR
   \   000376   92E0         MOV     0xE0 /* A   */.0,C
   \   000378   02....       LJMP    ??setByte_50
   2446                  case SWITCH_SECURITY:
   2447                      mymemcpy( (BYTE *)page.curKey, nextKey, 16 ); mymemcpy( (BYTE *)page.curIV, nextIV, 16 );
   \                     ??setByte_32:
   \   00037B                ; Setup parameters for call to function mymemcpy
   \   00037B   7910         MOV     R1,#0x10
   \   00037D   7C..         MOV     R4,#(nextKey & 0xff)
   \   00037F   7D..         MOV     R5,#((nextKey >> 8) & 0xff)
   \   000381   7A..         MOV     R2,#((page + 96) & 0xff)
   \   000383   7B..         MOV     R3,#(((page + 96) >> 8) & 0xff)
   \   000385   12....       LCALL   mymemcpy
   \   000388                ; Setup parameters for call to function mymemcpy
   \   000388   7910         MOV     R1,#0x10
   \   00038A   7C..         MOV     R4,#(nextIV & 0xff)
   \   00038C   7D..         MOV     R5,#((nextIV >> 8) & 0xff)
   \   00038E   7A..         MOV     R2,#((page + 112) & 0xff)
   \   000390   7B..         MOV     R3,#(((page + 112) >> 8) & 0xff)
   \   000392   12....       LCALL   mymemcpy
   2448                      zerofill( nextKey, 32 );
   \   000395                ; Setup parameters for call to function zerofill
   \   000395   7920         MOV     R1,#0x20
   \   000397   7A..         MOV     R2,#(nextKey & 0xff)
   \   000399   7B..         MOV     R3,#((nextKey >> 8) & 0xff)
   \   00039B   12....       LCALL   zerofill
   2449                      loadKey(  page.curKey );
   \   00039E                ; Setup parameters for call to function load
   \   00039E   12....       LCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_261:
   \   0003A1   02....       LJMP    ??setByte_45
   2450                  break;
   2451                  case CALIBRATION_REPEAT:
   2452                      if( val > 0 && val < 32 ) calibrationRepeat = val; else calibrationRepeat = 4;
   \                     ??setByte_34:
   \   0003A4   EA           MOV     A,R2
   \   0003A5   600C         JZ      ??setByte_69
   \   0003A7   C3           CLR     C
   \   0003A8   9420         SUBB    A,#0x20
   \   0003AA   5007         JNC     ??setByte_69
   \   0003AC   EA           MOV     A,R2
   \                     ??setByte_70:
   \   0003AD   90....       MOV     DPTR,#calibrationRepeat
   \   0003B0   02....       LJMP    ??setByte_50
   \                     ??setByte_69:
   \   0003B3   7404         MOV     A,#0x4
   \   0003B5   80F6         SJMP    ??setByte_70
   2453                  break;
   2454                  //case SPECULATIVE_REPORT: page.speculative_report = val;                  break;
   2455                  case STAY_IN_RX:         page.stay_in_rx  = val;                         break;
   \                     ??setByte_10:
   \   0003B7   90....       MOV     DPTR,#(page + 219)
   \                     ??setByte_71:
   \   0003BA   EA           MOV     A,R2
   \   0003BB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0003BD   E0           MOVX    A,@DPTR
   \   0003BE   92E3         MOV     0xE0 /* A   */.3,C
   \   0003C0   02....       LJMP    ??setByte_50
   2456                  //case THIRTY_THREE_MV:    page.thirty_three_mv = val;                     break;        
   2457                  
   2458                  // 06/27/2017 commented out case TEST_1:  case TEST_2:   case TEST_3:   case TEST_4:
   2459                  //    ptr = (BYTE *)&page.tests[reg-TEST_1]; 
   2460                  //    *ptr++ = val; 
   2461                  // go through
   2462                  case INSTALL_DATE:
   2463                      if( reg == INSTALL_DATE ) ptr = (BYTE *)&page.installDate;
   \                     ??setByte_11:
   \   0003C3   740E         MOV     A,#0xe
   \   0003C5   69           XRL     A,R1
   \   0003C6   7004         JNZ     ??setByte_72
   \   0003C8   7A..         MOV     R2,#((page + 148) & 0xff)
   \   0003CA   7B..         MOV     R3,#(((page + 148) >> 8) & 0xff)
   2464                      mymemcpy( ptr, (BYTE *)&utcLocal, 4); 
   \                     ??setByte_72:
   \   0003CC                ; Setup parameters for call to function mymemcpy
   \   0003CC   7904         MOV     R1,#0x4
   \   0003CE   7C..         MOV     R4,#(utcLocal & 0xff)
   \   0003D0   7D..         MOV     R5,#((utcLocal >> 8) & 0xff)
   \                     ??setByte_73:
   \   0003D2   12....       LCALL   mymemcpy
   \   0003D5   02....       LJMP    ??setByte_45
   2465                  break;
   2466                  
   2467                  case REP_STEP:   if( val < 5 && val >50 )  break;  // else go through
   2468                  
   2469                  case OV_STEP:  case T_OC_JUMP: case OV_STARTUP: 
   2470                      //if( page.fuseOVOC )       break;
   2471                  // go through 
   2472                  case T_SUPERHOT:              case T_HOT:          
   2473                  case T_COLD:                  case T_TIME:
   2474                  case NETWORK_CNST_1:          case NETWORK_CNST_2:  
   2475                  case OC_STEP:                 case SHUNT:  
   2476                  case MAX_OFF:                 case VIN_LIMIT: 
   2477                  case VIN_TURN_ON:             case VIN_SWITCH_OFF:
   2478                      ptr = (BYTE *)&page.repStep; ptr[ reg-REP_STEP ] = val; break;
   \                     ??setByte_2:
   \   0003D8   EE           MOV     A,R6
   \   0003D9   24A1         ADD     A,#-0x5f
   \   0003DB   02....       LJMP    ??setByte_67
   2479                      
   2480                  case SHORT_CIRCUIT_LEVEL: 
   2481                      #ifdef MidString
   2482                          if( val == 0 )
   \                     ??setByte_36:
   \   0003DE   EA           MOV     A,R2
   \   0003DF   7007         JNZ     ??setByte_74
   2483                              { ocShortCircuitLimit = 255; T3CC1 = oc2timer( theOC ); }
   \   0003E1   74FF         MOV     A,#-0x1
   \   0003E3   90....       MOV     DPTR,#ocShortCircuitLimit
   \   0003E6   8009         SJMP    ??setByte_75
   2484                          else if( ocShortCircuitLimit < 255 )
   \                     ??setByte_74:
   \   0003E8   90....       MOV     DPTR,#ocShortCircuitLimit
   \   0003EB   E0           MOVX    A,@DPTR
   \   0003EC   64FF         XRL     A,#0xff
   \   0003EE   6004         JZ      ??CrossCallReturnLabel_85
   2485                              { ocShortCircuitLimit = val; T3CC1 = oc2timer( theOC ); }
   \   0003F0   EA           MOV     A,R2
   \                     ??setByte_75:
   \   0003F1   12....       LCALL   ?Subroutine34
   2486                      #endif
   2487                      /*go through */
   2488                  case VIN_DISABLE_RADIO: case SET_RBUNCH: case SET_GBUNCH: //DEV250:
   2489                      ptr = (BYTE *)&page.vin_disable_radio; ptr[ reg-VIN_DISABLE_RADIO ] = val; 
   \                     ??CrossCallReturnLabel_85:
   \   0003F4   EE           MOV     A,R6
   \   0003F5   244D         ADD     A,#0x4d
   \   0003F7   F582         MOV     DPL,A
   \   0003F9   EF           MOV     A,R7
   \   0003FA   3400         ADDC    A,#0x0
   \   0003FC   F583         MOV     DPH,A
   \   0003FE   E5..         MOV     A,?V0 + 2
   \   000400   805B         SJMP    ??setByte_50
   2490                  break;
   2491                  case LOW_UTC: case HIGH_UTC: 
   2492                      mymemcpy( ((BYTE *)(&page.utcLow))+4*(reg-LOW_UTC), (BYTE *)&utcLast, 4);
   \                     ??setByte_3:
   \   000402                ; Setup parameters for call to function mymemcpy
   \   000402   7904         MOV     R1,#0x4
   \   000404   7C..         MOV     R4,#(utcLast & 0xff)
   \   000406   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000408   7402         MOV     A,#0x2
   \   00040A   78..         MOV     R0,#?V0 + 0
   \   00040C   12....       LCALL   ?S_SHL
   \   00040F   E5..         MOV     A,?V0 + 0
   \   000411   24..         ADD     A,#((page + 85) & 0xff)
   \   000413   FA           MOV     R2,A
   \   000414   E5..         MOV     A,?V0 + 1
   \   000416   34..         ADDC    A,#(((page - 171) >> 8) & 0xff)
   \   000418   FB           MOV     R3,A
   \   000419   80B7         SJMP    ??setByte_73
   2493                  break;
   2494          
   2495                  //case TEST_STAND: if( val == 1 ) isOnTestStand = 11; break; 
   2496                  
   2497                  case REPORT_UTC: page.reportUTC = val; break;
   \                     ??setByte_16:
   \   00041B   90....       MOV     DPTR,#(page + 219)
   \   00041E   EA           MOV     A,R2
   \   00041F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000421   02....       LJMP    ??setByte_66
   2498                  case BANDWIDTH_500:  mdm_rate1[0] = val; softKick(); break;
   \                     ??setByte_43:
   \   000424   EA           MOV     A,R2
   \   000425   90....       MOV     DPTR,#mdm_rate1
   \   000428   F0           MOVX    @DPTR,A
   2499                  case TREAT_LB_AS_CHAN : page.treatLastByteAsChannel = val; break;
   2500                  case SYNCH_PHASE:   page.synch_phase = val;  break;
   2501                  case SYNCH_FREQ:    page.synch_freq = val;   break;              
   2502                  case BANDWIDTH250:  page.bandwidth250 = val; break;
   2503                  case TEMP_CALIBRATE:softKick(); break;
   \                     ??setByte_41:
   \   000429                ; Setup parameters for call to function softKick
   \   000429   12....       LCALL   softKick
   \   00042C   8030         SJMP    ??setByte_45
   \                     ??setByte_5:
   \   00042E   90....       MOV     DPTR,#(page + 194)
   \   000431   8087         SJMP    ??setByte_71
   \                     ??setByte_38:
   \   000433   EA           MOV     A,R2
   \   000434   90....       MOV     DPTR,#(page + 161)
   \   000437   8024         SJMP    ??setByte_50
   \                     ??setByte_39:
   \   000439   EA           MOV     A,R2
   \   00043A   90....       MOV     DPTR,#(page + 162)
   \   00043D   801E         SJMP    ??setByte_50
   \                     ??setByte_40:
   \   00043F   EA           MOV     A,R2
   \   000440   90....       MOV     DPTR,#(page + 163)
   \   000443   8018         SJMP    ??setByte_50
   2504                  case SET_MPPF:  si->mppCycle = val;  break;
   \                     ??setByte_42:
   \   000445   12....       LCALL   ?Subroutine42
   \                     ??CrossCallReturnLabel_100:
   \   000448   EA           MOV     A,R2
   \   000449   02....       LJMP    ??setByte_68
   2505                 
   2506                  case K_OV_VOLT:  case K_OC_CUR:
   2507                      ptr = (BYTE *)&page.k_ov_volt; ptr[ reg - K_OV_VOLT ] = val; 
   \                     ??setByte_4:
   \   00044C   EE           MOV     A,R6
   \   00044D   2441         ADD     A,#0x41
   \   00044F   02....       LJMP    ??setByte_67
   2508                  break;
   2509                  
   2510                  case XTAL_OFF: if( val == 1 ){
   \                     ??setByte_37:
   \   000452   7401         MOV     A,#0x1
   \   000454   65..         XRL     A,?V0 + 2
   \   000456   7006         JNZ     ??setByte_45
   2511                    //BYTE counter = 127;
   2512                    //CLKCON |= OSC_BIT;                    // starting the RC Oscillator
   2513                    //while(!HIGH_FREQUENCY_RC_OSC_STABLE && counter-- ) halWait(2); 
   2514                    //SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
   2515                    rcgen = TRUE;
   \   000458   7401         MOV     A,#0x1
   \   00045A   90....       MOV     DPTR,#rcgen
   \                     ??setByte_50:
   \   00045D   F0           MOVX    @DPTR,A
   2516                  }break;
   2517              }
   2518          }
   \                     ??setByte_45:
   \   00045E   02....       LJMP    ?Subroutine123
   \   000461                REQUIRE _A_P1
   \   000461                REQUIRE RNDL
   \   000461                REQUIRE T3CC0
   \   000461                REQUIRE T3CC1
   \   000461                REQUIRE RFST
   2519          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2520          void savePB(){
   \                     savePB:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2521          //new   rc();
   2522            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000004   43C640       ORL 0xC6, #0x40
   2523            asm( "NOP" );
   \   000007   00           NOP
   2524            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000008   43C640       ORL 0xC6, #0x40
   2525            asm( "NOP" );
   \   00000B   00           NOP
   2526            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00000C   43C640       ORL 0xC6, #0x40
   2527            asm( "NOP" );
   \   00000F   00           NOP
   2528            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000010   43C640       ORL 0xC6, #0x40
   2529            asm( "NOP" );
   \   000013   00           NOP
   2530            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000014   43C640       ORL 0xC6, #0x40
   2531            asm( "NOP" );
   \   000017   00           NOP
   2532            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000018   43C640       ORL 0xC6, #0x40
   2533            asm( "NOP" );
   \   00001B   00           NOP
   2534            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00001C   43C640       ORL 0xC6, #0x40
   2535            asm( "NOP" );
   \   00001F   00           NOP
   2536            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000020   43C640       ORL 0xC6, #0x40
   2537            asm( "NOP" );
   \   000023   00           NOP
   2538            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000024   43C640       ORL 0xC6, #0x40
   2539            asm( "NOP" );
   \   000027   00           NOP
   2540          //  if( !isOnTestStand ) return;
   2541            //if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; return; }
   2542            if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" );  return; }  
   \   000028   90....       MOV     DPTR,#isOnTestStand
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   7005         JNZ     ??savePB_0
   \   00002E   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_122:
   \   000031   8063         SJMP    ??savePB_1
   2543            if( *((BYTE *)0xF53B) != 0xAA ) reset(); 
   \                     ??savePB_0:
   \   000033   90F53B       MOV     DPTR,#-0xac5
   \   000036   E0           MOVX    A,@DPTR
   \   000037   64AA         XRL     A,#0xaa
   \   000039   6003         JZ      ??savePB_2
   \   00003B                ; Setup parameters for call to function reset
   \   00003B   12....       LCALL   reset
   2544            //clearAndHop( 2 ); 
   2545            //clearThePage( 2 );
   2546            //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
   2547            //P1_4 = 1; // debug statement for measuring save PB time
   2548            asm("CLR  0xA8.7");
   \                     ??savePB_2:
   \   00003E   C2AF         CLR  0xA8.7
   2549            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000040   43C640       ORL 0xC6, #0x40
   2550            asm( "NOP" );
   \   000043   00           NOP
   2551            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000044   43C640       ORL 0xC6, #0x40
   2552            asm( "NOP" );
   \   000047   00           NOP
   2553            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000048   43C640       ORL 0xC6, #0x40
   2554            asm( "NOP" );
   \   00004B   00           NOP
   2555            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00004C   43C640       ORL 0xC6, #0x40
   2556            asm( "NOP" );
   \   00004F   00           NOP
   2557            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000050   43C640       ORL 0xC6, #0x40
   2558            asm( "NOP" );
   \   000053   00           NOP
   2559            asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000054   43C640       ORL 0xC6, #0x40
   2560            asm( "NOP" );
   \   000057   00           NOP
   2561            if( !isOnTestStand ) reset();  
   \   000058   90....       MOV     DPTR,#isOnTestStand
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   7003         JNZ     ??savePB_3
   \   00005E                ; Setup parameters for call to function reset
   \   00005E   12....       LCALL   reset
   2562            FADDRH = 0x2E; FWT = 0x21; FCTL = 1; asm("NOP"); // this line actually clears the page
   \                     ??savePB_3:
   \   000061   75AD2E       MOV     0xad,#0x2e
   \   000064   75AB21       MOV     0xab,#0x21
   \   000067   75AE01       MOV     0xae,#0x1
   \   00006A   00           NOP
   2563            FADDRH = 0;   
   \   00006B   75AD00       MOV     0xad,#0x0
   2564            asm("SETB 0xA8.7");
   \   00006E   D2AF         SETB 0xA8.7
   2565            tickWait( 25*TICKS_IN_MS );
   \   000070                ; Setup parameters for call to function tickWait
   \   000070   7932         MOV     R1,#0x32
   \   000072   12....       LCALL   tickWait
   2566          //  if( !isOnTestStand ) return;
   2567            initiateTransfer( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+8 );
   \   000075                ; Setup parameters for call to function initiateTransfer
   \   000075   79F2         MOV     R1,#-0xe
   \   000077   7C00         MOV     R4,#0x0
   \   000079   7D5C         MOV     R5,#0x5c
   \   00007B   7A..         MOV     R2,#(page & 0xff)
   \   00007D   7B..         MOV     R3,#((page >> 8) & 0xff)
   \   00007F   12....       LCALL   initiateTransfer
   2568            tickWait( 11*TICKS_IN_MS );  // was 5 ms
   \   000082                ; Setup parameters for call to function tickWait
   \   000082   7916         MOV     R1,#0x16
   \   000084   12....       LCALL   tickWait
   2569            //softKick();
   2570            //FADDRH = 0; 
   2571            restoreRadio();
   \   000087   12....       LCALL   ?Subroutine1
   2572            isOnTestStand = 0;
   \                     ??CrossCallReturnLabel_418:
   \   00008A   90....       MOV     DPTR,#isOnTestStand
   \   00008D   F0           MOVX    @DPTR,A
   2573            //P1_4 = 0; // debug statement for measuring save PB time
   2574            CLKCON = 0x89;  asm( "NOP" );
   \   00008E   75C689       MOV     0xc6,#-0x77
   \   000091   00           NOP
   2575             asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" );
   \   000092   00           NOP
   \   000093   00           NOP
   \   000094   00           NOP
   \   000095   00           NOP
   \                     ??savePB_1:
   \   000096   00           NOP
   2576          }
   \   000097   02....       LJMP    ??Subroutine115_0
   \   00009A                REQUIRE FWT
   \   00009A                REQUIRE FADDRH
   \   00009A                REQUIRE FCTL
   \   00009A                REQUIRE CLKCON

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   7414         MOV     A,#0x14
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#cmdCount
   \   000006   12....       LCALL   ?Subroutine102
   \                     ??CrossCallReturnLabel_324:
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   75C689       MOV     0xc6,#-0x77
   \   00000D   22           RET
   2577          /*
   2578          BYTE clearAndHop( BYTE p ){
   2579             clearThePage( p );
   2580             if( ticks[ Hop ] && page.hoppingAllowed && !page.is500Always ){
   2581                 CHANNR = curChannel; hop(); curChannel = CHANNR; 
   2582                 atomicChange( Hop, lastCycle ); //- _slot );  
   2583             }
   2584             return 1;
   2585          }
   2586          */
   2587          /******************************************************************************
   2588          * @fn  setInt
   2589          * @brief       set the int16 value to register
   2590          * Parameters:  byte reg - register, int val - value
   2591          * @return      void
   2592          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2593          void setInt( BYTE reg, UINT16 val ){
   \                     setInt:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2594          UINT16 *ptr = &page.defCyclesTo500;
   2595          BYTE *pptr = (BYTE *)&page;
   \   000009   7C..         MOV     R4,#(page & 0xff)
   \   00000B   7D..         MOV     R5,#((page >> 8) & 0xff)
   2596          INT16 *ptr_int16 = NULL;
   2597          
   2598              switch(reg){     
   \   00000D   EE           MOV     A,R6
   \   00000E   540F         ANL     A,#0xf
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   EB           MOV     A,R3
   \   000013   FA           MOV     R2,A
   \   000014   E9           MOV     A,R1
   \   000015   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for setInt>_0`:
   \   000018   01           DB        1
   \   000019   04           DB        4
   \   00001A   0A           DB        10
   \   00001B   ....         DW        ??setInt_0
   \   00001D   11           DB        17
   \   00001E   01           DB        1
   \   00001F   ....         DW        ??setInt_1
   \   000021   02           DB        2
   \   000022   ....         DW        ??setInt_2
   \   000024   03           DB        3
   \   000025   ....         DW        ??setInt_3
   \   000027   0D           DB        13
   \   000028   ....         DW        ??setInt_4
   \   00002A   0E           DB        14
   \   00002B   ....         DW        ??setInt_5
   \   00002D   10           DB        16
   \   00002E   ....         DW        ??setInt_6
   \   000030   11           DB        17
   \   000031   ....         DW        ??setInt_7
   \   000033   13           DB        19
   \   000034   ....         DW        ??setInt_8
   \   000036   18           DB        24
   \   000037   ....         DW        ??setInt_9
   \   000039   19           DB        25
   \   00003A   ....         DW        ??setInt_10
   \   00003C   1A           DB        26
   \   00003D   ....         DW        ??setInt_11
   \   00003F   1B           DB        27
   \   000040   ....         DW        ??setInt_12
   \   000042   1C           DB        28
   \   000043   ....         DW        ??setInt_13
   \   000045   21           DB        33
   \   000046   ....         DW        ??setInt_14
   \   000048   22           DB        34
   \   000049   ....         DW        ??setInt_15
   \   00004B   23           DB        35
   \   00004C   ....         DW        ??setInt_16
   \   00004E   24           DB        36
   \   00004F   ....         DW        ??setInt_17
   \   000051   ....         DW        ??setInt_18
   2599                  case SET_GROUP_ID: page.groupId = val; break;
   \                     ??setInt_1:
   \   000053   90....       MOV     DPTR,#(page + 4)
   \                     ??setInt_19:
   \   000056   EE           MOV     A,R6
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   EF           MOV     A,R7
   \   00005A   02....       LJMP    ??setInt_20
   2600                  case JOIN: page.netId = (val & 0xF); page.myBunch = ( val >> 8 ) & 0xFF;  break;
   \                     ??setInt_2:
   \   00005D   E5..         MOV     A,?V0 + 0
   \   00005F   90....       MOV     DPTR,#(page + 2)
   \   000062   F0           MOVX    @DPTR,A
   \   000063   EA           MOV     A,R2
   \   000064   90....       MOV     DPTR,#(page + 3)
   \   000067   02....       LJMP    ??setInt_20
   2601                  case SET_ED_GW:
   2602                      // this check for not 0 is a mistake, because it prohibits setting addr to 0, was a big issue on Remington Hi-Volts !!!
   2603                      //if( val & 0xFF   ) page.edAddr = val & 0xFF;
   2604                      //if( val & 0xFF00 ) page.gwAddr = ( val >> 8 ) & 0xFF;
   2605                      page.edAddr = val & 0xFF;
   \                     ??setInt_3:
   \   00006A   EE           MOV     A,R6
   \   00006B   90....       MOV     DPTR,#(page + 190)
   \   00006E   F0           MOVX    @DPTR,A
   2606                      page.gwAddr = ( val >> 8 ) & 0xFF;
   \   00006F   EA           MOV     A,R2
   \   000070   90....       MOV     DPTR,#(page + 191)
   \   000073   12....       LCALL   ?Subroutine80
   2607                      ADDR = page.edAddr;
   \                     ??CrossCallReturnLabel_258:
   \   000076   02....       LJMP    ??setInt_20
   2608                  break;
   2609                  case FetFailureCount:
   2610                    // The following if is meant to use = (not ==), set value
   2611                    // and then compare if fetFailureCount to 0 to set check logic
   2612                    if ((page.fetFailureCount = val) != 0)
   \                     ??setInt_11:
   \   000079   90....       MOV     DPTR,#(page + 128)
   \   00007C   EE           MOV     A,R6
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   EF           MOV     A,R7
   \   000080   F0           MOVX    @DPTR,A
   \   000081   90....       MOV     DPTR,#(page + 128)
   \   000084   E0           MOVX    A,@DPTR
   \   000085   7002         JNZ     ??setInt_21
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \                     ??setInt_21:
   \   000089   6008         JZ      ??setInt_22
   2613                      checkForFETFailure = TRUE;
   \   00008B   7401         MOV     A,#0x1
   \                     ??setInt_23:
   \   00008D   90....       MOV     DPTR,#checkForFETFailure
   \   000090   02....       LJMP    ??setInt_20
   2614                    else
   2615                      checkForFETFailure = FALSE;
   \                     ??setInt_22:
   \   000093   E4           CLR     A
   \   000094   80F7         SJMP    ??setInt_23
   2616                    break;
   2617                  case FetCurrentThreshold:                                                                          
   2618                    page.fetCurrentThreshold = val;
   \                     ??setInt_12:
   \   000096   90....       MOV     DPTR,#(page + 130)
   \   000099   80BB         SJMP    ??setInt_19
   2619                  break;
   2620                  case FetDeltaCurrent:
   2621          	  page.fetDeltaCurrent = val;
   \                     ??setInt_13:
   \   00009B   90....       MOV     DPTR,#(page + 132)
   \                     ??setInt_24:
   \   00009E   80B6         SJMP    ??setInt_19
   2622                  break;
   2623                  case BootImage: // try before buy
   2624                      tickWait( 12 * TICKS_IN_MS);
   \                     ??setInt_4:
   \   0000A0                ; Setup parameters for call to function tickWait
   \   0000A0   7918         MOV     R1,#0x18
   \   0000A2   12....       LCALL   tickWait
   2625                      // changing timers to boot (old) values
   2626                      /*if( val == 0x603F ){
   2627                          T1CTL &= 0xFC;
   2628                          SET_WORD(T1CNTH, T1CNTL, 0);
   2629                          SET_WORD(T1CC0H, T1CC0L, 600 - 1);
   2630                          T1CTL |= 0x04  | 0x02;
   2631                          T1CCTL0 = 0x44;
   2632                          si->mppCycle = 300;   // change when we change 8k image and Boot
   2633                      }*/
   2634                      if( val == 0x83F ) break;
   \   0000A5   743F         MOV     A,#0x3f
   \   0000A7   6E           XRL     A,R6
   \   0000A8   7003         JNZ     ??setInt_25
   \   0000AA   7408         MOV     A,#0x8
   \   0000AC   6F           XRL     A,R7
   \                     ??setInt_25:
   \   0000AD   7003         JNZ     $+5
   \   0000AF   02....       LJMP    ??setInt_18
   2635                      {void (*f)( void ) = ( void (*)( void ) )val;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}          
   \   0000B2                ; Setup parameters for indirect call
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   12....       LCALL   ?CALL_IND
   \   0000B9   02....       LJMP    ??setInt_18
   2636                  break;
   2637                  case SyncWord: 
   2638                    SYNC0 = val & 0xFF;    SYNC1 = ( val >> 8 ) & 0xFF;
   \                     ??setInt_5:
   \   0000BC   EE           MOV     A,R6
   \   0000BD   90DF01       MOV     DPTR,#-0x20ff
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   EA           MOV     A,R2
   \   0000C2   90DF00       MOV     DPTR,#-0x2100
   \   0000C5   F0           MOVX    @DPTR,A
   2639                    page.syncword = val; 
   \   0000C6   90....       MOV     DPTR,#(page + 154)
   \   0000C9   808B         SJMP    ??setInt_19
   2640                  break;
   2641                  /*
   2642                  case SetCyclesTo500:            page.defCyclesTo500 = val;            break;
   2643                  case SetCyclesTo10:             page.defCyclesTo10  = val;            break;
   2644                  case SetCyclesToStep500Channel: page.defCyclesToStep500Channel = val; break;
   2645                  case SetCyclesToStep10Channel:  page.defCyclesToStep10Channel  = val; break;
   2646                  case SetCyclesToLightKick:      page.defCycles2LightKick = val;       break;
   2647                  case SetCyclesToSoftKick:       page.defCycles2SoftKick = val;        break;
   2648                  case SetCyclesToHardKick:       page.defCycles2HardKick =val;         break;
   2649                  */
   2650                  
   2651                  case SetCyclesTo500:                    case SetCyclesTo10:             
   2652                  case SetCyclesToStep500Channel:         case SetCyclesToStep10Channel:  
   2653                  case SetCyclesToSoftKick:               case SetCyclesToHardKick:   
   2654                  case SetImageAddr:
   2655                  // 06/27/2017 Version no longer settable case SetVersionLow:                     case SetVersionHigh:
   2656                  //default:
   2657                      //if( (reg > (SetCyclesTo500-1) ) && ( reg < (SetVersionHigh+1) ) ){
   2658                          //UINT16 *ptr = &page.defCyclesTo500;
   2659                          ptr[ reg - SetCyclesTo500 ] = val;
   \                     ??setInt_0:
   \   0000CB   E9           MOV     A,R1
   \   0000CC   C3           CLR     C
   \   0000CD   33           RLC     A
   \   0000CE   F8           MOV     R0,A
   \   0000CF   E4           CLR     A
   \   0000D0   33           RLC     A
   \   0000D1   F9           MOV     R1,A
   \   0000D2   E8           MOV     A,R0
   \   0000D3   24..         ADD     A,#((page + 192) & 0xff)
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E9           MOV     A,R1
   \   0000D8   34..         ADDC    A,#(((page + 192) >> 8) & 0xff)
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   02....       LJMP    ??setInt_19
   2660                      //}
   2661                  break;
   2662                  case SetBasePtr:
   2663                      if( (base_ptr == NULL) && (((UINT16)val) > 0x3FF) && (((UINT16)val) < 0x800) )  base_ptr = (BYTE *)val;
   \                     ??setInt_6:
   \   0000DF   90....       MOV     DPTR,#base_ptr
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   7002         JNZ     ??setInt_26
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \                     ??setInt_26:
   \   0000E7   707A         JNZ     ??setInt_18
   \   0000E9   C3           CLR     C
   \   0000EA   EF           MOV     A,R7
   \   0000EB   9404         SUBB    A,#0x4
   \   0000ED   4074         JC      ??setInt_18
   \   0000EF   C3           CLR     C
   \   0000F0   EF           MOV     A,R7
   \   0000F1   9408         SUBB    A,#0x8
   \   0000F3   506E         JNC     ??setInt_18
   \   0000F5   90....       MOV     DPTR,#base_ptr
   \   0000F8   02....       LJMP    ??setInt_19
   2664                  break;  
   2665                  case SetCurNoise: page.cur_noise = val; break;
   \                     ??setInt_7:
   \   0000FB   90....       MOV     DPTR,#(page + 232)
   \                     ??setInt_27:
   \   0000FE   02....       LJMP    ??setInt_19
   2666                  //case GndShift:    gnd_shift = val;      break;
   2667                  case SetLowCurrentLimitTo255:
   2668                    page.LowCurrentLimitTo255 = (INT16)val;
   \                     ??setInt_8:
   \   000101   90....       MOV     DPTR,#(page + 134)
   \   000104   02....       LJMP    ??setInt_19
   2669                    break;
   2670                  case SetVoutLimitCount:
   2671                    page.VoutLimitCount = (INT16)val;
   \                     ??setInt_14:
   \   000107   90....       MOV     DPTR,#(page + 136)
   \   00010A   8092         SJMP    ??setInt_24
   2672                    break;
   2673                  case SetVoutLimit:
   2674                    page.VoutLimit = (UINT16)val;
   \                     ??setInt_15:
   \   00010C   90....       MOV     DPTR,#(page + 138)
   \   00010F   02....       LJMP    ??setInt_19
   2675                    break;
   2676                  case SetIoutLimitCount:
   2677                    page.IoutLimitCount = (INT16)val;
   \                     ??setInt_16:
   \   000112   90....       MOV     DPTR,#(page + 140)
   \   000115   80E7         SJMP    ??setInt_27
   2678                    break;
   2679                  case SetIoutLimit:
   2680                    page.IoutLimit = (INT16)val;
   \                     ??setInt_17:
   \   000117   90....       MOV     DPTR,#(page + 142)
   \   00011A   02....       LJMP    ??setInt_19
   2681                    break;
   2682                    // 01/09/2017 ptr_int16 = &page.LowCurrentLimitTo255;
   2683                    // 01/09/2017 ptr_int16[reg - SetLowCurrentLimitTo255] = val;
   2684                    /*
   2685          #ifdef MidString
   2686                    ocLimit1 = FALSE;  // Ensure new values are used in checkVin (in case either ocLimit is TRUE)
   2687                    ocLimit2 = FALSE;  // 06/29/2017 - changes (2 lines)
   2688          #endif
   2689                    */
   2690                  case ReadPBOneCommand: 
   2691                      if( (val>>12)&0xF ) pptr = (BYTE *)0x5C00; 
   \                     ??setInt_9:
   \   00011D   74F0         MOV     A,#-0x10
   \   00011F   5F           ANL     A,R7
   \   000120   F9           MOV     R1,A
   \   000121   E4           CLR     A
   \   000122   7001         JNZ     ??setInt_28
   \   000124   E9           MOV     A,R1
   \                     ??setInt_28:
   \   000125   6004         JZ      ??setInt_29
   \   000127   7C00         MOV     R4,#0x0
   \   000129   7D5C         MOV     R5,#0x5c
   2692                      base_ptr = pptr + 24*((val>>8)&0xF);
   \                     ??setInt_29:
   \   00012B   740F         MOV     A,#0xf
   \   00012D   5A           ANL     A,R2
   \   00012E   75F018       MOV     B,#0x18
   \   000131   A4           MUL     AB
   \   000132   F8           MOV     R0,A
   \   000133   A9F0         MOV     R1,B
   \   000135   EC           MOV     A,R4
   \   000136   28           ADD     A,R0
   \   000137   F8           MOV     R0,A
   \   000138   ED           MOV     A,R5
   \   000139   39           ADDC    A,R1
   \   00013A   F9           MOV     R1,A
   \   00013B   90....       MOV     DPTR,#base_ptr
   \   00013E   12....       LCALL   ??Subroutine67_0
   2693                      calibrationRepeat = (val>>4)&0xF;
   \                     ??CrossCallReturnLabel_217:
   \   000141   EE           MOV     A,R6
   \   000142   C4           SWAP    A
   \   000143   540F         ANL     A,#0xf
   \   000145   90....       MOV     DPTR,#calibrationRepeat
   \   000148   F0           MOVX    @DPTR,A
   2694                      reportScaling  = (val&0xF) * calibrationRepeat; 
   \   000149   C0E0         PUSH    A
   \   00014B   E5..         MOV     A,?V0 + 0
   \   00014D   F5F0         MOV     B,A
   \   00014F   D0E0         POP     A
   \   000151   A4           MUL     AB
   \   000152   90....       MOV     DPTR,#reportScaling
   \   000155   800B         SJMP    ??setInt_20
   2695                  break;
   2696                  case SetPBByte: pptr[ ( val >> 8 )&0xFF ] = val & 0xFF; break;
   \                     ??setInt_10:
   \   000157   EA           MOV     A,R2
   \   000158   24..         ADD     A,#(page & 0xff)
   \   00015A   F582         MOV     DPL,A
   \   00015C   E4           CLR     A
   \   00015D   34..         ADDC    A,#((page >> 8) & 0xff)
   \   00015F   F583         MOV     DPH,A
   \   000161   EE           MOV     A,R6
   \                     ??setInt_20:
   \   000162   F0           MOVX    @DPTR,A
   2697              }
   2698          }
   \                     ??setInt_18:
   \   000163   02....       LJMP    ?Subroutine120
   2699          /******************************************************************************
   2700          * @fn  setLong
   2701          * @brief       set the long value to register
   2702          * Parameters:  byte reg - register, long val - value
   2703          * @return      void
   2704          ******************************************************************************/
   2705          //void setLong( BYTE reg, UINT32 val ){  if( reg == SET_DF_TOLERANCE ){ page.dF_Tolerance = val;  } }
   2706          /******************************************************************************
   2707          * @fn  setFloat
   2708          * @brief       set the float value to register
   2709          * Parameters:  byte reg - register, float val - value
   2710          * @return      void
   2711          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2712          void setFloat( BYTE reg, float *ptr){
   \                     setFloat:
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   2713          //BYTE oc = 0;
   2714          //float val = *ptr;
   2715          BYTE *dst = NULL;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   2716          BOOL recomputeOC2Timer = FALSE;
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   2717              switch(reg){     
   \   000014   89..         MOV     ?V0 + 4,R1
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   \   000019   7402         MOV     A,#0x2
   \   00001B   78..         MOV     R0,#?V0 + 4
   \   00001D   12....       LCALL   ?S_SHL
   \   000020   E5..         MOV     A,?V0 + 4
   \   000022   24..         ADD     A,#(page & 0xff)
   \   000024   FA           MOV     R2,A
   \   000025   E5..         MOV     A,?V0 + 5
   \   000027   34..         ADDC    A,#((page >> 8) & 0xff)
   \   000029   FB           MOV     R3,A
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   78..         MOV     R0,#?V0 + 4
   \   000030   12....       LCALL   ?L_MOV_X
   \   000033   E9           MOV     A,R1
   \   000034   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for setFloat>_0`:
   \   000037   04           DB        4
   \   000038   01           DB        1
   \   000039   04           DB        4
   \   00003A   ....         DW        ??setFloat_0
   \   00003C   05           DB        5
   \   00003D   06           DB        6
   \   00003E   ....         DW        ??setFloat_1
   \   000040   0A           DB        10
   \   000041   17           DB        23
   \   000042   ....         DW        ??setFloat_2
   \   000044   19           DB        25
   \   000045   1A           DB        26
   \   000046   ....         DW        ??setFloat_3
   \   000048   01           DB        1
   \   000049   18           DB        24
   \   00004A   ....         DW        ??setFloat_4
   \   00004C   ....         DW        ??setFloat_5
   2718                  case SET_DFK0:  case SET_DFK1:  case SET_DFK2:  case SET_DFK3:     
   2719                      //page.dFk[reg-SET_DFK0] = val;    
   2720                      dst = (BYTE *) &page.dFk[reg-SET_DFK0];
   \                     ??setFloat_0:
   \   00004E   EA           MOV     A,R2
   \   00004F   2408         ADD     A,#0x8
   \   000051   F5..         MOV     ?V0 + 0,A
   \   000053   EB           MOV     A,R3
   \   000054   3400         ADDC    A,#0x0
   \   000056   F5..         MOV     ?V0 + 1,A
   2721                      if( reg == SET_DFK3 ) page.pureOffset = ((INT16) (*ptr))+20;
   \   000058   7404         MOV     A,#0x4
   \   00005A   65..         XRL     A,?V0 + 2
   \   00005C   6003         JZ      $+5
   \   00005E   02....       LJMP    ??setFloat_5
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?FLT_TO_L
   \   000066   7414         MOV     A,#0x14
   \   000068   25..         ADD     A,?V0 + 4
   \   00006A   F8           MOV     R0,A
   \   00006B   E4           CLR     A
   \   00006C   35..         ADDC    A,?V0 + 5
   \   00006E   F9           MOV     R1,A
   \   00006F   90....       MOV     DPTR,#(page + 198)
   \   000072   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_218:
   \   000075   8078         SJMP    ??setFloat_5
   2722                  break;
   2723                  //case SET_VIN_TURN_ON: case SET_VIN_SHUT_OFF: (&page.VinTurnOn)[reg-SET_VIN_TURN_ON]  = val;      return;
   2724                  
   2725                  case SET_TK_CUR: case SET_TK_POW:          
   2726                      //(&page.tkCurrent)[reg-SET_TK_CUR] = val;   
   2727                      dst = (BYTE *) &( (&page.tkCurrent)[reg-SET_TK_CUR] );
   \                     ??setFloat_1:
   \   000077   EA           MOV     A,R2
   \   000078   249D         ADD     A,#-0x63
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   806C         SJMP    ??setFloat_6
   2728                  break;
   2729                  
   2730                  //case SET_VIN_DISABLE_RADIO:                                        page.VinDisableRadio  = val;  return;
   2731          
   2732                  case SET_LC00:  case SET_LC01:  case SET_LC10:  case SET_LC11:  
   2733                  case SET_LC20:  case SET_LC21:  case SET_LC30:  case SET_LC31:  
   2734                  case SET_LC40:  case SET_LC41:  case SET_LC50:  case SET_LC51:  // linearK [6][2]  
   2735                  case SET_LC60:  case SET_LC61:
   2736                      if( reg == 14 ){ zerofill( (BYTE *)&k_oc2timer, 4 );  recomputeOC2Timer = TRUE; }
   \                     ??setFloat_2:
   \   000081   740E         MOV     A,#0xe
   \   000083   65..         XRL     A,?V0 + 2
   \   000085   700C         JNZ     ??setFloat_7
   \   000087                ; Setup parameters for call to function zerofill
   \   000087   7904         MOV     R1,#0x4
   \   000089   7A..         MOV     R2,#(k_oc2timer & 0xff)
   \   00008B   7B..         MOV     R3,#((k_oc2timer >> 8) & 0xff)
   \   00008D   12....       LCALL   zerofill
   \   000090   75..01       MOV     ?V0 + 3,#0x1
   2737                      reg -= SET_LC00;
   \                     ??setFloat_7:
   \   000093   74F6         MOV     A,#-0xa
   \   000095   25..         ADD     A,?V0 + 2
   \   000097   F5..         MOV     ?V0 + 2,A
   2738                      //page.linearK[reg>>1][reg&1]     = val; 
   2739                      dst = (BYTE *) &page.linearK[reg>>1][reg&1]; 
   \   000099   C3           CLR     C
   \   00009A   13           RRC     A
   \   00009B   F5..         MOV     ?V0 + 0,A
   \   00009D   7403         MOV     A,#0x3
   \   00009F   78..         MOV     R0,#?V0 + 0
   \   0000A1   12....       LCALL   ?S_SHL
   \   0000A4   E5..         MOV     A,?V0 + 2
   \   0000A6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A8   E4           CLR     A
   \   0000A9   92E0         MOV     0xE0 /* A   */.0,C
   \   0000AB   F5..         MOV     ?V0 + 4,A
   \   0000AD   75..00       MOV     ?V0 + 5,#0x0
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   78..         MOV     R0,#?V0 + 4
   \   0000B4   12....       LCALL   ?S_SHL
   \   0000B7   E5..         MOV     A,?V0 + 4
   \   0000B9   24..         ADD     A,#((page + 40) & 0xff)
   \   0000BB   F8           MOV     R0,A
   \   0000BC   E4           CLR     A
   \   0000BD   34..         ADDC    A,#(((page + 40) >> 8) & 0xff)
   \   0000BF   F9           MOV     R1,A
   \   0000C0   E5..         MOV     A,?V0 + 0
   \   0000C2   28           ADD     A,R0
   \   0000C3   F5..         MOV     ?V0 + 0,A
   \   0000C5   E5..         MOV     A,?V0 + 1
   \   0000C7   39           ADDC    A,R1
   \   0000C8   8023         SJMP    ??setFloat_6
   2740          //            if( reg == 4 ){
   2741          //                T3CC1 = oc2timer( theOC ); // lin coeff for 
   2742          //                #ifdef MidString
   2743          //                compute98();
   2744          //                #endif
   2745          //            }
   2746                  break;
   2747                  case SET_VREF0:                   invVref0 = 1 / (*ptr);                    // go through
   \                     ??setFloat_4:
   \   0000CA   75..00       MOV     ?V0 + 8,#0x0
   \   0000CD   75..00       MOV     ?V0 + 9,#0x0
   \   0000D0   75..80       MOV     ?V0 + 10,#-0x80
   \   0000D3   75..3F       MOV     ?V0 + 11,#0x3f
   \   0000D6   78..         MOV     R0,#?V0 + 8
   \   0000D8   79..         MOV     R1,#?V0 + 4
   \   0000DA   12....       LCALL   ?FLT_DIV
   \   0000DD   90....       MOV     DPTR,#invVref0
   \   0000E0   78..         MOV     R0,#?V0 + 8
   \   0000E2   12....       LCALL   ?L_MOV_TO_X
   2748                  case SET_VREF1: case SET_VREF2:   
   2749                      //mymemcpy( (BYTE *) &page.vrefPolynom[reg-SET_VREF0], (BYTE *) ptr, 4 );
   2750                      dst = (BYTE *) &page.vrefPolynom[reg-SET_VREF0];
   \                     ??setFloat_3:
   \   0000E5   EA           MOV     A,R2
   \   0000E6   24BC         ADD     A,#-0x44
   \   0000E8   F5..         MOV     ?V0 + 0,A
   \   0000EA   EB           MOV     A,R3
   \   0000EB   34FF         ADDC    A,#-0x1
   \                     ??setFloat_6:
   \   0000ED   F5..         MOV     ?V0 + 1,A
   2751                  break;
   2752              }
   2753              if( dst ) mymemcpy( dst, (BYTE *) ptr, 4 );
   \                     ??setFloat_5:
   \   0000EF   E5..         MOV     A,?V0 + 0
   \   0000F1   7002         JNZ     ??setFloat_8
   \   0000F3   E5..         MOV     A,?V0 + 1
   \                     ??setFloat_8:
   \   0000F5   600D         JZ      ??setFloat_9
   \   0000F7                ; Setup parameters for call to function mymemcpy
   \   0000F7   7904         MOV     R1,#0x4
   \   0000F9   EE           MOV     A,R6
   \   0000FA   FC           MOV     R4,A
   \   0000FB   EF           MOV     A,R7
   \   0000FC   FD           MOV     R5,A
   \   0000FD   AA..         MOV     R2,?V0 + 0
   \   0000FF   AB..         MOV     R3,?V0 + 1
   \   000101   12....       LCALL   mymemcpy
   2754              if( recomputeOC2Timer ) T3CC1 = oc2timer( theOC );
   \                     ??setFloat_9:
   \   000104   E5..         MOV     A,?V0 + 3
   \   000106   6003         JZ      ??CrossCallReturnLabel_86
   \   000108                ; Setup parameters for call to function oc2timer
   \   000108   12....       LCALL   ??Subroutine34_0
   2755          }
   \                     ??CrossCallReturnLabel_86:
   \   00010B   02....       LJMP    ?Subroutine113
   \   00010E                REQUIRE T3CC1
   2756          /******************************************************************************/
   2757          #define NULLOP          0
   2758          #define SETREG          0x10
   2759          #define RESET           0x20
   2760          #define SILENCE         0x30
   2761          #define CALIBRATE_R     0x40
   2762          #define SET_MAC_CMD     0x50
   2763          #define BOOT_OVER_AIR   0x60
   2764          #define SET_NEXT_KEY    0x70
   2765          #define SET_NEXT_IV     0x80
   2766          #define ASVOL_NETCMD    0x90
   2767          #define SHORT_NETJOIN   0xF0
   2768          
   2769          #define BROADCAST       0
   2770          #define STRINGADDR      1
   2771          #define NIADDR          2
   2772          #define MACADDR         3
   2773          
   2774          #define FLOAT_VAL       0
   2775          #define BYTE_VAL        (1<<2)
   2776          #define SHORT_VAL       (2<<2)
   2777          #define LONG_VAL        (3<<2)
   2778          
   2779          /******************************************************************************
   2780          * @fn  parseCommands
   2781          * @brief       This function parses commands and sets global flags
   2782          * Parameters:
   2783          * @return void
   2784          ******************************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   2785          void parseCommands(BYTE l){
   \                     parseCommands:
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   2786          BYTE *ptr     = radioPktBuffer + 8;
   \   000007   7E..         MOV     R6,#((radioPktBuffer + 8) & 0xff)
   \   000009   7F..         MOV     R7,#(((radioPktBuffer + 8) >> 8) & 0xff)
   2787          BYTE cmd, reg;
   2788          BOOL flag = TRUE, /*addrFlag = FALSE,*/ individualAddr = FALSE;
   \   00000B   75..01       MOV     ?V0 + 2,#0x1
   \   00000E   75..00       MOV     ?V0 + 3,#0x0
   \   000011   802D         SJMP    ??parseCommands_0
   2789          static UINT16 cmdCnt = 0; //, i;
   2790              while( *ptr && (l--) ){
   2791                  cmd = *ptr++; 
   2792                  if( (cmd & 0xF0) == SHORT_NETJOIN ){
   2793                      reg = *ptr++;
   \                     ??parseCommands_1:
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 0,A
   \   000016   A3           INC     DPTR
   \   000017   0E           INC     R6
   \   000018   AF83         MOV     R7,DPH
   2794                      if( mymemcmp( page.myMac, ptr, 6 ) == 0 ){ page.netId = (cmd & 0xF); page.myBunch = reg; }
   \   00001A                ; Setup parameters for call to function mymemcmp
   \   00001A   7906         MOV     R1,#0x6
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   7A..         MOV     R2,#((page + 6) & 0xff)
   \   000022   7B..         MOV     R3,#(((page + 6) >> 8) & 0xff)
   \   000024   12....       LCALL   mymemcmp
   \   000027   E9           MOV     A,R1
   \   000028   700E         JNZ     ??parseCommands_2
   \   00002A   740F         MOV     A,#0xf
   \   00002C   55..         ANL     A,?V0 + 5
   \   00002E   90....       MOV     DPTR,#(page + 2)
   \   000031   F0           MOVX    @DPTR,A
   \   000032   E5..         MOV     A,?V0 + 0
   \   000034   90....       MOV     DPTR,#(page + 3)
   \   000037   F0           MOVX    @DPTR,A
   2795                      ptr += 6;
   \                     ??parseCommands_2:
   \   000038   EE           MOV     A,R6
   \   000039   2406         ADD     A,#0x6
   \                     ??parseCommands_3:
   \   00003B   FE           MOV     R6,A
   \                     ??parseCommands_4:
   \   00003C   EF           MOV     A,R7
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   FF           MOV     R7,A
   2796                  }else{
   \                     ??parseCommands_0:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??CrossCallReturnLabel_262
   \   00004B   AB..         MOV     R3,?V0 + 4
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   2B           ADD     A,R3
   \   000050   F5..         MOV     ?V0 + 4,A
   \   000052   EB           MOV     A,R3
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??CrossCallReturnLabel_262
   \   000058   8A..         MOV     ?V0 + 5,R2
   \   00005A   A3           INC     DPTR
   \   00005B   AE82         MOV     R6,DPL
   \   00005D   AF83         MOV     R7,DPH
   \   00005F   74F0         MOV     A,#-0x10
   \   000061   55..         ANL     A,?V0 + 5
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   74F0         MOV     A,#-0x10
   \   000067   65..         XRL     A,?V0 + 0
   \   000069   60A8         JZ      ??parseCommands_1
   2797                      if( search_stat == 2 ) search_stat = page.searchCommunication;
   \   00006B   90....       MOV     DPTR,#search_stat
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6402         XRL     A,#0x2
   \   000071   7003         JNZ     ??CrossCallReturnLabel_134
   \   000073   12....       LCALL   ?Subroutine52
   2798                      //mymemcpy( (BYTE *)&cmdCnt, ptr, 2 ); 
   2799                      cmdCnt = *((UINT16 *)ptr);
   \                     ??CrossCallReturnLabel_134:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_183:
   \   00007D   90....       MOV     DPTR,#??cmdCnt
   \   000080   12....       LCALL   ??Subroutine67_0
   2800                      ptr+=2;
   \                     ??CrossCallReturnLabel_219:
   \   000083   EE           MOV     A,R6
   \   000084   2402         ADD     A,#0x2
   \   000086   0E           INC     R6
   \   000087   0E           INC     R6
   \   000088   EF           MOV     A,R7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   FF           MOV     R7,A
   2801                      switch( cmd & 0x3 ){ 
   \   00008C   EE           MOV     A,R6
   \   00008D   2402         ADD     A,#0x2
   \   00008F   EF           MOV     A,R7
   \   000090   3400         ADDC    A,#0x0
   \   000092   F9           MOV     R1,A
   \   000093   7403         MOV     A,#0x3
   \   000095   55..         ANL     A,?V0 + 5
   \   000097   F5..         MOV     ?V0 + 1,A
   \   000099   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for parseCommands>_0`:
   \   00009C   00           DB        0
   \   00009D   03           DB        3
   \   00009E   ....         DW        ??parseCommands_5
   \   0000A0   ....         DW        ??parseCommands_6
   \   0000A2   ....         DW        ??parseCommands_7
   \   0000A4   ....         DW        ??parseCommands_8
   \   0000A6   ....         DW        ??parseCommands_9
   2802                          case BROADCAST:                                                             flag = TRUE; break;
   \                     ??parseCommands_6:
   \   0000A8   75..01       MOV     ?V0 + 2,#0x1
   \   0000AB   8067         SJMP    ??parseCommands_5
   2803                          case STRINGADDR: flag = ( *((UINT16 *) ptr) == page.groupId );              ptr += 2;    break;
   \                     ??parseCommands_7:
   \   0000AD   12....       LCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_111:
   \   0000B0   90....       MOV     DPTR,#(page + 4)
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6A           XRL     A,R2
   \   0000B5   7003         JNZ     ??parseCommands_10
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   6B           XRL     A,R3
   \                     ??parseCommands_10:
   \   0000BA   7004         JNZ     ??parseCommands_11
   \   0000BC   7A01         MOV     R2,#0x1
   \   0000BE   8002         SJMP    ??parseCommands_12
   \                     ??parseCommands_11:
   \   0000C0   7A00         MOV     R2,#0x0
   \                     ??parseCommands_12:
   \   0000C2   8A..         MOV     ?V0 + 2,R2
   \                     ??parseCommands_13:
   \   0000C4   0E           INC     R6
   \   0000C5   0E           INC     R6
   \   0000C6   E9           MOV     A,R1
   \   0000C7   804A         SJMP    ??parseCommands_14
   2804                          case NIADDR:     flag = ( ptr[0] == page.myBunch && ptr[1] == page.netId ); individualAddr = flag; ptr += 2;    break;
   \                     ??parseCommands_8:
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FA           MOV     R2,A
   \   0000CF   90....       MOV     DPTR,#(page + 3)
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6A           XRL     A,R2
   \   0000D4   7012         JNZ     ??parseCommands_15
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   FA           MOV     R2,A
   \   0000DD   90....       MOV     DPTR,#(page + 2)
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6A           XRL     A,R2
   \   0000E2   7004         JNZ     ??parseCommands_15
   \   0000E4   7A01         MOV     R2,#0x1
   \   0000E6   8002         SJMP    ??parseCommands_16
   \                     ??parseCommands_15:
   \   0000E8   7A00         MOV     R2,#0x0
   \                     ??parseCommands_16:
   \   0000EA   8A..         MOV     ?V0 + 2,R2
   \   0000EC   85....       MOV     ?V0 + 3,?V0 + 2
   \   0000EF   80D3         SJMP    ??parseCommands_13
   2805                          case MACADDR:    
   2806                              flag = ( mymemcmp( page.myMac, ptr, 6 ) == 0 );// flag = TRUE; else flag = FALSE;
   \                     ??parseCommands_9:
   \   0000F1                ; Setup parameters for call to function mymemcmp
   \   0000F1   7906         MOV     R1,#0x6
   \   0000F3   EE           MOV     A,R6
   \   0000F4   FC           MOV     R4,A
   \   0000F5   EF           MOV     A,R7
   \   0000F6   FD           MOV     R5,A
   \   0000F7   7A..         MOV     R2,#((page + 6) & 0xff)
   \   0000F9   7B..         MOV     R3,#(((page + 6) >> 8) & 0xff)
   \   0000FB   12....       LCALL   mymemcmp
   \   0000FE   E9           MOV     A,R1
   \   0000FF   7004         JNZ     ??parseCommands_17
   \   000101   7A01         MOV     R2,#0x1
   \   000103   8002         SJMP    ??parseCommands_18
   \                     ??parseCommands_17:
   \   000105   7A00         MOV     R2,#0x0
   \                     ??parseCommands_18:
   \   000107   8A..         MOV     ?V0 + 2,R2
   2807                              individualAddr = flag;
   \   000109   85....       MOV     ?V0 + 3,?V0 + 2
   2808                              ptr += 6;
   \   00010C   EE           MOV     A,R6
   \   00010D   2406         ADD     A,#0x6
   \   00010F   FE           MOV     R6,A
   \   000110   EF           MOV     A,R7
   \   000111   3400         ADDC    A,#0x0
   \                     ??parseCommands_14:
   \   000113   FF           MOV     R7,A
   2809                          break;
   2810                      }
   2811                      //addrFlag = flag;
   2812                      if( cmdCnt ){
   \                     ??parseCommands_5:
   \   000114   90....       MOV     DPTR,#??cmdCnt
   \   000117   E0           MOVX    A,@DPTR
   \   000118   7002         JNZ     ??parseCommands_19
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \                     ??parseCommands_19:
   \   00011C   6035         JZ      ??parseCommands_20
   2813                          if( cmdCount > 0xFF00 &&  cmdCnt < 0x100 ) cmdCount = cmdCnt;
   \   00011E   90....       MOV     DPTR,#cmdCount
   \   000121   C3           CLR     C
   \   000122   E0           MOVX    A,@DPTR
   \   000123   9401         SUBB    A,#0x1
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   94FF         SUBB    A,#-0x1
   \   000129   4017         JC      ??parseCommands_21
   \   00012B   C3           CLR     C
   \   00012C   90....       MOV     DPTR,#(??cmdCnt + 1)
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   9401         SUBB    A,#0x1
   \   000132   500E         JNC     ??parseCommands_21
   \   000134   90....       MOV     DPTR,#??cmdCnt
   \   000137   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_184:
   \   00013A   90....       MOV     DPTR,#cmdCount
   \   00013D   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_220:
   \   000140   8011         SJMP    ??parseCommands_20
   2814                          else                                       flag = flag && (cmdCnt > cmdCount);
   \                     ??parseCommands_21:
   \   000142   E5..         MOV     A,?V0 + 2
   \   000144   6009         JZ      ??parseCommands_22
   \   000146   12....       LCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_61:
   \   000149   5004         JNC     ??parseCommands_22
   \   00014B   7A01         MOV     R2,#0x1
   \   00014D   8002         SJMP    ??parseCommands_23
   \                     ??parseCommands_22:
   \   00014F   7A00         MOV     R2,#0x0
   \                     ??parseCommands_23:
   \   000151   8A..         MOV     ?V0 + 2,R2
   2815                      }
   2816                      if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
   \                     ??parseCommands_20:
   \   000153   12....       LCALL   ?Subroutine23
   \                     ??CrossCallReturnLabel_62:
   \   000156   5006         JNC     ??CrossCallReturnLabel_221
   \   000158   90....       MOV     DPTR,#cmdCount
   \   00015B   12....       LCALL   ??Subroutine67_0
   2817                      switch( cmd & 0xF0 ){
   \                     ??CrossCallReturnLabel_221:
   \   00015E   8E82         MOV     DPL,R6
   \   000160   8F83         MOV     DPH,R7
   \   000162   A3           INC     DPTR
   \   000163   A882         MOV     R0,DPL
   \   000165   A983         MOV     R1,DPH
   \   000167   E5..         MOV     A,?V0 + 0
   \   000169   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for parseCommands>_1`:
   \   00016C   00           DB        0
   \   00016D   06           DB        6
   \   00016E   10           DB        16
   \   00016F   ....         DW        ??parseCommands_24
   \   000171   20           DB        32
   \   000172   ....         DW        ??parseCommands_25
   \   000174   50           DB        80
   \   000175   ....         DW        ??parseCommands_26
   \   000177   70           DB        112
   \   000178   ....         DW        ??parseCommands_27
   \   00017A   80           DB        128
   \   00017B   ....         DW        ??parseCommands_27
   \   00017D   90           DB        144
   \   00017E   ....         DW        ??parseCommands_28
   \   000180   ....         DW        ??parseCommands_0
   2818                          case SET_MAC_CMD:
   2819                            if( flag && ( ( cmd & 0x3 ) == MACADDR ) ) {
   \                     ??parseCommands_26:
   \   000182   E5..         MOV     A,?V0 + 2
   \   000184   7003         JNZ     $+5
   \   000186   02....       LJMP    ??parseCommands_2
   \   000189   7403         MOV     A,#0x3
   \   00018B   65..         XRL     A,?V0 + 1
   \   00018D   6003         JZ      $+5
   \   00018F   02....       LJMP    ??parseCommands_2
   2820                                mymemcpy( page.myMac, ptr, 6 );
   \   000192                ; Setup parameters for call to function mymemcpy
   \   000192   7906         MOV     R1,#0x6
   \   000194   EE           MOV     A,R6
   \   000195   FC           MOV     R4,A
   \   000196   EF           MOV     A,R7
   \   000197   FD           MOV     R5,A
   \   000198   7A..         MOV     R2,#((page + 6) & 0xff)
   \   00019A   7B..         MOV     R3,#(((page + 6) >> 8) & 0xff)
   \   00019C   12....       LCALL   mymemcpy
   \   00019F   02....       LJMP    ??parseCommands_2
   2821                                //savePB();
   2822                            }
   2823                            ptr += 6;
   2824                          break;
   2825                          case SETREG:
   2826                              if( search_stat != page.searchCommunication ) page.searchCommunication = search_stat;
   \                     ??parseCommands_24:
   \   0001A2   90....       MOV     DPTR,#search_stat
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   FA           MOV     R2,A
   \   0001A7   90....       MOV     DPTR,#(page + 194)
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   A2E7         MOV     C,0xE0 /* A   */.7
   \   0001AD   E4           CLR     A
   \   0001AE   92E0         MOV     0xE0 /* A   */.0,C
   \   0001B0   6A           XRL     A,R2
   \   0001B1   6010         JZ      ??parseCommands_29
   \   0001B3   90....       MOV     DPTR,#search_stat
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B9   7583..       MOV     DPH,#(((page + 194) >> 8) & 0xff)
   \   0001BC   7582..       MOV     DPL,#((page + 194) & 0xff)
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   92E7         MOV     0xE0 /* A   */.7,C
   \   0001C2   F0           MOVX    @DPTR,A
   2827                              reg = *ptr++;
   \                     ??parseCommands_29:
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   F5..         MOV     ?V0 + 0,A
   \   0001CA   E8           MOV     A,R0
   \   0001CB   FE           MOV     R6,A
   \   0001CC   E9           MOV     A,R1
   \   0001CD   FF           MOV     R7,A
   2828                              switch( cmd&0xC ){
   \   0001CE   740C         MOV     A,#0xc
   \   0001D0   55..         ANL     A,?V0 + 5
   \   0001D2   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for parseCommands>_2`:
   \   0001D5   00           DB        0
   \   0001D6   03           DB        3
   \   0001D7   00           DB        0
   \   0001D8   ....         DW        ??parseCommands_30
   \   0001DA   04           DB        4
   \   0001DB   ....         DW        ??parseCommands_31
   \   0001DD   08           DB        8
   \   0001DE   ....         DW        ??parseCommands_32
   \   0001E0   ....         DW        ??parseCommands_0
   2829                                  case FLOAT_VAL:  if( flag ) setFloat( reg, (float *)ptr );       ptr+=4;  break;
   \                     ??parseCommands_30:
   \   0001E2   E5..         MOV     A,?V0 + 2
   \   0001E4   6009         JZ      ??parseCommands_33
   \   0001E6                ; Setup parameters for call to function setFloat
   \   0001E6   EE           MOV     A,R6
   \   0001E7   FA           MOV     R2,A
   \   0001E8   EF           MOV     A,R7
   \   0001E9   FB           MOV     R3,A
   \   0001EA   A9..         MOV     R1,?V0 + 0
   \   0001EC   12....       LCALL   setFloat
   \                     ??parseCommands_33:
   \   0001EF   EE           MOV     A,R6
   \   0001F0   2404         ADD     A,#0x4
   \   0001F2   02....       LJMP    ??parseCommands_3
   2830                                  case BYTE_VAL:   if( flag ) setByte ( reg, *ptr );               ptr++;   break;
   \                     ??parseCommands_31:
   \   0001F5   E5..         MOV     A,?V0 + 2
   \   0001F7   600B         JZ      ??parseCommands_34
   \   0001F9                ; Setup parameters for call to function setByte
   \   0001F9   8E82         MOV     DPL,R6
   \   0001FB   8F83         MOV     DPH,R7
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   FA           MOV     R2,A
   \   0001FF   A9..         MOV     R1,?V0 + 0
   \   000201   12....       LCALL   setByte
   \                     ??parseCommands_34:
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   A3           INC     DPTR
   \   000209   0E           INC     R6
   \   00020A   AF83         MOV     R7,DPH
   \   00020C   02....       LJMP    ??parseCommands_0
   2831                                  case SHORT_VAL:  if( flag ) setInt  ( reg, *((UINT16*)ptr) );    ptr+=2;  break;
   \                     ??parseCommands_32:
   \   00020F   E5..         MOV     A,?V0 + 2
   \   000211   6008         JZ      ??parseCommands_35
   \   000213                ; Setup parameters for call to function setInt
   \   000213   12....       LCALL   ?Subroutine45
   \                     ??CrossCallReturnLabel_112:
   \   000216   A9..         MOV     R1,?V0 + 0
   \   000218   12....       LCALL   setInt
   \                     ??parseCommands_35:
   \   00021B   EE           MOV     A,R6
   \   00021C   2402         ADD     A,#0x2
   \   00021E   0E           INC     R6
   \   00021F   0E           INC     R6
   \   000220   02....       LJMP    ??parseCommands_4
   2832                              }
   2833                          break;
   2834                          case RESET: if( flag ){ tickWait( 12 * TICKS_IN_MS ); reset(); }else break; // ticks[ Reset ] = TICKS_IN_SEC; else break;
   \                     ??parseCommands_25:
   \   000223   E5..         MOV     A,?V0 + 2
   \   000225   7003         JNZ     $+5
   \   000227   02....       LJMP    ??parseCommands_0
   \   00022A                ; Setup parameters for call to function tickWait
   \   00022A   7918         MOV     R1,#0x18
   \   00022C   12....       LCALL   tickWait
   \   00022F                ; Setup parameters for call to function reset
   \   00022F   12....       LCALL   reset
   2835                          /*
   2836                          case BOOT_OVER_AIR: if( addrFlag && !P1_4 ) {
   2837                          UINT16 addr;  
   2838                              page.searchCommunication = FALSE;
   2839                              reg = *ptr++; addr = *((UINT16*)ptr);  
   2840                              if( ( addr > 0x3FF ) && ( 0x4000 & ( addr ^ page.imageAddr ) ) && ( addr < PAGEADDR ) ){
   2841                              //static BYTE bootBuf[18];
   2842                                  ptr += 2;
   2843                                  //for( cmd = 0; cmd < reg; cmd++ ) bootBuf[ cmd ] = *ptr++;
   2844                                  //mymemcpy( bootBuf, ptr, reg );
   2845                                  if( reg & 1 ) reg++;
   2846                                  tickWait( 12 * TICKS_IN_MS );
   2847                                  initiateTransfer( ptr, (BYTE *)addr, reg );
   2848                              }
   2849                          }return;
   2850                          */
   2851                          case SET_NEXT_KEY: case SET_NEXT_IV: 
   2852                              if( individualAddr ){ 
   \                     ??parseCommands_27:
   \   000232   E5..         MOV     A,?V0 + 3
   \   000234   603C         JZ      ??CrossCallReturnLabel_262
   2853                                  loadKey( (char *)0x3E0 ); loadIV( (char *)0x3F0 ); 
   \   000236                ; Setup parameters for call to function load
   \   000236   7AE0         MOV     R2,#-0x20
   \   000238   7B03         MOV     R3,#0x3
   \   00023A   12....       LCALL   ??Subroutine81_0
   \                     ??CrossCallReturnLabel_263:
   \   00023D                ; Setup parameters for call to function load
   \   00023D   7AF0         MOV     R2,#-0x10
   \   00023F   7B03         MOV     R3,#0x3
   \   000241   7906         MOV     R1,#0x6
   \   000243   12....       LCALL   ??Subroutine81_1
   2854                                  decode( 16, (char *)ptr, ((cmd&0xF0)==SET_NEXT_IV) ? (char *)nextIV : (char *)nextKey ); 
   \                     ??CrossCallReturnLabel_266:
   \   000246   7480         MOV     A,#-0x80
   \   000248   65..         XRL     A,?V0 + 0
   \   00024A   7008         JNZ     ??parseCommands_36
   \   00024C   75....       MOV     ?V0 + 0,#(nextIV & 0xff)
   \   00024F   75....       MOV     ?V0 + 1,#((nextIV >> 8) & 0xff)
   \   000252   8006         SJMP    ??parseCommands_37
   \                     ??parseCommands_36:
   \   000254   75....       MOV     ?V0 + 0,#(nextKey & 0xff)
   \   000257   75....       MOV     ?V0 + 1,#((nextKey >> 8) & 0xff)
   \                     ??parseCommands_37:
   \   00025A                ; Setup parameters for call to function code
   \   00025A   78..         MOV     R0,#?V0 + 0
   \   00025C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00025F   EE           MOV     A,R6
   \   000260   FC           MOV     R4,A
   \   000261   EF           MOV     A,R7
   \   000262   FD           MOV     R5,A
   \   000263   7A10         MOV     R2,#0x10
   \   000265   7902         MOV     R1,#0x2
   \   000267   12....       LCALL   `code`
   \   00026A   7402         MOV     A,#0x2
   \   00026C   12....       LCALL   ?DEALLOC_XSTACK8
   2855                                  loadKey( page.curKey );
   \   00026F                ; Setup parameters for call to function load
   \   00026F   12....       LCALL   ?Subroutine81
   \                     ??CrossCallReturnLabel_262:
   \   000272   7F06         MOV     R7,#0x6
   \   000274   02....       LJMP    ?FUNC_LEAVE_XDATA
   2856                              }
   2857                          return;
   2858                          case ASVOL_NETCMD:
   2859                              if( individualAddr ){
   \                     ??parseCommands_28:
   \   000277   EE           MOV     A,R6
   \   000278   2407         ADD     A,#0x7
   \   00027A   F5..         MOV     ?V0 + 0,A
   \   00027C   EF           MOV     A,R7
   \   00027D   3400         ADDC    A,#0x0
   \   00027F   F5..         MOV     ?V0 + 1,A
   \   000281   E5..         MOV     A,?V0 + 3
   \   000283   602E         JZ      ??parseCommands_38
   2860                                  BYTE *saved_ptr = ptr;
   2861                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000285   43C640       ORL 0xC6, #0x40
   2862                                  asm( "NOP" );
   \   000288   00           NOP
   2863                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000289   43C640       ORL 0xC6, #0x40
   2864                                  asm( "NOP" );
   \   00028C   00           NOP
   2865                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00028D   43C640       ORL 0xC6, #0x40
   2866                                  asm( "NOP" );
   \   000290   00           NOP
   2867                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000291   43C640       ORL 0xC6, #0x40
   2868                                  asm( "NOP" );
   \   000294   00           NOP
   2869                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000295   43C640       ORL 0xC6, #0x40
   2870                                  asm( "NOP" );
   \   000298   00           NOP
   2871                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   000299   43C640       ORL 0xC6, #0x40
   2872                                  asm( "NOP" );
   \   00029C   00           NOP
   2873                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   00029D   43C640       ORL 0xC6, #0x40
   2874                                  asm( "NOP" );
   \   0002A0   00           NOP
   2875                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   0002A1   43C640       ORL 0xC6, #0x40
   2876                                  asm( "NOP" );
   \   0002A4   00           NOP
   2877                                  asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
   \   0002A5   43C640       ORL 0xC6, #0x40
   2878                                  asm( "NOP" );
   \   0002A8   00           NOP
   2879                                  if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" ); ptr += 7; break; }  
   \   0002A9   90....       MOV     DPTR,#isOnTestStand
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   700B         JNZ     ??parseCommands_39
   \   0002AF   12....       LCALL   ?Subroutine48
   \                     ??CrossCallReturnLabel_123:
   \   0002B2   00           NOP
   2880                                
   2881                                  cmd = *ptr++;
   2882                                  page.channel = page.starting500Channel = *ptr++;                // 7 bytes so far, 1 bit free
   2883                                  page.edAddr  =                           *ptr++;
   2884                                  page.gwAddr  =                           *ptr++;
   2885                                  page.myBunch =                           *ptr++;
   2886                                  page.groupId =                           *((UINT16 *) ptr);  ptr += 2;
   2887          
   2888                                  page.netId   =     0xF & cmd;
   2889                                  page.use12kbod  = (0!=(0x10 & cmd ) )?1:0;
   2890                                  page.useFEC     = (0!=(0x20 & cmd ) )?1:0;
   2891                                  page.use250kbod = (0!=(0x40 & cmd ) )?1:0;
   2892                                  
   2893                                  mymemcpy( (BYTE *)(&page.installDate), (BYTE *)&utcLast, 4);
   2894                                  savePB();
   2895                                  ptr = saved_ptr+7;
   2896                                  setup_hopper( page.channel );
   2897                                  setupRadio(   page.channel ); //page.is500Always ? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
   2898                              }else ptr+=7;
   \                     ??parseCommands_38:
   \   0002B3   AE..         MOV     R6,?V0 + 0
   \   0002B5   AF..         MOV     R7,?V0 + 1
   \   0002B7   02....       LJMP    ??parseCommands_0
   \                     ??parseCommands_39:
   \   0002BA   8E82         MOV     DPL,R6
   \   0002BC   8F83         MOV     DPH,R7
   \   0002BE   E0           MOVX    A,@DPTR
   \   0002BF   F5..         MOV     ?V0 + 5,A
   \   0002C1   E8           MOV     A,R0
   \   0002C2   FE           MOV     R6,A
   \   0002C3   E9           MOV     A,R1
   \   0002C4   FF           MOV     R7,A
   \   0002C5   8E82         MOV     DPL,R6
   \   0002C7   8F83         MOV     DPH,R7
   \   0002C9   E0           MOVX    A,@DPTR
   \   0002CA   A3           INC     DPTR
   \   0002CB   0E           INC     R6
   \   0002CC   AF83         MOV     R7,DPH
   \   0002CE   90....       MOV     DPTR,#(page + 218)
   \   0002D1   F0           MOVX    @DPTR,A
   \   0002D2   90....       MOV     DPTR,#(page + 164)
   \   0002D5   12....       LCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_327:
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   90....       MOV     DPTR,#(page + 190)
   \   0002DC   12....       LCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_249:
   \   0002DF   90....       MOV     DPTR,#(page + 191)
   \   0002E2   12....       LCALL   ?Subroutine77
   \                     ??CrossCallReturnLabel_250:
   \   0002E5   90....       MOV     DPTR,#(page + 3)
   \   0002E8   12....       LCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_328:
   \   0002EB   A3           INC     DPTR
   \   0002EC   12....       LCALL   ??Subroutine60_0
   \                     ??CrossCallReturnLabel_185:
   \   0002EF   90....       MOV     DPTR,#(page + 4)
   \   0002F2   12....       LCALL   ??Subroutine67_0
   \                     ??CrossCallReturnLabel_222:
   \   0002F5   740F         MOV     A,#0xf
   \   0002F7   55..         ANL     A,?V0 + 5
   \   0002F9   90....       MOV     DPTR,#(page + 2)
   \   0002FC   F0           MOVX    @DPTR,A
   \   0002FD   90....       MOV     DPTR,#(page + 194)
   \   000300   E5..         MOV     A,?V0 + 5
   \   000302   A2E4         MOV     C,0xE0 /* A   */.4
   \   000304   E0           MOVX    A,@DPTR
   \   000305   92E2         MOV     0xE0 /* A   */.2,C
   \   000307   F0           MOVX    @DPTR,A
   \   000308   90....       MOV     DPTR,#(page + 219)
   \   00030B   E5..         MOV     A,?V0 + 5
   \   00030D   A2E5         MOV     C,0xE0 /* A   */.5
   \   00030F   E0           MOVX    A,@DPTR
   \   000310   92E4         MOV     0xE0 /* A   */.4,C
   \   000312   F0           MOVX    @DPTR,A
   \   000313   E5..         MOV     A,?V0 + 5
   \   000315   A2E6         MOV     C,0xE0 /* A   */.6
   \   000317   E0           MOVX    A,@DPTR
   \   000318   92E1         MOV     0xE0 /* A   */.1,C
   \   00031A   F0           MOVX    @DPTR,A
   \   00031B                ; Setup parameters for call to function mymemcpy
   \   00031B   7904         MOV     R1,#0x4
   \   00031D   7C..         MOV     R4,#(utcLast & 0xff)
   \   00031F   7D..         MOV     R5,#((utcLast >> 8) & 0xff)
   \   000321   7A..         MOV     R2,#((page + 148) & 0xff)
   \   000323   7B..         MOV     R3,#(((page + 148) >> 8) & 0xff)
   \   000325   12....       LCALL   mymemcpy
   \   000328                ; Setup parameters for call to function savePB
   \   000328   12....       LCALL   savePB
   \   00032B   AE..         MOV     R6,?V0 + 0
   \   00032D   AF..         MOV     R7,?V0 + 1
   \   00032F                ; Setup parameters for call to function setup_hopper
   \   00032F   90....       MOV     DPTR,#(page + 164)
   \   000332   E0           MOVX    A,@DPTR
   \   000333   F9           MOV     R1,A
   \   000334   12....       LCALL   setup_hopper
   \   000337                ; Setup parameters for call to function setupRadio
   \   000337   12....       LCALL   ??Subroutine51_0
   \                     ??CrossCallReturnLabel_132:
   \   00033A   02....       LJMP    ??parseCommands_0
   \   00033D                REQUIRE CLKCON
   2899                          break;
   2900                      }
   2901                      //if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
   2902                  }
   2903              }
   2904          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine104
   \                     ??CrossCallReturnLabel_329:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV     DPTR,#??cmdCnt
   \   000003   12....       LCALL   ?Subroutine99
   \                     ??CrossCallReturnLabel_316:
   \   000006   7583..       MOV     DPH,#((cmdCount >> 8) & 0xff)
   \   000009   7582..       MOV     DPL,#(cmdCount & 0xff)
   \   00000C   12....       LCALL   ?Subroutine95
   \                     ??CrossCallReturnLabel_305:
   \   00000F   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??cmdCnt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3f800000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3f800000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_447a0000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_447a0000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_42c80000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_42c80000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_c1c80000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_c1c80000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _slot>`:
   \   000000   5000         DW 80

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _join_slot>`:
   \   000000   3000         DW 48

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _gw_delay>`:
   \   000000   3C00         DW 60

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _loop_delay>`:
   \   000000   5000         DW 80

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for _datarate>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for search_stat>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for lastCycle>`:
   \   000000   9006         DW 1680

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cyclesTo500>`:
   \   000000   7800         DW 120

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cyclesTo10>`:
   \   000000   DC00         DW 220

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cyclesToStep500Channel>`:
   \   000000   1400         DW 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cycles2Step10Channel>`:
   \   000000   1E00         DW 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cycles2SoftKick>`:
   \   000000   0800         DW 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cycles2HardKick>`:
   \   000000   5000         DW 80

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for calibrationRepeat>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ocShortCircuitLimit>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ModuleOffRememberedPtr>`:
   \   000000   FDFF         DW 0FFFDH

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for alignMPP>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gnd_shift>`:
   \   000000   A8FD         DW -600

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for checkForFETFailure>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for netValue>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for si>`:
   \   000000   00F5         DW 0F500H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for adcChannels>`:
   \   000000   B1B2B3BC     DB 177, 178, 179, 188, 183, 176, 181, 180, 182
   \            B7B0B5B4
   \            B6      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for indices>`:
   \   000000   000102FF     DB 0, 1, 2, 255, 255, 3, 255, 6, 5
   \            FF03FF06
   \            05      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for switchTo255Lim>`:
   \   000000   D4AD         DW 44500

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for switchFrom255Lim>`:
   \   000000   10A4         DW 42000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for shortCircuitProtectionOn>`:
   \   000000   1027         DW 10000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for shortCircuitProtectionOff>`:
   \   000000   5834         DW 13400

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for theKey>`:
   \   000000   414E4453     DB 65, 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7
   \            006C6172
   \            41756775
   \            73740007
   \   000010   41756775     DB 65, 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7
   \            73740007
   \            41756775
   \            73740007

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for defFreq>`:
   \   000000   AA6A6400     DD 6580906

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for the_frequency>`:
   \   000000   646AAA       DB 100, 106, 170

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sleepCounter>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for wasAHardResetOrPowerOn>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for xored>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for theShift>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for cnt>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3f800000>`:
   \   000000   0000803F     DD 3F800000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_447a0000>`:
   \   000000   00007A44     DD 447A0000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_42c80000>`:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_c1c80000>`:
   \   000000   0000C8C1     DD 0C1C80000H
   2905          inline void rc(void){
   2906          //    CLKCON |= OSC_BIT;                    // starting the RC Oscillator
   2907          //    asm( "NOP" );
   2908          //    SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
   2909          }
   2910          /*==== END OF FILE ==========================================================*/

   Maximum stack usage in bytes:

     Function                ISTACK PSTACK XSTACK
     --------                ------ ------ ------
     abs                         0      0     15
     armAdcs                     2      0      0
     checkItOut                  3      0      0
     checkMore                   0      0      9
     checkVin                    2      0     46
       -> ov_startup             0      0     30
       -> ov_startup             0      0     30
       -> lin_coeff              0      0     30
       -> convU                  0      0     30
       -> switchTo255            0      0     30
       -> switchTo255            0      0     30
       -> read_page              0      0     30
       -> softKick               0      0     30
       -> lin_coeff_t            0      0     30
       -> ov_startup             0      0     30
       -> oc2timer               0      0     30
       -> oc2timer               0      0     30
       -> oc2timer               0      0     30
       -> lin_coeff              0      0     30
       -> convU                  0      0     30
       -> oc2timer               0      0     30
       -> oc2timer               0      0     30
     computeADCs                 1      0     42
       -> substractGround        0      0     62
       -> lin                    0      0     62
       -> cube_coeff             0      0     62
       -> addDF                  0      0     62
       -> computeAdjustment      0      0     62
       -> computeAdjustment      0      0     62
       -> computeAdjustment      0      0     62
       -> lin_coeff              0      0     62
       -> convU                  0      0     62
       -> convU                  0      0     62
       -> convU                  0      0     62
       -> convS                  0      0     62
       -> convS                  0      0     62
       -> convS                  0      0     62
       -> checkVin               0      0     62
     computeAdjustment           0      0     46
     computeTI                   3      0      0
     copyMac                     0      0      8
       -> mymemcpy               0      0      0
     cube_coeff                  0      0     46
     dec                         2      0     11
     def_freq                    0      0     15
       -> mymemcpy               0      0      0
     init                        0      0     15
       -> zerofill               0      0     30
       -> setup_hopper           0      0     30
       -> dmaRadioSetup          0      0     30
       -> def_freq               0      0     30
       -> setupRadio             0      0     30
     lin                         0      0     46
       -> lin_coeff_t            0      0     30
     lin_coeff                   0      0     46
     lin_coeff_t                 0      0     30
     longTickWait                1      0      0
       -> tickWait               2      0      0
     main                        2      0      0
       -> reset                  0      0      0
       -> checkMore              0      0      0
       -> zerofill               0      0      0
       -> read_page              0      0      0
       -> mymemcpy               0      0      0
       -> oc2timer               0      0      0
       -> zerofill               0      0      0
       -> init                   0      0      0
       -> load                   0      0      0
       -> wait_aes               0      0      0
       -> longTickWait           0      0      0
       -> mymemcmp               0      0      0
       -> reset                  0      0      0
       -> quartz                 0      0      0
       -> softKick               0      0      0
       -> reset                  0      0      0
       -> reset                  0      0      0
       -> main_loop              0      0      0
       -> reset                  0      0      0
     main_loop                   2      0     11
       -> setupRepeater          0      0     22
       -> receive                0      0     22
       -> setupRepeater          0      0     22
       -> receive                0      0     22
       -> prepareJoinRequest     0      0     22
       -> parseGWPackage         0      0     22
       -> computeADCs            0      0     22
       -> dec                    0      0     22
       -> softKick               0      0     22
       -> switchTo255            0      0     22
       -> dec                    0      0     22
       -> setupRadio             0      0     22
       -> dec                    0      0     22
       -> setupRadio             0      0     22
       -> dec                    0      0     22
       -> setupRadio             0      0     22
       -> dec                    0      0     22
       -> hop                    0      0     22
       -> sendData               0      0     22
       -> ov_startup             0      0     22
       -> hop                    0      0     22
       -> setupRepeater          0      0     22
       -> receive                0      0     22
       -> oc2timer               0      0     22
       -> prepareData            0      0     22
     mult                        0      0     17
     multSaver                   0      0     15
     nextSlot                    0      0      9
     oc2timer                    0      0     38
     ov_startup                  2      0     15
     parseCommands               2      0     30
       -> mymemcmp               0      0     26
       -> mymemcmp               0      0     26
       -> mymemcpy               0      0     26
       -> setFloat               0      0     26
       -> setByte                0      0     26
       -> setInt                 0      0     26
       -> tickWait               0      0     26
       -> reset                  0      0     26
       -> load                   0      0     26
       -> wait_aes               0      0     26
       -> load                   0      0     26
       -> wait_aes               0      0     26
       -> code                   0      0     30
       -> load                   0      0     26
       -> wait_aes               0      0     26
       -> mymemcpy               0      0     26
       -> savePB                 0      0     26
       -> setup_hopper           0      0     26
       -> setupRadio             0      0     26
     parseGWPackage              2      0     28
       -> setupRepeater          0      0     30
       -> setupRepeater          0      0     30
       -> receive                0      0     30
       -> sendData               0      0     30
       -> sendData               0      0     30
       -> load                   0      0     30
       -> wait_aes               0      0     30
       -> code                   0      0     34
       -> mymemcpy               0      0     30
       -> mymemcmp               0      0     30
       -> mymemcmp               0      0     30
       -> abs                    0      0     30
       -> addDF                  0      0     30
       -> mymemcpy               0      0     30
       -> mymemcpy               0      0     30
       -> mymemcpy               0      0     30
       -> tickWait               0      0     30
       -> parseCommands          0      0     30
       -> setupRepeater          0      0     30
     prepareCoeff                0      0     27
       -> convU                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> convS                  0      0     38
       -> prepareSpecial         0      0     38
     prepareData                 1      0     19
       -> prepareCoeff           0      0     16
       -> prepareScaling         0      0     16
       -> computeADCs            0      0     16
       -> mymemcpy               0      0     16
       -> copyMac                0      0     16
       -> mymemcpy               0      0     16
       -> prepareTxBuffer        0      0     16
     prepareJoinRequest          2      0     11
       -> mymemcpy               4      0      0
       -> copyMac                4      0      0
       -> prepareTxBuffer        4      0      0
     prepareScaling              0      0     16
       -> prepareSpecial         0      0     16
     prepareSpecial              0      0     27
       -> mymemcpy               0      0     16
       -> copyMac                0      0     16
       -> mymemcpy               0      0     16
     prepareTxBuffer             0      0     19
       -> load                   0      0     18
       -> wait_aes               0      0     18
       -> code                   0      0     22
     processCheck                0      0     15
       -> lin_coeff              0      0     30
     quartz                      0      0      8
       -> halWait                0      0     16
     readNextValue               1      0     11
       -> zerofill               0      0     22
     read_page                   2      0     15
       -> mymemcpy               4      0      0
       -> mymemcpy               4      0      0
       -> switchTo255            4      0      0
     receive                     3      0     15
     restoreRadio                2      0      0
     savePB                      2      0     13
       -> reset                  4      0      0
       -> reset                  4      0      0
       -> tickWait               4      0      0
       -> initiateTransfer       4      0      0
       -> tickWait               4      0      0
     sendData                    3      0     15
       -> setupRepeater          4      0      0
     setByte                     2      0     24
       -> ov_startup             0      0     22
       -> ov_startup             0      0     22
       -> ov_startup             0      0     22
       -> oc2timer               0      0     22
       -> setup_hopper           0      0     22
       -> softKick               0      0     22
       -> refreshTheFlash        0      0     22
       -> savePB                 0      0     22
       -> setupRadio             0      0     22
       -> setupRadio             0      0     22
       -> setupRadio             0      0     22
       -> savePB                 0      0     22
       -> mymemcpy               0      0     22
       -> mymemcpy               0      0     22
       -> zerofill               0      0     22
       -> load                   0      0     22
       -> wait_aes               0      0     22
       -> mymemcpy               0      0     22
       -> oc2timer               0      0     22
       -> oc2timer               0      0     22
       -> mymemcpy               0      0     22
       -> softKick               0      0     22
     setFloat                    0      0     32
       -> zerofill               0      0     38
       -> mymemcpy               0      0     38
       -> oc2timer               0      0     38
     setInt                      1      0     21
       -> tickWait               0      0     16
     setupRadio                  2      0     15
       -> setupRadioDR           4      0      0
     setupRadioDR                1      0      8
       -> tickWait               0      0     16
       -> radioConfigure         0      0     16
       -> radioConfigure         0      0     16
     setupRepeater               2      0     15
       -> setupRadioDR           4      0      0
       -> setupRadio             4      0      0
     softKick                    3      0     15
       -> zerofill               4      0      0
       -> def_freq               4      0      0
       -> load                   4      0      0
       -> wait_aes               4      0      0
       -> setupRadio             4      0      0
       -> zerofill               4      0      0
       -> computeADCs            4      0      0
     switchTo255                 2      0     15
       -> mymemcpy               4      0      0
       -> mymemcpy               4      0      0
       -> softKick               4      0      0
     tickWait                    0      0     24


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     P0INP                             1
     _A_P1                             1
     RFIM                              1
     IEN2                              1
     S1CON                             1
     _A_IEN0                           1
     FWT                               1
     FADDRH                            1
     FCTL                              1
     ADCCON1                           1
     ADCCON3                           1
     _A_IEN1                           1
     ADCL                              1
     ADCH                              1
     RNDL                              1
     RNDH                              1
     SLEEP                             1
     CLKCON                            1
     WDCTL                             1
     T3CTL                             1
     T3CCTL0                           1
     T3CC0                             1
     T3CCTL1                           1
     T3CC1                             1
     DMAARM                            1
     T1CC0L                            1
     T1CC0H                            1
     RFST                              1
     T1CNTL                            1
     T1CNTH                            1
     T1CTL                             1
     T1CCTL0                           1
     RFIF                              1
     PERCFG                            1
     ADCCFG                            1
     P0SEL                             1
     P1SEL                             1
     P2SEL                             1
     P0DIR                             1
     P1DIR                             1
     _slot                             2
     _join_slot                        2
     _gw_delay                         2
     _loop_delay                       2
     _datarate                         1
     page                            242
     base_ptr                          2
     search_stat                       1
     invVref0                          4
     theRealOffset                     1
     adcBuf                          144
     adcs                             36
     adcs16                           18
     adcsTemp                         18
     tempAdcsCount                     1
     ticks2ProcessCmd                  2
     cmdCount                          2
     lastCycle                         2
     cyclesTo500                       2
     cyclesTo10                        2
     cyclesToStep500Channel            2
     cycles2Step10Channel              2
     cycles2SoftKick                   2
     cycles2HardKick                   2
     cyclesFromStart                   2
     temperatureProtectionDelay        2
     decodeDelay                       2
     curChannel                        1
     curBunch                          1
     bufferCount                       1
     adcCount                          1
     reportScaling                     1
     joinRequestWasSend                1
     resetReason                       1
     theOC                             1
     setOC                             1
     reportFlashCheck                  1
     calibrationRepeat                 1
     cyclesToHop                       1
     bunchCount                        1
     got_gw                            1
     isOnTestStand                     1
     ocShortCircuitLimit               1
     ModuleOffRememberedPtr            2
     ProtectionLimitsExceeded          1
     enable2SendData                   1
     txDisabled                        1
     alignMPP                          1
     from_flash                        1
     turnOnFlag                        1
     isCalibrationPackage              1
     was_listening                     1
     rcgen                             1
     ch255                             1
     packagePrepared                   1
     gnd_shift                         2
     utc                               4
     ms                                2
     utcLast                           4
     msLast                            2
     processingTime                    2
     pt                                2
     mdmcfg4_cycles                    2
     fetFailure                        1
     checkForFETFailure                1
     netValue                          2
     default_pb                      242
     si                                2
     flags                             2
     ticks                             2
     adcChannels                       9
     indices                           9
     lastOff                           2
     lastRssi                          2
     switchTo255Lim                    2
     switchFrom255Lim                  2
     shortCircuitProtectionOn          2
     shortCircuitProtectionOff         2
     theKey                           32
     nextKey                          16
     nextIV                           16
     k_oc2timer                        4
     oc2timer                        136
     ?Subroutine113                    5
     abs                              26
     ?Subroutine64                     5
     ?Subroutine110                    4
     ?Subroutine116                    6
     defFreq                           4
     the_frequency                     3
     def_freq                         14
     setupRadioDR                    108
     ?Subroutine24                    10
     ?Subroutine120                    5
     ?Subroutine89                    10
     ?Subroutine108                   11
     ?Subroutine80                     9
     setupRadio                       26
     ?Subroutine115                    6
     setupRepeater                    44
     ?Subroutine51                     9
     softKick                         90
     ?Subroutine81                    13
     ?Subroutine118                    5
     ?Subroutine91                     7
     ?Subroutine106                    9
     ?Subroutine119                    5
     ?Subroutine112                    9
     ?Subroutine1                      8
     ?Subroutine2                     18
     restoreRadio                     10
     init                            148
     ?Subroutine121                   20
     ov_startup                       48
     ?Subroutine5                     17
     _coeff                            2
     invRef                            4
     mult                             30
     ?Subroutine83                    10
     ?Subroutine26                     8
     lin_coeff                        49
     ?Subroutine46                     7
     ?Subroutine92                     6
     ?Subroutine47                     8
     ?Subroutine100                    4
     ?Subroutine109                    4
     lin_coeff_t                      42
     lin                              82
     cube_coeff                       80
     ?Subroutine124                   10
     checkVref                         4
     processCheck                     44
     last                             18
     checkVoutOnT                      2
     checkPD                           2
     read_page                       117
     ?Subroutine84                     9
     switchTo255                      84
     ?Subroutine78                     6
     ?Subroutine68                    16
     iOutIin1Diff                      2
     iOutIin2Diff                      2
     checkVin                       1104
     ?Subroutine82                    23
     ?Subroutine75                    15
     ?Subroutine71                     8
     ?Subroutine66                     7
     ?Subroutine103                    4
     ?Subroutine44                    11
     ?Subroutine34                     9
     ?Subroutine105                    8
     ?Subroutine4                     16
     ?Subroutine49                     4
     ?Subroutine102                    9
     ?Subroutine57                     9
     ?Subroutine114                   10
     ?Subroutine0                     13
     ?Subroutine55                     4
     ?Subroutine45                     8
     ?Subroutine117                    5
     ?Subroutine20                     9
     ?Subroutine6                     12
     ?Subroutine3                     14
     ?Subroutine73                     6
     ?Subroutine60                     7
     ?Subroutine99                     4
     ?Subroutine107                    6
     ?Subroutine96                    10
     ?Subroutine94                     7
     ?Subroutine8                      8
     ?Subroutine101                    6
     ?Subroutine67                     7
     ?Subroutine111                    6
     ?Subroutine95                     7
     currentFETTickCount               2
     protectionModuleOffTimer          2
     checkItOut                       22
     ptr2RunningTick                   2
     computeTI                        42
     tickWait                         69
     ?Subroutine122                    6
     checkMore                        75
     ?Subroutine86                    12
     ?Subroutine85                    19
     dec                              28
     sleepCounter                      1
     saved_channel                     1
     wasAHardResetOrPowerOn            1
     milliSeconds                      2
     seconds                           1
     minutes                           1
     was_repeater                      1
     main_loop                      1270
     ?Subroutine123                    5
     ?Subroutine65                    18
     ?Subroutine41                    10
     ?Subroutine40                    17
     ?Subroutine27                    18
     ?Subroutine21                    12
     ?Subroutine15                    13
     ?Subroutine12                    19
     ?Subroutine7                     19
     ?Subroutine35                    13
     ?Subroutine31                     6
     ?Subroutine17                     4
     ?Subroutine61                     5
     ?Subroutine58                     4
     ?Subroutine98                    10
     ?Subroutine56                     7
     ?Subroutine50                     6
     ?Subroutine39                    10
     ?Subroutine36                     4
     ?Subroutine93                    13
     ?Subroutine16                     9
     ?Subroutine14                    24
     ?Subroutine25                     6
     ?Subroutine32                     4
     ?Subroutine88                    11
     ?Subroutine54                     4
     ?Subroutine37                    13
     ?Subroutine30                     6
     ?Subroutine22                     9
     ?Subroutine10                    14
     ?Subroutine90                     5
     ?Subroutine9                     19
     xored                             1
     longTickWait                     20
     main                            772
     ?Subroutine38                     3
     ?Subroutine29                     6
     ?Subroutine76                     6
     ?Subroutine70                    15
     ?Subroutine72                     9
     ?Subroutine42                    10
     ?Subroutine28                    13
     ?Subroutine52                    14
     armAdcs                          49
     ?Subroutine33                    11
     readNextValue                   297
     theShift                          2
     prepareTxBuffer                  63
     copyMac                          10
     ndev                              1
     prevRssi                          2
     coefficients_buffer              24
     prepareData                     383
     ?Subroutine62                     9
     ?Subroutine79                    12
     prepareSpecial                   63
     prepareCoeff                    252
     prepareScaling                   66
     prepareJoinRequest               53
     quartz                           51
     q                                 1
     sendData                         76
     ?Subroutine43                     4
     utcLocal                          4
     msLocal                           2
     parseGWPackage                 1771
     ?Subroutine63                     7
     ?Subroutine59                     4
     ?Subroutine97                     7
     ?Subroutine53                    11
     ?Subroutine13                    22
     ?Subroutine11                    18
     ?Subroutine74                     8
     bunch                             1
     plen                              1
     cnt                               1
     nextSlot                         61
     ?Subroutine87                     9
     receive                          56
     vref                              4
     t                                 4
     computeAdjustment                47
     multSaver                        53
     computeADCs                    1374
     ?Subroutine19                    22
     ?Subroutine18                    22
     ?Subroutine104                    6
     acc                               4
     df                                4
     mV                                4
     rOff                              4
     temp                             36
     setByte                        1121
     savePB                          154
     ?Subroutine48                    14
     setInt                          358
     setFloat                        270
     parseCommands                   829
     ?Subroutine77                     9
     ?Subroutine23                    16
     cmdCnt                            2
     __Constant_3f800000               4
     __Constant_447a0000               4
     __Constant_0                      4
     __Constant_42c80000               4
     __Constant_c1c80000               4
     ?<Initializer for _slot>          2
     ?<Initializer for _join_slot>     2
     ?<Initializer for _gw_delay>      2
     ?<Initializer for _loop_delay>    2
     ?<Initializer for _datarate>      1
     ?<Initializer for search_stat>    1
     ?<Initializer for lastCycle>      2
     ?<Initializer for cyclesTo500>    2
     ?<Initializer for cyclesTo10>     2
     ?<Initializer for cyclesToStep500Channel>
                                       2
     ?<Initializer for cycles2Step10Channel>
                                       2
     ?<Initializer for cycles2SoftKick>
                                       2
     ?<Initializer for cycles2HardKick>
                                       2
     ?<Initializer for calibrationRepeat>
                                       1
     ?<Initializer for ocShortCircuitLimit>
                                       1
     ?<Initializer for ModuleOffRememberedPtr>
                                       2
     ?<Initializer for alignMPP>       1
     ?<Initializer for gnd_shift>      2
     ?<Initializer for checkForFETFailure>
                                       1
     ?<Initializer for netValue>       2
     ?<Initializer for si>             2
     ?<Initializer for adcChannels>    9
     ?<Initializer for indices>        9
     ?<Initializer for switchTo255Lim>
                                       2
     ?<Initializer for switchFrom255Lim>
                                       2
     ?<Initializer for shortCircuitProtectionOn>
                                       2
     ?<Initializer for shortCircuitProtectionOff>
                                       2
     ?<Initializer for theKey>        32
     ?<Initializer for defFreq>        4
     ?<Initializer for the_frequency>
                                       3
     ?<Initializer for sleepCounter>
                                       1
     ?<Initializer for wasAHardResetOrPowerOn>
                                       1
     ?<Initializer for xored>          1
     ?<Initializer for theShift>       2
     ?<Initializer for cnt>            1
     ?<Initializer for __Constant_3f800000>
                                       4
     ?<Initializer for __Constant_447a0000>
                                       4
     ?<Initializer for __Constant_0>
                                       4
     ?<Initializer for __Constant_42c80000>
                                       4
     ?<Initializer for __Constant_c1c80000>
                                       4

 
 13 249 bytes in segment NEAR_CODE
     40 bytes in segment SFR_AN
    127 bytes in segment XDATA_I
    127 bytes in segment XDATA_ID
    242 bytes in segment XDATA_ROM_C
    709 bytes in segment XDATA_Z
 
 13 356 bytes of CODE  memory (+ 20 bytes shared)
    242 bytes of CONST memory
      0 bytes of DATA  memory (+ 40 bytes shared)
    816 bytes of XDATA memory (+ 20 bytes shared)

Errors: none
Warnings: 3
