///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR 8051 C/C++ Compiler V7.30B/W32                   02/Apr/2018  11:06:41 /
// Copyright 2004-2007 IAR Systems. All rights reserved.                      /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\Project_1500V_dec20\ED\code\AndStackED\source\ /
//                          main.c                                            /
//    Command line       =  E:\Project_1500V_dec20\ED\code\AndStackED\source\ /
//                          main.c -D NDEBUG -D chip=2510 -D LOWER_IMAGE -D   /
//                          MidString -D MIDSTRING -lCN                       /
//                          "E:\Project_1500V_dec20\ED\iar\Build .hex for     /
//                          CC2510\List\" -lA "E:\Project_1500V_dec20\ED\iar\ /
//                          Build .hex for CC2510\List\" -o                   /
//                          "E:\Project_1500V_dec20\ED\iar\Build .hex for     /
//                          CC2510\Obj\" -e -z9 --core=plain --dptr=16,1      /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 32 -I    /
//                          E:\Project_1500V_dec20\ED\iar\..\CODE\AndStackED\ /
//                          INCLUDE\ -I E:\Project_1500V_dec20\ED\iar\..\CODE /
//                          \LIBRARY\HAL\INCLUDE\ -I                          /
//                          E:\Project_1500V_dec20\ED\iar\..\CODE\LIBRARY\HAL /
//                          _BUI\INCLUDE\ -I C:\IARSystems-CD-730B\8051\INC\  /
//    List file          =  E:\Project_1500V_dec20\ED\iar\Build .hex for      /
//                          CC2510\List\main.s51                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?FLT_TO_L
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SUB_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SC_DIV_MOD
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_GT_X
        EXTERN ?UL_TO_FLT
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBWEAK CLKCON
        PUBWEAK DMAARM
        PUBWEAK FADDRH
        PUBWEAK FCTL
        PUBWEAK FWT
        PUBWEAK IEN2
        PUBLIC ModuleOffRememberedPtr
        PUBWEAK P0DIR
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK P2SEL
        PUBWEAK PERCFG
        PUBWEAK RFIF
        PUBWEAK RFIM
        PUBWEAK RFST
        PUBWEAK RNDH
        PUBWEAK RNDL
        PUBWEAK S1CON
        PUBWEAK SLEEP
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CCTL0
        PUBWEAK T1CNTH
        PUBWEAK T1CNTL
        PUBWEAK T1CTL
        PUBWEAK T3CC0
        PUBWEAK T3CC1
        PUBWEAK T3CCTL0
        PUBWEAK T3CCTL1
        PUBWEAK T3CTL
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_3f800000
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_c1c80000
        PUBLIC _coeff
        PUBLIC _datarate
        PUBLIC _gw_delay
        PUBLIC _join_slot
        PUBLIC _loop_delay
        PUBLIC _slot
        PUBLIC abs
        FUNCTION abs,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC adcBuf
        PUBLIC adcChannels
        PUBLIC adcCount
        PUBLIC adcs
        PUBLIC adcs16
        PUBLIC adcsTemp
        PUBLIC alignMPP
        PUBLIC armAdcs
        FUNCTION armAdcs,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC base_ptr
        PUBLIC bufferCount
        PUBLIC bunchCount
        PUBLIC calibrationRepeat
        PUBLIC ch255
        PUBLIC checkForFETFailure
        PUBLIC checkItOut
        FUNCTION checkItOut,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC checkMore
        FUNCTION checkMore,0201H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC checkPD
        PUBLIC checkVin
        FUNCTION checkVin,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC checkVoutOnT
        PUBLIC checkVref
        PUBLIC cmdCount
        PUBLIC coefficients_buffer
        PUBLIC computeADCs
        FUNCTION computeADCs,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC computeAdjustment
        FUNCTION computeAdjustment,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC computeTI
        FUNCTION computeTI,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC copyMac
        FUNCTION copyMac,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC cube_coeff
        FUNCTION cube_coeff,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC curBunch
        PUBLIC curChannel
        PUBLIC cycles2HardKick
        PUBLIC cycles2SoftKick
        PUBLIC cycles2Step10Channel
        PUBLIC cyclesFromStart
        PUBLIC cyclesTo10
        PUBLIC cyclesTo500
        PUBLIC cyclesToHop
        PUBLIC cyclesToStep500Channel
        PUBLIC `dec`
        FUNCTION `dec`,0203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC decodeDelay
        PUBLIC defFreq
        PUBLIC def_freq
        FUNCTION def_freq,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC enable2SendData
        PUBLIC from_flash
        PUBLIC gnd_shift
        PUBLIC got_gw
        PUBLIC iOutIin1Diff
        PUBLIC iOutIin2Diff
        PUBLIC indices
        PUBLIC init
        FUNCTION init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC invRef
        PUBLIC invVref0
        PUBLIC isCalibrationPackage
        PUBLIC isOnTestStand
        PUBLIC joinRequestWasSend
        PUBLIC last
        PUBLIC lastCycle
        PUBLIC lastOff
        PUBLIC lastRssi
        PUBLIC lin
        FUNCTION lin,021203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC lin_coeff
        FUNCTION lin_coeff,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC lin_coeff_t
        FUNCTION lin_coeff_t,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC longTickWait
        FUNCTION longTickWait,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        PUBLIC main
        FUNCTION main,0a1a03H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC main_loop
        FUNCTION main_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC mdmcfg4_cycles
        PUBLIC milliSeconds
        PUBLIC minutes
        PUBLIC ms
        PUBLIC msLast
        PUBLIC mult
        FUNCTION mult,0203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC multSaver
        FUNCTION multSaver,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC ndev
        PUBLIC nextIV
        PUBLIC nextKey
        PUBLIC nextSlot
        FUNCTION nextSlot,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC oc2timer
        FUNCTION oc2timer,0203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ocShortCircuitLimit
        PUBLIC ov_startup
        FUNCTION ov_startup,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC packagePrepared
        PUBLIC page
        PUBLIC parseCommands
        FUNCTION parseCommands,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC parseGWPackage
        FUNCTION parseGWPackage,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC prepareCoeff
        FUNCTION prepareCoeff,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC prepareData
        FUNCTION prepareData,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareJoinRequest
        FUNCTION prepareJoinRequest,021203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC prepareScaling
        FUNCTION prepareScaling,021603H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareSpecial
        FUNCTION prepareSpecial,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC prepareTxBuffer
        FUNCTION prepareTxBuffer,021201H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC prevRssi
        PUBLIC processCheck
        FUNCTION processCheck,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC processingTime
        PUBLIC pt
        PUBLIC ptr2RunningTick
        PUBLIC quartz
        FUNCTION quartz,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC rcgen
        PUBLIC readNextValue
        FUNCTION readNextValue,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC read_page
        FUNCTION read_page,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC receive
        FUNCTION receive,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC reportFlashCheck
        PUBLIC reportScaling
        PUBLIC resetReason
        PUBLIC restoreRadio
        FUNCTION restoreRadio,0201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC savePB
        FUNCTION savePB,0a1201H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC saved_channel
        PUBLIC search_stat
        PUBLIC seconds
        PUBLIC sendData
        FUNCTION sendData,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC setByte
        FUNCTION setByte,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC setFloat
        FUNCTION setFloat,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC setInt
        FUNCTION setInt,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC setOC
        PUBLIC setupRadio
        FUNCTION setupRadio,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC setupRadioDR
        FUNCTION setupRadioDR,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC setupRepeater
        FUNCTION setupRepeater,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC shortCircuitProtectionOff
        PUBLIC shortCircuitProtectionOn
        PUBLIC si
        PUBLIC sleepCounter
        PUBLIC softKick
        FUNCTION softKick,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC switchFrom255Lim
        PUBLIC switchTo255
        FUNCTION switchTo255,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC switchTo255Lim
        PUBLIC t
        PUBLIC tempAdcsCount
        PUBLIC temperatureProtectionDelay
        PUBLIC theKey
        PUBLIC theOC
        PUBLIC theRealOffset
        PUBLIC the_frequency
        PUBLIC tickWait
        FUNCTION tickWait,0203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ticks2ProcessCmd
        PUBLIC turnOnFlag
        PUBLIC txDisabled
        PUBLIC utc
        PUBLIC utcLast
        PUBLIC vref
        PUBLIC was_listening
        PUBLIC was_repeater
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP DATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8
        CFI Resource V16:8, V17:8, V18:8, V19:8, V20:8, V21:8, V22:8, V23:8
        CFI Resource V24:8, V25:8, V26:8, V27:8, V28:8, V29:8, V30:8, V31:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI V16 SameValue
        CFI V17 SameValue
        CFI V18 SameValue
        CFI V19 SameValue
        CFI V20 SameValue
        CFI V21 SameValue
        CFI V22 SameValue
        CFI V23 SameValue
        CFI V24 SameValue
        CFI V25 SameValue
        CFI V26 SameValue
        CFI V27 SameValue
        CFI V28 SameValue
        CFI V29 SameValue
        CFI V30 SameValue
        CFI V31 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
        EXTERN mymemcpy
        FUNCTION mymemcpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN radioConfigure
        FUNCTION radioConfigure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zerofill
        FUNCTION zerofill,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN load
        FUNCTION load,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN wait_aes
        FUNCTION wait_aes,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN setup_hopper
        FUNCTION setup_hopper,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dmaRadioSetup
        FUNCTION dmaRadioSetup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN convU
        FUNCTION convU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN hop
        FUNCTION hop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN reset
        FUNCTION reset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mymemcmp
        FUNCTION mymemcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `code`
        FUNCTION `code`,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN convS
        FUNCTION convS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halWait
        FUNCTION halWait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN addDF
        FUNCTION addDF,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN substractGround
        FUNCTION substractGround,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN refreshTheFlash
        FUNCTION refreshTheFlash,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initiateTransfer
        FUNCTION initiateTransfer,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN delta
        EXTERN dmaConfig
        EXTERN flashCallback
        FUNCTION flashCallback,0602H
        EXTERN mdm_rate1
        EXTERN perRssiOffset
        EXTERN radioPktBuffer
        EXTERN radioPktBufferRx
        EXTERN radioPktBufferTx

// E:\Project_1500V_dec20\ED\code\AndStackED\source\main.c
//    1 /*==== DECLARATION CONTROL ===================================================*/
//    2 /*==== INCLUDES ==============================================================*/
//    3 
//    4 #include "hal_main.h"

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,091H
// unsigned char volatile __sfr RFIM
RFIM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09bH
// unsigned char volatile __sfr S1CON
S1CON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr FWT
FWT:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0adH
// unsigned char volatile __sfr FADDRH
FADDRH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0aeH
// unsigned char volatile __sfr FCTL
FCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bcH
// unsigned char volatile __sfr RNDL
RNDL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bdH
// unsigned char volatile __sfr RNDH
RNDH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0beH
// unsigned char volatile __sfr SLEEP
SLEEP:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCON
CLKCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cbH
// unsigned char volatile __sfr T3CTL
T3CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ccH
// unsigned char volatile __sfr T3CCTL0
T3CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cdH
// unsigned char volatile __sfr T3CC0
T3CC0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ceH
// unsigned char volatile __sfr T3CCTL1
T3CCTL1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0cfH
// unsigned char volatile __sfr T3CC1
T3CC1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e1H
// unsigned char volatile __sfr RFST
RFST:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e2H
// unsigned char volatile __sfr T1CNTL
T1CNTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e3H
// unsigned char volatile __sfr T1CNTH
T1CNTH:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e5H
// unsigned char volatile __sfr T1CCTL0
T1CCTL0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e9H
// unsigned char volatile __sfr RFIF
RFIF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//    5 #include "main.h"
//    6 #include "parameter_block.h"
//    7 #include "commands.h"
//    8 //#include <stdio.h>
//    9 //#include <stdlib.h>
//   10 //#include <string.h>
//   11 
//   12 #define MKS_IN_TICK     500
//   13 #define TICKS_IN_SEC    2000
//   14 #define TICKS_IN_MS     2
//   15 /*
//   16 #define MKS_IN_TICK     200
//   17 #define TICKS_IN_SEC    5000
//   18 #define TICKS_IN_MS     5
//   19 */
//   20 //UINT32  _freq         = FREQUENCY_FCC_CC2511;

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   21 INT16  _slot         = ( 40 * TICKS_IN_MS );
_slot:
        DS 2
        REQUIRE `?<Initializer for _slot>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   22 INT16  _join_slot    = ( 24 * TICKS_IN_MS );
_join_slot:
        DS 2
        REQUIRE `?<Initializer for _join_slot>`
        REQUIRE __INIT_XDATA_I
//   23 //#define  _slot         ( 40 * TICKS_IN_MS )
//   24 //#define  _join_slot    ( 24 * TICKS_IN_MS )

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   25 INT16  _gw_delay     = ( 30 * TICKS_IN_MS );
_gw_delay:
        DS 2
        REQUIRE `?<Initializer for _gw_delay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   26 INT16  _loop_delay   = ( 40 * TICKS_IN_MS );
_loop_delay:
        DS 2
        REQUIRE `?<Initializer for _loop_delay>`
        REQUIRE __INIT_XDATA_I
//   27 //#define  _gw_delay      ( 30 * TICKS_IN_MS )
//   28 //#define  _loop_delay     ( 40 * TICKS_IN_MS )

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   29 BYTE    _datarate     = DATA_RATE_4_CC2511;
_datarate:
        DS 1
        REQUIRE `?<Initializer for _datarate>`
        REQUIRE __INIT_XDATA_I
//   30 
//   31 //#define _mppCycle            ( TICKS_IN_SEC / 16 ) 
//   32 #define _mppCycle            ( 60 * TICKS_IN_MS ) 
//   33 #define _dogFeeding          ( TICKS_IN_SEC / 16 )
//   34 #define _adjustFrequency     ( (UINT16)TICKS_IN_SEC * 2 )
//   35 #define _firstAdcMeasurement ( TICKS_IN_SEC / 50 )
//   36 //#define _adcMeasurement      ( TICKS_IN_SEC / 100 )
//   37 #define _adcMeasurement      ( 4 * TICKS_IN_MS )
//   38 #define _calibrationDelay    ( TICKS_IN_MS  )
//   39 
//   40 //void configureAdcs(void);
//   41 
//   42 //void feedTheDog(void);
//   43 //BYTE clearAndHop( BYTE p );
//   44 void tickWait(BYTE wait);
//   45 void rc(void);
//   46 void prepareData(void);
//   47 void sendData(BYTE *buffer, BOOL is500 );
//   48 void armAdcs(void);
//   49 void readNextValue(void);
//   50 void parseGWPackage(void);
//   51 //void calibrate(void);
//   52 void computeADCs(BOOL timeout, BOOL accumulateEnergy);
//   53 void prepareJoinRequest(void);
//   54 void prepareScaling(void);
//   55 //void prepareFlashCheck(void);
//   56 void setup500( BOOL flag );
//   57 BYTE *nextSlot(void);
//   58 void switchTo255(void);
//   59 
//   60 void parseCommands(BYTE l);
//   61 void setByte( BYTE reg, BYTE val );
//   62 
//   63 extern void flashCallback(void);
//   64 extern void setup_hopper(BYTE curch);
//   65 extern void hop(void);
//   66 
//   67 extern void wait_aes(void);
//   68 extern void load(const unsigned char what, char *ptr);
//   69 extern void code(    unsigned char what, unsigned char size,  char *from, char *to );
//   70 //extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, UINT16 len);
//   71 extern BOOL initiateTransfer(BYTE *ptr, BYTE *addr, BYTE len);
//   72 //extern void writeTheLatest(BYTE *ptr, BYTE len);
//   73 extern BOOL readTheLatest( BYTE *ptr, BYTE len);
//   74 
//   75 //#ifdef MidString
//   76 //void compute98(void);
//   77 //#endif
//   78 
//   79 #define loadKey( key )                  { load( 0x04, key );     wait_aes(); }
//   80 #define loadIV(  iv )                   { load( 0x06, iv  );     wait_aes(); }
//   81 #define encode( size,  from, to )       code( 0x00, size, from, to );
//   82 #define decode( size,  from, to )       code( 0x02, size, from, to );
//   83 
//   84 // must be even

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   85 ParameterBlock page;
page:
        DS 242
        REQUIRE __INIT_XDATA_Z
//   86 //float energy       = 0.0;
//   87 //float deltaEnergy  = 0.0;

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   88 BYTE *base_ptr = NULL;
base_ptr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   89 
//   90 //#define PAGESIZE 240
//   91 #define PAGESIZE 242
//   92 #define PAGEADDR 0x5C00
//   93 
//   94 //#define ENERGY_WRITE_LIMIT   ((BYTE *) (PAGEADDR + 0x3F0) )
//   95 #ifdef MidString 
//   96     #define KE (1E-3*20.0*1E-3*0.125 / 3600.0)
//   97 #else
//   98     #define KE (1E-3*2.0*1E-3*0.125  / 3600.0)
//   99 #endif

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  100 BYTE  search_stat = 2;
search_stat:
        DS 1
        REQUIRE `?<Initializer for search_stat>`
        REQUIRE __INIT_XDATA_I
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  102 float invVref0 = 0;
invVref0:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  103 INT8 theRealOffset  = 0;
theRealOffset:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 
//  105 /*==== PUBLIC FUNCTIONS ======================================================*/
//  106 #define BUFFER_SIZE 8
//  107 #define BUFFER_MASK 0x7    
//  108 #define N_CHANNELS  9
//  109 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  110 UINT16 adcBuf  [ N_CHANNELS ][ BUFFER_SIZE    ];
adcBuf:
        DS 144
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  111 INT32  adcs[     N_CHANNELS ];
adcs:
        DS 36
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  112 UINT16 adcs16[   N_CHANNELS ];
adcs16:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  114 UINT16 adcsTemp[ N_CHANNELS ];
adcsTemp:
        DS 18
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  115 BYTE tempAdcsCount = 0;
tempAdcsCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  116 
//  117 extern BYTE mdm_rate1[6];
//  118 
//  119 UINT16            

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  120        ticks2ProcessCmd = 0,       
ticks2ProcessCmd:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  121        cmdCount = 0,
cmdCount:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  122        lastCycle   = (40 * TICKS_IN_MS * 21),
lastCycle:
        DS 2
        REQUIRE `?<Initializer for lastCycle>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  123        cyclesTo500 = 120, cyclesTo10 = 220, cyclesToStep500Channel = 20, cycles2Step10Channel = 30,
cyclesTo500:
        DS 2
        REQUIRE `?<Initializer for cyclesTo500>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cyclesTo10:
        DS 2
        REQUIRE `?<Initializer for cyclesTo10>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cyclesToStep500Channel:
        DS 2
        REQUIRE `?<Initializer for cyclesToStep500Channel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2Step10Channel:
        DS 2
        REQUIRE `?<Initializer for cycles2Step10Channel>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  124        cycles2SoftKick = 8, cycles2HardKick = 80, cyclesFromStart = 0;
cycles2SoftKick:
        DS 2
        REQUIRE `?<Initializer for cycles2SoftKick>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
cycles2HardKick:
        DS 2
        REQUIRE `?<Initializer for cycles2HardKick>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
cyclesFromStart:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  125 UINT16 temperatureProtectionDelay, decodeDelay;
temperatureProtectionDelay:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
decodeDelay:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  126 
//  127 // 06/27/2017 - Firmware Version now stored in code
//  128 // Pattern is HHHHLLLL-A_BC, where HHHH is the FWVersionHigh value,
//  129 // LLLL is the FWVersionLow value, A is FWSuffixOne value and
//  130 // BC are the FWSuffixTwo and FWSuffixThree values.  The _ and the
//  131 // - are implied.
//  132 
//  133 static const UINT16  FWVersionHigh = 7000; // LBC need to place official version in code
//  134 static const UINT16  FWVersionLow = 11;
//  135 static const BYTE    FWSuffixOne = '1';
//  136 static const BYTE    FWSuffixTwo = 'B';
//  137 static const BYTE    FWSuffixThree = 'B';
//  138 
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  140 BYTE   curChannel = 0,  curBunch = 0,      
curChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
curBunch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  141        bufferCount = 0, adcCount = 0,  reportScaling = 0,       joinRequestWasSend = 0,
bufferCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
adcCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
reportScaling:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
joinRequestWasSend:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  142        resetReason,     theOC,         setOC,
resetReason:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
theOC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
setOC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  143        reportFlashCheck = 0,           calibrationRepeat = 4,   cyclesToHop = 0, 
reportFlashCheck:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
calibrationRepeat:
        DS 1
        REQUIRE `?<Initializer for calibrationRepeat>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
cyclesToHop:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  144        bunchCount = 0,                 got_gw = 0,              isOnTestStand = 0,
bunchCount:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
got_gw:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
isOnTestStand:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  145        ocShortCircuitLimit = 255;
ocShortCircuitLimit:
        DS 1
        REQUIRE `?<Initializer for ocShortCircuitLimit>`
        REQUIRE __INIT_XDATA_I
//  146 
//  147 
//  148 // Pointer to memory location tracking whether module can turn on,                                              
//  149 // and the three acceptable values. Module turning off because of                                               
//  150 // temperature is not tracked.  Pointer to memory location is                                                   
//  151 // constant.                                                                                                    

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  152 BYTE * const ModuleOffRememberedPtr = ((BYTE *) 0xFFFD);
ModuleOffRememberedPtr:
        DS 2
        REQUIRE `?<Initializer for ModuleOffRememberedPtr>`
        REQUIRE __INIT_XDATA_I
//  153 static const BYTE ModuleStatusOff = 0xE7;
//  154 static const BYTE ModuleStatusOffFetFailure = 0x7E;
//  155 static const BYTE ModuleStatusCanTurnOn = 0x00;
//  156 
//  157 
//  158 /* 12/29/2017 BEGIN Protection global variables */
//  159 
//  160 static const BYTE ModuleStatusOffProtection = 0x6A;
//  161 static const BYTE ModuleStatusOffTemperature = 0xA6;
//  162 
//  163 static const BYTE NoProtectionsSetMask = 0x00;
//  164 static const BYTE VoutLimitMask = 0x040;
//  165 static const BYTE IoutLimitMask = 0x080;
//  166 static const BYTE VoutAndIoutLimitMask = 0xC0;
//  167 static const BYTE NotVoutAndIoutLimitMask = 0x3F;
//  168 static const BYTE NotVoutAndIoutLimitNoCountDownMask = 0x3E;
//  169 
//  170 static const BYTE TemperatureModuleOffMask = 0x20;
//  171 static const BYTE TemperatureSteppedDownMask = 0x10;
//  172 static const BYTE TemperatureModuleOffAndSteppedDownMask = 0x30;
//  173 static const BYTE NotTemperatureModuleOffAndSteppedDownMask = 0xCF;
//  174 
//  175 static const BYTE CountDownTimerActive = 0x01;
//  176 static const BYTE CountDownTimerNotActive = 0xFE;
//  177 
//  178 /* variable to track protection settings */

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  179 static BYTE ProtectionLimitsExceeded = 0x00;
ProtectionLimitsExceeded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  180 
//  181 static const INT16 Volts_50 = 1666; /* 50 * 33.3333 as int16 */
//  182 static const INT16 Amps_1 = 1000;
//  183 
//  184 /* 12/29/2017 END Protection global variables */
//  185 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  186 BOOL   enable2SendData  = FALSE,       txDisabled = FALSE,                    alignMPP = TRUE,
enable2SendData:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
txDisabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
alignMPP:
        DS 1
        REQUIRE `?<Initializer for alignMPP>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  187        from_flash = FALSE,             /*zeroPackageWasNotReceived = FALSE,*/ turnOnFlag = FALSE,  isCalibrationPackage = FALSE,
from_flash:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
turnOnFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
isCalibrationPackage:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  188        was_listening = FALSE, rcgen = FALSE,
was_listening:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
rcgen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  189        ch255 = FALSE,                  packagePrepared = FALSE;//,                  real_cw_mode = FALSE;
ch255:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
packagePrepared:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  190 INT16 gnd_shift = -600;
gnd_shift:
        DS 2
        REQUIRE `?<Initializer for gnd_shift>`
        REQUIRE __INIT_XDATA_I
//  191 
//  192 //UINT16 Vout98 = 0; 
//  193 //INT16  Cur98  = 0;
//  194 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  195 UINT32 utc = 0;
utc:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  196 UINT16 ms  = 0;
ms:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  197 //UINT16 ticks2Prepare = 0;
//  198 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  199 UINT32 utcLast = 0;
utcLast:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  200 UINT16 msLast = 0,  processingTime, pt;
msLast:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
processingTime:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
pt:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  201 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  202 UINT16 mdmcfg4_cycles = 0;
mdmcfg4_cycles:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  203 
//  204 // variables to control turning module on/ "track" FET failures                                             

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  205 static BOOL fetFailure = FALSE; // static variable indicating if a FET failure recognized
fetFailure:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  206 BOOL checkForFETFailure = TRUE; // once FET failure recognized, no longer check unless restart
checkForFETFailure:
        DS 1
        REQUIRE `?<Initializer for checkForFETFailure>`
        REQUIRE __INIT_XDATA_I
//  207 // netValue made global so fetFailure condition can access/change reported "status"

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  208 static UINT16 netValue = MainNetValueStandard;
netValue:
        DS 2
        REQUIRE `?<Initializer for netValue>`
        REQUIRE __INIT_XDATA_I
//  209 
//  210 static __xdata_rom const UINT16 cyclesDefaults[] = {180, 30, 3, 4, 8, 80};

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  211 static __xdata_rom const BYTE default_pb[] = {
default_pb:
        DB 170, 170, 0, 0, 255, 255, 44, 118, 64, 2, 39, 68, 113, 170, 53, 186
        DB 211, 188, 99, 61, 145, 237, 28, 63, 0, 0, 72, 195, 0, 0, 28, 69, 149
        DB 191, 214, 52, 0, 0, 146, 66, 154, 153, 147, 65, 0, 192, 15, 197, 10
        DB 215, 133, 65, 0, 0, 0, 0, 102, 102, 238, 64, 0, 0, 9, 196, 61, 10
        DB 133, 65, 0, 0, 112, 194, 82, 184, 222, 62, 0, 64, 28, 68, 82, 187
        DB 238, 64, 0, 128, 11, 196, 31, 133, 243, 64, 0, 128, 255, 195, 65, 78
        DB 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7, 65, 117
        DB 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7, 0, 0
        DB 188, 2, 80, 0, 6, 255, 53, 130, 200, 0, 59, 143, 40, 0, 1, 2, 3, 0
        DB 255, 255, 255, 255, 255, 255, 240, 240, 0, 0, 0, 170, 255, 120, 128
        DB 77, 255, 203, 72, 102, 84, 203, 72, 102, 84, 203, 72, 102, 84, 172
        DB 197, 167, 55, 23, 183, 81, 56, 1, 1, 90, 200, 255, 2, 1, 255, 255
        DB 23, 1, 164, 154, 56, 255, 40, 0, 30, 0, 3, 0, 4, 0, 8, 0, 80, 0, 63
        DB 8, 241, 31, 241, 31, 255, 137, 255, 255, 25, 70, 110, 100, 90, 10, 7
        DB 11, 60, 10, 24, 252, 10, 20, 1, 0, 0, 0, 85, 85
//  212 /*0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x08, 0x76, 0x40, 0x03, 0x62, 0x7B, 0x71, 0xAA, 0x35, 0xBA, 
//  213 0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x34, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
//  214 0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
//  215 0x9A, 0x99, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4,
//  216 0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
//  217 0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0xF0, 0xF0, 0x18, 0xFC, 0x00, 0x00, 0x00, 0x64, 
//  218 0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  219 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  220 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  221 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
//  222 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 0x53, 0xAE, 0x4C, 0x09, 
//  223 0x53, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0xD2, 0x82, 0xFF, 0x02, 0x01, 
//  224 0xFE, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
//  225 0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFE, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
//  226 0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x00, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
//  227 0x55, 0x55 */
//  228 // channel 255, ed/gw 0201, std key, bunch 0, netid 0
//  229 /* 0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
//  230 0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x48, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
//  231 0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x85, 0xEB, 0x5D, 0x41, 0x00, 0xC0, 0xD0, 0xC4, 
//  232 0x66, 0x66, 0x4A, 0x41, 0x00, 0x00, 0x00, 0x00, 0x8F, 0xC2, 0xFD, 0x40, 0x00, 0x00, 0x12, 0xC4, 
//  233 0x0A, 0xD7, 0x47, 0x41, 0x00, 0x00, 0x00, 0x00, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
//  234 0xEC, 0x51, 0xF8, 0x40, 0x00, 0xC0, 0x13, 0xC4, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 
//  235 0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  236 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  237 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
//  238 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
//  239 0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
//  240 0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
//  241 0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
//  242 0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0xC8, 
//  243 0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 
//  244 0x55, 0x55 */
//  245 // New in code parameter block 09/15/15, defaults according to manufacturing
//  246 // 1st Line : barrier through dFk[0]
//  247 // 2nd Line : dFk[1] through vrefPolynom[0] (dFk[3] changed)
//  248 // 3rd Line : vrefPolynom[1] through linearK[0][1] (linearK[0][0], [0][1] changed)
//  249 // 4th Line : linearK[1][0] through linearK[2][1] (linearK[1][0], [2][0],[2][1] changed)
//  250 // 5th Line : linearK[3][0] through linearK[4][1] (linearK[3][0], [3][1] changed)
//  251 // 6th Line : linearK[5][0] through linearK[6][1] (all four values changed)
//  252 // 7th Line : curKey[AES_SIZE]  
//  253 // 8th Line : curIV[AES_SIZE] 
//  254 // 9th Line : fetFailureCount through IhvLimitVins (only LowCurrentLimitTo255 stayed same)
//  255 // 10th Line: tests[4] through shortCircuitLevel
//  256 // 11th Line: reserved through 3rd byte of utcHigh (did not change the 3 times values)
//  257 // 12th Line: 4th byte of utcHigh through gwAddr  (should oc change?)
//  258 // 13th Line: repeaterChannel through defCyclesToStep10Channel
//  259 // 14th Line: defCycles2SoftKick through ov_startup (changed ov_startup)
//  260 // 15th Line: t_mod_off through vin_switch_off
//  261 // 16th Line: post_barrier
//  262   /*
//  263 0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
//  264 0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x75, 0xC3, 0x00, 0x00, 0x1C, 0x45, 
//  265 0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0xB8, 0x1E, 0xDD, 0x41, 0x00, 0xC0, 0x5A, 0xC5, 
//  266 0xE1, 0x7A, 0xC8, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x40, 0x00, 0x80, 0x0E, 0xC4, 
//  267 0x8F, 0xC2, 0xC7, 0x41, 0x00, 0x00, 0x6B, 0xC3, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44, 
//  268 0xCD, 0xCC, 0xFC, 0x40, 0x00, 0x00, 0x05, 0xC4, 0xC3, 0xF5, 0xF8, 0x40, 0x00, 0x80, 0x12, 0xC4, 
//  269 0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  270 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 
//  271 0x20, 0x4E, 0xBC, 0x02, 0x50, 0x00, 0x00, 0x00, 0x30, 0x75, 0xF0, 0x00, 0xB0, 0x04, 0xF8, 0x7F, 
//  272 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA, 
//  273 0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 
//  274 0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x64, 0x64, 0xFF, 0x02, 0x01, 
//  275 0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00, 
//  276 0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x00, 0xF1, 0x00, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0x46, 
//  277 0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x14, 0x01, 0x00, 0x00, 0x00, 
//  278 0x55, 0x55
//  279   */
//  280  0xAA, 0xAA, 0x00, 0x00, 0xFF, 0xFF, 0x2C, 0x76, 0x40, 0x02, 0x27, 0x44, 0x71, 0xAA, 0x35, 0xBA,
//  281  0xD3, 0xBC, 0x63, 0x3D, 0x91, 0xED, 0x1C, 0x3F, 0x00, 0x00, 0x48, 0xC3, 0x00, 0x00, 0x1C, 0x45,
//  282  0x95, 0xBF, 0xD6, 0x34, 0x00, 0x00, 0x92, 0x42, 0x9A, 0x99, 0x93, 0x41, 0x00, 0xC0, 0x0F, 0xC5,
//  283  0x0A, 0xD7, 0x85, 0x41, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0xEE, 0x40, 0x00, 0x00, 0x09, 0xC4,
//  284  0x3D, 0x0A, 0x85, 0x41, 0x00, 0x00, 0x70, 0xC2, 0x52, 0xB8, 0xDE, 0x3E, 0x00, 0x40, 0x1C, 0x44,
//  285  0x52, 0xBB, 0xEE, 0x40, 0x00, 0x80, 0x0B, 0xC4, 0x1F, 0x85, 0xF3, 0x40, 0x00, 0x80, 0xFF, 0xC3,
//  286  0x41, 0x4E, 0x44, 0x53, 0x00, 0x6C, 0x61, 0x72, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07,
//  287  0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x00, 0x07,
//  288  0x00, 0x00, 0xBC, 0x02, 0x50, 0x00, 0x06, 0xFF, 0x35, 0x82, 0xC8, 0x00, 0x3B, 0x8F, 0x28, 0x00,
//  289  0x01, 0x02, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xAA,
//  290  0xFF, 0x78, 0x80, 0x4D, 0xFF, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66, 0x54, 0xCB, 0x48, 0x66,
//  291  0x54, 0xAC, 0xC5, 0xA7, 0x37, 0x17, 0xB7, 0x51, 0x38, 0x01, 0x01, 0x5A, 0xC8, 0xFF, 0x02, 0x01,
//  292  0xFF, 0xFF, 0x17, 0x01, 0xA4, 0x9A, 0x38, 0xFF, 0x28, 0x00, 0x1E, 0x00, 0x03, 0x00, 0x04, 0x00,
//  293  0x08, 0x00, 0x50, 0x00, 0x3F, 0x08, 0xF1, 0x1F, 0xF1, 0x1F, 0xFF, 0x89, 0xFF, 0xFF, 0x19, 0x46,
//  294  0x6E, 0x64, 0x5A, 0x0A, 0x07, 0x0B, 0x3C, 0x0A, 0x18, 0xFC, 0x0A, 0x14, 0x01, 0x00, 0x00, 0x00,
//  295  0x55, 0x55
//  296 };
//  297 
//  298 //static INT32 counts1[5] = {0L,0L,0L,0L,0L};
//  299 //static INT32 counts2[5] = {0L,0L,0L,0L,0L};
//  300 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  301 SchedulerInterface *si = (SchedulerInterface *)0xF500;
si:
        DS 2
        REQUIRE `?<Initializer for si>`
        REQUIRE __INIT_XDATA_I
//  302 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  303 static BOOL  *flags;// = si->flags;
flags:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  304 static INT16 *ticks;// = si->ticks;
ticks:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  305 
//  306 //float safe_vin;
//  307 //UINT16 safe_vin_16;
//  308 //UINT16 VinTurnOn_16, VinShutOff_16, VinDisableRadio_16;
//  309 
//  310 #define POWER   1
//  311 #define CURRENT 2
//  312 #define EXT_GND 3
//  313 #define REF     4
//  314 
//  315 #define TINT    7
//  316 #define TEXT    6
//  317 
//  318 #define Iin2    8
//  319 
//  320 /*
//  321 const BYTE  adcChannels[ N_CHANNELS ] = {  
//  322   // Vout  0                                         Pin   1                                        Iout  2      
//  323     ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN1,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
//  324   // Gnd ext 3                                       Ref 4
//  325     ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN4,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN6,    
//  326   // Vin  5                                          Text  6                          
//  327     ADC_REF_P0_7   
//  328 | ADC_12_BIT | ADC_AIN0,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN5,    
//  329   // Tin 7
//  330     ADC_REF_P0_7   | ADC_12_BIT | ADC_TEMP_SENS
//  331     //ADC_REF_1_25_V | ADC_12_BIT | ADC_TEMP_SENS
//  332 };
//  333 */
//  334 
//  335 //#define MidString - defined in projects
//  336 
//  337 #ifdef MidString
//  338   #define REFERENCE       ADC_REF_AVDD
//  339   #define REFERENCE_PIN   ADC_AIN7
//  340 #else
//  341   #define REFERENCE       ADC_REF_P0_7
//  342   #define REFERENCE_PIN   ADC_AIN6
//  343 #endif
//  344 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  345 const BYTE  adcChannels[ N_CHANNELS ] = {  
adcChannels:
        DS 9
        REQUIRE `?<Initializer for adcChannels>`
        REQUIRE __INIT_XDATA_I
//  346   // Vout  0                                         Pin   1                                        Iout  2      
//  347     REFERENCE | ADC_12_BIT | ADC_AIN1,      REFERENCE | ADC_12_BIT | ADC_AIN2,    REFERENCE | ADC_12_BIT | ADC_AIN3,    
//  348   // Gnd ext 3                                       Ref 4
//  349     REFERENCE | ADC_12_BIT | ADC_GND,       REFERENCE | ADC_12_BIT | REFERENCE_PIN,    
//  350   // Vin  5                                          Text  6                          
//  351     REFERENCE | ADC_12_BIT | ADC_AIN0,      REFERENCE | ADC_12_BIT | ADC_AIN5,    
//  352   // Tin 7                                           Iin2 8
//  353     REFERENCE | ADC_12_BIT | ADC_AIN4,       REFERENCE | ADC_12_BIT | ADC_AIN6
//  354 };
//  355 /*
//  356 #else
//  357 const BYTE  adcChannels[ N_CHANNELS ] = {  
//  358   // Vout  0                                        Pin   1                                        Iout  2      
//  359     ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN1,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN2,    ADC_REF_P0_7   | ADC_12_BIT | ADC_AIN3,    
//  360   // Gnd ext 3                                      Ref 4
//  361     ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN4,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN6,    
//  362   // Vin  5                                         Text  6                          
//  363     ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN0,      ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN5,    
//  364   // Tin 7                                          Iin2 8 
//  365     ADC_REF_P0_7 | ADC_12_BIT | ADC_TEMP_SENS, ADC_REF_P0_7 | ADC_12_BIT | ADC_AIN7,
//  366   // int Gnd. 9                                     int Ref 10
//  367     ADC_REF_P0_7 | ADC_12_BIT | ADC_GND,       ADC_REF_P0_7 | ADC_12_BIT | ADC_REF
//  368 };
//  369 #endif
//  370 */
//  371 
//  372                                    // Vout Pin Iout           Vin Text  Iout+ Iin2  //  IntGnd  IntRef

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  373 const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 6,    5};   //,    0xFF }; //,   0xFF   };
indices:
        DS 9
        REQUIRE `?<Initializer for indices>`
        REQUIRE __INIT_XDATA_I
//  374 //const BYTE indices[ N_CHANNELS ] = { 0,     1,  2, 0xFF, 0xFF, 3, 0xFF, 0xFF,  5};   //,    0xFF }; //,   0xFF   };

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  375 INT16  lastOff = 0, lastRssi = 0; //, delta = 0;
lastOff:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
lastRssi:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  376 extern INT32 delta;
//  377 
//  378 // 06/26/2017 - Moved from local declarations in function checkVin() to const here
//  379 // old switchTo255Lim -> 60000, old switchFrom255Lim ->  57000 (1000V values shown)
//  380 // old shortCircuitProtectionOn -> 12000, old shortCircuitProtectionOff -> 16000 (1000V values shown)
//  381 // values used in checkVin (global to avoid declaration(s) every 120 MS)
//  382 
//  383 // 07/05/2017 - switchTo255Lim was 43400, switchFrom255Lim was 40000
//  384 #ifdef MidString

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  385 const UINT16 switchTo255Lim = 44500,
switchTo255Lim:
        DS 2
        REQUIRE `?<Initializer for switchTo255Lim>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  386     switchFrom255Lim = 42000, 
switchFrom255Lim:
        DS 2
        REQUIRE `?<Initializer for switchFrom255Lim>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  387     shortCircuitProtectionOn = 10000, 
shortCircuitProtectionOn:
        DS 2
        REQUIRE `?<Initializer for shortCircuitProtectionOn>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  388     shortCircuitProtectionOff = 13400; 
shortCircuitProtectionOff:
        DS 2
        REQUIRE `?<Initializer for shortCircuitProtectionOff>`
        REQUIRE __INIT_XDATA_I
//  389 #endif
//  390 
//  391 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  392 const char theKey[ 2*AES_SIZE ] = { 'A', 'N', 'D', 'S',  0,  'l', 'a', 'r', 'A', 'u', 'g', 'u', 's', 't',  0,   7 ,
theKey:
        DS 32
        REQUIRE `?<Initializer for theKey>`
        REQUIRE __INIT_XDATA_I
//  393                                     'A', 'u', 'g', 'u', 's', 't',  0,   7,  'A', 'u', 'g', 'u', 's', 't',  0,   7 };
//  394 /******************************************************************************/
//  395 
//  396 #define atomicChange( idx, val ) ticks[idx]=val
//  397 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  398 BYTE nextKey[ AES_SIZE ];
nextKey:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  399 BYTE nextIV [ AES_SIZE ];
nextIV:
        DS 16
        REQUIRE __INIT_XDATA_Z
//  400 
//  401 void savePB();
//  402 
//  403 //static const float DEF_CURRENT_MULTYPLIER = 3.93; //7.93; //5.536;
//  404 
//  405 //static float k_oc2timer = 0.0;
//  406 //BYTE oc2timer(BYTE oc){ 
//  407 //INT16 val;
//  408 //#ifdef MidString
//  409 //  if( oc > ocShortCircuitLimit ) oc = ocShortCircuitLimit;  // Short Circuit protection.
//  410 //#endif
//  411 //  if( k_oc2timer < 1.0 ) k_oc2timer = DEF_CURRENT_MULTYPLIER / (page.linearK[2][0]-4.0);
//  412 // //  if( test4Zero((BYTE*)&k_oc2timer, 4) ) k_oc2timer = DEF_CURRENT_MULTYPLIER / page.linearK[2][0];
//  413 //  val = (UINT16)( oc * k_oc2timer + 0.5 );
//  414 //  if( val > 255 ) val = 255;
//  415 //  return (BYTE) val; 
//  416 //}
//  417 
//  418 // 03/24/2017 static const float DEF_CURRENT_MULTYPLIER = 3.93; //7.93; //5.536;
//  419 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  420 static float k_oc2timer = 0.0;
k_oc2timer:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  421 BYTE oc2timer(BYTE oc){ 
oc2timer:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function oc2timer
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 0,R1
//  422 UINT16 val;
//  423 #ifdef MidString
//  424   if( oc > ocShortCircuitLimit ) oc = ocShortCircuitLimit;  // Short Circuit protection.
        MOV     DPTR,#ocShortCircuitLimit
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 0
        JNC     ??oc2timer_0
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  425 #endif
//  426   // 03/24/2017  if( k_oc2timer < 1.0 ) k_oc2timer = DEF_CURRENT_MULTYPLIER / (page.linearK[2][0]-4.0);
//  427   // 03/24/2017 if( k_oc2timer < 1.0 ) k_oc2timer =  7.6 / (page.linearK[2][0]);
//  428   
//  429   if( k_oc2timer < 1.0 ) k_oc2timer =  7.93 / (page.linearK[2][0]);
??oc2timer_0:
        MOV     DPTR,#k_oc2timer
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3f800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_LT
        JNC     ??oc2timer_1
        MOV     ?V0 + 4,#-0x71
        MOV     ?V0 + 5,#-0x3e
        MOV     ?V0 + 6,#-0x3
        MOV     ?V0 + 7,#0x40
        MOV     DPTR,#(page + 56)
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     DPTR,#k_oc2timer
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  430   
//  431 //  if( test4Zero((BYTE*)&k_oc2timer, 4) ) k_oc2timer = DEF_CURRENT_MULTYPLIER / page.linearK[2][0];
//  432 
//  433   // 03/24/2017 added line
//  434   if ( oc > 240 ) oc = 240;
??oc2timer_1:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#-0xf
        JC      ??oc2timer_2
        MOV     ?V0 + 0,#-0x10
//  435   
//  436   // 03/24/2017 val = (UINT16)( oc * k_oc2timer + 0.5 );
//  437   val = (UINT16)( oc * k_oc2timer ); 
??oc2timer_2:
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#k_oc2timer
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R0,?V0 + 0
//  438   if( val > 255 ) val = 255;
        CLR     C
        MOV     A,?V0 + 1
        SUBB    A,#0x1
        JC      ??oc2timer_3
        MOV     R0,#-0x1
//  439   return (BYTE) val; 
??oc2timer_3:
        MOV     A,R0
        MOV     R1,A
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine113
        ; // Fall through to label ?Subroutine113
//  440 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine113:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0xc
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  441 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  442 INT16 abs( INT16 a ) { return ( a > 0 ) ? a : -a; }
abs:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function abs
        ; Saved register size: 0
        ; Auto size: 0
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        LCALL   ?Subroutine64
??CrossCallReturnLabel_190:
        JC      ??abs_0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        SJMP    ??abs_1
??abs_0:
        CLR     C
        CLR     A
        SUBB    A,R2
        MOV     R0,A
        CLR     A
        SUBB    A,R3
??abs_1:
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        RET
        CFI EndBlock cfiBlock2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_190
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_191
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_193
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,R3
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_192
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_194
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_195
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 15)
??Subroutine64_0:
        LCALL   ?Subroutine110
??CrossCallReturnLabel_386:
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
//  443 //void bootOtherImage()
//  444 //  {void (*f)( void ) = ( void (*)( void ) ) page.imageAddr;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}
//  445 
//  446 /******************************************************************************/
//  447 inline float sqr( float x ){ return x*x; }
//  448 /******************************************************************************/
//  449 //inline void setupFrequency(){
//  450     // Configure the radio frequency to use
//  451 //    FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC
//  452 //}

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  453 const INT32 defFreq = 0x646AAA;
defFreq:
        DS 4
        REQUIRE `?<Initializer for defFreq>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  454 const BYTE the_frequency[3] = { 0x64, 0x6A, 0xAA };
the_frequency:
        DS 3
        REQUIRE `?<Initializer for the_frequency>`
        REQUIRE __INIT_XDATA_I
//  455 // def_freq puts the frequency values into the FrequencyControl High/Medium/Low Bytes

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  456 void def_freq(void){ mymemcpy( (BYTE *)0xDF09, (BYTE *)the_frequency, 3 ); }
def_freq:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function def_freq
        FUNCALL def_freq, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x3
        MOV     R4,#(the_frequency & 0xff)
        MOV     R5,#((the_frequency >> 8) & 0xff)
        MOV     R2,#0x9
        MOV     R3,#-0x21
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiBlock10
//  457 
//  458 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  459 void setupRadioDR(BYTE dr, BYTE channel ){
setupRadioDR:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function setupRadioDR
        FUNCALL setupRadioDR, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRadioDR, radioConfigure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRadioDR, radioConfigure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        SJMP    ??setupRadioDR_0
//  460     //INT_GLOBAL_ENABLE( INT_OFF );           // Enable interrupts globally
//  461         while( *((BYTE *)0xF53A) == RADIO_MODE_TX) tickWait(1);            
??setupRadioDR_1:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x1
        LCALL   tickWait
??setupRadioDR_0:
        MOV     DPTR,#-0xac6
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      ??setupRadioDR_1
//  462         RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
        LCALL   ?Subroutine24
//  463         S1CON &= ~0x03; RFIF &= ~IRQ_DONE;  RFIM = IRQ_DONE;                     // Mask IRQ_DONE flag only
??CrossCallReturnLabel_63:
        ANL     0x9b,#0xfc
        MOV     A,0x9b
        ANL     0xe9,#0xef
        MOV     0x91,#0x10
//  464         if( (dr == DATA_RATE_1_CC2511) && page.use250kbod )   radioConfigure( DATA_RATE_2_CC2511 ); 
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??setupRadioDR_2
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??setupRadioDR_2
        ; Setup parameters for call to function radioConfigure
        MOV     R1,#0x19
        SJMP    ??setupRadioDR_3
//  465         else                                                  radioConfigure( dr ); 
??setupRadioDR_2:
        ; Setup parameters for call to function radioConfigure
        MOV     A,R6
        MOV     R1,A
??setupRadioDR_3:
        LCALL   radioConfigure
//  466         CHANNR = channel;      
        MOV     A,R7
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
//  467         if( dr == DATA_RATE_1_CC2511 ) PA_TABLE0 = page.repeaterPower;
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??setupRadioDR_4
        MOV     DPTR,#(page + 193)
        SJMP    ??setupRadioDR_5
//  468         else                           PA_TABLE0 = page.radioPower;
??setupRadioDR_4:
        MOV     DPTR,#(page + 189)
??setupRadioDR_5:
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20d2
        LCALL   ?Subroutine80
//  469         ADDR = page.edAddr;
??CrossCallReturnLabel_257:
        MOVX    @DPTR,A
//  470         SYNC0 = page.syncword & 0xFF;    SYNC1 = ( page.syncword >> 8 ) & 0xFF;
        MOV     DPTR,#(page + 154)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20ff
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 155)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x2100
        MOVX    @DPTR,A
//  471         //RFST = STROBE_CAL; 
//  472         HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
        ORL     0x9a,#0x1
//  473     //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
//  474 }
        LJMP    ?Subroutine120
        CFI EndBlock cfiBlock11
        REQUIRE RFIM
        REQUIRE IEN2
        REQUIRE S1CON
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE RFST
        REQUIRE RFIF
//  475 extern BOOL transfer;

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  476 void setupRadio( BYTE channel ){ setupRadioDR( page.is500Always ? DATA_RATE_1_CC2511 : DATA_RATE_3_CC2511, channel ); }
setupRadio:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function setupRadio
        FUNCALL setupRadio, setupRadioDR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??setupRadio_0
        MOV     R1,#0x32
        SJMP    ??setupRadio_1
??setupRadio_0:
        MOV     R1,#0xc
??setupRadio_1:
        ; Setup parameters for call to function setupRadioDR
        LCALL   setupRadioDR
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock12

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  477 void setupRepeater( BOOL flag ){
setupRepeater:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function setupRepeater
        FUNCALL setupRepeater, setupRadioDR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setupRepeater, setupRadio
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  478   DMAARM = 0x83; // stop receive and transmit
        MOV     0xd6,#-0x7d
//  479   if( flag && (!page.is500Always) ){  
        MOV     A,R1
        JZ      ??setupRepeater_0
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??setupRepeater_0
//  480        //P1_1 = 1;
//  481        setupRadioDR( DATA_RATE_1_CC2511, page.repeaterChannel );  
        ; Setup parameters for call to function setupRadioDR
        MOV     DPTR,#(page + 192)
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x32
        LCALL   setupRadioDR
//  482        ADDR = page.gwAddr;  
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fb
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_129
//  483   }else{
//  484        //P1_1 = 0;
//  485        setupRadio( curChannel );                    
??setupRepeater_0:
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine51
//  486   }
//  487 }
??CrossCallReturnLabel_129:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock13
        REQUIRE DMAARM

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_129
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     DPTR,#curChannel
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 13)
??Subroutine51_0:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setupRadio
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  488 void softKick(void){
softKick:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function softKick
        FUNCALL softKick, zerofill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, def_freq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, load
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, wait_aes
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, setupRadio
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, zerofill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL softKick, computeADCs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  489     //if( transfer ) return;
//  490     //INT_GLOBAL_ENABLE( INT_OFF );
//  491         //halPowerClkMgmtSetMainClkSrc(CRYSTAL);  // it is never needed to set crystall again
//  492         DMAARM = 0x83; RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
        MOV     0xd6,#-0x7d
        LCALL   ?Subroutine24
//  493         //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC //setupFrequency();       //
//  494         zerofill( (BYTE *)&delta, 4 ); //delta = 0;     
??CrossCallReturnLabel_64:
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x4
        MOV     R2,#(delta & 0xff)
        MOV     R3,#((delta >> 8) & 0xff)
        LCALL   zerofill
//  495         FSCTRL0 = 0;   def_freq();
        CLR     A
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
        ; Setup parameters for call to function def_freq
        LCALL   def_freq
//  496         //dmaRadioSetup();
//  497         //MCSM0 = 0x14; // calibraton on
//  498         loadKey( page.curKey );
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
//  499         setupRadio( curChannel = ( page.is500Always ? curChannel : page.channel ) );        // global interrups are enabled inside setup radio
??CrossCallReturnLabel_259:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??softKick_0
        MOV     DPTR,#curChannel
        SJMP    ??softKick_1
??softKick_0:
        MOV     DPTR,#(page + 164)
??softKick_1:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R1
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
        LCALL   setupRadio
//  500         zerofill( (BYTE *)&utcLast, 6 ); //utcLast = 0; msLast = 0;
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x6
        MOV     R2,#(utcLast & 0xff)
        MOV     R3,#((utcLast >> 8) & 0xff)
        LCALL   zerofill
//  501         cmdCount = 0;
        MOV     DPTR,#cmdCount
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  502         //if( enable2SendData ){ computeADCs( TRUE, FALSE );  } // adjust quartz to temperature only if buffer is already full
//  503         computeADCs( TRUE, FALSE );  // adjust quartz to temperature only if buffer is already full
        ; Setup parameters for call to function computeADCs
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   computeADCs
//  504         ticks[ ReceiveData ] = 1;
        LCALL   ?Subroutine1
//  505         ticks[ Hop ] = 0; cyclesToHop = 0;
??CrossCallReturnLabel_415:
        LCALL   ??Subroutine2_0
??CrossCallReturnLabel_2:
        MOV     DPTR,#cyclesToHop
        LJMP    ?Subroutine115
        CFI EndBlock cfiBlock19
        REQUIRE DMAARM
        REQUIRE RFST
//  506     //INT_GLOBAL_ENABLE( INT_ON );
//  507 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine81:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_259
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_260
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_261
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_262
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_263
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 13)
??Subroutine81_0:
        MOV     R1,#0x4
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_264
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_265
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_266
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 13)
??Subroutine81_1:
        LCALL   load
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        ; Setup parameters for call to function wait_aes
        LCALL   wait_aes
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond30) CFA_SP SP+-4
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     0xe1,#0x4
        LCALL   ?Subroutine89
??CrossCallReturnLabel_289:
        MOV     A,#-0x10
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  508 void restoreRadio(){
restoreRadio:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function restoreRadio
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  509     //ticks[ ReceiveData ] = 1;
//  510     //HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
//  511     //INT_GLOBAL_ENABLE( INT_ON );             // Enable interrupts globally
//  512     //DMAARM = 0x83; RFST = STROBE_IDLE; 
//  513     ticks[ ReceiveData ] = 1;
        LCALL   ?Subroutine1
//  514 }
??CrossCallReturnLabel_416:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock32
//  515 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  516 void init(void){
init:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function init
        FUNCALL init, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, dmaRadioSetup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, def_freq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  517 BYTE pin;
//  518     P0DIR = 0;    // all port 0 pins are input
        MOV     0xfd,#0x0
//  519     P0INP = 0xFF; // all port 0 pins are tristate
        MOV     0x8f,#-0x1
//  520     ADC_ENABLE_CHANNELS( 0xFF );
        MOV     A,0xf2
        MOV     0xf2,#-0x1
//  521     for( pin = 0; pin < 8; pin++ ){ IO_ADC_PORT0_PIN( pin, IO_ADC_EN); }
        MOV     R2,#0x0
??init_0:
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     A,R2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ORL     A,0xf2
        MOV     0xf2,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??init_0
//  522 
//  523     // 2 top pins are secial function - timer 3 channels
//  524     P1SEL = 0xC0;                          
        MOV     0xf4,#-0x40
//  525     // pins 7(oc) 6(ov) 4(on/off), 3(mpp), 1(LED), 0(mpp cycle) are for output
//  526     P1DIR = 0xDB;   // 1101 1011
        MOV     0xfe,#-0x25
//  527 
//  528     T3CTL   = 0x50; // was 0x70, prescaler 1/4, normal operation, mode - free running
        MOV     0xcb,#0x50
//  529     T3CCTL0 = 0x24; // clear output on compare up, set on 0, enabled
        MOV     0xcc,#0x24
//  530     T3CCTL1 = 0x24; // clear output on compare up, set on 0, enabled
        MOV     0xce,#0x24
//  531     PERCFG  = 0x20; // Timer3 has alternate 2 location - P1_6 & P1_7
        MOV     0xf1,#0x20
//  532 
//  533     P2SEL   = 0x20; // Timer3 has priority over USART1
        MOV     0xf5,#0x20
//  534     // pull down commented out for version 8
//  535     //P2DIR   = 0x0F; P2_1 = 0; P2_2 = 0;
//  536     
//  537     //P1_3 = 1; //P1 |= 8;  // MPP ON
//  538     zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x12
        MOV     R2,#(adcsTemp & 0xff)
        MOV     R3,#((adcsTemp >> 8) & 0xff)
        LCALL   zerofill
//  539     //     LED down,  MPP off, Module Off 
//  540     //P1 &= ~ ( 2 | 8 | 0x10 ); 
//  541     
//  542     P0SEL = 0;
        MOV     0xf3,#0x0
//  543     // Choose the crystal oscillator as the system clock
//  544  //   P1_1 = 0;
//  545  //   halPowerClkMgmtSetMainClkSrc(CRYSTAL);
//  546     // Select frequency and data rate from LCD menu, then configure the radio
//  547     
//  548     // Configure interrupt for every time a packet is sent
//  549     
//  550     FSCTRL0 = 0;
        CLR     A
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
//  551         
//  552     setup_hopper( page.channel );
        ; Setup parameters for call to function setup_hopper
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setup_hopper
//  553     dmaRadioSetup();
        ; Setup parameters for call to function dmaRadioSetup
        LCALL   dmaRadioSetup
//  554 
//  555     //FREQ2 = 0x64;  FREQ1 = 0x6A; FREQ0 = 0xAA; // always FCC setupFrequency();
//  556     def_freq();
        ; Setup parameters for call to function def_freq
        LCALL   def_freq
//  557     setupRadio( curChannel ); //page.is500Always? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
        ; Setup parameters for call to function setupRadio
        LCALL   ?Subroutine51
//  558 
//  559     //calibrateParking();
//  560 
//  561     invVref0 = 1.0 / page.vrefPolynom[0];
??CrossCallReturnLabel_130:
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#-0x80
        MOV     ?V0 + 3,#0x3f
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#invVref0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  562     //__________________________________________________________________________
//  563    // Over Voltage     Over Current
//  564 
//  565     T3CTL |= 0x14;
        ORL     0xcb,#0x14
        MOV     A,0xcb
//  566     
//  567     HAL_INT_ENABLE(INUM_T1,  INT_ON);    // enable Timer1 interrupt
        SETB    0xb8.1
//  568     HAL_INT_ENABLE(INUM_ADC, INT_ON);    // enable ADC interrupt
        SETB    0xa8.1
//  569     HAL_INT_ENABLE(INUM_RF,  INT_ON);    // Enable RF general interrupt
        ORL     0x9a,#0x1
//  570 }
        LJMP    ??Subroutine121_1
        CFI EndBlock cfiBlock33
        REQUIRE P0INP
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE T3CTL
        REQUIRE T3CCTL0
        REQUIRE T3CCTL1
        REQUIRE PERCFG
        REQUIRE ADCCFG
        REQUIRE P0SEL
        REQUIRE P1SEL
        REQUIRE P2SEL
        REQUIRE P0DIR
        REQUIRE P1DIR
//  571 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  572 void ov_startup(void)
ov_startup:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function ov_startup
//  573 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  574   // ensure FETs are good/Module can turn on before beginning ov_startup sequence
//  575   // and turning module on.
//  576   if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
        MOV     DPTR,#-0x3
        MOVX    A,@DPTR
        JNZ     ??ov_startup_0
//  577   {
//  578     if( page.ov_startup )
        MOV     DPTR,#(page + 223)
        MOVX    A,@DPTR
        MOV     R2,A
        JZ      ??CrossCallReturnLabel_17
//  579     {
//  580       T3CC0 = (page.ov_startup < page.ov) ? page.ov_startup : page.ov; 
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        JNC     ??ov_startup_1
        MOV     A,R2
        SJMP    ??ov_startup_2
??ov_startup_1:
        MOV     A,R3
??ov_startup_2:
        MOV     R4,A
        MOV     0xcd,R4
//  581       atomicChange( OvStartup, TICKS_IN_SEC );
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1e
        LCALL   ??Subroutine5_0
//  582       //        #ifdef MidString                                                                            
//  583       //        compute98();                                                                                
//  584       //        #endif
//  585     }
//  586     P1_4 = 1;
??CrossCallReturnLabel_17:
        SETB    0x90.4
//  587   }
//  588 }
??ov_startup_0:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock34
        REQUIRE _A_P1
        REQUIRE T3CC0
//  589 
//  590 /******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  591 float *_coeff, invRef = 0;
_coeff:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
invRef:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  592 float mult( float t, INT16 i ){ return (t)*(float)i; }
mult:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function mult
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26
??CrossCallReturnLabel_67:
        LCALL   ?Subroutine83
??CrossCallReturnLabel_269:
        LCALL   ?L_TO_FLT
        LJMP    ?Subroutine121
        CFI EndBlock cfiBlock35

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  593 float lin_coeff( float f ){ return _coeff[0]*f + _coeff[1]; }
lin_coeff:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function lin_coeff
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine47_1
??CrossCallReturnLabel_117:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        LCALL   ?Subroutine46
??CrossCallReturnLabel_113:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        LJMP    ??Subroutine121_0
        CFI EndBlock cfiBlock36

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  594 float lin_coeff_t( float f ){    return (_coeff[1] - f )*_coeff[0]; }
lin_coeff_t:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function lin_coeff_t
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        LCALL   ?Subroutine46
??CrossCallReturnLabel_114:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_SUB
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine47_1
??CrossCallReturnLabel_118:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LJMP    ?Subroutine121
        CFI EndBlock cfiBlock37

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_113
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine92_0
??CrossCallReturnLabel_397:
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  595 float lin( BYTE idx ){
lin:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function lin
        FUNCALL lin, lin_coeff_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  596 float t  = ((float)adcs[ idx ]) * page.vrefPolynom[0] * invRef; // invRef = 1.0 / (float)adcs[ REF ];
//  597     return lin_coeff_t( t ); //( coeff[1] - t ) * coeff[0];  
        ; Setup parameters for call to function lin_coeff_t
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#(adcs & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#((adcs >> 8) & 0xff)
        MOV     DPH,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff_t
        SJMP    ??Subroutine121_1
        CFI EndBlock cfiBlock41
//  598 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  599 float cube_coeff( float *t ){ 
cube_coeff:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function cube_coeff
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  600 //  return ( ( ( _coeff[0]*t + _coeff[1] )*t + _coeff[2] )*t + _coeff[3] ); 
//  601 float acc = _coeff[0]; 
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine47_1
??CrossCallReturnLabel_119:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//  602 BYTE i;
//  603     for( i = 1; i < 4; i++ ) acc = acc*(*t) + _coeff[i];
        MOV     R5,#0x1
??cube_coeff_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     ?V0 + 4,R5
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     DPTR,#_coeff
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOV     DPL,R4
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        INC     R5
        MOV     A,R5
        CLR     C
        SUBB    A,#0x4
        JC      ??cube_coeff_0
        CFI EndBlock cfiBlock42
//  604     return acc;
        REQUIRE ?Subroutine124
        ; // Fall through to label ?Subroutine124
//  605 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine124:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        SJMP    ??Subroutine121_1
        CFI EndBlock cfiBlock43

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine121:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
??Subroutine121_0:
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
??Subroutine121_1:
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock44

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  606 float checkVref;
checkVref:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  607 float processCheck( INT16 val ){ return lin_coeff( ((float)val) * checkVref );  }
processCheck:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function processCheck
        FUNCALL processCheck, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        ; Setup parameters for call to function lin_coeff
        MOV     ?V0 + 0,R2
        MOV     A,R3
        MOV     ?V0 + 1,A
        LCALL   ?Subroutine83
??CrossCallReturnLabel_270:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff
        SJMP    ??Subroutine121_1
        CFI EndBlock cfiBlock45

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine83:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_269
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_270
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48
//  608 /******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  609 UINT16  last[ N_CHANNELS ]; //Vout, lastPin, lastIout, lastGnd, lastRef, lastVin, lastTex, lastTin;
last:
        DS 18
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  610 UINT16  checkVoutOnT  = 0, checkPD = 0;
checkVoutOnT:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
checkPD:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  611 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  612 void read_page(void){
read_page:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function read_page
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_page, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_page, switchTo255
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  613     mymemcpy( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+4 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#-0xe
        MOV     R4,#0x0
        MOV     R5,#0x5c
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  614     //if( page.barrier == 0xAAAA ){
//  615     if( page.barrier == 0xAAAA  && page.post_barrier == 0x5555 ){
        MOV     DPTR,#page
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JNZ     ??read_page_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xaa
??read_page_0:
        JNZ     ??read_page_1
        MOV     DPTR,#(page + 240)
        MOVX    A,@DPTR
        XRL     A,#0x55
        JNZ     ??read_page_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x55
??read_page_2:
        JZ      ??read_page_3
//  616         /* page F compatibility - not needed anymore
//  617         zerofill( (BYTE *)&page.syncword, 8 );
//  618         page.syncword = 0xF0F0; 
//  619         page.vin_disable_radio = 6;
//  620         page.vin_limit         = 0; 
//  621         page.vin_turn_on       = 120;
//  622         page.vin_switch_off    = 100;
//  623         */
//  624         //BYTE *ptr = nextSlot();
//  625         //if( ptr && ptr > (BYTE *)(PAGEADDR+PAGESIZE+4) ){ ptr -= 4;  mymemcpy( (BYTE *)&energy, ptr, 4 );  }
//  626         //zerofill( (BYTE *)&deltaEnergy, 4 );
//  627     }else{
//  628         //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
//  629         mymemcpy((BYTE *)&page, (BYTE *)default_pb, PAGESIZE );
??read_page_1:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#-0xe
        MOV     R4,#(default_pb & 0xff)
        MOV     R5,#((default_pb >> 8) & 0xff)
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  630         // partial PB restoration goes here
//  631         //void (*f)( void ) = ( void (*)( void ) )0x603F;  (*f)();  // to 8k image
//  632         switchTo255(); ch255 = FALSE;
        ; Setup parameters for call to function switchTo255
        LCALL   ?Subroutine84
//  633         page.ov         = *((BYTE *)0x3DC);
??CrossCallReturnLabel_271:
        MOV     DPTR,#0x3dc
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 187)
        MOVX    @DPTR,A
//  634         page.oc         = *((BYTE *)0x3DD);
        MOV     DPTR,#0x3dd
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 188)
        MOVX    @DPTR,A
//  635         //page.ov_startup = 100;//*((BYTE *)0x3DE);
//  636         //page.myBunch = 0;   page.netId  = 0;
//  637          /*
//  638         page.channel = 255; page.pureOffset = -130;
//  639         page.edAddr    = 2; page.gwAddr     = 1; 
//  640         page.vin_limit = 0; 
//  641         mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 );
//  642         //page.myBunch = 0;   page.netId  = 0;
//  643         mymemcpy( (BYTE *)&page, (BYTE *)0x3D4, 12 );    // netid, bunch, mac
//  644         //zerofill( (BYTE *)&energy, 8 );
//  645         */
//  646     }
//  647     
//  648     page.versionHigh = FWVersionHigh;
??read_page_3:
        MOV     DPTR,#(page + 216)
        MOV     A,#0x58
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1b
        MOVX    @DPTR,A
//  649     page.versionLow = FWVersionLow;
        MOV     DPTR,#(page + 214)
        MOV     A,#0xb
        LCALL   ?Subroutine119
//  650     page.versionSuffix[0] = FWSuffixOne;
??CrossCallReturnLabel_402:
        MOV     A,#0x31
        MOV     DPTR,#(page + 144)
        MOVX    @DPTR,A
//  651     page.versionSuffix[1] = FWSuffixTwo;
        MOV     A,#0x42
        MOV     DPTR,#(page + 145)
        MOVX    @DPTR,A
//  652     page.versionSuffix[2] = FWSuffixThree;    
        MOV     DPTR,#(page + 146)
        MOVX    @DPTR,A
//  653     ch255 = FALSE;
        CLR     A
        MOV     DPTR,#ch255
        SJMP    ?Subroutine115
        CFI EndBlock cfiBlock49
//  654 }
//  655 //float polynomial[] = { 0, 0, 0, -200 }; // -0.000693, 0.0556, 0.613, -220.0};

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  656 void switchTo255(){
switchTo255:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI Function switchTo255
        FUNCALL switchTo255, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL switchTo255, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL switchTo255, softKick
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  657     curChannel = page.channel = 255;   
        MOV     A,#-0x1
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
        MOV     DPTR,#curChannel
        LCALL   ?Subroutine78
//  658     page.use12kbod  = TRUE;   page.hoppingAllowed = FALSE;
??CrossCallReturnLabel_251:
        CLR     0xE0 /* A   */.4
        MOVX    @DPTR,A
        SETB    0xE0 /* A   */.2
        MOVX    @DPTR,A
//  659     page.useFEC     = FALSE;  page.is500Always = FALSE; 
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.4
        LCALL   ?Subroutine78
//  660     page.isRelay    = FALSE;  page.searchCommunication = FALSE;
??CrossCallReturnLabel_252:
        ANL     A,#0x1f
        MOVX    @DPTR,A
//  661     page.vin_disable_radio = 0;
        CLR     A
        MOV     DPTR,#(page + 156)
        MOVX    @DPTR,A
//  662     //page.production = 0;
//  663     //page.fuseComm   = 0;    page.fuseOVOC = 0;
//  664     mymemcpy( (BYTE *)page.curKey, (BYTE *)theKey, 32 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x20
        MOV     R4,#(theKey & 0xff)
        MOV     R5,#((theKey >> 8) & 0xff)
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        LCALL   mymemcpy
//  665     //mymemcpy( (BYTE *)page.dFk,    (BYTE *)polynomial, 16 );
//  666     page.syncword = 0xF0F0; page.edAddr = 2; page.gwAddr = 1;
        MOV     DPTR,#(page + 154)
        MOV     A,#-0x10
        LCALL   ?Subroutine68
//  667     mymemcpy( (BYTE *)&page, (BYTE *)0x3D0, 12 );    // barrier, netid (0), bunch (0), group, mac, 
??CrossCallReturnLabel_223:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0xc
        MOV     R4,#-0x30
        MOV     R5,#0x3
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   mymemcpy
//  668     ch255 = TRUE;   softKick();
        MOV     A,#0x1
        MOV     DPTR,#ch255
        MOVX    @DPTR,A
        ; Setup parameters for call to function softKick
        LCALL   softKick
//  669     //page.myBunch    =  0;     page.netId = 0;  
//  670 }
        SJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock50

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine115:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        MOVX    @DPTR,A
??Subroutine115_0:
        POP     DPH
        CFI CFA_SP SP+-3
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-2
        CFI DPL0 SameValue
        RET
        CFI EndBlock cfiBlock51
//  671 
//  672 
//  673 
//  674 #ifdef MidString

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  675 INT16 iOutIin1Diff; // Used in compute ADCs for FET failure
iOutIin1Diff:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  676 INT16 iOutIin2Diff; // Global to save time with computeADCs
iOutIin2Diff:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  677 #endif
//  678 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  679 void checkVin(void)
checkVin:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function checkVin
//  680 {
        FUNCALL checkVin, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, switchTo255
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, switchTo255
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, read_page
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, lin_coeff_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL checkVin, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
//  681   INT16  t;
//  682   UINT16 safe_vin_16;
//  683 
//  684 #ifdef MidString
//  685   static UINT16 currentFETTickCount = 0;
//  686   
//  687   /* 12/29/2017 BEGIN adding 1500V Protection Variables */
//  688   static INT16 protectionModuleOffTimer = 0;
//  689   /* 12/29/2017 END adding 1500V Protection Variables */
//  690   
//  691   if (checkForFETFailure)
        MOV     DPTR,#checkForFETFailure
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_404
//  692   {
//  693     iOutIin1Diff = (INT16)adcs16[2] - (INT16)adcs16[6];
        LCALL   ?Subroutine60
??CrossCallReturnLabel_164:
        MOV     DPTR,#(adcs16 + 12)
        LCALL   ?Subroutine44
??CrossCallReturnLabel_103:
        MOV     DPTR,#iOutIin1Diff
        LCALL   ??Subroutine114_0
//  694     iOutIin2Diff = (INT16)adcs16[2] - (INT16)adcs16[5];
??CrossCallReturnLabel_350:
        MOV     DPTR,#(adcs16 + 10)
        LCALL   ?Subroutine44
??CrossCallReturnLabel_104:
        MOV     DPTR,#iOutIin2Diff
        LCALL   ??Subroutine114_0
//  695     
//  696     if ( ((INT16)adcs16[2] > page.fetCurrentThreshold) && ( (iOutIin1Diff < page.fetDeltaCurrent) || (iOutIin2Diff < page.fetDeltaCurrent) )  )
??CrossCallReturnLabel_351:
        MOV     DPTR,#(page + 130)
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_372:
        JNC     ??checkVin_0
        MOV     DPTR,#(page + 132)
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_165:
        MOV     DPTR,#iOutIin1Diff
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_373:
        JC      ??checkVin_1
        MOV     DPTR,#iOutIin2Diff
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_374:
        JNC     ??checkVin_0
//  697     {
//  698       currentFETTickCount += 120;
??checkVin_1:
        MOV     DPTR,#??currentFETTickCount
        MOVX    A,@DPTR
        ADD     A,#0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  699       netValue = MainNetValueFETFailing; // indicate FET failure being observed
        MOV     DPTR,#netValue
        MOV     A,#0xa
        LCALL   ?Subroutine119
//  700       
//  701       if (currentFETTickCount >= (INT16)page.fetFailureCount)
??CrossCallReturnLabel_403:
        MOV     DPTR,#(page + 128)
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_166:
        MOV     DPH,#((??currentFETTickCount >> 8) & 0xff)
        MOV     DPL,#(??currentFETTickCount & 0xff)
        LCALL   ?Subroutine95
??CrossCallReturnLabel_301:
        JC      ??CrossCallReturnLabel_404
//  702       {
//  703         P1_4 = 0; /*turn the module off  */
        CLR     0x90.4
//  704         fetFailure = TRUE; /* set guard to keep module from being turned on */
        MOV     A,#0x1
        MOV     DPTR,#fetFailure
        MOVX    @DPTR,A
//  705         checkForFETFailure = FALSE; /* No need to check further until power cycle or Module On */
        CLR     A
        MOV     DPTR,#checkForFETFailure
        LCALL   ?Subroutine73
//  706         netValue = MainNetValueFETFailed; /* indicate FET failure condition */
//  707         *ModuleOffRememberedPtr = ModuleStatusOffFetFailure; /* Remember module is off */
??CrossCallReturnLabel_400:
        MOV     A,#0x7e
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
//  708         currentFETTickCount = 0; /* Reset to 0 */
        MOV     DPTR,#??currentFETTickCount
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LJMP    ??checkVin_2
//  709       }
//  710     }
//  711     else
//  712     {
//  713       currentFETTickCount = 0; /* Ensure count is back to default */
??checkVin_0:
        MOV     DPTR,#??currentFETTickCount
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  714       netValue = MainNetValueStandard; /* "default" netValue for main image */
        MOV     DPTR,#netValue
        MOV     A,#0x32
        LCALL   ?Subroutine119
//  715     }
//  716   }
//  717    
//  718   /* 12/29/2017 BEGIN Adding 1500V Protection Code */
//  719   
//  720   if (fetFailure == FALSE) /* If fetFailure then module is already off */
??CrossCallReturnLabel_404:
        MOV     DPTR,#fetFailure
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??checkVin_3
//  721   {
//  722     /* Check if Vout has exceeded VoutLimit and has not yet been observed */
//  723     if ((page.VoutLimitCount > 0) && ((ProtectionLimitsExceeded & VoutLimitMask) != VoutLimitMask) && (adcs16[0] > page.VoutLimit))
        MOV     DPTR,#(page + 136)
        LCALL   ?Subroutine8
??CrossCallReturnLabel_28:
        JC      ??CrossCallReturnLabel_200
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??CrossCallReturnLabel_200
        MOV     DPTR,#adcs16
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_167:
        MOV     DPH,#(((page + 138) >> 8) & 0xff)
        MOV     DPL,#((page + 138) & 0xff)
        LCALL   ?Subroutine95
??CrossCallReturnLabel_302:
        JNC     ??CrossCallReturnLabel_200
//  724     {
//  725       P1_4 = 0; /* turn Module off */
        LCALL   ?Subroutine75
//  726       P1_3 = 0; /* turn MPP off */
//  727       
//  728       *ModuleOffRememberedPtr = ModuleStatusOffProtection; /* Remember why module is off */
//  729       ProtectionLimitsExceeded |= VoutLimitMask;   /* Set Protection byte to indicate Vout Protection */
??CrossCallReturnLabel_239:
        SETB    0xE0 /* A   */.6
        LCALL   ?Subroutine0
//  730       
//  731       if (protectionModuleOffTimer < page.VoutLimitCount) /* Set Protection timer to appropriate value */
??CrossCallReturnLabel_370:
        JNC     ??CrossCallReturnLabel_200
//  732       {
//  733         protectionModuleOffTimer = page.VoutLimitCount;
        LCALL   ?Subroutine67
//  734       }
//  735     }
//  736     
//  737     /* Check if Iout has exceeded IoutLimit and has not yet been observed */
//  738     if ((page.IoutLimitCount > 0) && ((ProtectionLimitsExceeded & IoutLimitMask) != IoutLimitMask) && ((INT16)adcs16[2] > page.IoutLimit))
??CrossCallReturnLabel_200:
        MOV     DPTR,#(page + 140)
        LCALL   ?Subroutine8
??CrossCallReturnLabel_29:
        JC      ??CrossCallReturnLabel_201
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      ??CrossCallReturnLabel_201
        LCALL   ?Subroutine60
??CrossCallReturnLabel_168:
        MOV     DPH,#(((page + 142) >> 8) & 0xff)
        MOV     DPL,#((page + 142) & 0xff)
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_375:
        JNC     ??CrossCallReturnLabel_201
//  739     {
//  740       P1_4 = 0; /* turn Module off */
        LCALL   ?Subroutine75
//  741       P1_3 = 0; /* turn MPP off */
//  742       
//  743       *ModuleOffRememberedPtr = ModuleStatusOffProtection; /* Remember why module is off */
//  744       ProtectionLimitsExceeded |= IoutLimitMask;          /* Set Protection byte to indicate Vout Protection */
??CrossCallReturnLabel_240:
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
//  745       
//  746       if (protectionModuleOffTimer < page.IoutLimitCount) /* Set Protection timer to appropriate value */
        MOV     DPTR,#(page + 140)
        LCALL   ??Subroutine0_0
??CrossCallReturnLabel_376:
        JNC     ??CrossCallReturnLabel_201
//  747       {
//  748         protectionModuleOffTimer = page.IoutLimitCount;
        LCALL   ?Subroutine67
//  749       }
//  750     }
//  751     
//  752     /* Is Vout or Iout protection indicated? */
//  753     if (ProtectionLimitsExceeded >= VoutLimitMask)
??CrossCallReturnLabel_201:
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x40
        JNC     $+5
        LJMP    ??checkVin_3
//  754     {
//  755       ProtectionLimitsExceeded |= CountDownTimerActive; /* Set the Countdown timer bit "true" until proven otherwise */
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
//  756       
//  757       if ((ProtectionLimitsExceeded & IoutLimitMask) == IoutLimitMask) /* IoutLimit Protection has been recognized */
        MOV     C,0xE0 /* A   */.7
        JNC     ??CrossCallReturnLabel_202
//  758       {
//  759         if ((INT16)adcs16[2] > (page.IoutLimit - Amps_1)) /* When Iout above IoutLimit - 1Amp, countdown timer is "re-maxed" */
        MOV     DPTR,#(page + 142)
        MOVX    A,@DPTR
        ADD     A,#0x18
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x4
        MOV     R3,A
        MOV     DPTR,#(adcs16 + 4)
        LCALL   ?Subroutine20
??CrossCallReturnLabel_54:
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??CrossCallReturnLabel_202
//  760         {
//  761           ProtectionLimitsExceeded &= CountDownTimerNotActive; /* Countdown condition fails, so change timer bit */
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        MOVX    @DPTR,A
//  762           if (protectionModuleOffTimer < page.IoutLimitCount) /* Set Protection timer to appropriate value */
        MOV     DPTR,#(page + 140)
        LCALL   ??Subroutine0_0
??CrossCallReturnLabel_377:
        JNC     ??CrossCallReturnLabel_202
//  763           {
//  764             protectionModuleOffTimer = page.IoutLimitCount;
        LCALL   ?Subroutine67
//  765           }
//  766         }
//  767       } /* END if ((protectionLimitsExceeded & IoutLimitMask) == IoutLimitMask) */
//  768       
//  769       if ((ProtectionLimitsExceeded & VoutLimitMask) == VoutLimitMask) /* VoutLimit Protection has been recognized */
??CrossCallReturnLabel_202:
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??CrossCallReturnLabel_203
//  770       {
//  771         if (adcs16[0] > (page.VoutLimit - Volts_50)) /* When Vout above VoutLimit - 50 volts, countdown timer is "re-maxed" */
        MOV     DPTR,#(page + 138)
        MOVX    A,@DPTR
        ADD     A,#0x7e
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x7
        MOV     R3,A
        MOV     DPTR,#adcs16
        LCALL   ?Subroutine20
??CrossCallReturnLabel_55:
        JNC     ??CrossCallReturnLabel_203
//  772         {
//  773           ProtectionLimitsExceeded &= CountDownTimerNotActive;  /* Countdown condition fails, so change timer bit */
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
        LCALL   ?Subroutine0
//  774           if (protectionModuleOffTimer < page.VoutLimitCount)   /* Set Protection timer to appropriate value */
??CrossCallReturnLabel_371:
        JNC     ??CrossCallReturnLabel_203
//  775           {
//  776             protectionModuleOffTimer = page.VoutLimitCount;
        LCALL   ?Subroutine67
//  777           }
//  778         }
//  779       } /* END if ((protectionLimitsExceeded & VoutLimitMask) == VoutLimitMask) */
//  780       
//  781       /* Is Countdown timer active? (meaning it is ok to decrement it) */
//  782       if ((ProtectionLimitsExceeded & CountDownTimerActive) == CountDownTimerActive)
??CrossCallReturnLabel_203:
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??checkVin_3
//  783       {
//  784         protectionModuleOffTimer -= 120;
        MOV     DPTR,#??protectionModuleOffTimer
        MOVX    A,@DPTR
        ADD     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  785         if (protectionModuleOffTimer <= 0)
        MOV     DPTR,#??protectionModuleOffTimer
        LCALL   ?Subroutine8
??CrossCallReturnLabel_30:
        JNC     ??checkVin_3
//  786         {
//  787           protectionModuleOffTimer = 0;
        MOV     DPTR,#??protectionModuleOffTimer
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine75_0
//  788           ProtectionLimitsExceeded &= NotVoutAndIoutLimitNoCountDownMask;
??CrossCallReturnLabel_241:
        ANL     A,#0x3e
        MOVX    @DPTR,A
//  789           if (ProtectionLimitsExceeded == 0)
        JNZ     ??checkVin_4
//  790           {
//  791             *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
        CLR     A
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
//  792             P1_3 = page.mpp;
        LCALL   ?Subroutine57
//  793             ov_startup();   
        ; Setup parameters for call to function ov_startup
??CrossCallReturnLabel_156:
        LCALL   ov_startup
        SJMP    ??checkVin_3
//  794           } /* END if (ProtectionLimitsExceeded == 0) */
//  795           else /* Some form of Temperature Protection is on, act accordingly */
//  796           {
//  797             P1_3 = page.mpp;
??checkVin_4:
        LCALL   ?Subroutine57
//  798             if ((ProtectionLimitsExceeded & TemperatureModuleOffMask) == 0x00)
??CrossCallReturnLabel_157:
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JC      ??checkVin_5
//  799             {
//  800               *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
        CLR     A
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
//  801               ov_startup();                 
        ; Setup parameters for call to function ov_startup
        SJMP    ??CrossCallReturnLabel_156
//  802             }
//  803             else
//  804             {
//  805               *ModuleOffRememberedPtr = ModuleStatusOffTemperature;
??checkVin_5:
        MOV     A,#-0x5a
        MOV     DPTR,#-0x3
??checkVin_2:
        MOVX    @DPTR,A
//  806             }
//  807           }
//  808         } /* END if (protectionModuleOffTimer <= 0) */
//  809       } /* END if ((ProtectionLimitsExceeded & CountDownTimerActive) == CountDownTimerActive)*/
//  810     } /* END if (ProtectionLimitsExceeded >= VoutLimitMask)*/
//  811   } /* END if (fetFailure == FALSE) */
//  812   
//  813   /* 12/29/2017 END Adding 1500V Protection Code */
//  814     
//  815 #endif
//  816   
//  817   checkVref = page.vrefPolynom[0] / ((float)last[4]);
??checkVin_3:
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#(last + 8)
        LCALL   ?Subroutine4
??CrossCallReturnLabel_13:
        LCALL   ?UL_TO_FLT
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  818   _coeff = page.linearK[3];
        MOV     DPTR,#_coeff
        MOV     A,#((page + 64) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 64) >> 8) & 0xff)
        MOVX    @DPTR,A
//  819   
//  820   safe_vin_16  = convU( lin_coeff( ((float) last[5])*checkVref ) );
        ; Setup parameters for call to function convU
        ; Setup parameters for call to function lin_coeff
        MOV     DPTR,#(last + 10)
        LCALL   ?Subroutine4
??CrossCallReturnLabel_14:
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        LCALL   ?Subroutine82
//  821 
//  822 #ifndef MidString
//  823   if ( P1_3 == 0 )
//  824   {
//  825     if( P1_4  && (safe_vin_16 < (100*(UINT16)page.vin_switch_off) ) )
//  826     {
//  827       ticks[ TurnOn ] = 3 * TICKS_IN_SEC;
//  828       P1_4 = 0;
//  829     }
//  830     else if ( (P1_4 == 0) && turnOnFlag && ( safe_vin_16 > (100*(UINT16)page.vin_turn_on) ) )
//  831     {
//  832       turnOnFlag = 0;
//  833       ticks[ BypassMode ] = TICKS_IN_SEC;
//  834       P1_3 = 1;
//  835       ov_startup();
//  836     }
//  837   }
//  838 #endif
//  839   
//  840   if( (flags[ PackageReceived ]) || (flags[DataSent]) )
??CrossCallReturnLabel_267:
        MOV     DPTR,#flags
        LCALL   ?Subroutine96
??CrossCallReturnLabel_306:
        MOVX    A,@DPTR
        JNZ     ??checkVin_6
        MOV     DPTR,#(flags + 1)
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??checkVin_7
//  841   {
//  842     flags[AltCheckVin] = TRUE;
??checkVin_6:
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0xb
        LCALL   ?Subroutine55
??CrossCallReturnLabel_139:
        MOV     A,#0x1
        LJMP    ??checkVin_8
//  843     return;
//  844   }
//  845   
//  846   txDisabled = 0;
??checkVin_7:
        CLR     A
        MOV     DPTR,#txDisabled
        MOVX    @DPTR,A
//  847   if ( page.vin_disable_radio )
        MOV     DPTR,#(page + 156)
        MOVX    A,@DPTR
        MOV     R2,A
        JZ      ??checkVin_9
//  848     txDisabled = ( safe_vin_16 < (1000*(UINT16)page.vin_disable_radio) );
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R2
        MOV     R4,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R4
        MOV     R4,A
        CLR     A
        ADD     A,R4
        MOV     R3,A
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JNC     ??checkVin_10
        MOV     R2,#0x1
        SJMP    ??checkVin_11
??checkVin_10:
        MOV     R2,#0x0
??checkVin_11:
        MOV     A,R2
        MOV     DPTR,#txDisabled
        MOVX    @DPTR,A
//  849 
//  850 #ifndef MidString
//  851   if ( page.vin_limit )
//  852   {
//  853     register BOOL flag = ( safe_vin_16 < (page.vin_limit*100) );
//  854     if ( !ch255 && flag )
//  855     {
//  856       switchTo255();
//  857     }
//  858     else if ( ch255 && !flag )
//  859     {
//  860       BYTE curV255 = page.vin_limit;
//  861       read_page();
//  862       page.vin_limit = curV255;
//  863       curChannel = page.channel;
//  864       softKick();
//  865     }
//  866   }
//  867   else if ( ch255 )
//  868   {
//  869     BYTE curV255 = page.vin_limit;
//  870     read_page();
//  871     page.vin_limit = curV255;
//  872     curChannel = page.channel;
//  873     softKick();
//  874   }
//  875 #endif
//  876     
//  877 #ifdef MidString
//  878   /* 06/26/2017 - Added additional code regarding switching to and from channel 255, (looking at Iin1 (adcs16[6]) ) */
//  879   if (!ch255)
??checkVin_9:
        MOV     DPTR,#(page + 134)
        LCALL   ??Subroutine45_0
??CrossCallReturnLabel_105:
        MOV     DPTR,#ch255
        MOVX    A,@DPTR
        CLR     C
        JNZ     ??checkVin_12
//  880   {
//  881     if (safe_vin_16 > switchTo255Lim)
        MOV     A,R0
        SUBB    A,#-0x2b
        MOV     A,R1
        SUBB    A,#-0x53
        JC      ??checkVin_13
//  882     {
//  883       switchTo255();
        ; Setup parameters for call to function switchTo255
        LCALL   switchTo255
//  884       netValue = MainNetValueSafeVin;
        MOV     DPTR,#netValue
        MOV     A,#0x50
        SJMP    ??checkVin_14
//  885     }
//  886     else if ((INT16)adcs16[6] < (INT16)page.LowCurrentLimitTo255)
??checkVin_13:
        MOV     DPTR,#(adcs16 + 12)
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R2
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine103
??CrossCallReturnLabel_382:
        JNC     ??CrossCallReturnLabel_405
//  887     {
//  888       switchTo255();
        ; Setup parameters for call to function switchTo255
        LCALL   switchTo255
//  889       netValue = MainNetValueLowCurrentLimit;
        MOV     DPTR,#netValue
        MOV     A,#0x51
        SJMP    ??checkVin_14
//  890     }
//  891   }
//  892   else if ( ch255 && (( safe_vin_16 < switchFrom255Lim ) && ((INT16)adcs[6] >= (INT16)page.LowCurrentLimitTo255)))
??checkVin_12:
        MOV     A,R0
        SUBB    A,#0x10
        MOV     A,R1
        SUBB    A,#-0x5c
        JNC     ??CrossCallReturnLabel_405
        MOV     DPTR,#(adcs + 24)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R2
        MOV     A,?V0 + 1
        LCALL   ?Subroutine103
??CrossCallReturnLabel_383:
        JC      ??CrossCallReturnLabel_405
//  893   {
//  894     read_page();
        ; Setup parameters for call to function read_page
        LCALL   read_page
//  895     if( page.is500Always )
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??checkVin_15
//  896       curChannel = page.starting500Channel;
        MOV     DPTR,#(page + 218)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
//  897     softKick();
??checkVin_15:
        ; Setup parameters for call to function softKick
        LCALL   softKick
//  898     netValue = MainNetValueStandard;
        MOV     DPTR,#netValue
        MOV     A,#0x32
??checkVin_14:
        LCALL   ?Subroutine119
//  899   }
//  900 #endif
//  901   
//  902   if ( (flags[ PackageReceived ]) || (flags[DataSent]) )
??CrossCallReturnLabel_405:
        LCALL   ??Subroutine3_0
??CrossCallReturnLabel_8:
        JZ      $+5
        LJMP    ??checkVin_6
        LCALL   ?Subroutine6
??CrossCallReturnLabel_21:
        JZ      $+5
        LJMP    ??checkVin_6
//  903   {
//  904     flags[AltCheckVin] = TRUE; 
//  905     return; 
//  906   }
//  907   
//  908   /* Start of Temperature protection code */
//  909   _coeff = page.linearK[4];
        MOV     DPTR,#_coeff
        MOV     A,#((page + 72) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 72) >> 8) & 0xff)
        MOVX    @DPTR,A
//  910   t =  (INT16) lin_coeff_t( ((float)last[6]) * checkVref );
        ; Setup parameters for call to function lin_coeff_t
        MOV     DPTR,#(last + 12)
        LCALL   ?Subroutine4
??CrossCallReturnLabel_15:
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff_t
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  911   
//  912   /* if T_SUPER_HOT enabled, and temperature exceeds value, turn off unit.
//  913      Critical Temperature Protection, i.e., T_SUPER_HOT */
//  914   if( page.t_mod_off && (t > ((INT16)page.t_mod_off)) )
        MOV     DPTR,#(page + 224)
        MOVX    A,@DPTR
        JZ      ??checkVin_16
        LCALL   ?Subroutine66
??CrossCallReturnLabel_198:
        JNC     ??checkVin_16
//  915   { 
//  916     P1_4 = 0;
        CLR     0x90.4
//  917     if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
        MOV     DPTR,#-0x3
        MOVX    A,@DPTR
        JNZ     ??checkVin_17
//  918       *ModuleOffRememberedPtr = ModuleStatusOffTemperature;
        MOV     A,#-0x5a
        MOVX    @DPTR,A
//  919     ProtectionLimitsExceeded |= TemperatureModuleOffAndSteppedDownMask;
??checkVin_17:
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        ORL     A,#0x30
??checkVin_18:
        MOVX    @DPTR,A
        LJMP    ??CrossCallReturnLabel_330
//  920   }
//  921   else if ( page.fallback_time && page.fallback_time!=0xFF )
??checkVin_16:
        MOV     DPTR,#(page + 227)
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_330
        MOV     A,#-0x1
        XRL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_330
//  922   { /* Temperature above T_HOT */
//  923     if ( checkVoutOnT )
        MOV     DPTR,#checkVoutOnT
        MOVX    A,@DPTR
        JNZ     ??checkVin_19
        INC     DPTR
        MOVX    A,@DPTR
??checkVin_19:
        JZ      ??checkVin_20
//  924       checkVoutOnT--;
        MOV     DPTR,#checkVoutOnT
        LCALL   ?Subroutine49
??CrossCallReturnLabel_124:
        SJMP    ??checkVin_18
//  925     else
//  926     {
//  927       checkVoutOnT = 8 * (UINT16)page.fallback_time;
??checkVin_20:
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     DPTR,#checkVoutOnT
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        LCALL   ??Subroutine75_0
//  928       if ((ProtectionLimitsExceeded & TemperatureSteppedDownMask) == TemperatureSteppedDownMask)
??CrossCallReturnLabel_242:
        MOV     C,0xE0 /* A   */.4
        JNC     ??checkVin_21
//  929       {
//  930         if ( t < ((INT16)page.ton_fallback) ) /* if temperature less than T_COLD */
        MOV     DPTR,#(page + 226)
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        LCALL   ?Subroutine64
??CrossCallReturnLabel_191:
        JNC     ??checkVin_22
//  931         {
//  932           if ( !P1_4 )
        MOV     C,0x90.4
        JC      ??checkVin_23
//  933           {
//  934             if (*ModuleOffRememberedPtr == ModuleStatusOffTemperature)
        MOV     DPTR,#-0x3
        MOVX    A,@DPTR
        XRL     A,#0xa6
        JNZ     ??checkVin_23
//  935             {
//  936               *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
        CLR     A
        MOVX    @DPTR,A
//  937               ov_startup(); /* module attempt turn on , starting OV seq */
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
//  938             }
//  939           }
//  940                       
//  941           T3CC1 = oc2timer(theOC = setOC);
??checkVin_23:
        MOV     DPTR,#setOC
        MOVX    A,@DPTR
        LCALL   ?Subroutine71
//  942 
//  943           ProtectionLimitsExceeded &= NotTemperatureModuleOffAndSteppedDownMask; /* Both Protections cancelled here */
??CrossCallReturnLabel_227:
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        ANL     A,#0xcf
        SJMP    ??checkVin_18
//  944         } /* END  if ( t < ((INT16)page.ton_fallback) )  */
//  945         else if ( P1_4 && theOC )
??checkVin_22:
        MOV     C,0x90.4
        JNC     ??CrossCallReturnLabel_330
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_330
//  946           T3CC1 = oc2timer( --theOC );
        DEC     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        SJMP    ??checkVin_24
//  947       } /* END  if( isSteppedDown ) */
//  948       else if ( P1_4 && ( t > ((INT16)page.toff_fallback)) )
??checkVin_21:
        MOV     C,0x90.4
        JNC     ??CrossCallReturnLabel_330
        MOV     DPTR,#(page + 225)
        MOVX    A,@DPTR
        LCALL   ?Subroutine66
??CrossCallReturnLabel_199:
        JNC     ??CrossCallReturnLabel_330
//  949       {
//  950         if ( (theOC > page.oc_protection ) || (OcRamp <= 0))
        MOV     DPTR,#(page + 230)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JNC     ??checkVin_25
//  951         {
//  952           atomicChange( OcRamp, 0 ); 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ??Subroutine2_1
//  953           theOC = page.oc_protection;
??CrossCallReturnLabel_3:
        MOV     A,R3
        MOV     DPTR,#theOC
        SJMP    ??checkVin_26
//  954         }
//  955         else
//  956           theOC--;
??checkVin_25:
        MOVX    A,@DPTR
        DEC     A
??checkVin_26:
        LCALL   ??Subroutine75_0
//  957         
//  958         ProtectionLimitsExceeded |= TemperatureSteppedDownMask;
??CrossCallReturnLabel_243:
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
//  959         T3CC1 = oc2timer( theOC );
        ; Setup parameters for call to function oc2timer
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
??checkVin_24:
        LCALL   ?Subroutine105
//  960       } /* END else if ( P1_4 && (t > ((INT16)page.toff_fallback)) ) */
//  961     } /* END else (checkVoutOnT == 0) */
//  962   } /* END else if (page,fallback_time ... */
//  963     
//  964 #ifdef MidString
//  965   if ( (flags[ PackageReceived ]) || (flags[DataSent]) )
??CrossCallReturnLabel_330:
        LCALL   ??Subroutine3_0
??CrossCallReturnLabel_9:
        JZ      $+5
        LJMP    ??checkVin_6
        LCALL   ?Subroutine6
??CrossCallReturnLabel_22:
        JZ      $+5
        LJMP    ??checkVin_6
//  966   { 
//  967     flags[AltCheckVin] = TRUE;
//  968     return;
//  969   }
//  970   
//  971   if ( page.shortCircuitLevel && P1_4 )
        MOV     DPTR,#(page + 159)
        MOVX    A,@DPTR
        JZ      ??checkVin_27
        MOV     C,0x90.4
        JNC     ??checkVin_27
//  972   { /* module on and shortCircuitLevel is not 0 */
//  973     
//  974     UINT16 vout;
//  975     _coeff = page.linearK[0];
        MOV     DPTR,#_coeff
        MOV     A,#((page + 40) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 40) >> 8) & 0xff)
        MOVX    @DPTR,A
//  976     vout = convU( lin_coeff( ((float) last[0])*checkVref ) );
        ; Setup parameters for call to function convU
        ; Setup parameters for call to function lin_coeff
        MOV     DPTR,#last
        LCALL   ?Subroutine4
??CrossCallReturnLabel_16:
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#checkVref
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        LCALL   ?Subroutine82
//  977     
//  978     if ( ocShortCircuitLimit < 255 )
??CrossCallReturnLabel_268:
        MOV     DPTR,#ocShortCircuitLimit
        MOVX    A,@DPTR
        XRL     A,#0xff
        CLR     C
        JZ      ??checkVin_28
//  979     { /* Short Circuit Protection is currently ON */
//  980       if ( vout > shortCircuitProtectionOff ) // was 8000 - 160V on Midstring 600V, 16000 (320 V) on MS1000 turning Short Circuit Protection OFF
        MOV     A,R0
        SUBB    A,#0x59
        MOV     A,R1
        SUBB    A,#0x34
        JC      ??checkVin_29
//  981       {
//  982         ocShortCircuitLimit = 255;
        MOV     A,#-0x1
??checkVin_30:
        LCALL   ?Subroutine34
//  983         T3CC1 = oc2timer( theOC );
??CrossCallReturnLabel_84:
        SJMP    ??checkVin_29
//  984       }
//  985     }
//  986     else
//  987     {  /* Short Circuit Protection is currently OFF */
//  988       if ( vout < shortCircuitProtectionOn ) // was 6000 - 120V on Midstring 600V, was 1200 for MS1000, turning Short Circuit Protection ON
??checkVin_28:
        MOV     A,R0
        SUBB    A,#0x10
        MOV     A,R1
        SUBB    A,#0x27
        JNC     ??checkVin_29
//  989       {
//  990         ocShortCircuitLimit = page.shortCircuitLevel;
        MOV     DPTR,#(page + 159)
        MOVX    A,@DPTR
        MOV     DPTR,#ocShortCircuitLimit
        SJMP    ??checkVin_30
//  991         T3CC1 = oc2timer( theOC );
//  992       }
//  993     }
//  994   }
//  995   else 
//  996     ocShortCircuitLimit = 255;  // if module OFF -> no Short Circuit Protection, turning it OFF
??checkVin_27:
        MOV     A,#-0x1
        MOV     DPTR,#ocShortCircuitLimit
??checkVin_8:
        MOVX    @DPTR,A
??checkVin_29:
        LJMP    ??Subroutine121_1
        CFI EndBlock cfiBlock52
        REQUIRE _A_P1
        REQUIRE T3CC1
//  997 #endif    
//  998     
//  999 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine82:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_267
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_268
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   lin_coeff
        LCALL   convU
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_239
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_240
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        CLR     0x90.4
        CLR     0x90.3
        MOV     A,#0x6a
        MOV     DPTR,#-0x3
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_241
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_242
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_243
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 15)
??Subroutine75_0:
        MOVX    @DPTR,A
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_227
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_228
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        MOV     DPTR,#theOC
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 11)
??Subroutine71_0:
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        ; Setup parameters for call to function oc2timer
        ; Setup parameters for call to function oc2timer
        LCALL   ?Subroutine105
??CrossCallReturnLabel_331:
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64
        CFI EndBlock cfiCond65

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_198
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_199
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        CLR     C
        SUBB    A,R2
        CLR     A
        LCALL   ?Subroutine103
??CrossCallReturnLabel_384:
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine103:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_382
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_383
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_384, ??CrossCallReturnLabel_198
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_384, ??CrossCallReturnLabel_199
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        SUBB    A,R3
        LJMP    ?Subroutine116
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        LCALL   ??Subroutine94_0
??CrossCallReturnLabel_393:
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R1
        SUBB    A,R3
        MOV     R3,A
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond77 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        MOVX    @DPTR,A
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 19)
        ; Setup parameters for call to function oc2timer
        ; Setup parameters for call to function oc2timer
??Subroutine34_0:
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        LCALL   ?Subroutine105
??CrossCallReturnLabel_332:
        RET
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79
        CFI EndBlock cfiCond80

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine105:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_330
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_227
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_228
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_229
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_84
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_85
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_86
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOV     R1,A
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_333
??Subroutine105_0:
        LCALL   oc2timer
        MOV     A,R1
        MOV     0xcf,A
        RET
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88
        CFI EndBlock cfiCond89

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG XDATA_Z:XDATA:NOROOT(0)
??currentFETTickCount:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??protectionModuleOffTimer:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 1000 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1001 BOOL checkItOut( BOOL *flag_ptr ){
checkItOut:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI Function checkItOut
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1002   if( *flag_ptr ){ *flag_ptr = FALSE; return TRUE; }
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??checkItOut_0
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,#0x1
        SJMP    ??checkItOut_1
// 1003   return FALSE;
??checkItOut_0:
        MOV     R1,#0x0
??checkItOut_1:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock95
// 1004 }

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1005 UINT16 *ptr2RunningTick = NULL;
ptr2RunningTick:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 1006 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1007 UINT16 computeTI(UINT16 _pt)
computeTI:
        CFI Block cfiBlock96 Using cfiCommon0
        CFI Function computeTI
// 1008 //    { return ( ( _pt <= (*ptr2RunningTick) ) ? ((*ptr2RunningTick) - _pt) : ((*ptr2RunningTick) + (65535 - _pt)) ); } 
// 1009       { return ( ( (_pt&0xFF) <= *((BYTE *)0xF538) ) ? (*((BYTE *)0xF538) - (0xFF&_pt)) : (*((BYTE *)0xF538) + (255 - (0xFF&_pt))) ); } 
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,#-0x1
        ANL     A,R2
        MOV     R0,A
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOVX    A,@DPTR
        JC      ??computeTI_0
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        CLR     A
        SJMP    ??computeTI_1
??computeTI_0:
        MOV     R2,A
        MOV     A,#-0x1
        ADD     A,R2
        DEC     R2
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        SUBB    A,R0
        MOV     R2,A
        MOV     A,R3
??computeTI_1:
        SUBB    A,#0x0
        MOV     R3,A
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock96

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1010 void tickWait(BYTE wait){ 
tickWait:
        CFI Block cfiBlock97 Using cfiCommon0
        CFI Function tickWait
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1011     ticks[ TickWait ] = ( (INT16)wait ) + 1; //(reset of watchdog should be only in one place)
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     ?V0 + 0,R1
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine67_0
??CrossCallReturnLabel_204:
        SJMP    ??tickWait_0
// 1012     while( ticks[ TickWait ] > 0 ){ P1_2 ^= 1; };//{ WDCTL = 0xA8;  WDCTL = 0x58; *((BYTE *)0xFFFF) = 0x10; } 
??tickWait_1:
        XRL     0x90,#0x4
        MOV     A,0x90
??tickWait_0:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??tickWait_1
// 1013     ticks[ TickWait ] = 0;
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ?Subroutine122
        CFI EndBlock cfiBlock97
        REQUIRE _A_P1
// 1014 }
// 1015 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1016 void checkMore(){
checkMore:
        CFI Block cfiBlock98 Using cfiCommon0
        CFI Function checkMore
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1017 BYTE i; UINT16 j; BOOL go8k = FALSE;
// 1018     P1_4 = 0;   P1DIR = 0xDB;    // module off
        CLR     0x90.4
        MOV     0xfe,#-0x25
// 1019     for( i = 0; (i<15); i++ ){ // the self check
        MOV     R6,#0x0
// 1020         BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
??checkMore_0:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     A,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine85
// 1021         BOOL flag = TRUE; 
// 1022         *((BYTE *)0xFFFF) = 0x10;
// 1023         for( j = 0; flag && (j < 0x400); j++ ) flag = ( (*ptr++)==0xFF );
??CrossCallReturnLabel_273:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??checkMore_1
        MOV     R2,#0x1
        SJMP    ??checkMore_2
??checkMore_1:
        MOV     R2,#0x0
??checkMore_2:
        LCALL   ?Subroutine86
??CrossCallReturnLabel_275:
        JZ      ??checkMore_3
        CLR     C
        MOV     A,R5
        SUBB    A,#0x4
        JC      ??CrossCallReturnLabel_273
// 1024         go8k |= flag;
// 1025     }
??checkMore_3:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0xf
        JC      ??checkMore_0
// 1026     //if( go8k ) {void (*f)( void ) = ( void (*)( void ) )0x603F; (*f)();} // commented jump to 8k image, Feb 12 2014, 16:35
// 1027 }
        SJMP    ??Subroutine122_0
        CFI EndBlock cfiBlock98
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine122:
        CFI Block cfiBlock99 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOVX    @DPTR,A
??Subroutine122_0:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock99
// 1028 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1029 BOOL dec( UINT16 *cntPtr ){ --(*cntPtr); return (*((BYTE *)cntPtr)==0)?TRUE:FALSE; }
`dec`:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI Function `dec`
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine49
??CrossCallReturnLabel_125:
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??dec_0
        MOV     R1,#0x1
        SJMP    ??dec_1
??dec_0:
        MOV     R1,#0x0
??dec_1:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock100

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond102) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond102) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond102) CFA_SP SP+-4
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        LCALL   ?Subroutine102
??CrossCallReturnLabel_325:
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine102:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_125
        CFI (cfiCond106) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond106) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond106) CFA_SP SP+-4
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_325, ??CrossCallReturnLabel_126
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_122
        CFI (cfiCond108) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond108) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond108) CFA_SP SP+-4
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_324, ??CrossCallReturnLabel_123
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
// 1030 /******************************************************************************
// 1031 * @fn  main
// 1032 * @brief
// 1033 *      Main function. Triggers setup menus and main loops for both receiver
// 1034 *      and transmitter. This function supports both CC1110 and CC2510.
// 1035 * Parameters:
// 1036 * @param  void
// 1037 * @return void
// 1038 ******************************************************************************/

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
// 1039 BYTE sleepCounter = 5, saved_channel;
sleepCounter:
        DS 1
        REQUIRE `?<Initializer for sleepCounter>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
saved_channel:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1040 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
// 1041 static BOOL   wasAHardResetOrPowerOn = TRUE;
wasAHardResetOrPowerOn:
        DS 1
        REQUIRE `?<Initializer for wasAHardResetOrPowerOn>`
        REQUIRE __INIT_XDATA_I
// 1042 

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1043 UINT16 milliSeconds = 0;
milliSeconds:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1044 BYTE   seconds = 0, minutes = 0;
seconds:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
minutes:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1045 BYTE was_repeater = 0;
was_repeater:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1046 void main_loop(void)
main_loop:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function main_loop
// 1047 {
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, prepareJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, parseGWPackage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, computeADCs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, switchTo255
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, `dec`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, hop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, hop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main_loop, prepareData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1048   BYTE idx; 
// 1049   static BYTE xored = 1;
// 1050   
// 1051   for ( idx = 0; idx < N_Of_Flags; idx ++ )
        MOV     ?V0 + 0,#0x0
// 1052   {
// 1053     if( flags[ idx ] )
??main_loop_0:
        MOV     R0,?V0 + 0
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,R0
        LCALL   ?Subroutine54
??CrossCallReturnLabel_137:
        JNZ     $+5
        LJMP    ??main_loop_1
// 1054     {
// 1055       flags[ idx ] = FALSE;
        CLR     A
        MOVX    @DPTR,A
// 1056       switch( idx )
        MOV     A,?V0 + 0
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for main_loop>_0`:
        DATA
        DB        0
        DB        5
        DB        1
        DW        ??main_loop_2
        DB        2
        DW        ??main_loop_3
        DB        3
        DW        ??main_loop_4
        DB        9
        DW        ??main_loop_5
        DB        11
        DW        ??main_loop_6
        DW        ??main_loop_7
        CODE
// 1057       {
// 1058       case DataSent:
// 1059         rc();
// 1060         if ( was_listening )
??main_loop_3:
        MOV     DPTR,#was_listening
        MOVX    A,@DPTR
        JZ      ??main_loop_8
// 1061         { 
// 1062           setupRepeater( FALSE );
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
??main_loop_9:
        LCALL   setupRepeater
// 1063           receive();
        ; Setup parameters for call to function receive
        LCALL   receive
        LJMP    ??main_loop_7
// 1064         }
// 1065         else if ( page.isRelay && (!page.is500Always) )
??main_loop_8:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        JZ      $+5
        LJMP    ??main_loop_7
// 1066         { 
// 1067           setupRepeater( got_gw );
        ; Setup parameters for call to function setupRepeater
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??main_loop_9
// 1068           receive();
// 1069         }
// 1070         break;
// 1071       
// 1072       case PrepareJoin:
// 1073         prepareJoinRequest();
??main_loop_4:
        ; Setup parameters for call to function prepareJoinRequest
        LCALL   prepareJoinRequest
        LJMP    ??main_loop_7
// 1074         break;
// 1075                           
// 1076       case PackageReceived:
// 1077         parseGWPackage();
??main_loop_2:
        ; Setup parameters for call to function parseGWPackage
        LCALL   parseGWPackage
        LJMP    ??main_loop_7
// 1078         break;
// 1079                     
// 1080       case AltCheckVin:
// 1081         if ( ( PKTSTATUS & 0x4 ) && ( ( MARCSTATE > 0xC ) && ( MARCSTATE < 0x10 ) ) )
??main_loop_6:
        MOV     DPTR,#-0x20c4
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??main_loop_10
        MOV     DPTR,#-0x20c5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xd
        JC      ??main_loop_10
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x10
        JNC     ??main_loop_10
// 1082           flags[AltCheckVin] = TRUE; /* receving a packet */
??main_loop_11:
        LCALL   ?Subroutine15
??CrossCallReturnLabel_42:
        SJMP    ??main_loop_12
// 1083         else if( flags[PackageReceived] || flags[DataSent] )
??main_loop_10:
        LCALL   ??Subroutine3_0
??CrossCallReturnLabel_10:
        JNZ     ??main_loop_11
        LCALL   ?Subroutine6
??CrossCallReturnLabel_23:
        JNZ     ??main_loop_11
// 1084           flags[AltCheckVin] = TRUE; /* receving a packet */
// 1085         else if( ( ( ticks[SendData] > 14*TICKS_IN_MS ) || ( ticks[SendData] == 0 ) ) && ( ( ticks[DelayedPrepareData] > 14*TICKS_IN_MS ) || ( ticks[DelayedPrepareData] == 0 ) ) ) 
        LCALL   ?Subroutine30
??CrossCallReturnLabel_76:
        LCALL   ?Subroutine21
??CrossCallReturnLabel_57:
        JNC     ??main_loop_13
        MOV     A,R0
        JNZ     ??main_loop_14
        MOV     A,R1
??main_loop_14:
        JNZ     ??main_loop_11
??main_loop_13:
        LCALL   ?Subroutine39
??CrossCallReturnLabel_93:
        LCALL   ?Subroutine21
??CrossCallReturnLabel_58:
        JNC     ??main_loop_15
        MOV     A,R0
        JNZ     ??main_loop_16
        MOV     A,R1
??main_loop_16:
        JNZ     ??main_loop_11
// 1086           computeADCs( FALSE, TRUE ); /*checkVin(); */
??main_loop_15:
        ; Setup parameters for call to function computeADCs
        MOV     R2,#0x1
        MOV     R1,#0x0
        LCALL   computeADCs
// 1087         else
// 1088           flags[AltCheckVin] = TRUE;
// 1089         if( (((INT16)adcs16[ 2 ]) < page.cur_noise ) )
??main_loop_12:
        MOV     DPTR,#(page + 232)
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_169:
        MOV     DPH,#(((adcs16 + 4) >> 8) & 0xff)
        MOV     DPL,#((adcs16 + 4) & 0xff)
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_378:
        JC      $+5
        LJMP    ??main_loop_7
// 1090         {
// 1091           T3CC1 = theOC = 0;
        CLR     A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        MOV     0xcf,#0x0
// 1092           atomicChange( OcRamp, TICKS_IN_SEC ); 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ?Subroutine55
??CrossCallReturnLabel_140:
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        LJMP    ??main_loop_17
// 1093         }
// 1094         break;
// 1095       
// 1096       case Cycle:
// 1097         if ( dec( &cycles2SoftKick )  )
??main_loop_5:
        ; Setup parameters for call to function dec
        MOV     R2,#(cycles2SoftKick & 0xff)
        MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??CrossCallReturnLabel_87
// 1098         { 
// 1099           softKick();
        ; Setup parameters for call to function softKick
        LCALL   softKick
// 1100           cycles2SoftKick  = page.defCycles2SoftKick;  
        LCALL   ?Subroutine35
// 1101         }
// 1102         if ( cycles2HardKick < 10 )
??CrossCallReturnLabel_87:
        MOV     DPTR,#cycles2HardKick
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0xa
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??CrossCallReturnLabel_272
// 1103         {
// 1104           switchTo255();
        ; Setup parameters for call to function switchTo255
        LCALL   ?Subroutine84
// 1105           ch255 = FALSE;
// 1106         }
// 1107                             
// 1108         if ( ++cyclesFromStart > 50 )
??CrossCallReturnLabel_272:
        LCALL   ?Subroutine14
??CrossCallReturnLabel_40:
        JC      ??main_loop_18
// 1109           wasAHardResetOrPowerOn = FALSE;
        CLR     A
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    @DPTR,A
        SJMP    ??main_loop_19
// 1110                             
// 1111         if ( (!wasAHardResetOrPowerOn) && page.searchCommunication )
??main_loop_18:
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??main_loop_7
??main_loop_19:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JC      $+5
        LJMP    ??main_loop_7
// 1112         {
// 1113           if ( page.is500Always )
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_loop_20
// 1114           {
// 1115             if ( dec( &cyclesTo10 ) ) 
        ; Setup parameters for call to function dec
        MOV     R2,#(cyclesTo10 & 0xff)
        MOV     R3,#((cyclesTo10 >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_21
// 1116             { 
// 1117               cyclesTo500 = page.defCyclesTo500;
        LCALL   ?Subroutine9
// 1118               cycles2Step10Channel = page.defCyclesToStep10Channel;
// 1119                                         
// 1120               page.is500Always = FALSE;
??CrossCallReturnLabel_32:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
        MOVX    @DPTR,A
// 1121               setupRadio( curChannel = page.channel );
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
??main_loop_22:
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
??main_loop_23:
        MOV     R1,A
        LCALL   setupRadio
        SJMP    ??main_loop_7
// 1122             }
// 1123             else if ( dec( &cyclesToStep500Channel ) )
??main_loop_21:
        ; Setup parameters for call to function dec
        MOV     R2,#(cyclesToStep500Channel & 0xff)
        MOV     R3,#((cyclesToStep500Channel >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_7
// 1124             { 
// 1125               cyclesToStep500Channel = page.defCyclesToStep500Channel;
        LCALL   ?Subroutine36
// 1126               page.starting500Channel = curChannel = (curChannel + page.repStep) % 250;
??CrossCallReturnLabel_89:
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#(page + 222)
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#-0x6
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 218)
        SJMP    ??main_loop_22
// 1127               setupRadio( curChannel );
// 1128             }
// 1129           }
// 1130           else
// 1131           {
// 1132             if( dec( &cyclesTo500 ) )
??main_loop_20:
        ; Setup parameters for call to function dec
        MOV     R2,#(cyclesTo500 & 0xff)
        MOV     R3,#((cyclesTo500 >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_24
// 1133             { 
// 1134               cyclesTo10 = page.defCyclesTo10;
        LCALL   ?Subroutine37
// 1135               cycles2Step10Channel = 0;
??CrossCallReturnLabel_91:
        MOV     DPTR,#cycles2Step10Channel
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine78
// 1136               
// 1137               page.is500Always = TRUE;
??CrossCallReturnLabel_253:
        SETB    0xE0 /* A   */.6
        LCALL   ?Subroutine22
// 1138               cyclesToStep500Channel = page.defCyclesToStep500Channel;
// 1139               
// 1140               if( page.starting500Channel == 0xFF )
??CrossCallReturnLabel_59:
        XRL     A,#0xff
        JNZ     ??main_loop_25
// 1141                 page.starting500Channel = page.channel;
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 218)
        MOVX    @DPTR,A
// 1142               
// 1143               curChannel = page.starting500Channel;
??main_loop_25:
        MOVX    A,@DPTR
        LCALL   ?Subroutine2
// 1144               ticks[ Hop ] = 0;
// 1145               setupRadio( curChannel );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        SJMP    ??main_loop_23
// 1146             }
// 1147             else if( dec( &cycles2Step10Channel ) )
??main_loop_24:
        ; Setup parameters for call to function dec
        MOV     R2,#(cycles2Step10Channel & 0xff)
        MOV     R3,#((cycles2Step10Channel >> 8) & 0xff)
        LCALL   `dec`
        MOV     A,R1
        JZ      ??main_loop_7
// 1148             {
// 1149               CHANNR = curChannel;
        LCALL   ?Subroutine40
// 1150               hop(); 
// 1151               curChannel = CHANNR; 
// 1152               cycles2Step10Channel = page.defCyclesToStep10Channel;
??CrossCallReturnLabel_95:
        LCALL   ?Subroutine58
??CrossCallReturnLabel_160:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??main_loop_17:
        MOVX    @DPTR,A
// 1153             }
// 1154           }
// 1155         }
// 1156         break;
// 1157       } /* END switch */
// 1158       
// 1159       if( flags[ PackageReceived ] || flags[DataSent] )
??main_loop_7:
        LCALL   ??Subroutine3_0
??CrossCallReturnLabel_11:
        JNZ     ??main_loop_26
        LCALL   ?Subroutine6
??CrossCallReturnLabel_24:
        JNZ     ??main_loop_26
// 1160         break;
// 1161     } /* if ( flags ) */
// 1162         
// 1163   }/* END   for ( idx = 0; idx < N_Of_Flags; idx ++ ) */
??main_loop_1:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x10
        JNC     $+5
        LJMP    ??main_loop_0
// 1164   
// 1165   for ( idx = 0; idx < N_Of_Ticks; idx++ )
??main_loop_26:
        MOV     ?V0 + 0,#0x0
// 1166   {
// 1167     if ( ticks[ idx ] < 0 )
??main_loop_27:
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine61
??CrossCallReturnLabel_186:
        JC      $+5
        LJMP    ??main_loop_28
// 1168     {
// 1169       ticks[ idx ] = 0;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1170       
// 1171       switch( idx )
        MOV     A,?V0 + 0
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for main_loop>_1`:
        DATA
        DB        2
        DB        13
        DW        ??main_loop_28
        DW        ??main_loop_29
        DW        ??main_loop_30
        DW        ??main_loop_31
        DW        ??main_loop_32
        DW        ??main_loop_33
        DW        ??main_loop_28
        DW        ??main_loop_34
        DW        ??main_loop_35
        DW        ??main_loop_36
        DW        ??main_loop_37
        DW        ??main_loop_38
        DW        ??main_loop_39
        DW        ??main_loop_28
        DW        ??main_loop_40
        CODE
// 1172       {
// 1173       case FeedTheDog:
// 1174         WDCTL = 0xA8;
??main_loop_29:
        MOV     0xc9,#-0x58
// 1175         WDCTL = 0x58;
        MOV     0xc9,#0x58
// 1176         ticks[ FeedTheDog ] = _dogFeeding;
        LCALL   ?Subroutine31
??CrossCallReturnLabel_78:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LJMP    ??CrossCallReturnLabel_197
// 1177         break;
// 1178       
// 1179       case SendData:
// 1180         if ( !bunchCount )
??main_loop_30:
        MOV     DPTR,#bunchCount
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_28
// 1181           break;
// 1182         if ( bunchCount )
// 1183           bunchCount--;
        DEC     A
        MOVX    @DPTR,A
// 1184         
// 1185         *((BYTE *)0xF538) = 0;
        CLR     A
        MOV     DPTR,#-0xac8
        MOVX    @DPTR,A
// 1186         was_repeater = ( ADDR == page.gwAddr );
        MOV     DPTR,#-0x20fb
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??main_loop_41
        MOV     R2,#0x1
        SJMP    ??main_loop_42
??main_loop_41:
        MOV     R2,#0x0
??main_loop_42:
        MOV     A,R2
        MOV     DPTR,#was_repeater
        MOVX    @DPTR,A
// 1187         
// 1188         if ( packagePrepared )
        MOV     DPTR,#packagePrepared
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_28
// 1189         {
// 1190           if ( !was_repeater )
        MOV     DPTR,#was_repeater
        MOVX    A,@DPTR
        JNZ     ??main_loop_43
// 1191             was_listening = (si->radioMode == RADIO_MODE_RX);
        LCALL   ?Subroutine32
??CrossCallReturnLabel_80:
        XRL     A,#0x20
        JNZ     ??main_loop_44
        MOV     R2,#0x1
        SJMP    ??main_loop_45
??main_loop_44:
        MOV     R2,#0x0
??main_loop_45:
        MOV     A,R2
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
// 1192           
// 1193           if ( isCalibrationPackage && reportScaling )
??main_loop_43:
        MOV     DPTR,#isCalibrationPackage
        MOVX    A,@DPTR
        JZ      ??main_loop_46
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      ??main_loop_46
// 1194           {
// 1195             isCalibrationPackage--;
        MOV     DPTR,#isCalibrationPackage
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
// 1196             reportScaling--; 
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
// 1197             
// 1198             if ( !reportScaling )
        JNZ     ??main_loop_47
// 1199               base_ptr = NULL;
        MOV     DPTR,#base_ptr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??main_loop_48
// 1200           }
// 1201           else if ( reportFlashCheck )
??main_loop_46:
        MOV     DPTR,#reportFlashCheck
        MOVX    A,@DPTR
        JZ      ??main_loop_47
// 1202             reportFlashCheck--;
        DEC     A
??main_loop_48:
        MOVX    @DPTR,A
// 1203           
// 1204           sendData( radioPktBufferTx, FALSE );
??main_loop_47:
        ; Setup parameters for call to function sendData
        MOV     R1,#0x0
        MOV     R2,#(radioPktBufferTx & 0xff)
        MOV     R3,#((radioPktBufferTx >> 8) & 0xff)
        LCALL   sendData
// 1205           
// 1206           if ( page.gbunch && ( ( page.gbunch <= 7 ) || ( page.rbunch <= 7 ) ) )
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     R2,A
        JNZ     $+5
        LJMP    ??main_loop_28
        MOV     DPTR,#(page + 157)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,#0x8
        JC      ??main_loop_49
        MOV     A,R3
        CLR     C
        SUBB    A,#0x8
        JC      $+5
        LJMP    ??main_loop_28
// 1207           {
// 1208             BYTE b;
// 1209             if ( page.rbunch && ( page.rbunch < page.gbunch ) )
??main_loop_49:
        MOV     A,R3
        JZ      ??main_loop_50
        CLR     C
        SUBB    A,R2
        JNC     ??main_loop_50
// 1210               b = page.rbunch;
        MOV     ?V0 + 2,R3
        SJMP    ??main_loop_51
// 1211             else
// 1212               b = page.gbunch;
??main_loop_50:
        MOV     ?V0 + 2,R2
// 1213             
// 1214             if ( page.use12kbod )
??main_loop_51:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x6
        LCALL   ?Subroutine27
??CrossCallReturnLabel_71:
        JNC     ??main_loop_52
// 1215             {
// 1216               if ( b <= 18 )
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x13
        JNC     ??main_loop_53
// 1217                 atomicChange( SendData, lastCycle*b - 1 -*((BYTE *)0xF538)-xored);
        LCALL   ?Subroutine12
??CrossCallReturnLabel_36:
        MOV     A,#-0x1
        ADD     A,R2
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R3
        SJMP    ??main_loop_54
// 1218             }
// 1219             else
// 1220             {
// 1221               if ( b == 1 )
??main_loop_52:
        MOV     A,#0x1
        XRL     A,?V0 + 2
        JNZ     ??main_loop_53
// 1222                 atomicChange( SendData, lastCycle   - 1 -*((BYTE *)0xF538)-xored);
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
??main_loop_54:
        MOV     R3,A
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R2
        CLR     C
        SUBB    A,R6
        MOV     R2,A
        MOV     A,R3
        SUBB    A,#0x0
        LCALL   ?Subroutine65
??CrossCallReturnLabel_196:
        MOVX    @DPTR,A
// 1223             }
// 1224             xored ^= 1;
??main_loop_53:
        MOV     DPTR,#??xored
        MOVX    A,@DPTR
        XRL     A,#0x1
        LJMP    ??CrossCallReturnLabel_197
// 1225           }
// 1226         }/* END if ( packagePrepared ) */
// 1227         break;
// 1228       
// 1229       case BypassMode:
// 1230         P1_3 = 0;
??main_loop_32:
        CLR     0x90.3
        LJMP    ??main_loop_28
// 1231         break;
// 1232       
// 1233       case TurnOn:            
// 1234 #ifdef MIDSTRING 
// 1235         if (fetFailure == FALSE)
??main_loop_36:
        MOV     DPTR,#fetFailure
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??main_loop_28
// 1236         {
// 1237           turnOnFlag = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#turnOnFlag
        LJMP    ??CrossCallReturnLabel_197
// 1238         }
// 1239 #else
// 1240         if ( page.ov == T3CC0 )
// 1241           P1_4 = 1;
// 1242         else 
// 1243           turnOnFlag = TRUE;                                          
// 1244 #endif
// 1245         break;                
// 1246       
// 1247       case Init:
// 1248         if ( (!page.mpp) && page.module )
??main_loop_33:
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        JNZ     ??main_loop_55
        MOV     DPTR,#(page + 186)
        MOVX    A,@DPTR
        JZ      ??main_loop_55
// 1249         {
// 1250           P1_3 = 1; 
        SETB    0x90.3
// 1251           atomicChange( BypassMode, TICKS_IN_SEC ); // switching mpp on and switching it off (bypass mode) only after delay
        LCALL   ?Subroutine10
??CrossCallReturnLabel_34:
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_158
// 1252         }
// 1253         else
// 1254           P1_3 = page.mpp;
??main_loop_55:
        LCALL   ?Subroutine57
// 1255         if( page.module )
??CrossCallReturnLabel_158:
        MOV     DPTR,#(page + 186)
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_28
// 1256           ov_startup();
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        LJMP    ??main_loop_28
// 1257         break;
// 1258       
// 1259       case Hop:
// 1260         if ( page.hoppingAllowed && !page.is500Always )
??main_loop_34:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x50
        XRL     A,#0x10
        JNZ     ??main_loop_31
// 1261         {
// 1262           if ( si->radioMode == RADIO_MODE_TX  )
        LCALL   ?Subroutine25
??CrossCallReturnLabel_65:
        JNZ     ??main_loop_56
// 1263           {
// 1264             atomicChange( Hop, 1 );
        LCALL   ?Subroutine41
??CrossCallReturnLabel_97:
        MOV     A,#0x1
        LJMP    ??CrossCallReturnLabel_78
// 1265             break;
// 1266           }
// 1267           
// 1268           if ( cyclesToHop-- )
??main_loop_56:
        MOV     DPTR,#cyclesToHop
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x1
        ADD     A,R2
        MOVX    @DPTR,A
        MOV     A,R2
        JZ      ??main_loop_57
// 1269           { 
// 1270             CHANNR = curChannel;
        LCALL   ?Subroutine40
// 1271             hop();
// 1272             curChannel = CHANNR; 
// 1273             atomicChange( Hop, lastCycle );
??CrossCallReturnLabel_96:
        MOV     DPTR,#lastCycle
        LCALL   ??Subroutine45_0
??CrossCallReturnLabel_106:
        LCALL   ?Subroutine41
??CrossCallReturnLabel_98:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??main_loop_58
// 1274           } 
// 1275           else
// 1276           {
// 1277             curChannel = page.channel;
??main_loop_57:
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
// 1278             CHANNR = curChannel;
        MOV     DPTR,#-0x20fa
??main_loop_58:
        MOVX    @DPTR,A
// 1279           }
// 1280           ticks[ ReceiveData ] = 0;
        LCALL   ?Subroutine17
??CrossCallReturnLabel_47:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1281         } /* fall through to ReceiveData */
// 1282       
// 1283       case ReceiveData:
// 1284         setupRepeater( FALSE );
??main_loop_31:
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
        LCALL   setupRepeater
// 1285         was_listening = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
// 1286         receive();
        ; Setup parameters for call to function receive
        LCALL   receive
        LJMP    ??main_loop_28
// 1287         break;
// 1288       
// 1289       case Ms:
// 1290         atomicChange( Ms, TICKS_IN_SEC );
??main_loop_37:
        LCALL   ?Subroutine5
// 1291         cycles2HardKick--;
??CrossCallReturnLabel_18:
        MOV     DPTR,#cycles2HardKick
        LCALL   ?Subroutine49
??CrossCallReturnLabel_126:
        LJMP    ??CrossCallReturnLabel_197
// 1292         break;
// 1293       
// 1294       case Cycle: /* kicking and search logic */
// 1295         atomicChange( Cycle, lastCycle );
??main_loop_35:
        LCALL   ?Subroutine7
// 1296         atomicChange( ReceiveData, lastCycle - _slot - 5*TICKS_IN_MS );
??CrossCallReturnLabel_363:
        MOV     DPTR,#_slot
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_170:
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        MOV     A,#-0xa
        ADD     A,R0
        MOV     R0,A
        MOV     A,#-0x1
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#ticks
        LCALL   ?Subroutine50
??CrossCallReturnLabel_127:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine67_0
// 1297         flags[ Cycle ] = TRUE;
??CrossCallReturnLabel_205:
        LCALL   ?Subroutine16
??CrossCallReturnLabel_45:
        MOVX    @DPTR,A
// 1298         if (got_gw)
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        JZ      ??main_loop_59
// 1299           got_gw--;
        DEC     A
        MOVX    @DPTR,A
// 1300         if ( isOnTestStand )
??main_loop_59:
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??main_loop_28
// 1301           isOnTestStand--;
        DEC     A
        LJMP    ??CrossCallReturnLabel_197
// 1302         break;
// 1303       
// 1304       case OvStartup:
// 1305         if ( T3CC0 < page.ov )
??main_loop_40:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,0xcd
        CLR     C
        SUBB    A,R3
        JC      $+5
        LJMP    ??main_loop_28
// 1306         { 
// 1307           BYTE cnt = page.ov_step, a = T3CC0;
        MOV     DPTR,#(page + 234)
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,0xcd
        MOV     R2,A
// 1308           if ( cnt == 0 )
        MOV     A,R4
        JNZ     ??main_loop_60
// 1309             cnt = 1;
        MOV     R4,#0x1
        SJMP    ??main_loop_60
// 1310           
// 1311           while ( cnt-- && (a < page.ov) )
// 1312             a++;
??main_loop_61:
        INC     R2
??main_loop_60:
        MOV     A,R4
        DEC     R4
        JZ      ??main_loop_62
        MOV     A,R2
        CLR     C
        SUBB    A,R3
        JC      ??main_loop_61
// 1313           
// 1314           T3CC0 = a;
??main_loop_62:
        MOV     0xcd,R2
// 1315           atomicChange( OvStartup, TICKS_IN_SEC ); 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1e
        LCALL   ?Subroutine55
??CrossCallReturnLabel_141:
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        LJMP    ??CrossCallReturnLabel_197
// 1316         }
// 1317         break;
// 1318       
// 1319       case OcRamp:
// 1320 #ifdef MidString
// 1321         if ( (((INT16)adcs16[ 2 ]) > page.cur_noise ) )
??main_loop_38:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ?Subroutine56
??CrossCallReturnLabel_149:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        LCALL   ?Subroutine60
??CrossCallReturnLabel_171:
        MOV     DPH,#(((page + 232) >> 8) & 0xff)
        MOV     DPL,#((page + 232) & 0xff)
        LCALL   ??Subroutine0_1
??CrossCallReturnLabel_379:
        JNC     ??main_loop_63
// 1322         {
// 1323           if ( theOC < setOC )
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#setOC
        MOVX    A,@DPTR
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        CLR     C
        SUBB    A,R2
        JC      $+5
        LJMP    ??main_loop_28
// 1324           {
// 1325             BYTE cnt = page.oc_step, a = theOC;
        MOV     DPTR,#(page + 231)
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        MOV     R3,A
// 1326             if ( cnt == 0 )
        MOV     A,R4
        JNZ     ??main_loop_64
// 1327               cnt = 10;
        MOV     R4,#0xa
        SJMP    ??main_loop_64
// 1328             
// 1329             while ( cnt-- && ( a < setOC ) )
// 1330               a++;
??main_loop_65:
        INC     R3
??main_loop_64:
        MOV     A,R4
        DEC     R4
        JZ      ??main_loop_66
        MOV     A,R3
        CLR     C
        SUBB    A,R2
        JC      ??main_loop_65
// 1331             
// 1332             T3CC1 = oc2timer( theOC = a );
??main_loop_66:
        MOV     A,R3
        LCALL   ??Subroutine71_0
// 1333             atomicChange( OcRamp, TICKS_IN_SEC );
??CrossCallReturnLabel_229:
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??CrossCallReturnLabel_141
// 1334           }
// 1335         }
// 1336         else
// 1337         {
// 1338           T3CC1 = theOC = 0;
??main_loop_63:
        CLR     A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        MOV     0xcf,#0x0
// 1339           atomicChange( OcRamp, TICKS_IN_SEC );
        SJMP    ??CrossCallReturnLabel_229
// 1340         }
// 1341 #endif
// 1342         break;
// 1343       
// 1344       case DelayedPrepareData:
// 1345         { /* most of the time is spent here*/
// 1346           *((BYTE *)0xF538) = 0;
??main_loop_39:
        CLR     A
        MOV     DPTR,#-0xac8
        MOVX    @DPTR,A
// 1347           prepareData();
        ; Setup parameters for call to function prepareData
        LCALL   prepareData
// 1348           
// 1349           if ( page.gbunch )
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        JZ      ??main_loop_28
// 1350           {
// 1351             if (page.use12kbod && ( page.gbunch <= 18 ) )
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ?Subroutine27
??CrossCallReturnLabel_72:
        JNC     ??main_loop_67
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x13
        JNC     ??main_loop_28
// 1352             {
// 1353               atomicChange( DelayedPrepareData, page.gbunch * lastCycle - *((BYTE *)0xF538) - 1 -xored);
        LCALL   ?Subroutine12
??CrossCallReturnLabel_37:
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R2
        CLR     C
        SUBB    A,R6
        MOV     R2,A
        MOV     A,R3
        SJMP    ??main_loop_68
// 1354             }
// 1355             else if ( !page.use12kbod && ( page.gbunch == 1 ) )
??main_loop_67:
        MOV     A,#0x1
        XRL     A,?V0 + 2
        JNZ     ??main_loop_28
// 1356             {
// 1357               atomicChange( DelayedPrepareData, lastCycle - *((BYTE *)0xF538) - 1 -xored);
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
??main_loop_68:
        SUBB    A,#0x0
        MOV     R3,A
        MOV     A,#-0x1
        ADD     A,R2
        DEC     R2
        MOV     A,#-0x1
        ADDC    A,R3
        LCALL   ?Subroutine65
??CrossCallReturnLabel_197:
        MOVX    @DPTR,A
// 1358             }
// 1359           }
// 1360         }
// 1361         break;
// 1362         
// 1363       } /* END switch( idx ) */
// 1364     } /* END if ( ticks[ idx ] < 0 ) */
// 1365   }/* END for ( idx = 0; idx < N_Of_Ticks; idx++ ) */
??main_loop_28:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x10
        JNC     $+5
        LJMP    ??main_loop_27
        CFI EndBlock cfiBlock111
// 1366 }
        REQUIRE ?Subroutine123
        REQUIRE _A_P1
        REQUIRE WDCTL
        REQUIRE T3CC0
        REQUIRE T3CC1
        ; // Fall through to label ?Subroutine123

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine123:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock112

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine84:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_271
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_272
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        LCALL   switchTo255
        CLR     A
        MOV     DPTR,#ch255
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_251
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_252
        CFI (cfiCond117) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond117) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond117) CFA_SP SP+-4
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_253
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_254
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_196
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        MOV     R3,A
        MOV     A,R2
        CLR     C
        SUBB    A,R4
        MOV     R2,A
        MOV     A,R3
        SUBB    A,#0x0
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_156
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_158
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_159
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.3,C
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_291:
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        ; Setup parameters for call to function hop
        ; Setup parameters for call to function hop
        LCALL   hop
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??xored
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        RET
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        LCALL   ?Subroutine99
??CrossCallReturnLabel_315:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1d
        MOV     A,R1
        LCALL   ?Subroutine110
??CrossCallReturnLabel_385:
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine110:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_190
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_191
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_193
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_192
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_194
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_195
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_385, ??CrossCallReturnLabel_57
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_385, ??CrossCallReturnLabel_58
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_186
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_187
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_28
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_29
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_30
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_31
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        SUBB    A,#0x0
        SJMP    ?Subroutine116
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond157) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond157) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0xb
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_43
??Subroutine15_0:
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_288:
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158
        CFI EndBlock cfiCond159

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond160 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker162 Using cfiCommon1
        CFI (cfiPicker162) NoFunction
        CFI (cfiPicker162) Picker
        LCALL   ?Subroutine94
??CrossCallReturnLabel_391:
        MOV     A,R2
        MOV     B,?V0 + 2
        MUL     AB
        MOV     R2,A
        MOV     R6,B
        MOV     B,?V0 + 2
        MOV     A,R3
        MUL     AB
        ADD     A,R6
        MOV     R3,A
        RET
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiPicker162

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond163 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_363
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_364
        CFI Block cfiPicker165 Using cfiCommon1
        CFI (cfiPicker165) NoFunction
        CFI (cfiPicker165) Picker
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_365
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 15)
??Subroutine7_0:
        MOV     R3,A
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x12
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_287:
        SJMP    ??Subroutine114_0
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiPicker165
        CFI EndBlock cfiCond166

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine114:
        CFI Block cfiCond167 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_368
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_369
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_366
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_367
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_363
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_364
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_365
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_350
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_351
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_352
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_353
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_354
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_355
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_356
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_357
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_358
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_359
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond184) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond184) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond184) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond184) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond184) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond184) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond184) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond184) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond184) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond184) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_360
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond185) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond185) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond185) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond185) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond185) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond185) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond185) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond185) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_361
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond186) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond186) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_362
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond187) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond187) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond187) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond187) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond187) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond187) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 31)
??Subroutine114_0:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond188 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_370
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_371
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker190 Using cfiCommon1
        CFI (cfiPicker190) NoFunction
        CFI (cfiPicker190) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 136)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_376
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_377
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 15)
??Subroutine0_0:
        LCALL   ?Subroutine99
??CrossCallReturnLabel_312:
        MOV     DPTR,#??protectionModuleOffTimer
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_372
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_373
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_374
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_375
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_378
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_379
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 11)
??Subroutine0_1:
        LCALL   ?Subroutine95
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiPicker190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
??CrossCallReturnLabel_304:
        REQUIRE ?Subroutine116
        ; // Fall through to label ?Subroutine116

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine116:
        CFI Block cfiCond199 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_382
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_383
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond200) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond200) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_384, ??CrossCallReturnLabel_198
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_384, ??CrossCallReturnLabel_199
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_190
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_191
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_193
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_192
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_194
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_386, ??CrossCallReturnLabel_195
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond209 Using cfiCommon0
        CFI (cfiCond209) NoFunction
        CFI (cfiCond209) Conditional ??CrossCallReturnLabel_385, ??CrossCallReturnLabel_57
        CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond209) CFA_SP SP+0
        CFI (cfiCond209) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond210 Using cfiCommon0
        CFI (cfiCond210) NoFunction
        CFI (cfiCond210) Conditional ??CrossCallReturnLabel_385, ??CrossCallReturnLabel_58
        CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond210) CFA_SP SP+0
        CFI (cfiCond210) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond211 Using cfiCommon0
        CFI (cfiCond211) NoFunction
        CFI (cfiCond211) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_186
        CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond211) CFA_SP SP+0
        CFI (cfiCond211) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond212 Using cfiCommon0
        CFI (cfiCond212) NoFunction
        CFI (cfiCond212) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_187
        CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond212) CFA_SP SP+0
        CFI (cfiCond212) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond213 Using cfiCommon0
        CFI (cfiCond213) NoFunction
        CFI (cfiCond213) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_28
        CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond213) CFA_SP SP+0
        CFI (cfiCond213) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond214 Using cfiCommon0
        CFI (cfiCond214) NoFunction
        CFI (cfiCond214) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_29
        CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond214) CFA_SP SP+0
        CFI (cfiCond214) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond215 Using cfiCommon0
        CFI (cfiCond215) NoFunction
        CFI (cfiCond215) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_30
        CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond215) CFA_SP SP+0
        CFI (cfiCond215) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_387, ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_31
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_370
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_371
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_376
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond220 Using cfiCommon0
        CFI (cfiCond220) NoFunction
        CFI (cfiCond220) Conditional ??CrossCallReturnLabel_377
        CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond220) CFA_SP SP+0
        CFI (cfiCond220) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_372
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_373
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_374
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_375
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_378
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_379
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond227 Using cfiCommon0
        CFI (cfiCond227) NoFunction
        CFI (cfiCond227) Conditional ??CrossCallReturnLabel_380
        CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond227) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond227) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond227) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond227) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond227) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond227) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond227) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond227) CFA_SP SP+0
        CFI (cfiCond227) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_381
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker229 Using cfiCommon1
        CFI (cfiPicker229) NoFunction
        CFI (cfiPicker229) Picker
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiCond209
        CFI EndBlock cfiCond210
        CFI EndBlock cfiCond211
        CFI EndBlock cfiCond212
        CFI EndBlock cfiCond213
        CFI EndBlock cfiCond214
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiPicker229

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??xored:
        DS 1
        REQUIRE `?<Initializer for xored>`
        REQUIRE __INIT_XDATA_I
// 1367 #define BARRIER  0xAA
// 1368 void quartz();
// 1369 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1370 void longTickWait( BYTE q )
longTickWait:
        CFI Block cfiBlock230 Using cfiCommon0
        CFI Function longTickWait
// 1371 {
        FUNCALL longTickWait, tickWait
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
        CFI R6 A
        PUSH    A
        CFI R6 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        SJMP    ??longTickWait_0
// 1372   while( q-- )
// 1373     tickWait( 50*TICKS_IN_MS );
??longTickWait_1:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x64
        LCALL   tickWait
??longTickWait_0:
        MOV     A,R6
        DEC     R6
        JNZ     ??longTickWait_1
// 1374 }
        POP     A
        CFI R6 A
        CFI CFA_SP SP+-2
        MOV     R6,A
        CFI R6 SameValue
        RET
        CFI EndBlock cfiBlock230
// 1375 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1376 void main(void)
main:
        CFI Block cfiBlock231 Using cfiCommon0
        CFI Function main
// 1377 {
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, checkMore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, read_page
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, longTickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, quartz
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, main_loop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL main, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Auto size: 0
// 1378   UINT16 i, j;
// 1379   *((BYTE *)0xF53B) = 0xAA;
        MOV     A,#-0x56
        MOV     DPTR,#-0xac5
        MOVX    @DPTR,A
// 1380   *((BYTE *)0xFFFF) = 0x10; // was 0x80 on Dec 19th
        MOV     A,#0x10
        MOV     DPTR,#-0x1
        MOVX    @DPTR,A
// 1381     
// 1382   if ( PARTNUM != 0x81 )
        MOV     DPTR,#-0x20ca
        MOVX    A,@DPTR
        XRL     A,#0x81
        JZ      ??main_0
// 1383     reset();
        ; Setup parameters for call to function reset
        LCALL   reset
// 1384   
// 1385   if ( *((BYTE *)0xFFFE) == 0x5A )
??main_0:
        MOV     DPTR,#-0x2
        MOVX    A,@DPTR
        XRL     A,#0x5a
        JNZ     $+5
        LJMP    ??main_1
// 1386     goto MainLoopLabel;
// 1387     
// 1388   *((BYTE *)0xFFFE) = 0x5A;
        MOV     A,#0x5a
        MOVX    @DPTR,A
// 1389   
// 1390   HAL_INT_ENABLE(INUM_T1,  INT_ON); // enable Timer1 interrupt
        SETB    0xb8.1
// 1391   
// 1392   for( i = 0; i<15; i++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1393   { // was 15 the self check !!!! check line 663 if loop limit changed !!!
// 1394     BYTE *ptr = (BYTE *)( 0x800 + 0x400*i );
??main_2:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine85
// 1395     BOOL flag = TRUE;
// 1396     *((BYTE *)0xFFFF) = 0x10;
// 1397     for ( j = 0; flag && (j < 0x400); j++ )
// 1398       flag = ( (*ptr++)==0xFF );
??CrossCallReturnLabel_274:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??main_3
        MOV     R2,#0x1
        SJMP    ??main_4
??main_3:
        MOV     R2,#0x0
??main_4:
        LCALL   ?Subroutine86
??CrossCallReturnLabel_276:
        JZ      ??main_5
        CLR     C
        MOV     A,R5
        SUBB    A,#0x4
        JC      ??CrossCallReturnLabel_274
// 1399     if ( flag )
// 1400       checkMore();
        ; Setup parameters for call to function checkMore
        LCALL   checkMore
// 1401   }
??main_5:
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0xf
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??main_2
// 1402   
// 1403   si->armAdcs       = &armAdcs;
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x30
        LCALL   ?Subroutine55
??CrossCallReturnLabel_142:
        MOV     A,#(armAdcs & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((armAdcs >> 8) & 0xff)
        LCALL   ??Subroutine72_0
// 1404   si->readNextValue = &readNextValue;
??CrossCallReturnLabel_232:
        ADD     A,#0x32
        LCALL   ?Subroutine55
??CrossCallReturnLabel_143:
        MOV     A,#(readNextValue & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((readNextValue >> 8) & 0xff)
        LCALL   ??Subroutine72_0
// 1405   si->flashCallback = &flashCallback;
??CrossCallReturnLabel_233:
        ADD     A,#0x34
        LCALL   ?Subroutine55
??CrossCallReturnLabel_144:
        MOV     A,#(flashCallback & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((flashCallback >> 8) & 0xff)
        LCALL   ??Subroutine72_0
// 1406   si->adcEnabled    = TRUE;
??CrossCallReturnLabel_234:
        ADD     A,#0x37
        LCALL   ??Subroutine15_0
// 1407   /* added in order to setup correct MPP frequecy */
// 1408   si->mppCycle      = _mppCycle;
??CrossCallReturnLabel_43:
        LCALL   ?Subroutine42
??CrossCallReturnLabel_99:
        MOV     A,#0x78
        LCALL   ?Subroutine72
// 1409   si->firstAdcReading = _firstAdcMeasurement;
??CrossCallReturnLabel_230:
        ADD     A,#0x5d
        LCALL   ?Subroutine55
??CrossCallReturnLabel_145:
        MOV     A,#0x28
        LCALL   ?Subroutine72
// 1410   flags = si->flags;
??CrossCallReturnLabel_231:
        ADD     A,#0x20
        LCALL   ?Subroutine56
??CrossCallReturnLabel_150:
        MOV     DPTR,#flags
        LCALL   ??Subroutine67_0
// 1411   ticks = si->ticks;
??CrossCallReturnLabel_206:
        MOV     DPTR,#si
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_172:
        MOV     DPTR,#ticks
        LCALL   ??Subroutine67_0
// 1412   ptr2RunningTick = & (si->runningTick);
??CrossCallReturnLabel_207:
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x38
        LCALL   ?Subroutine56
??CrossCallReturnLabel_151:
        MOV     DPTR,#ptr2RunningTick
        LCALL   ??Subroutine67_0
// 1413   
// 1414   resetReason = (SLEEP & 0x18)>>3;
??CrossCallReturnLabel_208:
        MOV     A,#0x18
        ANL     A,0xbe
        CLR     C
        RRC     A
        RRC     A
        RRC     A
        MOV     DPTR,#resetReason
        MOVX    @DPTR,A
// 1415   zerofill( (BYTE *)&page, 240 );
        ; Setup parameters for call to function zerofill
        MOV     R1,#-0x10
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   zerofill
// 1416   read_page(); 
        ; Setup parameters for call to function read_page
        LCALL   read_page
// 1417   
// 1418   if (page.fetFailureCount != 0)
        MOV     DPTR,#(page + 128)
        MOVX    A,@DPTR
        JNZ     ??main_6
        INC     DPTR
        MOVX    A,@DPTR
??main_6:
        JZ      ??main_7
// 1419     checkForFETFailure = TRUE;
        MOV     A,#0x1
        SJMP    ??main_8
// 1420   else
// 1421     checkForFETFailure = FALSE;
??main_7:
        CLR     A
??main_8:
        MOV     DPTR,#checkForFETFailure
        LCALL   ?Subroutine70
// 1422   
// 1423   mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 );
// 1424   curChannel = page.is500Always ? page.starting500Channel : page.channel; 
??CrossCallReturnLabel_225:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??main_9
        MOV     DPTR,#(page + 218)
        SJMP    ??main_10
??main_9:
        MOV     DPTR,#(page + 164)
??main_10:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
// 1425   search_stat = page.searchCommunication;
        LCALL   ?Subroutine52
// 1426   
// 1427   switch( resetReason )
??CrossCallReturnLabel_133:
        MOV     DPTR,#resetReason
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for main>_0`:
        DATA
        DB        0
        DB        3
        DW        ??CrossCallReturnLabel_19
        DW        ??main_11
        DW        ??main_11
        DW        ??main_12
        DW        ??main_11
        CODE
// 1428   {
// 1429   case 2:  /* Watchdog Reset  */
// 1430 #ifdef MidString
// 1431     if (*ModuleOffRememberedPtr == ModuleStatusOffFetFailure)
??main_12:
        MOV     DPTR,#-0x3
        MOVX    A,@DPTR
        XRL     A,#0x7e
        JNZ     ??main_13
// 1432     {
// 1433       fetFailure = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#fetFailure
        LCALL   ?Subroutine73
// 1434       netValue = MainNetValueFETFailed;
// 1435       checkForFETFailure = FALSE;
??CrossCallReturnLabel_401:
        MOV     DPTR,#checkForFETFailure
        MOVX    @DPTR,A
        SJMP    ??main_14
// 1436       P1_4 = 0;
// 1437     }
// 1438     else if (*ModuleOffRememberedPtr == ModuleStatusOff)
??main_13:
        MOVX    A,@DPTR
        XRL     A,#0xe7
        JNZ     ??main_15
// 1439     {
// 1440       P1_4 = 0;
??main_14:
        CLR     0x90.4
        SJMP    ??main_16
// 1441     }
// 1442     else if (*ModuleOffRememberedPtr == ModuleStatusOffProtection)
??main_15:
        MOVX    A,@DPTR
        XRL     A,#0x6a
        JZ      ??main_14
// 1443     {
// 1444       P1_4 = 0;
// 1445     }
// 1446     else if (*ModuleOffRememberedPtr == ModuleStatusOffTemperature)
        MOVX    A,@DPTR
        XRL     A,#0xa6
        JZ      ??main_14
// 1447     {
// 1448       P1_4 = 0;
// 1449     }
// 1450     else
// 1451     {
// 1452       *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
        CLR     A
        MOVX    @DPTR,A
// 1453     }
// 1454     
// 1455     if (*ModuleOffRememberedPtr == ModuleStatusCanTurnOn)
??main_16:
        MOV     DPTR,#-0x3
        MOVX    A,@DPTR
        JNZ     ??main_17
// 1456     {
// 1457       if(page.module)
        MOV     DPTR,#(page + 186)
        MOVX    A,@DPTR
        JZ      ??main_18
// 1458         P1_4 = 1;
        SETB    0x90.4
        SJMP    ??main_17
// 1459       else
// 1460         P1_4 = 0;
??main_18:
        CLR     0x90.4
// 1461     }
// 1462     
// 1463     if ( page.mpp )
??main_17:
        MOV     DPTR,#(page + 185)
        MOVX    A,@DPTR
        JZ      ??main_19
// 1464     {
// 1465       P1_3 = 1;
        SETB    0x90.3
        SJMP    ??main_20
// 1466     }
// 1467     else 
// 1468       P1_3 = 0;
??main_19:
        CLR     0x90.3
// 1469 #else
// 1470     /* SPT: MPP On, Module On */
// 1471     P1_3 = 1; 
// 1472     P1_4 = 1; 
// 1473 #endif
// 1474           
// 1475     T3CC0 = page.ov; 
??main_20:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     0xcd,A
// 1476     T3CC1 = oc2timer( setOC = theOC = page.oc );
        MOV     DPTR,#(page + 188)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        MOV     DPTR,#setOC
        MOVX    @DPTR,A
        ; Setup parameters for call to function oc2timer
        LCALL   ??Subroutine105_0
??CrossCallReturnLabel_333:
        SJMP    ??CrossCallReturnLabel_19
// 1477     
// 1478     break; 
// 1479         
// 1480   case 1: case 3: case 0: /* Power On Reset */
// 1481     *ModuleOffRememberedPtr = ModuleStatusCanTurnOn;
??main_11:
        CLR     A
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
// 1482     
// 1483     if ( page.ov_startup )
        MOV     DPTR,#(page + 223)
        MOVX    A,@DPTR
        MOV     R2,A
        JZ      ??main_21
// 1484       T3CC0 = page.ov_startup;
        MOV     0xcd,R2
        SJMP    ??main_22
// 1485     else 
// 1486       T3CC0 = page.ov;    
??main_21:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     0xcd,A
// 1487             
// 1488     P1_3 = 0; 
??main_22:
        CLR     0x90.3
// 1489     P1_4 = 0; 
        CLR     0x90.4
// 1490 
// 1491 #ifdef MidString
// 1492     P1_3 = page.mpp;
        LCALL   ?Subroutine57
// 1493     T3CC1 = theOC = 0; 
??CrossCallReturnLabel_159:
        CLR     A
        MOV     DPTR,#theOC
        MOVX    @DPTR,A
        MOV     0xcf,#0x0
// 1494     setOC = page.oc;
        MOV     DPTR,#(page + 188)
        MOVX    A,@DPTR
        MOV     DPTR,#setOC
        LCALL   ?Subroutine76
// 1495 #else
// 1496     P1_3 = 1;
// 1497     T3CC1 = oc2timer( setOC = theOC = page.oc );
// 1498 #endif
// 1499     atomicChange( Init, ((INT16) TICKS_IN_SEC) * 3 );
??CrossCallReturnLabel_244:
        ADD     A,#0xc
        LCALL   ?Subroutine55
??CrossCallReturnLabel_146:
        MOV     A,#0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x17
        LCALL   ?Subroutine76
// 1500     atomicChange( OcRamp, TICKS_IN_SEC );
??CrossCallReturnLabel_245:
        ADD     A,#0x18
        LCALL   ??Subroutine5_0
// 1501     
// 1502     break;
// 1503   
// 1504   } /* END switch( resetReason ) */
// 1505   
// 1506   zerofill( (BYTE *)adcBuf, 2*N_CHANNELS*BUFFER_SIZE );
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function zerofill
        MOV     R1,#-0x70
        MOV     R2,#(adcBuf & 0xff)
        MOV     R3,#((adcBuf >> 8) & 0xff)
        LCALL   zerofill
// 1507   init();             // turn the crystall on, exit from third state
        ; Setup parameters for call to function init
        LCALL   init
// 1508   
// 1509   ticks[ Ms       ]    = TICKS_IN_SEC;     
        LCALL   ?Subroutine5
// 1510   ticks[ ReceiveData ] = TICKS_IN_MS;
??CrossCallReturnLabel_20:
        LCALL   ?Subroutine17
??CrossCallReturnLabel_48:
        MOV     A,#0x2
        LCALL   ?Subroutine119
// 1511   ticks[ FeedTheDog ]  = _dogFeeding; 
??CrossCallReturnLabel_406:
        LCALL   ?Subroutine31
??CrossCallReturnLabel_79:
        LCALL   ?Subroutine119
// 1512   ticks[ Cycle ]       = lastCycle;
??CrossCallReturnLabel_407:
        LCALL   ?Subroutine7
// 1513   
// 1514   loadKey( page.curKey );
??CrossCallReturnLabel_364:
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
// 1515   RNDL = page.myMac[4];
??CrossCallReturnLabel_260:
        LCALL   ?Subroutine28
// 1516   RNDL = page.myMac[5];
// 1517   
// 1518   T1CTL &= 0xFC;
??CrossCallReturnLabel_73:
        ANL     0xe4,#0xfc
        MOV     A,0xe4
// 1519   SET_WORD(T1CNTH, T1CNTL, 0);
        MOV     0xe3,#0x0
        MOV     0xe2,#0x0
// 1520   SET_WORD(T1CC0H, T1CC0L, 750 - 1);
        MOV     0xdb,#0x2
        MOV     0xda,#-0x13
// 1521   T1CTL |= 0x04  | 0x02;
        ORL     0xe4,#0x6
        MOV     A,0xe4
// 1522   T1CCTL0 = 0x44;
        MOV     0xe5,#0x44
// 1523   longTickWait( 10 ); //20 ); was 20
        ; Setup parameters for call to function longTickWait
        MOV     R1,#0xa
        LCALL   longTickWait
// 1524   
// 1525   if ( mymemcmp( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ) )
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x4
        MOV     R4,#((page + 208) & 0xff)
        MOV     R5,#(((page + 208) >> 8) & 0xff)
        MOV     R2,#(cycles2SoftKick & 0xff)
        MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JZ      ??main_23
// 1526     reset();
        ; Setup parameters for call to function reset
        LCALL   reset
// 1527   
// 1528   P1_1 = 0;
??main_23:
        CLR     0x90.1
// 1529   
// 1530 MainLoopLabel:
// 1531 
// 1532     quartz();
??main_1:
        ; Setup parameters for call to function quartz
        LCALL   quartz
// 1533     softKick();
        ; Setup parameters for call to function softKick
        LCALL   softKick
        SJMP    ??main_24
// 1534     
// 1535     for (;;)
// 1536     { 
// 1537       if ( *((BYTE *)0xF53B) != 0xAA )
// 1538         reset();
// 1539       if ( PARTNUM != 0x81 )
// 1540         reset();
// 1541       
// 1542       WDCTL = 8;
// 1543       main_loop();
// 1544       
// 1545       if( flags[ PackageReceived ] || flags[DataSent] )
// 1546         continue;
// 1547       
// 1548       if ( lastCycle > (840*TICKS_IN_MS) )
// 1549         lastCycle = 840*TICKS_IN_MS;
// 1550       if ( lastCycle == 0 )
// 1551         lastCycle = 840*TICKS_IN_MS;
// 1552       if ( ticks[ Cycle ] > lastCycle )
// 1553         ticks[ Cycle ] = lastCycle;
// 1554       if ( ticks[ Cycle ] == 0        )
// 1555         ticks[ Cycle ] = lastCycle;
// 1556       if ( cycles2SoftKick > page.defCycles2SoftKick )
// 1557         cycles2SoftKick = page.defCycles2SoftKick;
// 1558       if ( cycles2SoftKick == 0 )
// 1559         cycles2SoftKick = page.defCycles2SoftKick;
// 1560       if ( (cycles2HardKick&0xFF) == 0 )
// 1561         reset();
// 1562       if ( ticks[ Ms ] > TICKS_IN_SEC )
// 1563         ticks[ Ms ] = TICKS_IN_SEC;
// 1564       if ( ticks[ Ms ] == 0 )
??main_25:
        MOV     A,R2
        JNZ     ??main_26
        MOV     A,R3
??main_26:
        JNZ     ??main_24
// 1565         ticks[ Ms ] = TICKS_IN_SEC;
??main_27:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
??main_24:
        MOV     DPTR,#-0xac5
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JZ      ??main_28
        ; Setup parameters for call to function reset
        LCALL   reset
??main_28:
        MOV     DPTR,#-0x20ca
        MOVX    A,@DPTR
        XRL     A,#0x81
        JZ      ??main_29
        ; Setup parameters for call to function reset
        LCALL   reset
??main_29:
        MOV     0xc9,#0x8
        ; Setup parameters for call to function main_loop
        LCALL   main_loop
        LCALL   ??Subroutine3_0
??CrossCallReturnLabel_12:
        JNZ     ??main_24
        LCALL   ?Subroutine6
??CrossCallReturnLabel_25:
        JNZ     ??main_24
        MOV     DPTR,#lastCycle
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x6f
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x6
        JNC     ??main_30
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        JNZ     ??main_31
        INC     DPTR
        MOVX    A,@DPTR
??main_31:
        JNZ     ??main_32
??main_30:
        MOV     DPTR,#lastCycle
        MOV     A,#-0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x6
        MOVX    @DPTR,A
??main_32:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x12
        LCALL   ?Subroutine38
??CrossCallReturnLabel_388:
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R3
        JNC     ??CrossCallReturnLabel_368
        LCALL   ?Subroutine29
??CrossCallReturnLabel_368:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??main_33
        INC     DPTR
        MOVX    A,@DPTR
??main_33:
        JNZ     ??CrossCallReturnLabel_369
        LCALL   ?Subroutine29
??CrossCallReturnLabel_369:
        MOV     DPTR,#(page + 208)
        LCALL   ??Subroutine45_0
??CrossCallReturnLabel_107:
        MOV     DPTR,#cycles2SoftKick
        LCALL   ?Subroutine20
??CrossCallReturnLabel_56:
        JNC     ??CrossCallReturnLabel_352
        MOV     DPTR,#cycles2SoftKick
        LCALL   ??Subroutine114_0
??CrossCallReturnLabel_352:
        MOV     DPTR,#cycles2SoftKick
        MOVX    A,@DPTR
        JNZ     ??main_34
        INC     DPTR
        MOVX    A,@DPTR
??main_34:
        JNZ     ??CrossCallReturnLabel_88
        LCALL   ?Subroutine35
??CrossCallReturnLabel_88:
        MOV     DPTR,#cycles2HardKick
        MOVX    A,@DPTR
        JNZ     ??main_35
        ; Setup parameters for call to function reset
        LCALL   reset
??main_35:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x16
        LCALL   ?Subroutine38
??CrossCallReturnLabel_389:
        CLR     C
        MOV     A,R2
        SUBB    A,#-0x2f
        MOV     A,R3
        SUBB    A,#0x7
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??main_25
        LJMP    ??main_27
        CFI EndBlock cfiBlock231
        REQUIRE _A_P1
        REQUIRE IEN2
        REQUIRE _A_IEN0
        REQUIRE _A_IEN1
        REQUIRE RNDL
        REQUIRE SLEEP
        REQUIRE WDCTL
        REQUIRE T3CC0
        REQUIRE T3CC1
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CNTL
        REQUIRE T1CNTH
        REQUIRE T1CTL
        REQUIRE T1CCTL0
// 1566 
// 1567     } /* END for(::) */
// 1568 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine86:
        CFI Block cfiCond232 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_275
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_276
        CFI Block cfiPicker234 Using cfiCommon1
        CFI (cfiPicker234) NoFunction
        CFI (cfiPicker234) Picker
        MOV     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x1
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R3
        RET
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiPicker234

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine85:
        CFI Block cfiCond235 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_273
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_274
        CFI Block cfiPicker237 Using cfiCommon1
        CFI (cfiPicker237) NoFunction
        CFI (cfiPicker237) Picker
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,#0x8
        ADDC    A,?V0 + 1
        MOV     R1,A
        MOV     A,#0x10
        MOV     DPTR,#-0x1
        MOVX    @DPTR,A
        MOV     R4,#0x0
        MOV     R5,#0x0
        RET
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiPicker237

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond238 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_139
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_142
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_143
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_144
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_145
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_146
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker248 Using cfiCommon1
        CFI (cfiPicker248) NoFunction
        CFI (cfiPicker248) Picker
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_294:
        RET
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiPicker248

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond249 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker251 Using cfiCommon1
        CFI (cfiPicker251) NoFunction
        CFI (cfiPicker251) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_107
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond256 Using cfiCommon0
        CFI (cfiCond256) NoFunction
        CFI (cfiCond256) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond256) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond256) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond256) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond256) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond256) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond256) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond256) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond256) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond256) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond256) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond256) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond256) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond256) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond256) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond256) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond256) CFA_SP SP+0
        CFI (cfiCond256) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond257 Using cfiCommon0
        CFI (cfiCond257) NoFunction
        CFI (cfiCond257) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond257) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond257) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond257) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond257) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond257) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond257) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond257) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond257) CFA_SP SP+0
        CFI (cfiCond257) CFA_XSP16 add(XSP16, 15)
??Subroutine45_0:
        LCALL   ??Subroutine94_0
??CrossCallReturnLabel_394:
        RET
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiPicker251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiCond256
        CFI EndBlock cfiCond257

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond258 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_388
        CFI Block cfiCond259 Using cfiCommon0
        CFI (cfiCond259) NoFunction
        CFI (cfiCond259) Conditional ??CrossCallReturnLabel_389
        CFI Block cfiPicker260 Using cfiCommon1
        CFI (cfiPicker260) NoFunction
        CFI (cfiPicker260) Picker
        LCALL   ??Subroutine88_0
        CFI EndBlock cfiCond258
        CFI EndBlock cfiCond259
        CFI EndBlock cfiPicker260
??CrossCallReturnLabel_283:
        REQUIRE ?Subroutine117
        ; // Fall through to label ?Subroutine117

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine117:
        CFI Block cfiCond261 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_388
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_389
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_391, ??CrossCallReturnLabel_36
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_391, ??CrossCallReturnLabel_37
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_392, ??CrossCallReturnLabel_368
        CFI Block cfiCond266 Using cfiCommon0
        CFI (cfiCond266) NoFunction
        CFI (cfiCond266) Conditional ??CrossCallReturnLabel_392, ??CrossCallReturnLabel_369
        CFI Block cfiCond267 Using cfiCommon0
        CFI (cfiCond267) NoFunction
        CFI (cfiCond267) Conditional ??CrossCallReturnLabel_393, ??CrossCallReturnLabel_103
        CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond267) CFA_SP SP+0
        CFI (cfiCond267) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_393, ??CrossCallReturnLabel_104
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_111
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_112
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond271 Using cfiCommon0
        CFI (cfiCond271) NoFunction
        CFI (cfiCond271) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_105
        CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond271) CFA_SP SP+0
        CFI (cfiCond271) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond272 Using cfiCommon0
        CFI (cfiCond272) NoFunction
        CFI (cfiCond272) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_106
        CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond272) CFA_SP SP+0
        CFI (cfiCond272) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_107
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_108
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond275 Using cfiCommon0
        CFI (cfiCond275) NoFunction
        CFI (cfiCond275) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_109
        CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond275) CFA_SP SP+0
        CFI (cfiCond275) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_110
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_390, ??CrossCallReturnLabel_366
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_390, ??CrossCallReturnLabel_367
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+0
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker279 Using cfiCommon1
        CFI (cfiPicker279) NoFunction
        CFI (cfiPicker279) Picker
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiCond266
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiCond271
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiPicker279

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond280 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_88
        CFI Block cfiPicker282 Using cfiCommon1
        CFI (cfiPicker282) NoFunction
        CFI (cfiPicker282) Picker
        MOV     DPTR,#(page + 208)
        LCALL   ?Subroutine99
??CrossCallReturnLabel_317:
        MOV     DPTR,#cycles2SoftKick
        LCALL   ?Subroutine111
??CrossCallReturnLabel_344:
        RET
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiPicker282

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond283 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_79
        CFI Block cfiPicker285 Using cfiCommon1
        CFI (cfiPicker285) NoFunction
        CFI (cfiPicker285) Picker
        LCALL   ?Subroutine92
??CrossCallReturnLabel_396:
        MOV     A,#0x7d
        RET
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiPicker285

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine92:
        CFI Block cfiCond286 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond287 Using cfiCommon0
        CFI (cfiCond287) NoFunction
        CFI (cfiCond287) Conditional ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_79
        CFI Block cfiCond288 Using cfiCommon0
        CFI (cfiCond288) NoFunction
        CFI (cfiCond288) Conditional ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_76
        CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond288) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond288) CFA_SP SP+0
        CFI (cfiCond288) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond289 Using cfiCommon0
        CFI (cfiCond289) NoFunction
        CFI (cfiCond289) Conditional ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_77
        CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond289) CFA_SP SP+0
        CFI (cfiCond289) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker290 Using cfiCommon1
        CFI (cfiPicker290) NoFunction
        CFI (cfiPicker290) Picker
        MOV     DPTR,#ticks
        CFI Block cfiCond291 Using cfiCommon0
        CFI (cfiCond291) NoFunction
        CFI (cfiCond291) Conditional ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_113
        CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond291) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond291) CFA_SP SP+0
        CFI (cfiCond291) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond292 Using cfiCommon0
        CFI (cfiCond292) NoFunction
        CFI (cfiCond292) Conditional ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_114
        CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond292) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond292) CFA_SP SP+0
        CFI (cfiCond292) CFA_XSP16 add(XSP16, 15)
??Subroutine92_0:
        LCALL   ?Subroutine109
        CFI EndBlock cfiCond286
        CFI EndBlock cfiCond287
        CFI EndBlock cfiCond288
        CFI EndBlock cfiCond289
        CFI EndBlock cfiPicker290
        CFI EndBlock cfiCond291
        CFI EndBlock cfiCond292
??CrossCallReturnLabel_340:
        REQUIRE ?Subroutine118
        ; // Fall through to label ?Subroutine118

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine118:
        CFI Block cfiCond293 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond294 Using cfiCommon0
        CFI (cfiCond294) NoFunction
        CFI (cfiCond294) Conditional ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_79
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_76
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond296 Using cfiCommon0
        CFI (cfiCond296) NoFunction
        CFI (cfiCond296) Conditional ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_77
        CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond296) CFA_SP SP+0
        CFI (cfiCond296) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond297 Using cfiCommon0
        CFI (cfiCond297) NoFunction
        CFI (cfiCond297) Conditional ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_113
        CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond297) CFA_SP SP+0
        CFI (cfiCond297) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_114
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_47
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_48
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_49
        CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond301) CFA_SP SP+0
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_415
        CFI (cfiCond302) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond302) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond302) CFA_SP SP+-4
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_416
        CFI (cfiCond303) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond303) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond303) CFA_SP SP+-4
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_417
        CFI (cfiCond304) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond304) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond304) CFA_SP SP+-4
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_418
        CFI (cfiCond305) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond305) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond305) CFA_SP SP+-4
        CFI Block cfiCond306 Using cfiCommon0
        CFI (cfiCond306) NoFunction
        CFI (cfiCond306) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_45
        CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond306) CFA_SP SP+0
        CFI (cfiCond306) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond307 Using cfiCommon0
        CFI (cfiCond307) NoFunction
        CFI (cfiCond307) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_46
        CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond307) CFA_SP SP+0
        CFI (cfiCond307) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_34
        CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond308) CFA_SP SP+0
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_35
        CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond309) CFA_SP SP+0
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker310 Using cfiCommon1
        CFI (cfiPicker310) NoFunction
        CFI (cfiPicker310) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond293
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiCond296
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiCond306
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiPicker310

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond311 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_368
        CFI Block cfiCond312 Using cfiCommon0
        CFI (cfiCond312) NoFunction
        CFI (cfiCond312) Conditional ??CrossCallReturnLabel_369
        CFI Block cfiPicker313 Using cfiCommon1
        CFI (cfiPicker313) NoFunction
        CFI (cfiPicker313) Picker
        LCALL   ?Subroutine94
??CrossCallReturnLabel_392:
        LJMP    ?Subroutine114
        CFI EndBlock cfiCond311
        CFI EndBlock cfiCond312
        CFI EndBlock cfiPicker313

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond314 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond315 Using cfiCommon0
        CFI (cfiCond315) NoFunction
        CFI (cfiCond315) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond315) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond315) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond315) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond315) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond315) CFA_SP SP+0
        CFI (cfiCond315) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond316 Using cfiCommon0
        CFI (cfiCond316) NoFunction
        CFI (cfiCond316) Conditional ??CrossCallReturnLabel_56
        CFI Block cfiPicker317 Using cfiCommon1
        CFI (cfiPicker317) NoFunction
        CFI (cfiPicker317) Picker
        LCALL   ?Subroutine99
??CrossCallReturnLabel_314:
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond314
        CFI EndBlock cfiCond315
        CFI EndBlock cfiCond316
        CFI EndBlock cfiPicker317

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond318 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_48
        CFI Block cfiCond320 Using cfiCommon0
        CFI (cfiCond320) NoFunction
        CFI (cfiCond320) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond320) CFA_SP SP+0
        CFI (cfiCond320) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker321 Using cfiCommon1
        CFI (cfiPicker321) NoFunction
        CFI (cfiPicker321) Picker
        LCALL   ?Subroutine91
??CrossCallReturnLabel_298:
        RET
        CFI EndBlock cfiCond318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiCond320
        CFI EndBlock cfiPicker321

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine91:
        CFI Block cfiCond322 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond323 Using cfiCommon0
        CFI (cfiCond323) NoFunction
        CFI (cfiCond323) Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_48
        CFI Block cfiCond324 Using cfiCommon0
        CFI (cfiCond324) NoFunction
        CFI (cfiCond324) Conditional ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_49
        CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond324) CFA_SP SP+0
        CFI (cfiCond324) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_415
        CFI (cfiCond325) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond325) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond325) CFA_SP SP+-4
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_416
        CFI (cfiCond326) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond326) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond326) CFA_SP SP+-4
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_417
        CFI (cfiCond327) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond327) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond327) CFA_SP SP+-4
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_418
        CFI (cfiCond328) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond328) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond328) CFA_SP SP+-4
        CFI Block cfiPicker329 Using cfiCommon1
        CFI (cfiPicker329) NoFunction
        CFI (cfiPicker329) Picker
        MOV     DPTR,#ticks
        LCALL   ?Subroutine106
??CrossCallReturnLabel_399:
        RET
        CFI EndBlock cfiCond322
        CFI EndBlock cfiCond323
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiPicker329

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine106:
        CFI Block cfiCond330 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_48
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_49
        CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond332) CFA_SP SP+0
        CFI (cfiCond332) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond333 Using cfiCommon0
        CFI (cfiCond333) NoFunction
        CFI (cfiCond333) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_415
        CFI (cfiCond333) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond333) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond333) CFA_SP SP+-4
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_416
        CFI (cfiCond334) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond334) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond334) CFA_SP SP+-4
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_417
        CFI (cfiCond335) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond335) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond335) CFA_SP SP+-4
        CFI Block cfiCond336 Using cfiCommon0
        CFI (cfiCond336) NoFunction
        CFI (cfiCond336) Conditional ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_418
        CFI (cfiCond336) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond336) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond336) CFA_SP SP+-4
        CFI Block cfiCond337 Using cfiCommon0
        CFI (cfiCond337) NoFunction
        CFI (cfiCond337) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_45
        CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond337) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond337) CFA_SP SP+0
        CFI (cfiCond337) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond338 Using cfiCommon0
        CFI (cfiCond338) NoFunction
        CFI (cfiCond338) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_46
        CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond338) CFA_SP SP+0
        CFI (cfiCond338) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_34
        CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond339) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond339) CFA_SP SP+0
        CFI (cfiCond339) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_35
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker341 Using cfiCommon1
        CFI (cfiPicker341) NoFunction
        CFI (cfiPicker341) Picker
        LCALL   ?Subroutine112
??CrossCallReturnLabel_348:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        SJMP    ?Subroutine118
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiCond336
        CFI EndBlock cfiCond337
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiPicker341

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond342 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond346 Using cfiCommon0
        CFI (cfiCond346) NoFunction
        CFI (cfiCond346) Conditional ??CrossCallReturnLabel_25
        CFI Block cfiCond347 Using cfiCommon0
        CFI (cfiCond347) NoFunction
        CFI (cfiCond347) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond347) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond347) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond347) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond347) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond347) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond347) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond347) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond347) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond347) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond347) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond347) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond347) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond347) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond347) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond347) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond347) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond347) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond347) CFA_SP SP+0
        CFI (cfiCond347) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond348 Using cfiCommon0
        CFI (cfiCond348) NoFunction
        CFI (cfiCond348) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond348) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond348) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond348) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond348) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond348) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond348) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond348) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond348) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond348) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond348) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond348) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond348) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond348) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond348) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond348) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond348) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond348) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond348) CFA_SP SP+0
        CFI (cfiCond348) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker349 Using cfiCommon1
        CFI (cfiPicker349) NoFunction
        CFI (cfiPicker349) Picker
        MOV     DPTR,#(flags + 1)
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345
        CFI EndBlock cfiCond346
        CFI EndBlock cfiCond347
        CFI EndBlock cfiCond348
        CFI EndBlock cfiPicker349

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond350 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond351 Using cfiCommon0
        CFI (cfiCond351) NoFunction
        CFI (cfiCond351) Conditional ??CrossCallReturnLabel_20
        CFI Block cfiPicker352 Using cfiCommon1
        CFI (cfiPicker352) NoFunction
        CFI (cfiPicker352) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x16
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond353) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond353) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond353) CFA_SP SP+-4
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_19
??Subroutine5_0:
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_286:
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond350
        CFI EndBlock cfiCond351
        CFI EndBlock cfiPicker352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond355 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond356) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond356) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond356) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond356) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond356) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond356) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond356) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond356) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond356) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond356) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond356) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond356) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker357 Using cfiCommon1
        CFI (cfiPicker357) NoFunction
        CFI (cfiPicker357) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond358) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond358) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond358) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond358) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond358) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond358) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond358) CFA_SP SP+0
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond359) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond359) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond359) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond359) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond359) CFA_SP SP+0
        CFI (cfiCond359) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond360) CFA_SP SP+0
        CFI (cfiCond360) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond362 Using cfiCommon0
        CFI (cfiCond362) NoFunction
        CFI (cfiCond362) Conditional ??CrossCallReturnLabel_12
??Subroutine3_0:
        MOV     DPTR,#flags
        LCALL   ?Subroutine100
??CrossCallReturnLabel_320:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiPicker357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiCond362
// 1569 /*==== PRIVATE FUNCTIONS =====================================================*/
// 1570 /******************************************************************************
// 1571 * Work with watchdogs and LED's
// 1572 ******************************************************************************/
// 1573 //void feedTheDog(void){ WDCTL = 0xA8;  WDCTL = 0x58; }
// 1574 /******************************************************************************
// 1575 * initiate reading of adc channels
// 1576 ******************************************************************************/
// 1577 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1578 void armAdcs(void){  
armAdcs:
        CFI Block cfiBlock363 Using cfiCommon0
        CFI Function armAdcs
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1579     adcCount = 0;
        CLR     A
        MOV     DPTR,#adcCount
        LCALL   ?Subroutine33
// 1580     si->inCurCycle++; 
??CrossCallReturnLabel_82:
        INC     A
        LCALL   ?Subroutine33
// 1581     if( si->inCurCycle < 4 ) ticks[ AdcMeasurement ] = _adcMeasurement;  // 5ms
??CrossCallReturnLabel_83:
        CLR     C
        SUBB    A,#0x4
        JNC     ??CrossCallReturnLabel_408
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_120:
        INC     DPTR
        INC     DPTR
        MOV     A,#0x8
        LCALL   ?Subroutine119
// 1582     ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
??CrossCallReturnLabel_408:
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        ADD     A,#(adcChannels & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((adcChannels >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xb6,A
// 1583 }
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock363
        REQUIRE ADCCON3

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond364 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_400
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond365 Using cfiCommon0
        CFI (cfiCond365) NoFunction
        CFI (cfiCond365) Conditional ??CrossCallReturnLabel_401
        CFI Block cfiPicker366 Using cfiCommon1
        CFI (cfiPicker366) NoFunction
        CFI (cfiPicker366) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#netValue
        MOV     A,#0x46
        CFI EndBlock cfiCond364
        CFI EndBlock cfiCond365
        CFI EndBlock cfiPicker366
        REQUIRE ?Subroutine119
        ; // Fall through to label ?Subroutine119

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine119:
        CFI Block cfiCond367 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_400
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond368 Using cfiCommon0
        CFI (cfiCond368) NoFunction
        CFI (cfiCond368) Conditional ??CrossCallReturnLabel_401
        CFI Block cfiCond369 Using cfiCommon0
        CFI (cfiCond369) NoFunction
        CFI (cfiCond369) Conditional ??CrossCallReturnLabel_402
        CFI (cfiCond369) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond369) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond369) CFA_SP SP+-4
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_403
        CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond370) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond370) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond370) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond370) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond370) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond370) CFA_SP SP+0
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond371 Using cfiCommon0
        CFI (cfiCond371) NoFunction
        CFI (cfiCond371) Conditional ??CrossCallReturnLabel_404
        CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond371) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond371) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond371) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond371) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond371) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond371) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond371) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond371) CFA_SP SP+0
        CFI (cfiCond371) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond372 Using cfiCommon0
        CFI (cfiCond372) NoFunction
        CFI (cfiCond372) Conditional ??CrossCallReturnLabel_405
        CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond372) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond372) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond372) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond372) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond372) CFA_SP SP+0
        CFI (cfiCond372) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond373 Using cfiCommon0
        CFI (cfiCond373) NoFunction
        CFI (cfiCond373) Conditional ??CrossCallReturnLabel_406
        CFI Block cfiCond374 Using cfiCommon0
        CFI (cfiCond374) NoFunction
        CFI (cfiCond374) Conditional ??CrossCallReturnLabel_407
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_408
        CFI (cfiCond375) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond375) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond375) CFA_SP SP+-4
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_409
        CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond376) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond376) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond376) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond376) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond376) CFA_SP SP+0
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond377 Using cfiCommon0
        CFI (cfiCond377) NoFunction
        CFI (cfiCond377) Conditional ??CrossCallReturnLabel_410
        CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond377) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond377) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond377) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond377) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond377) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond377) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond377) CFA_SP SP+0
        CFI (cfiCond377) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond378 Using cfiCommon0
        CFI (cfiCond378) NoFunction
        CFI (cfiCond378) Conditional ??CrossCallReturnLabel_411
        CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond378) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond378) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond378) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond378) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond378) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond378) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond378) CFA_SP SP+0
        CFI (cfiCond378) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_412
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond379) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_413
        CFI (cfiCond380) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond380) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond380) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond380) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond380) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond380) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond380) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond380) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond380) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond380) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond380) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond380) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond380) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond380) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond380) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond380) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond380) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond380) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond380) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond380) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond380) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond380) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond380) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond380) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond380) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond380) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond380) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond380) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond380) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond380) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond380) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond380) CFA_SP SP+0
        CFI (cfiCond380) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_414
        CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond381) CFA_SP SP+0
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond382 Using cfiCommon0
        CFI (cfiCond382) NoFunction
        CFI (cfiCond382) Conditional ??CrossCallReturnLabel_415
        CFI (cfiCond382) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond382) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond382) CFA_SP SP+-4
        CFI Block cfiCond383 Using cfiCommon0
        CFI (cfiCond383) NoFunction
        CFI (cfiCond383) Conditional ??CrossCallReturnLabel_416
        CFI (cfiCond383) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond383) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond383) CFA_SP SP+-4
        CFI Block cfiCond384 Using cfiCommon0
        CFI (cfiCond384) NoFunction
        CFI (cfiCond384) Conditional ??CrossCallReturnLabel_417
        CFI (cfiCond384) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond384) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond384) CFA_SP SP+-4
        CFI Block cfiCond385 Using cfiCommon0
        CFI (cfiCond385) NoFunction
        CFI (cfiCond385) Conditional ??CrossCallReturnLabel_418
        CFI (cfiCond385) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond385) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond385) CFA_SP SP+-4
        CFI Block cfiPicker386 Using cfiCommon1
        CFI (cfiPicker386) NoFunction
        CFI (cfiPicker386) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond367
        CFI EndBlock cfiCond368
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiCond371
        CFI EndBlock cfiCond372
        CFI EndBlock cfiCond373
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiCond377
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiCond382
        CFI EndBlock cfiCond383
        CFI EndBlock cfiCond384
        CFI EndBlock cfiCond385
        CFI EndBlock cfiPicker386

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond387 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_115
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond388 Using cfiCommon0
        CFI (cfiCond388) NoFunction
        CFI (cfiCond388) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond388) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond388) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond388) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond388) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond388) CFA_SP SP+0
        CFI (cfiCond388) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker389 Using cfiCommon1
        CFI (cfiPicker389) NoFunction
        CFI (cfiPicker389) Picker
        MOVX    @DPTR,A
        CFI Block cfiCond390 Using cfiCommon0
        CFI (cfiCond390) NoFunction
        CFI (cfiCond390) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond390) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond390) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond390) CFA_SP SP+-4
        CFI Block cfiCond391 Using cfiCommon0
        CFI (cfiCond391) NoFunction
        CFI (cfiCond391) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond391) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond391) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond391) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond391) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond391) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond391) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond391) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond391) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond391) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond391) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond391) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond391) CFA_SP SP+0
        CFI (cfiCond391) CFA_XSP16 add(XSP16, 11)
??Subroutine47_0:
        MOV     DPTR,#ticks
        CFI Block cfiCond392 Using cfiCommon0
        CFI (cfiCond392) NoFunction
        CFI (cfiCond392) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond392) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond392) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond392) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond392) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond392) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond392) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond392) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond392) CFA_SP SP+0
        CFI (cfiCond392) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond393 Using cfiCommon0
        CFI (cfiCond393) NoFunction
        CFI (cfiCond393) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond393) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond393) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond393) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond393) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond393) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond393) CFA_SP SP+0
        CFI (cfiCond393) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond394 Using cfiCommon0
        CFI (cfiCond394) NoFunction
        CFI (cfiCond394) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond394) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond394) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond394) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond394) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond394) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond394) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond394) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond394) CFA_SP SP+0
        CFI (cfiCond394) CFA_XSP16 add(XSP16, 15)
??Subroutine47_1:
        LCALL   ?Subroutine100
??CrossCallReturnLabel_321:
        RET
        CFI EndBlock cfiCond387
        CFI EndBlock cfiCond388
        CFI EndBlock cfiPicker389
        CFI EndBlock cfiCond390
        CFI EndBlock cfiCond391
        CFI EndBlock cfiCond392
        CFI EndBlock cfiCond393
        CFI EndBlock cfiCond394

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine100:
        CFI Block cfiCond395 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond396 Using cfiCommon0
        CFI (cfiCond396) NoFunction
        CFI (cfiCond396) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_7
        CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond396) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond396) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond396) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond396) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond396) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond396) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond396) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond396) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond396) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond396) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond396) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond396) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond396) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond396) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond396) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond396) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond396) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond396) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond396) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond396) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond396) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond396) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond396) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond396) CFA_SP SP+0
        CFI (cfiCond396) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond397 Using cfiCommon0
        CFI (cfiCond397) NoFunction
        CFI (cfiCond397) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_8
        CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond397) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond397) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond397) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond397) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond397) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond397) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond397) CFA_SP SP+0
        CFI (cfiCond397) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond398 Using cfiCommon0
        CFI (cfiCond398) NoFunction
        CFI (cfiCond398) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_9
        CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond398) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond398) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond398) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond398) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond398) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond398) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond398) CFA_SP SP+0
        CFI (cfiCond398) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_10
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond400 Using cfiCommon0
        CFI (cfiCond400) NoFunction
        CFI (cfiCond400) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_11
        CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond400) CFA_SP SP+0
        CFI (cfiCond400) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond401 Using cfiCommon0
        CFI (cfiCond401) NoFunction
        CFI (cfiCond401) Conditional ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_12
        CFI Block cfiCond402 Using cfiCommon0
        CFI (cfiCond402) NoFunction
        CFI (cfiCond402) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_115
        CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond402) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond402) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond402) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond402) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond402) CFA_SP SP+0
        CFI (cfiCond402) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond403 Using cfiCommon0
        CFI (cfiCond403) NoFunction
        CFI (cfiCond403) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_116
        CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond403) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond403) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond403) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond403) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond403) CFA_SP SP+0
        CFI (cfiCond403) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond404 Using cfiCommon0
        CFI (cfiCond404) NoFunction
        CFI (cfiCond404) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_120
        CFI (cfiCond404) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond404) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond404) CFA_SP SP+-4
        CFI Block cfiCond405 Using cfiCommon0
        CFI (cfiCond405) NoFunction
        CFI (cfiCond405) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_121
        CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond405) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond405) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond405) CFA_SP SP+0
        CFI (cfiCond405) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond406 Using cfiCommon0
        CFI (cfiCond406) NoFunction
        CFI (cfiCond406) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_117
        CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond406) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond406) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond406) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond406) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond406) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond406) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond406) CFA_SP SP+0
        CFI (cfiCond406) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond407 Using cfiCommon0
        CFI (cfiCond407) NoFunction
        CFI (cfiCond407) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_118
        CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond407) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond407) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond407) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond407) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond407) CFA_SP SP+0
        CFI (cfiCond407) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond408 Using cfiCommon0
        CFI (cfiCond408) NoFunction
        CFI (cfiCond408) Conditional ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_119
        CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond408) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond408) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond408) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond408) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond408) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond408) CFA_SP SP+0
        CFI (cfiCond408) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker409 Using cfiCommon1
        CFI (cfiPicker409) NoFunction
        CFI (cfiPicker409) Picker
        LCALL   ?Subroutine109
??CrossCallReturnLabel_341:
        RET
        CFI EndBlock cfiCond395
        CFI EndBlock cfiCond396
        CFI EndBlock cfiCond397
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiCond400
        CFI EndBlock cfiCond401
        CFI EndBlock cfiCond402
        CFI EndBlock cfiCond403
        CFI EndBlock cfiCond404
        CFI EndBlock cfiCond405
        CFI EndBlock cfiCond406
        CFI EndBlock cfiCond407
        CFI EndBlock cfiCond408
        CFI EndBlock cfiPicker409

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine109:
        CFI Block cfiCond410 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_78
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond411 Using cfiCommon0
        CFI (cfiCond411) NoFunction
        CFI (cfiCond411) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_79
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_76
        CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond412) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond412) CFA_SP SP+0
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond413 Using cfiCommon0
        CFI (cfiCond413) NoFunction
        CFI (cfiCond413) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_77
        CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond413) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond413) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond413) CFA_SP SP+0
        CFI (cfiCond413) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond414 Using cfiCommon0
        CFI (cfiCond414) NoFunction
        CFI (cfiCond414) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_113
        CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond414) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond414) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond414) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond414) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond414) CFA_SP SP+0
        CFI (cfiCond414) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond415 Using cfiCommon0
        CFI (cfiCond415) NoFunction
        CFI (cfiCond415) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_114
        CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond415) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond415) CFA_SP SP+0
        CFI (cfiCond415) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond416 Using cfiCommon0
        CFI (cfiCond416) NoFunction
        CFI (cfiCond416) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_6
        CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond416) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond416) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond416) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond416) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond416) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond416) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond416) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond416) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond416) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond416) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond416) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond416) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond416) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond416) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond416) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond416) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond416) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond416) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond416) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond416) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond416) CFA_SP SP+0
        CFI (cfiCond416) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond417 Using cfiCommon0
        CFI (cfiCond417) NoFunction
        CFI (cfiCond417) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_7
        CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond417) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond417) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond417) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond417) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond417) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond417) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond417) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond417) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond417) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond417) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond417) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond417) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond417) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond417) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond417) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond417) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond417) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond417) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond417) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond417) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond417) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond417) CFA_SP SP+0
        CFI (cfiCond417) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond418 Using cfiCommon0
        CFI (cfiCond418) NoFunction
        CFI (cfiCond418) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_8
        CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond418) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond418) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond418) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond418) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond418) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond418) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond418) CFA_SP SP+0
        CFI (cfiCond418) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond419 Using cfiCommon0
        CFI (cfiCond419) NoFunction
        CFI (cfiCond419) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_9
        CFI (cfiCond419) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond419) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond419) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond419) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond419) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond419) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond419) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond419) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond419) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond419) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond419) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond419) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond419) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond419) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond419) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond419) CFA_SP SP+0
        CFI (cfiCond419) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond420 Using cfiCommon0
        CFI (cfiCond420) NoFunction
        CFI (cfiCond420) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_10
        CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond420) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond420) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond420) CFA_SP SP+0
        CFI (cfiCond420) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond421 Using cfiCommon0
        CFI (cfiCond421) NoFunction
        CFI (cfiCond421) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_11
        CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond421) CFA_SP SP+0
        CFI (cfiCond421) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond422 Using cfiCommon0
        CFI (cfiCond422) NoFunction
        CFI (cfiCond422) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_12
        CFI Block cfiCond423 Using cfiCommon0
        CFI (cfiCond423) NoFunction
        CFI (cfiCond423) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_115
        CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond423) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond423) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond423) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond423) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond423) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond423) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond423) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond423) CFA_SP SP+0
        CFI (cfiCond423) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_116
        CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond424) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond424) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond424) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond424) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond424) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond424) CFA_SP SP+0
        CFI (cfiCond424) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_120
        CFI (cfiCond425) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond425) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond425) CFA_SP SP+-4
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_121
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond427 Using cfiCommon0
        CFI (cfiCond427) NoFunction
        CFI (cfiCond427) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_117
        CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond427) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond427) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond427) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond427) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond427) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond427) CFA_SP SP+0
        CFI (cfiCond427) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond428 Using cfiCommon0
        CFI (cfiCond428) NoFunction
        CFI (cfiCond428) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_118
        CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond428) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond428) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond428) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond428) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond428) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond428) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond428) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond428) CFA_SP SP+0
        CFI (cfiCond428) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond429 Using cfiCommon0
        CFI (cfiCond429) NoFunction
        CFI (cfiCond429) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_119
        CFI (cfiCond429) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond429) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond429) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond429) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond429) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond429) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond429) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond429) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond429) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond429) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond429) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond429) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond429) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond429) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond429) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond429) CFA_SP SP+0
        CFI (cfiCond429) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker430 Using cfiCommon1
        CFI (cfiPicker430) NoFunction
        CFI (cfiPicker430) Picker
        LCALL   ?Subroutine112
??CrossCallReturnLabel_349:
        RET
        CFI EndBlock cfiCond410
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiCond413
        CFI EndBlock cfiCond414
        CFI EndBlock cfiCond415
        CFI EndBlock cfiCond416
        CFI EndBlock cfiCond417
        CFI EndBlock cfiCond418
        CFI EndBlock cfiCond419
        CFI EndBlock cfiCond420
        CFI EndBlock cfiCond421
        CFI EndBlock cfiCond422
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiCond427
        CFI EndBlock cfiCond428
        CFI EndBlock cfiCond429
        CFI EndBlock cfiPicker430

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine112:
        CFI Block cfiCond431 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond432 Using cfiCommon0
        CFI (cfiCond432) NoFunction
        CFI (cfiCond432) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_48
        CFI Block cfiCond433 Using cfiCommon0
        CFI (cfiCond433) NoFunction
        CFI (cfiCond433) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_298, ??CrossCallReturnLabel_49
        CFI (cfiCond433) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond433) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond433) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond433) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond433) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond433) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond433) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond433) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond433) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond433) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond433) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond433) CFA_SP SP+0
        CFI (cfiCond433) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond434 Using cfiCommon0
        CFI (cfiCond434) NoFunction
        CFI (cfiCond434) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_415
        CFI (cfiCond434) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond434) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond434) CFA_SP SP+-4
        CFI Block cfiCond435 Using cfiCommon0
        CFI (cfiCond435) NoFunction
        CFI (cfiCond435) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_416
        CFI (cfiCond435) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond435) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond435) CFA_SP SP+-4
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_417
        CFI (cfiCond436) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond436) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond436) CFA_SP SP+-4
        CFI Block cfiCond437 Using cfiCommon0
        CFI (cfiCond437) NoFunction
        CFI (cfiCond437) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_399, ??CrossCallReturnLabel_297, ??CrossCallReturnLabel_418
        CFI (cfiCond437) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond437) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond437) CFA_SP SP+-4
        CFI Block cfiCond438 Using cfiCommon0
        CFI (cfiCond438) NoFunction
        CFI (cfiCond438) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_45
        CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond438) CFA_SP SP+0
        CFI (cfiCond438) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_46
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond439) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond439) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond439) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond440 Using cfiCommon0
        CFI (cfiCond440) NoFunction
        CFI (cfiCond440) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_34
        CFI (cfiCond440) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond440) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond440) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond440) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond440) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond440) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond440) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond440) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond440) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond440) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond440) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond440) CFA_SP SP+0
        CFI (cfiCond440) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond441 Using cfiCommon0
        CFI (cfiCond441) NoFunction
        CFI (cfiCond441) Conditional ??CrossCallReturnLabel_348, ??CrossCallReturnLabel_398, ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_35
        CFI (cfiCond441) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond441) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond441) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond441) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond441) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond441) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond441) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond441) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond441) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond441) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond441) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond441) CFA_SP SP+0
        CFI (cfiCond441) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond442 Using cfiCommon0
        CFI (cfiCond442) NoFunction
        CFI (cfiCond442) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_78
        CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond442) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond442) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond442) CFA_SP SP+0
        CFI (cfiCond442) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond443 Using cfiCommon0
        CFI (cfiCond443) NoFunction
        CFI (cfiCond443) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_396, ??CrossCallReturnLabel_79
        CFI Block cfiCond444 Using cfiCommon0
        CFI (cfiCond444) NoFunction
        CFI (cfiCond444) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_76
        CFI (cfiCond444) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond444) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond444) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond444) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond444) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond444) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond444) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond444) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond444) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond444) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond444) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond444) CFA_SP SP+0
        CFI (cfiCond444) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond445 Using cfiCommon0
        CFI (cfiCond445) NoFunction
        CFI (cfiCond445) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_395, ??CrossCallReturnLabel_77
        CFI (cfiCond445) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond445) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond445) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond445) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond445) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond445) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond445) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond445) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond445) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond445) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond445) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond445) CFA_SP SP+0
        CFI (cfiCond445) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_113
        CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond446) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond446) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond446) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond446) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond446) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond446) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond446) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond446) CFA_SP SP+0
        CFI (cfiCond446) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond447 Using cfiCommon0
        CFI (cfiCond447) NoFunction
        CFI (cfiCond447) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_397, ??CrossCallReturnLabel_114
        CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond447) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond447) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond447) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond447) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond447) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond447) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond447) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond447) CFA_SP SP+0
        CFI (cfiCond447) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond448 Using cfiCommon0
        CFI (cfiCond448) NoFunction
        CFI (cfiCond448) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_6
        CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond448) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond448) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond448) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond448) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond448) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond448) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond448) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond448) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond448) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond448) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond448) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond448) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond448) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond448) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond448) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond448) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond448) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond448) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond448) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond448) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond448) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond448) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond448) CFA_SP SP+0
        CFI (cfiCond448) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond449 Using cfiCommon0
        CFI (cfiCond449) NoFunction
        CFI (cfiCond449) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_7
        CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond449) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond449) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond449) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond449) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond449) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond449) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond449) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond449) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond449) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond449) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond449) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond449) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond449) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond449) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond449) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond449) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond449) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond449) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond449) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond449) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond449) CFA_SP SP+0
        CFI (cfiCond449) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond450 Using cfiCommon0
        CFI (cfiCond450) NoFunction
        CFI (cfiCond450) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_8
        CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond450) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond450) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond450) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond450) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond450) CFA_SP SP+0
        CFI (cfiCond450) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond451 Using cfiCommon0
        CFI (cfiCond451) NoFunction
        CFI (cfiCond451) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_9
        CFI (cfiCond451) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond451) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond451) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond451) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond451) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond451) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond451) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond451) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond451) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond451) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond451) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond451) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond451) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond451) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond451) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond451) CFA_SP SP+0
        CFI (cfiCond451) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond452 Using cfiCommon0
        CFI (cfiCond452) NoFunction
        CFI (cfiCond452) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_10
        CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond452) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond452) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond452) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond452) CFA_SP SP+0
        CFI (cfiCond452) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond453 Using cfiCommon0
        CFI (cfiCond453) NoFunction
        CFI (cfiCond453) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_11
        CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond453) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond453) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond453) CFA_SP SP+0
        CFI (cfiCond453) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_320, ??CrossCallReturnLabel_12
        CFI Block cfiCond455 Using cfiCommon0
        CFI (cfiCond455) NoFunction
        CFI (cfiCond455) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_115
        CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond455) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond455) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond455) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond455) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond455) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond455) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond455) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond455) CFA_SP SP+0
        CFI (cfiCond455) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond456 Using cfiCommon0
        CFI (cfiCond456) NoFunction
        CFI (cfiCond456) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_116
        CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond456) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond456) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond456) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond456) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond456) CFA_SP SP+0
        CFI (cfiCond456) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond457 Using cfiCommon0
        CFI (cfiCond457) NoFunction
        CFI (cfiCond457) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_120
        CFI (cfiCond457) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond457) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond457) CFA_SP SP+-4
        CFI Block cfiCond458 Using cfiCommon0
        CFI (cfiCond458) NoFunction
        CFI (cfiCond458) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_121
        CFI (cfiCond458) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond458) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond458) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond458) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond458) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond458) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond458) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond458) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond458) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond458) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond458) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond458) CFA_SP SP+0
        CFI (cfiCond458) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond459 Using cfiCommon0
        CFI (cfiCond459) NoFunction
        CFI (cfiCond459) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_117
        CFI (cfiCond459) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond459) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond459) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond459) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond459) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond459) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond459) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond459) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond459) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond459) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond459) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond459) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond459) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond459) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond459) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond459) CFA_SP SP+0
        CFI (cfiCond459) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond460 Using cfiCommon0
        CFI (cfiCond460) NoFunction
        CFI (cfiCond460) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_118
        CFI (cfiCond460) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond460) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond460) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond460) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond460) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond460) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond460) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond460) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond460) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond460) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond460) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond460) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond460) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond460) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond460) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond460) CFA_SP SP+0
        CFI (cfiCond460) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond461 Using cfiCommon0
        CFI (cfiCond461) NoFunction
        CFI (cfiCond461) Conditional ??CrossCallReturnLabel_349, ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_321, ??CrossCallReturnLabel_119
        CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond461) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond461) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond461) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond461) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond461) CFA_SP SP+0
        CFI (cfiCond461) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker462 Using cfiCommon1
        CFI (cfiPicker462) NoFunction
        CFI (cfiPicker462) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond431
        CFI EndBlock cfiCond432
        CFI EndBlock cfiCond433
        CFI EndBlock cfiCond434
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiCond437
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiCond440
        CFI EndBlock cfiCond441
        CFI EndBlock cfiCond442
        CFI EndBlock cfiCond443
        CFI EndBlock cfiCond444
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiCond447
        CFI EndBlock cfiCond448
        CFI EndBlock cfiCond449
        CFI EndBlock cfiCond450
        CFI EndBlock cfiCond451
        CFI EndBlock cfiCond452
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiCond455
        CFI EndBlock cfiCond456
        CFI EndBlock cfiCond457
        CFI EndBlock cfiCond458
        CFI EndBlock cfiCond459
        CFI EndBlock cfiCond460
        CFI EndBlock cfiCond461
        CFI EndBlock cfiPicker462

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond463 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond464) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond464) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond464) CFA_SP SP+-4
        CFI Block cfiPicker465 Using cfiCommon1
        CFI (cfiPicker465) NoFunction
        CFI (cfiPicker465) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x36
        LCALL   ??Subroutine88_0
??CrossCallReturnLabel_282:
        RET
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiPicker465
// 1584 /******************************************************************************
// 1585 * Read ADC's once into buffer
// 1586 ******************************************************************************/
// 1587 
// 1588 #pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1589 void readNextValue(void){ //Scheduled(void){  // 
readNextValue:
        CFI Block cfiBlock466 Using cfiCommon0
        CFI Function readNextValue
        FUNCALL readNextValue, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1590   INT16 value;
// 1591   static int theShift = 50;
// 1592   
// 1593   ADC_GET_VALUE( value ); value >>= 2; value += theShift;  // 200 >> 2 = 50
        MOV     A,0xbb
        MOV     ?V0 + 1,A
        MOV     A,0xba
        MOV     ?V0 + 0,A
// 1594   
// 1595   //while( value < 0 ){ value++; theShift++; } // adaptive
// 1596   adcsTemp[ adcCount++ ] += (UINT16)value; 
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        ADD     A,R4
        MOVX    @DPTR,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     DPTR,#??theShift
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     R3,A
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(adcsTemp & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#((adcsTemp >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOVX    @DPTR,A
// 1597   
// 1598   if( adcCount < N_CHANNELS )
        MOV     DPTR,#adcCount
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x9
        JNC     ??readNextValue_0
// 1599   {
// 1600     ADC_SINGLE_CONVERSION( adcChannels[ adcCount ] ); 
        MOVX    A,@DPTR
        ADD     A,#(adcChannels & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((adcChannels >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xb6,A
        LJMP    ??readNextValue_1
// 1601   }
// 1602   else
// 1603   {
// 1604     if( ++tempAdcsCount >= 8 )
??readNextValue_0:
        MOV     DPTR,#tempAdcsCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x8
        JNC     $+5
        LJMP    ??readNextValue_2
// 1605     {
// 1606       BYTE idx; 
// 1607       INT16 grnd = adcsTemp[ 3 ];
        MOV     DPTR,#(adcsTemp + 6)
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1608       
// 1609       for( idx = 0; idx < N_CHANNELS; idx++ )
        MOV     R4,#(adcsTemp & 0xff)
        MOV     R5,#((adcsTemp >> 8) & 0xff)
        MOV     R2,#(last & 0xff)
        MOV     R3,#((last >> 8) & 0xff)
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#(adcBuf & 0xff)
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#((adcBuf >> 8) & 0xff)
        MOV     R1,A
        MOV     ?V0 + 2,#0x9
// 1610       {
// 1611         adcBuf[ idx ][ bufferCount ] = adcsTemp[ idx ];
??readNextValue_3:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
// 1612 
// 1613         if( adcsTemp[ idx ] < grnd )
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R6
        MOV     A,?V0 + 1
        SUBB    A,R7
        JNC     ??readNextValue_4
// 1614           last[idx] = 0; 
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??readNextValue_5
// 1615         else 
// 1616           last[idx] = adcsTemp[ idx ] - grnd;
??readNextValue_4:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R6
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        SUBB    A,R7
        MOV     ?V0 + 1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
??readNextValue_5:
        MOVX    @DPTR,A
// 1617       }
        MOV     A,R0
        ADD     A,#0x10
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        DEC     ?V0 + 2
        MOV     A,?V0 + 2
        JNZ     ??readNextValue_3
// 1618 
// 1619       flags[ AltCheckVin ] = TRUE;
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0xb
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1620       zerofill( (BYTE *)adcsTemp, sizeof(adcsTemp) );
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x12
        MOV     R2,#(adcsTemp & 0xff)
        MOV     R3,#((adcsTemp >> 8) & 0xff)
        LCALL   zerofill
// 1621       tempAdcsCount = 0;
        CLR     A
        MOV     DPTR,#tempAdcsCount
        MOVX    @DPTR,A
// 1622       if( ++bufferCount == BUFFER_SIZE )
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        XRL     A,#0x8
        JNZ     ??readNextValue_2
// 1623       {
// 1624         enable2SendData = TRUE; 
        MOV     A,#0x1
        MOV     DPTR,#enable2SendData
        MOVX    @DPTR,A
// 1625         bufferCount = 0; 
        CLR     A
        MOV     DPTR,#bufferCount
        MOVX    @DPTR,A
// 1626       }
// 1627     }
// 1628     adcCount = 0;
??readNextValue_2:
        CLR     A
        MOV     DPTR,#adcCount
        MOVX    @DPTR,A
// 1629   }
// 1630 }
??readNextValue_1:
        LJMP    ?Subroutine123
        CFI EndBlock cfiBlock466
        REQUIRE ADCCON3
        REQUIRE ADCL
        REQUIRE ADCH

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??theShift:
        DS 2
        REQUIRE `?<Initializer for theShift>`
        REQUIRE __INIT_XDATA_I
// 1631 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1632 void prepareTxBuffer()
prepareTxBuffer:
        CFI Block cfiBlock467 Using cfiCommon0
        CFI Function prepareTxBuffer
// 1633 {
        FUNCALL prepareTxBuffer, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareTxBuffer, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1634      loadIV( page.curIV );  
        ; Setup parameters for call to function load
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        MOV     R1,#0x6
        LCALL   ??Subroutine81_1
// 1635      encode( 32, (char *)radioPktBuffer,      (char *)(radioPktBufferTx+2) );
??CrossCallReturnLabel_264:
        ; Setup parameters for call to function code
        MOV     ?V0 + 0,#((radioPktBufferTx + 2) & 0xff)
        MOV     ?V0 + 1,#(((radioPktBufferTx + 2) >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R4,#(radioPktBuffer & 0xff)
        MOV     R5,#((radioPktBuffer >> 8) & 0xff)
        MOV     R2,#0x20
        MOV     R1,#0x0
        LCALL   `code`
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
// 1636 
// 1637      
// 1638      radioPktBufferTx[0] = PACKET_LENGTH_ED;               // Length byte
        MOV     A,#0x22
        MOV     DPTR,#radioPktBufferTx
        MOVX    @DPTR,A
// 1639      radioPktBufferTx[1] = page.gwAddr;                    // GW address
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBufferTx + 1)
        MOVX    @DPTR,A
// 1640      packagePrepared = TRUE; 
        MOV     A,#0x1
        MOV     DPTR,#packagePrepared
        LJMP    ?Subroutine122
        CFI EndBlock cfiBlock467
// 1641 }
// 1642 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1643 void copyMac( BYTE *ptr) { mymemcpy( ptr, page.myMac, 6); }
copyMac:
        CFI Block cfiBlock468 Using cfiCommon0
        CFI Function copyMac
        FUNCALL copyMac, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#((page + 6) & 0xff)
        MOV     R5,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiBlock468
// 1644 

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1645 BYTE ndev = 0;
ndev:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1646 INT16 prevRssi = 0;
prevRssi:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1647 BYTE coefficients_buffer[ 24 ];
coefficients_buffer:
        DS 24
        REQUIRE __INIT_XDATA_Z
// 1648 void prepareCoeff(void);
// 1649 /******************************************************************************
// 1650 * Prepare data - average the round robin buffer into 10 values
// 1651 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1652 void prepareData(void)
prepareData:
        CFI Block cfiBlock469 Using cfiCommon0
        CFI Function prepareData
// 1653 {  
        FUNCALL prepareData, prepareCoeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, prepareScaling
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, computeADCs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, copyMac
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareData, prepareTxBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
// 1654   UINT16 reportStatus = netValue;
        MOV     DPTR,#netValue
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1655   isCalibrationPackage = FALSE;
        CLR     A
        MOV     DPTR,#isCalibrationPackage
        MOVX    @DPTR,A
// 1656 
// 1657   if ( reportScaling )
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      ??prepareData_0
// 1658   { 
// 1659     if ( base_ptr==coefficients_buffer )
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        XRL     A,#(coefficients_buffer & 0xff)
        JNZ     ??prepareData_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#((coefficients_buffer >> 8) & 0xff)
??prepareData_1:
        JNZ     ??prepareData_2
// 1660       prepareCoeff();
        ; Setup parameters for call to function prepareCoeff
        LCALL   prepareCoeff
        SJMP    ??prepareData_3
// 1661     else 
// 1662       prepareScaling();
??prepareData_2:
        ; Setup parameters for call to function prepareScaling
        LCALL   prepareScaling
// 1663     isCalibrationPackage = TRUE;
??prepareData_3:
        MOV     A,#0x1
        MOV     DPTR,#isCalibrationPackage
        LJMP    ??prepareData_4
// 1664   }
// 1665   else if ( enable2SendData )
??prepareData_0:
        MOV     DPTR,#enable2SendData
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??prepareData_5
// 1666   {
// 1667     BYTE *ptr  = radioPktBuffer;
// 1668     computeADCs( FALSE, FALSE );
        ; Setup parameters for call to function computeADCs
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   computeADCs
// 1669     
// 1670     mymemcpy( ptr, (BYTE *)&utc, 4 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utc & 0xff)
        MOV     R5,#((utc >> 8) & 0xff)
        MOV     R2,#(radioPktBuffer & 0xff)
        MOV     R3,#((radioPktBuffer >> 8) & 0xff)
        LCALL   mymemcpy
// 1671     ptr +=4;
// 1672     *ptr++ = (BYTE)curChannel;
        MOV     DPTR,#curChannel
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 4)
        MOVX    @DPTR,A
// 1673     *ptr++ = ( ( page.netId&0xF | ( ( P1 & 0x18 ) << 1 ) ) << 2 );
        MOV     A,#0x18
        ANL     A,0x90
        CLR     C
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ORL     A,R2
        RLC     A
        RLC     A
        ANL     A,#0xfc
        LCALL   ?Subroutine79
// 1674     
// 1675     copyMac( ptr );
// 1676     ptr += 6; /* mac address is 6 bytes (12 characters) */
// 1677     /* At this point, 12 bytes gone */
// 1678     
// 1679     mymemcpy( ptr, (BYTE *)adcs16, 16 );
??CrossCallReturnLabel_255:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(adcs16 & 0xff)
        MOV     R5,#((adcs16 >> 8) & 0xff)
        MOV     R2,#((radioPktBuffer + 12) & 0xff)
        MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
        LCALL   mymemcpy
// 1680     
// 1681     /* 06/26/2017 To help debug new functionality in checkVin(), only add this values if reportStatus is 50 or below */
// 1682     if (reportStatus <= 50)
        CLR     C
        MOV     A,R6
        SUBB    A,#0x33
        MOV     A,R7
        SUBB    A,#0x0
        JNC     ??prepareData_6
// 1683     {
// 1684       if (ProtectionLimitsExceeded != 0)
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        JZ      ??prepareData_7
// 1685       {
// 1686         reportStatus = 180 + ProtectionLimitsExceeded;
        MOV     R0,A
        MOV     A,#-0x4c
        ADD     A,R0
        MOV     R6,A
        CLR     A
        SJMP    ??prepareData_8
// 1687       }
// 1688       else
// 1689       {
// 1690         if (page.is500Always )
??prepareData_7:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??prepareData_9
// 1691           reportStatus += 2 + ((UINT16)CHANNR)*100;
        MOV     DPTR,#-0x20fa
        LCALL   ?Subroutine62
??CrossCallReturnLabel_188:
        MOV     A,#0x2
        ADD     A,R0
        INC     R0
        SJMP    ??prepareData_10
// 1692         else if (page.isRelay  )
??prepareData_9:
        MOV     C,0xE0 /* A   */.5
        JNC     ??prepareData_11
// 1693           reportStatus += 1 + page.repeaterChannel*100;
        MOV     DPTR,#(page + 192)
        LCALL   ?Subroutine62
??CrossCallReturnLabel_189:
        MOV     A,#0x1
        ADD     A,R0
??prepareData_10:
        INC     R0
        CLR     A
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
// 1694         if ( page.searchCommunication )
??prepareData_11:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??prepareData_12
// 1695           reportStatus += 4;
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1696         if ( page.use250kbod )
??prepareData_12:
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??prepareData_13
// 1697           reportStatus += 8;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1698         if ( isOnTestStand )
??prepareData_13:
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JZ      ??prepareData_6
// 1699           reportStatus += 16;
        MOV     A,R6
        ADD     A,#0x10
        MOV     R6,A
        MOV     A,R7
??prepareData_8:
        ADDC    A,#0x0
        MOV     R7,A
// 1700       }
// 1701     }
// 1702     *((INT16 *)(ptr+14)) = reportStatus;
??prepareData_6:
        MOV     DPTR,#(radioPktBuffer + 26)
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1703     
// 1704     ptr += 16;
// 1705     *ptr++ = lastRssi ? ((BYTE) theRealOffset) : 0x3F;
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        JNZ     ??prepareData_14
        INC     DPTR
        MOVX    A,@DPTR
??prepareData_14:
        JZ      ??prepareData_15
        MOV     DPTR,#theRealOffset
        MOVX    A,@DPTR
        MOV     R2,A
        SJMP    ??prepareData_16
??prepareData_15:
        MOV     R2,#0x3f
??prepareData_16:
        MOV     A,R2
        MOV     DPTR,#(radioPktBuffer + 28)
        MOVX    @DPTR,A
// 1706     
// 1707     if( !lastRssi )
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        JNZ     ??prepareData_17
        INC     DPTR
        MOVX    A,@DPTR
??prepareData_17:
        JNZ     ??prepareData_18
// 1708       lastRssi = prevRssi;
        MOV     DPTR,#prevRssi
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_173:
        MOV     DPTR,#lastRssi
        SJMP    ??prepareData_19
// 1709     else
// 1710       prevRssi = lastRssi;
??prepareData_18:
        MOV     DPTR,#lastRssi
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_174:
        MOV     DPTR,#prevRssi
??prepareData_19:
        LCALL   ??Subroutine67_0
// 1711     
// 1712     *ptr++ = (BYTE) ( lastRssi );    // 29
??CrossCallReturnLabel_209:
        MOV     DPTR,#lastRssi
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 29)
        MOVX    @DPTR,A
// 1713     
// 1714     if( P1_4 )
        MOV     C,0x90.4
        JNC     ??prepareData_20
// 1715     {
// 1716       *ptr++ = (BYTE) T3CC0;
        MOV     A,0xcd
        MOV     DPTR,#(radioPktBuffer + 30)
        MOVX    @DPTR,A
// 1717       *ptr   = (BYTE)   theOC;
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 31)
        MOVX    @DPTR,A
// 1718 #ifdef MidString
// 1719       if( *ptr > ocShortCircuitLimit )
        MOV     DPTR,#ocShortCircuitLimit
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(radioPktBuffer + 31)
        MOVX    A,@DPTR
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        CLR     C
        SUBB    A,R2
        JNC     ??prepareData_21
// 1720         *ptr = ocShortCircuitLimit;
        MOV     DPTR,#ocShortCircuitLimit
        SJMP    ??prepareData_22
// 1721 #endif
// 1722     }
// 1723     else
// 1724     {
// 1725       *ptr++ = page.ov;
??prepareData_20:
        MOV     DPTR,#(page + 187)
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 30)
        MOVX    @DPTR,A
// 1726       *ptr   = (BYTE)   setOC;
        MOV     DPTR,#setOC
??prepareData_22:
        MOVX    A,@DPTR
        MOV     DPTR,#(radioPktBuffer + 31)
        MOVX    @DPTR,A
// 1727     }
// 1728     lastRssi = 0;
??prepareData_21:
        MOV     DPTR,#lastRssi
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??prepareData_4:
        MOVX    @DPTR,A
// 1729   }
// 1730   else
// 1731     return;
// 1732   
// 1733   prepareTxBuffer();        
        ; Setup parameters for call to function prepareTxBuffer
        LCALL   prepareTxBuffer
// 1734 }
??prepareData_5:
        LJMP    ?Subroutine120
        CFI EndBlock cfiBlock469
        REQUIRE _A_P1
        REQUIRE T3CC0

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond470 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_188
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond471 Using cfiCommon0
        CFI (cfiCond471) NoFunction
        CFI (cfiCond471) Conditional ??CrossCallReturnLabel_189
        CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond471) CFA_SP SP+0
        CFI (cfiCond471) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker472 Using cfiCommon1
        CFI (cfiPicker472) NoFunction
        CFI (cfiPicker472) Picker
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        RET
        CFI EndBlock cfiCond470
        CFI EndBlock cfiCond471
        CFI EndBlock cfiPicker472

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond473 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_164
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_168
        CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond474) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond474) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond474) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond474) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond474) CFA_SP SP+0
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond475 Using cfiCommon0
        CFI (cfiCond475) NoFunction
        CFI (cfiCond475) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond475) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond475) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond475) CFA_SP SP+0
        CFI (cfiCond475) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker476 Using cfiCommon1
        CFI (cfiPicker476) NoFunction
        CFI (cfiPicker476) Picker
        MOV     DPTR,#(adcs16 + 4)
        CFI Block cfiCond477 Using cfiCommon0
        CFI (cfiCond477) NoFunction
        CFI (cfiCond477) Conditional ??CrossCallReturnLabel_165
        CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond477) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond477) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond477) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond477) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond477) CFA_SP SP+0
        CFI (cfiCond477) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond478 Using cfiCommon0
        CFI (cfiCond478) NoFunction
        CFI (cfiCond478) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond478) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond478) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond478) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond478) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond478) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond478) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond478) CFA_SP SP+0
        CFI (cfiCond478) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond479 Using cfiCommon0
        CFI (cfiCond479) NoFunction
        CFI (cfiCond479) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond479) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond479) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond479) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond479) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond479) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond479) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond479) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond479) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond479) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond479) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond479) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond479) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond479) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond479) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond479) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond479) CFA_SP SP+0
        CFI (cfiCond479) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_169
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond481 Using cfiCommon0
        CFI (cfiCond481) NoFunction
        CFI (cfiCond481) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond481) CFA_SP SP+0
        CFI (cfiCond481) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond482 Using cfiCommon0
        CFI (cfiCond482) NoFunction
        CFI (cfiCond482) Conditional ??CrossCallReturnLabel_172
        CFI Block cfiCond483 Using cfiCommon0
        CFI (cfiCond483) NoFunction
        CFI (cfiCond483) Conditional ??CrossCallReturnLabel_173
        CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond483) CFA_SP SP+0
        CFI (cfiCond483) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond484 Using cfiCommon0
        CFI (cfiCond484) NoFunction
        CFI (cfiCond484) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond484) CFA_SP SP+0
        CFI (cfiCond484) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond485 Using cfiCommon0
        CFI (cfiCond485) NoFunction
        CFI (cfiCond485) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond485) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond485) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond485) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond485) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond485) CFA_SP SP+0
        CFI (cfiCond485) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond486 Using cfiCommon0
        CFI (cfiCond486) NoFunction
        CFI (cfiCond486) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond486) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond486) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond486) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond486) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond486) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond486) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond486) CFA_SP SP+0
        CFI (cfiCond486) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond487 Using cfiCommon0
        CFI (cfiCond487) NoFunction
        CFI (cfiCond487) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond487) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond487) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond487) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond487) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond487) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond487) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond487) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond487) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond487) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond487) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond487) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond487) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond487) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond487) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond487) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond487) CFA_SP SP+0
        CFI (cfiCond487) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond488 Using cfiCommon0
        CFI (cfiCond488) NoFunction
        CFI (cfiCond488) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond488) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond488) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond488) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond488) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond488) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond488) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond488) CFA_SP SP+0
        CFI (cfiCond488) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond490 Using cfiCommon0
        CFI (cfiCond490) NoFunction
        CFI (cfiCond490) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond490) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond490) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond490) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond490) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond490) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond490) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond490) CFA_SP SP+0
        CFI (cfiCond490) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond491 Using cfiCommon0
        CFI (cfiCond491) NoFunction
        CFI (cfiCond491) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond491) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond491) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond491) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond491) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond491) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond491) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond491) CFA_SP SP+0
        CFI (cfiCond491) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond492) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond492) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond492) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond492) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond492) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond492) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond492) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond492) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond492) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond492) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond492) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond492) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond492) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond492) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond492) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond492) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond492) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond492) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond492) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond493 Using cfiCommon0
        CFI (cfiCond493) NoFunction
        CFI (cfiCond493) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond493) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond493) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond493) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond493) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond493) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond493) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond493) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond493) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond493) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond493) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond493) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond493) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond493) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond493) CFA_SP SP+0
        CFI (cfiCond493) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond494 Using cfiCommon0
        CFI (cfiCond494) NoFunction
        CFI (cfiCond494) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond494) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond494) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond494) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond494) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond494) CFA_SP SP+0
        CFI (cfiCond494) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond495 Using cfiCommon0
        CFI (cfiCond495) NoFunction
        CFI (cfiCond495) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond495) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond495) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond495) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond495) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond495) CFA_SP SP+0
        CFI (cfiCond495) CFA_XSP16 add(XSP16, 13)
??Subroutine60_0:
        LCALL   ?Subroutine99
??CrossCallReturnLabel_319:
        RET
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiCond475
        CFI EndBlock cfiPicker476
        CFI EndBlock cfiCond477
        CFI EndBlock cfiCond478
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiCond481
        CFI EndBlock cfiCond482
        CFI EndBlock cfiCond483
        CFI EndBlock cfiCond484
        CFI EndBlock cfiCond485
        CFI EndBlock cfiCond486
        CFI EndBlock cfiCond487
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiCond490
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiCond493
        CFI EndBlock cfiCond494
        CFI EndBlock cfiCond495

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine99:
        CFI Block cfiCond496 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond497 Using cfiCommon0
        CFI (cfiCond497) NoFunction
        CFI (cfiCond497) Conditional ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_58
        CFI (cfiCond497) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond497) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond497) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond497) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond497) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond497) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond497) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond497) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond497) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond497) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond497) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond497) CFA_SP SP+0
        CFI (cfiCond497) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_370
        CFI (cfiCond498) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond498) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond498) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond498) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond498) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond498) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond498) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond498) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond498) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond498) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond498) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond498) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond498) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond498) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond498) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond498) CFA_SP SP+0
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond499 Using cfiCommon0
        CFI (cfiCond499) NoFunction
        CFI (cfiCond499) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_371
        CFI (cfiCond499) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond499) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond499) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond499) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond499) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond499) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond499) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond499) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond499) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond499) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond499) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond499) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond499) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond499) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond499) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond499) CFA_SP SP+0
        CFI (cfiCond499) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond500 Using cfiCommon0
        CFI (cfiCond500) NoFunction
        CFI (cfiCond500) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_376
        CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond500) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond500) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond500) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond500) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond500) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond500) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond500) CFA_SP SP+0
        CFI (cfiCond500) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond501 Using cfiCommon0
        CFI (cfiCond501) NoFunction
        CFI (cfiCond501) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_377
        CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond501) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond501) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond501) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond501) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond501) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond501) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond501) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond501) CFA_SP SP+0
        CFI (cfiCond501) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond502 Using cfiCommon0
        CFI (cfiCond502) NoFunction
        CFI (cfiCond502) Conditional ??CrossCallReturnLabel_317, ??CrossCallReturnLabel_87
        CFI (cfiCond502) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond502) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond502) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond502) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond502) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond502) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond502) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond502) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond502) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond502) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond502) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond502) CFA_SP SP+0
        CFI (cfiCond502) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond503 Using cfiCommon0
        CFI (cfiCond503) NoFunction
        CFI (cfiCond503) Conditional ??CrossCallReturnLabel_317, ??CrossCallReturnLabel_88
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_54
        CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond504) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond504) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond504) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond504) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond504) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond504) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond504) CFA_SP SP+0
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_55
        CFI (cfiCond505) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond505) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond505) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond505) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond505) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond505) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond505) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond505) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond505) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond505) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond505) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond505) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond505) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond505) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond505) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond505) CFA_SP SP+0
        CFI (cfiCond505) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond506 Using cfiCommon0
        CFI (cfiCond506) NoFunction
        CFI (cfiCond506) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_56
        CFI Block cfiCond507 Using cfiCommon0
        CFI (cfiCond507) NoFunction
        CFI (cfiCond507) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_164
        CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond507) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond507) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond507) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond507) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond507) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond507) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond507) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond507) CFA_SP SP+0
        CFI (cfiCond507) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond508 Using cfiCommon0
        CFI (cfiCond508) NoFunction
        CFI (cfiCond508) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_168
        CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond508) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond508) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond508) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond508) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond508) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond508) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond508) CFA_SP SP+0
        CFI (cfiCond508) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_171
        CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond509) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond509) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond509) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond509) CFA_SP SP+0
        CFI (cfiCond509) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_165
        CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond510) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond510) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond510) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond510) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond510) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond510) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond510) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond510) CFA_SP SP+0
        CFI (cfiCond510) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond511 Using cfiCommon0
        CFI (cfiCond511) NoFunction
        CFI (cfiCond511) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_166
        CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond511) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond511) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond511) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond511) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond511) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond511) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond511) CFA_SP SP+0
        CFI (cfiCond511) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond512 Using cfiCommon0
        CFI (cfiCond512) NoFunction
        CFI (cfiCond512) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_167
        CFI (cfiCond512) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond512) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond512) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond512) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond512) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond512) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond512) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond512) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond512) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond512) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond512) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond512) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond512) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond512) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond512) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond512) CFA_SP SP+0
        CFI (cfiCond512) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond513 Using cfiCommon0
        CFI (cfiCond513) NoFunction
        CFI (cfiCond513) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_169
        CFI (cfiCond513) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond513) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond513) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond513) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond513) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond513) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond513) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond513) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond513) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond513) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond513) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond513) CFA_SP SP+0
        CFI (cfiCond513) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond514 Using cfiCommon0
        CFI (cfiCond514) NoFunction
        CFI (cfiCond514) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_170
        CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond514) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond514) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond514) CFA_SP SP+0
        CFI (cfiCond514) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond515 Using cfiCommon0
        CFI (cfiCond515) NoFunction
        CFI (cfiCond515) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_172
        CFI Block cfiCond516 Using cfiCommon0
        CFI (cfiCond516) NoFunction
        CFI (cfiCond516) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_173
        CFI (cfiCond516) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond516) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond516) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond516) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond516) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond516) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond516) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond516) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond516) CFA_SP SP+0
        CFI (cfiCond516) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_174
        CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond517) CFA_SP SP+0
        CFI (cfiCond517) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_175
        CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond518) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond518) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond518) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond518) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond518) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond518) CFA_SP SP+0
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond519 Using cfiCommon0
        CFI (cfiCond519) NoFunction
        CFI (cfiCond519) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_176
        CFI (cfiCond519) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond519) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond519) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond519) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond519) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond519) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond519) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond519) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond519) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond519) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond519) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond519) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond519) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond519) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond519) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond519) CFA_SP SP+0
        CFI (cfiCond519) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond520 Using cfiCommon0
        CFI (cfiCond520) NoFunction
        CFI (cfiCond520) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_177
        CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond520) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond520) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond520) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond520) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond520) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond520) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond520) CFA_SP SP+0
        CFI (cfiCond520) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond521 Using cfiCommon0
        CFI (cfiCond521) NoFunction
        CFI (cfiCond521) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_178
        CFI (cfiCond521) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond521) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond521) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond521) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond521) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond521) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond521) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond521) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond521) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond521) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond521) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond521) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond521) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond521) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond521) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond521) CFA_SP SP+0
        CFI (cfiCond521) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond522 Using cfiCommon0
        CFI (cfiCond522) NoFunction
        CFI (cfiCond522) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_179
        CFI (cfiCond522) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond522) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond522) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond522) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond522) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond522) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond522) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond522) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond522) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond522) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond522) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond522) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond522) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond522) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond522) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond522) CFA_SP SP+0
        CFI (cfiCond522) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond523 Using cfiCommon0
        CFI (cfiCond523) NoFunction
        CFI (cfiCond523) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_180
        CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond523) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond523) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond523) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond523) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond523) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond523) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond523) CFA_SP SP+0
        CFI (cfiCond523) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond524 Using cfiCommon0
        CFI (cfiCond524) NoFunction
        CFI (cfiCond524) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_181
        CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond524) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond524) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond524) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond524) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond524) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond524) CFA_SP SP+0
        CFI (cfiCond524) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond525 Using cfiCommon0
        CFI (cfiCond525) NoFunction
        CFI (cfiCond525) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_182
        CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond525) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond525) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond525) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond525) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond525) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond525) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond525) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond525) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond525) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond525) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond525) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond525) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond525) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond525) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond525) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond525) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond525) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond525) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond525) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond525) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond525) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond525) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond525) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond525) CFA_SP SP+0
        CFI (cfiCond525) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond526 Using cfiCommon0
        CFI (cfiCond526) NoFunction
        CFI (cfiCond526) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_183
        CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond526) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond526) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond526) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond526) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond526) CFA_SP SP+0
        CFI (cfiCond526) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond527 Using cfiCommon0
        CFI (cfiCond527) NoFunction
        CFI (cfiCond527) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_184
        CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond527) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond527) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond527) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond527) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond527) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond527) CFA_SP SP+0
        CFI (cfiCond527) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond528 Using cfiCommon0
        CFI (cfiCond528) NoFunction
        CFI (cfiCond528) Conditional ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_185
        CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond528) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond528) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond528) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond528) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond528) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond528) CFA_SP SP+0
        CFI (cfiCond528) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_318, ??CrossCallReturnLabel_91
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond530 Using cfiCommon0
        CFI (cfiCond530) NoFunction
        CFI (cfiCond530) Conditional ??CrossCallReturnLabel_318, ??CrossCallReturnLabel_92
        CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond530) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond530) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond530) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond530) CFA_SP SP+0
        CFI (cfiCond530) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond531 Using cfiCommon0
        CFI (cfiCond531) NoFunction
        CFI (cfiCond531) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_32
        CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond531) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond531) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond531) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond531) CFA_SP SP+0
        CFI (cfiCond531) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond532 Using cfiCommon0
        CFI (cfiCond532) NoFunction
        CFI (cfiCond532) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_33
        CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond532) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond532) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond532) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond532) CFA_SP SP+0
        CFI (cfiCond532) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond533 Using cfiCommon0
        CFI (cfiCond533) NoFunction
        CFI (cfiCond533) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_61
        CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond533) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond533) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond533) CFA_SP SP+0
        CFI (cfiCond533) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond534 Using cfiCommon0
        CFI (cfiCond534) NoFunction
        CFI (cfiCond534) Conditional ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_62
        CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond534) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond534) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond534) CFA_SP SP+0
        CFI (cfiCond534) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker535 Using cfiCommon1
        CFI (cfiPicker535) NoFunction
        CFI (cfiPicker535) Picker
        LCALL   ?Subroutine107
??CrossCallReturnLabel_337:
        RET
        CFI EndBlock cfiCond496
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiCond499
        CFI EndBlock cfiCond500
        CFI EndBlock cfiCond501
        CFI EndBlock cfiCond502
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiCond506
        CFI EndBlock cfiCond507
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiCond511
        CFI EndBlock cfiCond512
        CFI EndBlock cfiCond513
        CFI EndBlock cfiCond514
        CFI EndBlock cfiCond515
        CFI EndBlock cfiCond516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiCond519
        CFI EndBlock cfiCond520
        CFI EndBlock cfiCond521
        CFI EndBlock cfiCond522
        CFI EndBlock cfiCond523
        CFI EndBlock cfiCond524
        CFI EndBlock cfiCond525
        CFI EndBlock cfiCond526
        CFI EndBlock cfiCond527
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiCond530
        CFI EndBlock cfiCond531
        CFI EndBlock cfiCond532
        CFI EndBlock cfiCond533
        CFI EndBlock cfiCond534
        CFI EndBlock cfiPicker535

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine107:
        CFI Block cfiCond536 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond537 Using cfiCommon0
        CFI (cfiCond537) NoFunction
        CFI (cfiCond537) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_315, ??CrossCallReturnLabel_58
        CFI (cfiCond537) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond537) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond537) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond537) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond537) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond537) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond537) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond537) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond537) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond537) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond537) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond537) CFA_SP SP+0
        CFI (cfiCond537) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond538 Using cfiCommon0
        CFI (cfiCond538) NoFunction
        CFI (cfiCond538) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_370
        CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond538) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond538) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond538) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond538) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond538) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond538) CFA_SP SP+0
        CFI (cfiCond538) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_371
        CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond539) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond539) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond539) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond539) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond539) CFA_SP SP+0
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond540 Using cfiCommon0
        CFI (cfiCond540) NoFunction
        CFI (cfiCond540) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_376
        CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond540) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond540) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond540) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond540) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond540) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond540) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond540) CFA_SP SP+0
        CFI (cfiCond540) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond541 Using cfiCommon0
        CFI (cfiCond541) NoFunction
        CFI (cfiCond541) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_377
        CFI (cfiCond541) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond541) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond541) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond541) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond541) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond541) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond541) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond541) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond541) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond541) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond541) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond541) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond541) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond541) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond541) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond541) CFA_SP SP+0
        CFI (cfiCond541) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond542 Using cfiCommon0
        CFI (cfiCond542) NoFunction
        CFI (cfiCond542) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_317, ??CrossCallReturnLabel_87
        CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond542) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond542) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond542) CFA_SP SP+0
        CFI (cfiCond542) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond543 Using cfiCommon0
        CFI (cfiCond543) NoFunction
        CFI (cfiCond543) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_317, ??CrossCallReturnLabel_88
        CFI Block cfiCond544 Using cfiCommon0
        CFI (cfiCond544) NoFunction
        CFI (cfiCond544) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_54
        CFI (cfiCond544) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond544) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond544) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond544) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond544) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond544) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond544) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond544) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond544) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond544) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond544) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond544) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond544) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond544) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond544) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond544) CFA_SP SP+0
        CFI (cfiCond544) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond545 Using cfiCommon0
        CFI (cfiCond545) NoFunction
        CFI (cfiCond545) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_55
        CFI (cfiCond545) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond545) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond545) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond545) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond545) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond545) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond545) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond545) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond545) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond545) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond545) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond545) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond545) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond545) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond545) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond545) CFA_SP SP+0
        CFI (cfiCond545) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond546 Using cfiCommon0
        CFI (cfiCond546) NoFunction
        CFI (cfiCond546) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_56
        CFI Block cfiCond547 Using cfiCommon0
        CFI (cfiCond547) NoFunction
        CFI (cfiCond547) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_164
        CFI (cfiCond547) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond547) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond547) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond547) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond547) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond547) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond547) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond547) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond547) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond547) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond547) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond547) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond547) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond547) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond547) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond547) CFA_SP SP+0
        CFI (cfiCond547) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond548 Using cfiCommon0
        CFI (cfiCond548) NoFunction
        CFI (cfiCond548) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_168
        CFI (cfiCond548) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond548) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond548) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond548) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond548) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond548) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond548) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond548) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond548) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond548) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond548) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond548) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond548) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond548) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond548) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond548) CFA_SP SP+0
        CFI (cfiCond548) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond549 Using cfiCommon0
        CFI (cfiCond549) NoFunction
        CFI (cfiCond549) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_171
        CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond549) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond549) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond549) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond549) CFA_SP SP+0
        CFI (cfiCond549) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond550 Using cfiCommon0
        CFI (cfiCond550) NoFunction
        CFI (cfiCond550) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_165
        CFI (cfiCond550) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond550) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond550) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond550) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond550) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond550) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond550) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond550) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond550) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond550) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond550) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond550) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond550) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond550) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond550) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond550) CFA_SP SP+0
        CFI (cfiCond550) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond551 Using cfiCommon0
        CFI (cfiCond551) NoFunction
        CFI (cfiCond551) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_166
        CFI (cfiCond551) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond551) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond551) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond551) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond551) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond551) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond551) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond551) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond551) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond551) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond551) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond551) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond551) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond551) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond551) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond551) CFA_SP SP+0
        CFI (cfiCond551) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_167
        CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond552) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond552) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond552) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond552) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond552) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond552) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond552) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond552) CFA_SP SP+0
        CFI (cfiCond552) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_169
        CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond553) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond553) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond553) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond553) CFA_SP SP+0
        CFI (cfiCond553) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond554 Using cfiCommon0
        CFI (cfiCond554) NoFunction
        CFI (cfiCond554) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_170
        CFI (cfiCond554) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond554) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond554) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond554) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond554) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond554) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond554) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond554) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond554) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond554) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond554) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond554) CFA_SP SP+0
        CFI (cfiCond554) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond555 Using cfiCommon0
        CFI (cfiCond555) NoFunction
        CFI (cfiCond555) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_172
        CFI Block cfiCond556 Using cfiCommon0
        CFI (cfiCond556) NoFunction
        CFI (cfiCond556) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_173
        CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond556) CFA_SP SP+0
        CFI (cfiCond556) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond557 Using cfiCommon0
        CFI (cfiCond557) NoFunction
        CFI (cfiCond557) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_174
        CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond557) CFA_SP SP+0
        CFI (cfiCond557) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond558 Using cfiCommon0
        CFI (cfiCond558) NoFunction
        CFI (cfiCond558) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_175
        CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond558) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond558) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond558) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond558) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond558) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond558) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond558) CFA_SP SP+0
        CFI (cfiCond558) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_176
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond559) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond559) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond559) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond560 Using cfiCommon0
        CFI (cfiCond560) NoFunction
        CFI (cfiCond560) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_177
        CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond560) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond560) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond560) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond560) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond560) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond560) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond560) CFA_SP SP+0
        CFI (cfiCond560) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond561 Using cfiCommon0
        CFI (cfiCond561) NoFunction
        CFI (cfiCond561) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_178
        CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond561) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond561) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond561) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond561) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond561) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond561) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond561) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond561) CFA_SP SP+0
        CFI (cfiCond561) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond562 Using cfiCommon0
        CFI (cfiCond562) NoFunction
        CFI (cfiCond562) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_179
        CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond562) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond562) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond562) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond562) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond562) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond562) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond562) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond562) CFA_SP SP+0
        CFI (cfiCond562) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond563 Using cfiCommon0
        CFI (cfiCond563) NoFunction
        CFI (cfiCond563) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_180
        CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond563) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond563) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond563) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond563) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond563) CFA_SP SP+0
        CFI (cfiCond563) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_181
        CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond564) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond564) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond564) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond564) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond564) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond564) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond564) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond564) CFA_SP SP+0
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond565 Using cfiCommon0
        CFI (cfiCond565) NoFunction
        CFI (cfiCond565) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_182
        CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond565) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond565) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond565) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond565) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond565) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond565) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond565) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond565) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond565) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond565) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond565) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond565) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond565) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond565) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond565) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond565) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond565) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond565) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond565) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond565) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond565) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond565) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond565) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond565) CFA_SP SP+0
        CFI (cfiCond565) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond566 Using cfiCommon0
        CFI (cfiCond566) NoFunction
        CFI (cfiCond566) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_183
        CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond566) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond566) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond566) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond566) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond566) CFA_SP SP+0
        CFI (cfiCond566) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_184
        CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond567) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond567) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond567) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond567) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond567) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond567) CFA_SP SP+0
        CFI (cfiCond567) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond568 Using cfiCommon0
        CFI (cfiCond568) NoFunction
        CFI (cfiCond568) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_319, ??CrossCallReturnLabel_185
        CFI (cfiCond568) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond568) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond568) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond568) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond568) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond568) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond568) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond568) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond568) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond568) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond568) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond568) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond568) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond568) CFA_SP SP+0
        CFI (cfiCond568) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond569 Using cfiCommon0
        CFI (cfiCond569) NoFunction
        CFI (cfiCond569) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_318, ??CrossCallReturnLabel_91
        CFI (cfiCond569) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond569) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond569) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond569) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond569) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond569) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond569) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond569) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond569) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond569) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond569) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond569) CFA_SP SP+0
        CFI (cfiCond569) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond570 Using cfiCommon0
        CFI (cfiCond570) NoFunction
        CFI (cfiCond570) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_318, ??CrossCallReturnLabel_92
        CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond570) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond570) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond570) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond570) CFA_SP SP+0
        CFI (cfiCond570) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond571 Using cfiCommon0
        CFI (cfiCond571) NoFunction
        CFI (cfiCond571) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_32
        CFI (cfiCond571) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond571) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond571) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond571) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond571) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond571) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond571) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond571) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond571) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond571) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond571) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond571) CFA_SP SP+0
        CFI (cfiCond571) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond572 Using cfiCommon0
        CFI (cfiCond572) NoFunction
        CFI (cfiCond572) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_33
        CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond572) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond572) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond572) CFA_SP SP+0
        CFI (cfiCond572) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond573 Using cfiCommon0
        CFI (cfiCond573) NoFunction
        CFI (cfiCond573) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_61
        CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond573) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond573) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond573) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond573) CFA_SP SP+0
        CFI (cfiCond573) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_337, ??CrossCallReturnLabel_316, ??CrossCallReturnLabel_62
        CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond574) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond574) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond574) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond574) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond574) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond574) CFA_SP SP+0
        CFI (cfiCond574) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond575 Using cfiCommon0
        CFI (cfiCond575) NoFunction
        CFI (cfiCond575) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_162
        CFI (cfiCond575) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond575) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond575) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond575) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond575) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond575) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond575) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond575) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond575) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond575) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond575) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond575) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond575) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond575) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond575) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond575) CFA_SP SP+0
        CFI (cfiCond575) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond576 Using cfiCommon0
        CFI (cfiCond576) NoFunction
        CFI (cfiCond576) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_163
        CFI (cfiCond576) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond576) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond576) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond576) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond576) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond576) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond576) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond576) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond576) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond576) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond576) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond576) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond576) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond576) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond576) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond576) CFA_SP SP+0
        CFI (cfiCond576) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond577 Using cfiCommon0
        CFI (cfiCond577) NoFunction
        CFI (cfiCond577) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_38
        CFI (cfiCond577) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond577) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond577) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond577) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond577) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond577) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond577) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond577) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond577) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond577) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond577) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond577) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond577) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond577) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond577) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond577) CFA_SP SP+0
        CFI (cfiCond577) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_39
        CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond578) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond578) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond578) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond578) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond578) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond578) CFA_SP SP+0
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond579 Using cfiCommon0
        CFI (cfiCond579) NoFunction
        CFI (cfiCond579) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_311, ??CrossCallReturnLabel_160
        CFI (cfiCond579) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond579) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond579) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond579) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond579) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond579) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond579) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond579) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond579) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond579) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond579) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond579) CFA_SP SP+0
        CFI (cfiCond579) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond580 Using cfiCommon0
        CFI (cfiCond580) NoFunction
        CFI (cfiCond580) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_311, ??CrossCallReturnLabel_161
        CFI (cfiCond580) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond580) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond580) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond580) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond580) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond580) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond580) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond580) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond580) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond580) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond580) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond580) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond580) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond580) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond580) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond580) CFA_SP SP+0
        CFI (cfiCond580) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond581 Using cfiCommon0
        CFI (cfiCond581) NoFunction
        CFI (cfiCond581) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_32
        CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond581) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond581) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond581) CFA_SP SP+0
        CFI (cfiCond581) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond582 Using cfiCommon0
        CFI (cfiCond582) NoFunction
        CFI (cfiCond582) Conditional ??CrossCallReturnLabel_336, ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_33
        CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond582) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond582) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond582) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond582) CFA_SP SP+0
        CFI (cfiCond582) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond583 Using cfiCommon0
        CFI (cfiCond583) NoFunction
        CFI (cfiCond583) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_89
        CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond583) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond583) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond583) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond583) CFA_SP SP+0
        CFI (cfiCond583) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond584 Using cfiCommon0
        CFI (cfiCond584) NoFunction
        CFI (cfiCond584) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_90
        CFI (cfiCond584) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond584) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond584) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond584) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond584) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond584) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond584) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond584) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond584) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond584) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond584) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond584) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond584) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond584) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond584) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond584) CFA_SP SP+0
        CFI (cfiCond584) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond585 Using cfiCommon0
        CFI (cfiCond585) NoFunction
        CFI (cfiCond585) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_59
        CFI (cfiCond585) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond585) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond585) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond585) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond585) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond585) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond585) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond585) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond585) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond585) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond585) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond585) CFA_SP SP+0
        CFI (cfiCond585) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond586 Using cfiCommon0
        CFI (cfiCond586) NoFunction
        CFI (cfiCond586) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_60
        CFI (cfiCond586) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond586) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond586) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond586) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond586) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond586) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond586) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond586) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond586) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond586) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond586) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond586) CFA_SP SP+0
        CFI (cfiCond586) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker587 Using cfiCommon1
        CFI (cfiPicker587) NoFunction
        CFI (cfiPicker587) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond536
        CFI EndBlock cfiCond537
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiCond540
        CFI EndBlock cfiCond541
        CFI EndBlock cfiCond542
        CFI EndBlock cfiCond543
        CFI EndBlock cfiCond544
        CFI EndBlock cfiCond545
        CFI EndBlock cfiCond546
        CFI EndBlock cfiCond547
        CFI EndBlock cfiCond548
        CFI EndBlock cfiCond549
        CFI EndBlock cfiCond550
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiCond554
        CFI EndBlock cfiCond555
        CFI EndBlock cfiCond556
        CFI EndBlock cfiCond557
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiCond560
        CFI EndBlock cfiCond561
        CFI EndBlock cfiCond562
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiCond565
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiCond568
        CFI EndBlock cfiCond569
        CFI EndBlock cfiCond570
        CFI EndBlock cfiCond571
        CFI EndBlock cfiCond572
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiCond575
        CFI EndBlock cfiCond576
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiCond579
        CFI EndBlock cfiCond580
        CFI EndBlock cfiCond581
        CFI EndBlock cfiCond582
        CFI EndBlock cfiCond583
        CFI EndBlock cfiCond584
        CFI EndBlock cfiCond585
        CFI EndBlock cfiCond586
        CFI EndBlock cfiPicker587
// 1735 /******************************************************************************
// 1736 * Prepare scaling coeff to send
// 1737 ******************************************************************************/
// 1738 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1739 void prepareSpecial( BYTE tag, BYTE *p )
prepareSpecial:
        CFI Block cfiBlock588 Using cfiCommon0
        CFI Function prepareSpecial
// 1740 {
        FUNCALL prepareSpecial, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareSpecial, copyMac
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareSpecial, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1741   BYTE *ptr = radioPktBuffer;
// 1742   mymemcpy( ptr,    p,   4 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#(radioPktBuffer & 0xff)
        MOV     R3,#((radioPktBuffer >> 8) & 0xff)
        LCALL   mymemcpy
// 1743   ptr+=4;
// 1744   
// 1745   *ptr++ = tag;
        MOV     A,?V0 + 0
        MOV     DPTR,#(radioPktBuffer + 4)
        MOVX    @DPTR,A
// 1746   *ptr++ = 3 | (page.netId << 2);
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        ANL     A,#0xfc
        ORL     A,#0x3
        LCALL   ?Subroutine79
// 1747   copyMac( ptr );
// 1748   mymemcpy( ptr+6, p+4, 20 );
??CrossCallReturnLabel_256:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x14
        MOV     A,R6
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#((radioPktBuffer + 12) & 0xff)
        MOV     R3,#(((radioPktBuffer + 12) >> 8) & 0xff)
        LCALL   mymemcpy
// 1749 }
        LJMP    ?Subroutine120
        CFI EndBlock cfiBlock588

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiCond589 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_255
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond590 Using cfiCommon0
        CFI (cfiCond590) NoFunction
        CFI (cfiCond590) Conditional ??CrossCallReturnLabel_256
        CFI (cfiCond590) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond590) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond590) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond590) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond590) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond590) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond590) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond590) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond590) CFA_SP SP+0
        CFI (cfiCond590) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker591 Using cfiCommon1
        CFI (cfiPicker591) NoFunction
        CFI (cfiPicker591) Picker
        MOV     DPTR,#(radioPktBuffer + 5)
        MOVX    @DPTR,A
        ; Setup parameters for call to function copyMac
        ; Setup parameters for call to function copyMac
        MOV     R2,#((radioPktBuffer + 6) & 0xff)
        MOV     R3,#(((radioPktBuffer + 6) >> 8) & 0xff)
        LCALL   copyMac
        RET
        CFI EndBlock cfiCond589
        CFI EndBlock cfiCond590
        CFI EndBlock cfiPicker591
// 1750 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1751 void prepareCoeff(void)
prepareCoeff:
        CFI Block cfiBlock592 Using cfiCommon0
        CFI Function prepareCoeff
// 1752 {
        FUNCALL prepareCoeff, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareCoeff, prepareSpecial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
// 1753     BYTE idx;
// 1754     
// 1755     UINT16 *ptrU16 = (UINT16 *)coefficients_buffer;
        MOV     R6,#(coefficients_buffer & 0xff)
        MOV     R7,#((coefficients_buffer >> 8) & 0xff)
// 1756     INT16  *ptrI16 = (INT16 *)&(coefficients_buffer[12]);
// 1757     for( idx = 0;  idx < 7;  idx++) if( idx != 4 ) *ptrU16 ++ = convU( 1E3 * page.linearK[ idx ][0] );  
        MOV     ?V0 + 0,#0x0
        SJMP    ??prepareCoeff_0
??prepareCoeff_1:
        MOV     A,#0x4
        XRL     A,?V0 + 0
        JZ      ??prepareCoeff_2
??prepareCoeff_0:
        ; Setup parameters for call to function convU
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ADD     A,#((page + 40) & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,#(((page + 40) >> 8) & 0xff)
        MOV     DPH,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convU
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine114_0
??CrossCallReturnLabel_353:
        MOV     A,R6
        ADD     A,#0x2
        MOV     A,R7
        ADDC    A,#0x0
        INC     R6
        INC     R6
        MOV     R7,A
??prepareCoeff_2:
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x7
        JC      ??prepareCoeff_1
// 1758     *ptrI16++ = convS( page.linearK[0][1] );
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 44)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 12)
        LCALL   ??Subroutine114_0
// 1759     *ptrI16++ = convS( page.linearK[2][1] );
??CrossCallReturnLabel_354:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 60)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 14)
        LCALL   ??Subroutine114_0
// 1760     *ptrI16++ = convS( page.linearK[5][1] );
??CrossCallReturnLabel_355:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 84)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 16)
        LCALL   ??Subroutine114_0
// 1761     *ptrI16++ = convS( page.linearK[6][1] );
??CrossCallReturnLabel_356:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 92)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 18)
        LCALL   ??Subroutine114_0
// 1762     *ptrI16++ = convS( page.dFk[3] );    
??CrossCallReturnLabel_357:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(page + 24)
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   convS
        MOV     DPTR,#(coefficients_buffer + 20)
        LCALL   ??Subroutine114_0
// 1763     coefficients_buffer[ 22 ] = (BYTE) T3CC0; 
??CrossCallReturnLabel_358:
        MOV     A,0xcd
        MOV     DPTR,#(coefficients_buffer + 22)
        MOVX    @DPTR,A
// 1764     coefficients_buffer[ 23 ] = (BYTE) theOC;
        MOV     DPTR,#theOC
        MOVX    A,@DPTR
        MOV     DPTR,#(coefficients_buffer + 23)
        MOVX    @DPTR,A
// 1765     prepareSpecial( 0xEC, coefficients_buffer ); 
        ; Setup parameters for call to function prepareSpecial
        MOV     R2,#(coefficients_buffer & 0xff)
        MOV     R3,#((coefficients_buffer >> 8) & 0xff)
        MOV     R1,#-0x14
        LCALL   prepareSpecial
// 1766 }
        LJMP    ?Subroutine113
        CFI EndBlock cfiBlock592
        REQUIRE T3CC0
// 1767 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1768 void prepareScaling(void)
prepareScaling:
        CFI Block cfiBlock593 Using cfiCommon0
        CFI Function prepareScaling
// 1769 {
        FUNCALL prepareScaling, prepareSpecial
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
// 1770   BYTE k = (reportScaling-1) / calibrationRepeat;
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x1
        ADD     A,R0
        DEC     R0
        MOV     A,#-0x1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     R4,A
// 1771   page.prepAddr = (UINT16)(&prepareScaling);
        MOV     DPTR,#(page + 220)
        MOV     A,#(prepareScaling & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((prepareScaling >> 8) & 0xff)
        MOVX    @DPTR,A
// 1772   prepareSpecial( 0xED + k, base_ptr + k * 24 ); 
        ; Setup parameters for call to function prepareSpecial
        MOV     A,R4
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#-0x13
        ADD     A,R4
        MOV     R1,A
        LCALL   prepareSpecial
        CFI EndBlock cfiBlock593
// 1773 }
        REQUIRE ?Subroutine120
        ; // Fall through to label ?Subroutine120

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine120:
        CFI Block cfiBlock594 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock594
// 1774 
// 1775 /******************************************************************************
// 1776 * Prepare request to join network
// 1777 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1778 void prepareJoinRequest(void){  
prepareJoinRequest:
        CFI Block cfiBlock595 Using cfiCommon0
        CFI Function prepareJoinRequest
        FUNCALL prepareJoinRequest, mymemcpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareJoinRequest, copyMac
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL prepareJoinRequest, prepareTxBuffer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1779 BYTE *ptr  = radioPktBuffer;
// 1780     //mymemset( ptr, 0xFF, 4); ptr+=4; 
// 1781     *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF; *ptr++ = 0xFF;
        MOV     A,#-0x1
        MOV     DPTR,#radioPktBuffer
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 1)
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 3)
        MOVX    @DPTR,A
// 1782     //mymemcpy( ptr, (BYTE *)&utc, 4 );     mymemcpy( ptr+4, (BYTE *)&ms, 2 ); 
// 1783     mymemcpy( ptr, (BYTE *)&utc, 6 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utc & 0xff)
        MOV     R5,#((utc >> 8) & 0xff)
        MOV     R2,#((radioPktBuffer + 4) & 0xff)
        MOV     R3,#(((radioPktBuffer + 4) >> 8) & 0xff)
        LCALL   mymemcpy
// 1784     copyMac( ptr+6 ); //memcpy( ptr+6, page.myMac, 6 );
        ; Setup parameters for call to function copyMac
        MOV     R2,#((radioPktBuffer + 10) & 0xff)
        MOV     R3,#(((radioPktBuffer + 10) >> 8) & 0xff)
        LCALL   copyMac
// 1785     prepareTxBuffer();      
        ; Setup parameters for call to function prepareTxBuffer
        LCALL   prepareTxBuffer
// 1786     radioPktBufferTx[0] = PACKET_LENGTH_GW_2;
        MOV     A,#0x12
        MOV     DPTR,#radioPktBufferTx
        LJMP    ?Subroutine115
        CFI EndBlock cfiBlock595
// 1787 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1788 void quartz(void)
quartz:
        CFI Block cfiBlock596 Using cfiCommon0
        CFI Function quartz
// 1789 {
        FUNCALL quartz, halWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
// 1790   BYTE counter = 127;
        MOV     R6,#0x7f
// 1791   static BOOL q = 0;
// 1792   
// 1793   if ( q )
        MOV     DPTR,#??q
        MOVX    A,@DPTR
        JNZ     ??quartz_0
// 1794     return;
// 1795   else q = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1796   
// 1797   if ( rcgen )
        MOV     DPTR,#rcgen
        MOVX    A,@DPTR
        JNZ     ??quartz_0
// 1798     return;
// 1799   
// 1800   SLEEP &= ~OSC_PD_BIT;     // powering down all oscillators
        ANL     0xbe,#0xfb
        SJMP    ??quartz_1
// 1801   while(!XOSC_STABLE && counter-- )
// 1802     halWait(2);      // waiting until the oscillator is stable
??quartz_2:
        ; Setup parameters for call to function halWait
        MOV     R1,#0x2
        LCALL   halWait
??quartz_1:
        MOV     A,0xbe
        MOV     C,0xE0 /* A   */.6
        JC      ??quartz_3
        MOV     A,R6
        DEC     R6
        JNZ     ??quartz_2
// 1803   
// 1804   asm("NOP");
??quartz_3:
        NOP
// 1805   CLKCON = 0x89;
        MOV     0xc6,#-0x77
// 1806   SLEEP |= OSC_PD_BIT;      // powering down the unused oscillator
        ORL     0xbe,#0x4
// 1807 }
??quartz_0:
        SJMP    ?Subroutine120
        CFI EndBlock cfiBlock596
        REQUIRE SLEEP
        REQUIRE CLKCON

        RSEG XDATA_Z:XDATA:NOROOT(0)
??q:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 1808 /******************************************************************************
// 1809 * Send the previously prepared data package
// 1810 ******************************************************************************/
// 1811 extern DMA_DESC dmaConfig[3]; 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1812 void sendData(BYTE *buffer, BOOL isRepeater ){  
sendData:
        CFI Block cfiBlock597 Using cfiCommon0
        CFI Function sendData
        FUNCALL sendData, setupRepeater
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 1813     //if( page.fuseComm ) return;
// 1814     if( ((buffer[0] != PACKET_LENGTH_ED) && (buffer[0] != PACKET_LENGTH_GW_2)) || txDisabled  )  return; 
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x22
        XRL     A,R4
        JZ      ??sendData_0
        MOV     A,#0x12
        XRL     A,R4
        JNZ     ??sendData_1
??sendData_0:
        MOV     DPTR,#txDisabled
        MOVX    A,@DPTR
        JNZ     ??sendData_1
// 1815     RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
        MOV     0xe1,#0x4
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x10
        MOVX    @DPTR,A
// 1816     //setupTxBuffer( buffer );
// 1817     SET_WORD(dmaConfig[1].SRCADDRH,  dmaConfig[1].SRCADDRL, buffer );
        MOV     A,R3
        MOV     DPTR,#(dmaConfig + 8)
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#(dmaConfig + 9)
        MOVX    @DPTR,A
// 1818     setupRepeater( isRepeater );
        ; Setup parameters for call to function setupRepeater
        LCALL   setupRepeater
// 1819     /*
// 1820     if( page.is500Always || (page.isRelay && isRepeater) ){
// 1821                                                              atomicChange( CheckFlag, 5*TICKS_IN_MS );
// 1822                                                            //if( page.use250kbod ) need_wiggle = TRUE; 
// 1823     }else if( page.use12kbod && page.useFEC )                atomicChange( CheckFlag, 2*_slot - TICKS_IN_MS );
// 1824     else                                                     atomicChange( CheckFlag, _slot   - TICKS_IN_MS );
// 1825     */
// 1826     //quartz();
// 1827     //INT_GLOBAL_ENABLE(INT_OFF);
// 1828         si->radioMode = RADIO_MODE_TX;        
        LCALL   ?Subroutine43
??CrossCallReturnLabel_101:
        MOV     A,#0x10
        MOVX    @DPTR,A
// 1829         // Send the packet
// 1830         DMAARM = DMAARM_CHANNEL1;     // Arm DMA channel 1
        MOV     0xd6,#0x2
// 1831         RFST   = STROBE_TX;            // Switch radio to TX
        MOV     0xe1,#0x3
// 1832     //INT_GLOBAL_ENABLE(INT_ON); 
// 1833 }
??sendData_1:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock597
        REQUIRE DMAARM
        REQUIRE RFST
// 1834 /******************************************************************************
// 1835 * @fn  25*.84
// 1836 WPackage
// 1837 * @brief       This function makes appropriate actions after receiving message from Gateway
// 1838 * Parameters:
// 1839 * @return void
// 1840 ******************************************************************************/
// 1841 #define NDEV_MASK   0x1F
// 1842 #define JOIN_MASK   0x80
// 1843 #define HOP_MASK    0x40
// 1844 

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1845 static UINT32 utcLocal = 0;
utcLocal:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 1846 static UINT16 msLocal  = 0;
msLocal:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 1847 
// 1848 extern INT16 perRssiOffset;

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 1849 void parseGWPackage(void){
parseGWPackage:
        CFI Block cfiBlock598 Using cfiCommon0
        CFI Function parseGWPackage
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, sendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, abs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, parseCommands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseGWPackage, setupRepeater
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
// 1850 static BYTE bunch, plen;
// 1851 signed char o = FREQEST, sh = FSCTRL0;
        MOV     DPTR,#-0x20c8
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPTR,#-0x20f8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
// 1852 INT16 shift, networkDelay;
// 1853 BYTE tmp;
// 1854 //UINT16 temperatureProtectionDelay;
// 1855 BOOL goodForCommands = FALSE;
// 1856 //BOOL newProtocol;
// 1857     //if( page.fuseComm ) return;
// 1858     rc(); was_listening =  FALSE;
        CLR     A
        MOV     DPTR,#was_listening
        MOVX    @DPTR,A
// 1859     ticks2ProcessCmd = 0;    
        MOV     DPTR,#ticks2ProcessCmd
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1860     plen = radioPktBufferRx[0];
        MOV     DPTR,#radioPktBufferRx
        MOVX    A,@DPTR
        MOV     DPTR,#??plen
        LCALL   ?Subroutine78
// 1861     /*
// 1862     if( ( ( plen != PACKET_LENGTH ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
// 1863         atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
// 1864         return;
// 1865     }
// 1866     */
// 1867     if( ( 0 == ( radioPktBufferRx[ plen + 2 ] & 0x80 ) ) || ( ( plen != PACKET_LENGTH_GW ) && ( plen != PACKET_LENGTH_GW_2 ) ) ){
??CrossCallReturnLabel_254:
        ANL     A,#0x60
        MOV     R2,A
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#((radioPktBufferRx + 2) & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#(((radioPktBufferRx + 2) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_0
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        XRL     A,#0x22
        JZ      ??parseGWPackage_1
        MOVX    A,@DPTR
        XRL     A,#0x12
        JZ      ??parseGWPackage_1
// 1868         //atomicChange( ReceiveData,  TICKS_IN_MS );  // receive in 2 ms after getting any package, even a broken one
// 1869         if( page.isRelay && (!page.is500Always) ) setupRepeater( got_gw );  else setupRepeater( FALSE ); 
??parseGWPackage_0:
        MOV     A,#0x20
        XRL     A,R2
        JNZ     ??parseGWPackage_2
??parseGWPackage_3:
        ; Setup parameters for call to function setupRepeater
        MOV     DPTR,#got_gw
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??parseGWPackage_4
??parseGWPackage_2:
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
??parseGWPackage_4:
        LCALL   setupRepeater
// 1870         receive();
        ; Setup parameters for call to function receive
        LCALL   receive
// 1871         return;
        LJMP    ??parseGWPackage_5
// 1872     }
// 1873     
// 1874     if( page.isRelay && (!page.is500Always) && ( radioPktBufferRx[1] == page.gwAddr ) && (ADDR == page.gwAddr) ){ 
??parseGWPackage_1:
        MOV     DPTR,#(radioPktBufferRx + 1)
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,#0x20
        XRL     A,R2
        JNZ     ??parseGWPackage_6
        MOV     DPTR,#(page + 191)
        MOVX    A,@DPTR
        MOV     R4,A
        XRL     A,R3
        JNZ     ??parseGWPackage_6
        MOV     DPTR,#-0x20fb
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??parseGWPackage_6
// 1875         sendData( radioPktBufferRx, FALSE );  return;
        ; Setup parameters for call to function sendData
        MOV     R1,#0x0
        MOV     R2,#(radioPktBufferRx & 0xff)
        MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
        LCALL   sendData
        LJMP    ??parseGWPackage_5
// 1876     }else if( radioPktBufferRx[1] == page.edAddr ){
??parseGWPackage_6:
        MOV     DPTR,#(page + 190)
        MOVX    A,@DPTR
        XRL     A,R3
        JZ      $+5
        LJMP    ??parseGWPackage_7
// 1877         goodForCommands = ( 0 != (PKTSTATUS&0x80) ); 
        MOV     DPTR,#-0x20c4
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_8
        SETB    B.0
        SJMP    ??parseGWPackage_9
??parseGWPackage_8:
        CLR     B.0
??parseGWPackage_9:
        MOV     C,B.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     R6,A
// 1878         //P1_1 ^= 1;
// 1879         //decodeDelay = *((BYTE *)0xF538);
// 1880         if( (!page.is500Always) && page.isRelay ) sendData( radioPktBufferRx, TRUE );  
        MOV     A,#0x20
        XRL     A,R2
        JNZ     ??parseGWPackage_10
        ; Setup parameters for call to function sendData
        MOV     R1,#0x1
        MOV     R2,#(radioPktBufferRx & 0xff)
        MOV     R3,#((radioPktBufferRx >> 8) & 0xff)
        LCALL   sendData
// 1881         decodeDelay = *((BYTE *)0xF538);
??parseGWPackage_10:
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     DPTR,#decodeDelay
        LCALL   ?Subroutine119
// 1882         loadIV( page.curIV );  decode( (plen-2), (char *)(radioPktBufferRx+2), (char *)radioPktBuffer );
??CrossCallReturnLabel_409:
        ; Setup parameters for call to function load
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        MOV     R1,#0x6
        LCALL   ??Subroutine81_1
??CrossCallReturnLabel_265:
        ; Setup parameters for call to function code
        MOV     ?V0 + 2,#(radioPktBuffer & 0xff)
        MOV     ?V0 + 3,#((radioPktBuffer >> 8) & 0xff)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#((radioPktBufferRx + 2) & 0xff)
        MOV     R5,#(((radioPktBufferRx + 2) >> 8) & 0xff)
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#-0x2
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   `code`
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
// 1883         
// 1884         // for SDAG debug
// 1885         //mymemcpy( (BYTE *)radioPktBuffer, (BYTE *)(radioPktBufferRx+2), (plen-2));
// 1886         
// 1887         bunch = radioPktBuffer[0]; ndev = radioPktBuffer[1]; 
        MOV     DPTR,#radioPktBuffer
        MOVX    A,@DPTR
        MOV     DPTR,#??bunch
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBuffer + 1)
        MOVX    A,@DPTR
        MOV     DPTR,#ndev
        MOVX    @DPTR,A
// 1888         //mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 4 );   mymemcpy( (BYTE *)&msLocal, radioPktBuffer+6, 2);
// 1889         mymemcpy( (BYTE *)&utcLocal, radioPktBuffer+2, 6) ; //ndev& 0x20 ? 5 : 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#((radioPktBuffer + 2) & 0xff)
        MOV     R5,#(((radioPktBuffer + 2) >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcpy
// 1890         if( 
// 1891             ((ndev & NDEV_MASK ) <= 16) && ( msLocal < 1000 ) &&
// 1892             //((utcLocal > utcLast) || ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4 )==0 && msLocal>msLast)) // ver G
// 1893             ((utcLocal > utcLast) || ( (mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal != msLast) ) ) //protects ONLY from replay attack
// 1894         ){
        MOVX    A,@DPTR
        ANL     A,#0x1f
        CLR     C
        SUBB    A,#0x11
        JC      $+5
        LJMP    ??parseGWPackage_7
        MOV     DPTR,#msLocal
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x18
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x3
        JC      $+5
        LJMP    ??parseGWPackage_7
        MOV     DPTR,#utcLocal
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPH,#((utcLast >> 8) & 0xff)
        MOV     DPL,#(utcLast & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??parseGWPackage_11
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JZ      $+5
        LJMP    ??parseGWPackage_7
        MOV     DPTR,#msLocal
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_175:
        MOV     DPTR,#msLast
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??parseGWPackage_12
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??parseGWPackage_12:
        JNZ     $+5
        LJMP    ??parseGWPackage_7
// 1895             BYTE goodTime = ( (utcLocal > utcLast) || ( ( mymemcmp( (BYTE *)&utcLocal, (BYTE *)&utcLast, 4)==0) && (msLocal > msLast) ) ); 
??parseGWPackage_11:
        MOV     DPTR,#utcLocal
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPH,#((utcLast >> 8) & 0xff)
        MOV     DPL,#(utcLast & 0xff)
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??parseGWPackage_13
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     R2,#(utcLocal & 0xff)
        MOV     R3,#((utcLocal >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseGWPackage_14
        MOV     DPTR,#msLocal
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_176:
        MOV     DPH,#((msLast >> 8) & 0xff)
        MOV     DPL,#(msLast & 0xff)
        LCALL   ?Subroutine95
??CrossCallReturnLabel_303:
        JNC     ??parseGWPackage_14
??parseGWPackage_13:
        MOV     R2,#0x1
        SJMP    ??parseGWPackage_15
??parseGWPackage_14:
        MOV     R2,#0x0
??parseGWPackage_15:
        MOV     ?V0 + 2,R2
// 1896             //P1_1 ^= 1;
// 1897             //newProtocol = radioPktBufferRx[ plen ] & 1;
// 1898             //temperatureProtectionDelay = computeTI( si->packetReceived );
// 1899             temperatureProtectionDelay = *((BYTE *)0xF538);
        MOV     DPTR,#-0xac8
        MOVX    A,@DPTR
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ?Subroutine119
// 1900             if( ++cyclesFromStart > 50 ) wasAHardResetOrPowerOn = FALSE;
??CrossCallReturnLabel_410:
        LCALL   ?Subroutine14
??CrossCallReturnLabel_41:
        JC      ??parseGWPackage_16
        CLR     A
        MOV     DPTR,#wasAHardResetOrPowerOn
        MOVX    @DPTR,A
// 1901 
// 1902             //lastRssi = convertRssiByte( (radioPktBufferRx[ plen + 1 ]) );
// 1903             tmp = radioPktBufferRx[ plen + 1 ];
??parseGWPackage_16:
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#((radioPktBufferRx + 1) & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#(((radioPktBufferRx + 1) >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
// 1904             if(tmp < 128)   lastRssi = (tmp >> 1) - perRssiOffset;
        CLR     C
        SUBB    A,#-0x80
        JNC     ??parseGWPackage_17
        MOV     A,?V0 + 4
        CLR     C
        RRC     A
        MOV     R2,A
        MOV     DPTR,#perRssiOffset
        LCALL   ?Subroutine59
??CrossCallReturnLabel_162:
        MOV     R0,A
        CLR     A
        SUBB    A,R1
        SJMP    ??parseGWPackage_18
// 1905             else            lastRssi =(((UINT16)tmp - 256) >> 1) - perRssiOffset;
??parseGWPackage_17:
        CLR     A
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,#-0x1
        RRC     A
        MOV     A,R0
        RRC     A
        MOV     R0,A
        MOV     DPTR,#perRssiOffset
        LCALL   ??Subroutine45_0
??CrossCallReturnLabel_108:
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        MOV     A,#0x7f
        SUBB    A,R3
??parseGWPackage_18:
        MOV     R1,A
        MOV     DPTR,#lastRssi
        LCALL   ??Subroutine67_0
// 1906 
// 1907             if( !page.is500Always ){
??CrossCallReturnLabel_210:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??parseGWPackage_19
// 1908                 //if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
// 1909                 //else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
// 1910                 if(       (o > 0) && (o >  1) ) o = 1;
        MOV     A,R7
        CLR     C
        SUBB    A,#0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     A,R7
        JC      ??parseGWPackage_20
        CLR     C
        SUBB    A,#0x2
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??parseGWPackage_21
        MOV     R7,#0x1
        SJMP    ??parseGWPackage_21
// 1911                 else if(  (o < 0) && (o < -1) ) o = -1;
??parseGWPackage_20:
        CLR     C
        LCALL   ??Subroutine64_0
??CrossCallReturnLabel_192:
        JNC     ??parseGWPackage_21
        MOV     A,R7
        CLR     C
        SUBB    A,#-0x1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??parseGWPackage_21
        MOV     R7,#-0x1
// 1912                 shift = (INT16)sh + (INT16)o;
??parseGWPackage_21:
        MOV     A,?V0 + 0
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R7
        MOV     R2,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V0 + 1,A
// 1913                 if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
        ; Setup parameters for call to function abs
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   abs
        CLR     C
        MOV     A,R2
        SUBB    A,#0x61
        LCALL   ?Subroutine64
??CrossCallReturnLabel_193:
        JC      ??parseGWPackage_22
        ; Setup parameters for call to function addDF
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        MOV     R3,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R4,A
        MOV     R5,A
        LCALL   addDF
        SJMP    ??parseGWPackage_19
??parseGWPackage_22:
        MOV     A,?V0 + 0
        MOV     DPTR,#-0x20f8
        MOVX    @DPTR,A
// 1914             }
// 1915 //            INT32 f = 0; ((BYTE *)(&f))[0] = FREQ0; ((BYTE *)(&f))[1] = FREQ1; ((BYTE *)(&f))[2] = FREQ2; decodeDelay = (INT16)( f-defFreq );
// 1916 
// 1917             if( goodForCommands /*&& ( page.is500Always || ( 0!=(LQI & 0x7F) ) )*/ ){
??parseGWPackage_19:
        MOV     A,R6
        JNZ     $+5
        LJMP    ??parseGWPackage_7
// 1918                 if( isOnTestStand ){ isOnTestStand--; /* cmdCount--; */}
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_23
        DEC     A
        MOVX    @DPTR,A
// 1919                 if( alignMPP ){ alignMPP = FALSE; ticks[ MppCycle ] = _mppCycle; }
??parseGWPackage_23:
        MOV     DPTR,#alignMPP
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_411
        CLR     A
        LCALL   ?Subroutine47
??CrossCallReturnLabel_115:
        MOV     A,#0x78
        LCALL   ?Subroutine119
// 1920                 P1_1 ^= 1;
??CrossCallReturnLabel_411:
        XRL     0x90,#0x2
        MOV     A,0x90
// 1921                 bunchCount = 18;
        MOV     A,#0x12
        MOV     DPTR,#bunchCount
        LCALL   ?Subroutine70
// 1922                 mymemcpy( (BYTE *)&cycles2SoftKick, (BYTE *)&page.defCycles2SoftKick, 4 ); //&cyclesDefaults[4], 4 );//(BYTE *)&page.defCycles2SoftKick, 4 );
// 1923                 if( goodTime ) mymemcpy( (BYTE *)&utcLast, (BYTE *)&utcLocal, 6 );
??CrossCallReturnLabel_226:
        MOV     A,?V0 + 2
        JZ      ??parseGWPackage_24
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
        MOV     R2,#(utcLast & 0xff)
        MOV     R3,#((utcLast >> 8) & 0xff)
        LCALL   mymemcpy
// 1924                 lastCycle = _slot * ( (ndev & NDEV_MASK) + ((ndev & JOIN_MASK)?1:4) ) + _loop_delay;
??parseGWPackage_24:
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??parseGWPackage_25
        MOV     R2,#0x1
        SJMP    ??parseGWPackage_26
??parseGWPackage_25:
        MOV     R2,#0x4
??parseGWPackage_26:
        MOV     DPTR,#_slot
        LCALL   ?Subroutine26
??CrossCallReturnLabel_68:
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1f
        ANL     A,R0
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#_loop_delay
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#lastCycle
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine47
// 1925                 //if( ( (2+(ndev & NDEV_MASK)) % 3 ) == 0 ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  _mppCycle; cnt = 255; } }
// 1926                 decodeDelay = ticks[ MppCycle ];
??CrossCallReturnLabel_116:
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_177:
        MOV     DPTR,#decodeDelay
        LCALL   ??Subroutine67_0
// 1927                 // if( page.synch_freq && ((2+(ndev & NDEV_MASK)%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ ticks[ MppCycle ] =  page.synch_phase; cnt = page.synch_freq; } }
// 1928                 if( page.synch_freq && (((2+(ndev & NDEV_MASK))%3)==0) ){ static BYTE cnt = 1; if( 0 == --cnt ){ *((INT16 *)0xF500) = page.synch_phase; cnt = page.synch_freq; } }
??CrossCallReturnLabel_211:
        MOV     DPTR,#(page + 162)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_27
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        ANL     A,#0x1f
        ADD     A,#0x2
        MOV     B,#0x3
        LCALL   ?SC_DIV_MOD
        MOV     A,B
        JNZ     ??parseGWPackage_27
        MOV     DPTR,#??cnt
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JNZ     ??parseGWPackage_27
        MOV     DPTR,#(page + 161)
        MOVX    A,@DPTR
        MOV     DPTR,#-0xb00
        LCALL   ?Subroutine119
??CrossCallReturnLabel_412:
        MOV     DPTR,#(page + 162)
        MOVX    A,@DPTR
        MOV     DPTR,#??cnt
        MOVX    @DPTR,A
// 1929                 networkDelay = page.is500Always ? 0 : (2*TICKS_IN_MS);
??parseGWPackage_27:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_28
        MOV     R2,#0x0
        SJMP    ??parseGWPackage_29
??parseGWPackage_28:
        MOV     R2,#0x4
// 1930                 if( bunch == 0 ){ 
??parseGWPackage_29:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ?Subroutine56
??CrossCallReturnLabel_152:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        JNZ     ??parseGWPackage_30
// 1931                     packagePrepared = FALSE;
        CLR     A
        MOV     DPTR,#packagePrepared
        MOVX    @DPTR,A
// 1932                     atomicChange( DelayedPrepareData, 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay ); // was 40, give more time 
        MOV     A,#0xa
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        CLR     A
        LCALL   ?Subroutine13
??CrossCallReturnLabel_38:
        MOVX    @DPTR,A
// 1933                     mymemcpy( (BYTE *)&utc, (BYTE *)&utcLocal, 6 ); 
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
        MOV     R2,#(utc & 0xff)
        MOV     R3,#((utc >> 8) & 0xff)
        LCALL   mymemcpy
// 1934                     if( ticks[ DelayedPrepareData ] <= 0 ) ticks[ DelayedPrepareData ] = -1;
        LCALL   ?Subroutine39
??CrossCallReturnLabel_94:
        LCALL   ?Subroutine8
??CrossCallReturnLabel_31:
        JNC     ??parseGWPackage_31
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??CrossCallReturnLabel_39
// 1935                     //zeroPackageWasNotReceived = FALSE;
// 1936                 } else {
// 1937                     if( page.use12kbod ){
??parseGWPackage_30:
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        CLR     A
        SUBB    A,#0x0
        MOV     R1,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        MOV     A,R6
        JNC     ??parseGWPackage_32
// 1938                         if( page.gbunch && (page.gbunch - bunch) <= 18 )
        JZ      ??parseGWPackage_31
        CLR     C
        MOV     A,R0
        SUBB    A,#0x13
        MOV     A,R1
        LCALL   ??Subroutine64_0
??CrossCallReturnLabel_194:
        JNC     ??parseGWPackage_31
// 1939                             atomicChange( DelayedPrepareData, lastCycle*( page.gbunch - bunch ) + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine26
??CrossCallReturnLabel_69:
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,#0xa
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,R1
        SJMP    ??parseGWPackage_33
// 1940                     }else{
// 1941                         if( page.gbunch && (page.gbunch - bunch) == 1 )
??parseGWPackage_32:
        JZ      ??parseGWPackage_31
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??parseGWPackage_34
        MOV     A,R1
??parseGWPackage_34:
        JNZ     ??parseGWPackage_31
// 1942                             atomicChange( DelayedPrepareData, lastCycle + 5*TICKS_IN_MS - networkDelay - temperatureProtectionDelay );  // was 40, give more time
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#0xa
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
??parseGWPackage_33:
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R1
        LCALL   ?Subroutine13
??CrossCallReturnLabel_39:
        MOVX    @DPTR,A
// 1943                     }
// 1944                 }
// 1945                 got_gw = 8;
??parseGWPackage_31:
        MOV     A,#0x8
        MOV     DPTR,#got_gw
        LCALL   ?Subroutine76
// 1946                 atomicChange( ReceiveData, lastCycle - _slot - 9*TICKS_IN_MS - temperatureProtectionDelay );  
??CrossCallReturnLabel_246:
        ADD     A,#0x8
        LCALL   ?Subroutine56
??CrossCallReturnLabel_153:
        MOV     DPTR,#_slot
        LCALL   ??Subroutine45_0
??CrossCallReturnLabel_109:
        MOV     DPH,#((lastCycle >> 8) & 0xff)
        MOV     DPL,#(lastCycle & 0xff)
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R3
        MOV     R3,A
        MOV     A,#-0x12
        ADD     A,R2
        MOV     R4,A
        MOV     A,#-0x1
        LCALL   ?Subroutine11
// 1947                 curBunch = bunch;
??CrossCallReturnLabel_366:
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        MOV     DPTR,#curBunch
        LCALL   ?Subroutine74
// 1948                 //if( bunch != 0xFF && maxBunch < curBunch ) maxBunch = curBunch;
// 1949                 if( !page.is500Always ) {                
??CrossCallReturnLabel_236:
        JC      ??parseGWPackage_35
// 1950                     /*
// 1951                     if(       (o > 0) && (o >  page.max_off) ) o = page.max_off;
// 1952                     else if(  (o < 0) && (o < -page.max_off) ) o = -page.max_off;
// 1953                     shift = (INT16)sh + (INT16)o;
// 1954                     if( abs( shift ) > 96 )   addDF( shift<<2 );  else  FSCTRL0 = (INT8)shift; 
// 1955                     */
// 1956                     if( ndev & HOP_MASK ){ 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_36
// 1957                         atomicChange( Hop, ticks[ ReceiveData ] - 0*TICKS_IN_MS /*- temperatureProtectionDelay*/ ); 
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_178:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine67_0
// 1958                         cyclesToHop = 8;
??CrossCallReturnLabel_212:
        MOV     A,#0x8
        MOV     DPTR,#cyclesToHop
        SJMP    ??parseGWPackage_37
// 1959                     }else                { cyclesToHop = 0;    atomicChange( Hop, 0 ); }
??parseGWPackage_36:
        CLR     A
        MOV     DPTR,#cyclesToHop
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
??parseGWPackage_37:
        MOVX    @DPTR,A
// 1960                 }
// 1961     
// 1962                 atomicChange( Cycle, lastCycle + 1 );
??parseGWPackage_35:
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        LCALL   ??Subroutine7_0
// 1963 
// 1964                 if( page.is500Always ){
??CrossCallReturnLabel_365:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        MOV     DPTR,#lastRssi
        JNC     ??parseGWPackage_38
// 1965                       if( lastRssi > -95 ) //page.CriticalLevel500 ) 
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x5e
        LCALL   ?Subroutine63
??CrossCallReturnLabel_380:
        JC      ??parseGWPackage_39
// 1966                           { cyclesToStep500Channel = page.defCyclesToStep500Channel; cyclesTo10 = page.defCyclesTo10; }
        LCALL   ?Subroutine36
??CrossCallReturnLabel_90:
        MOV     DPTR,#(page + 202)
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_179:
        MOV     DPTR,#cyclesTo10
        SJMP    ??CrossCallReturnLabel_161
// 1967                           //{ cyclesToStep500Channel = cyclesDefaults[2]; cyclesTo10 = cyclesDefaults[1]; }
// 1968                       else flags[ Cycle ] = TRUE;
??parseGWPackage_39:
        LCALL   ?Subroutine16
??CrossCallReturnLabel_46:
        SJMP    ??parseGWPackage_40
// 1969                 }else if( lastRssi > -102 ) //page.CriticalLevel10 )  
??parseGWPackage_38:
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x65
        LCALL   ?Subroutine63
??CrossCallReturnLabel_381:
        JC      ??parseGWPackage_39
// 1970                           { cyclesTo500 = page.defCyclesTo500;                       cycles2Step10Channel = page.defCyclesToStep10Channel; }
        MOV     DPTR,#(page + 200)
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_180:
        MOV     DPTR,#cyclesTo500
        LCALL   ??Subroutine67_0
??CrossCallReturnLabel_213:
        LCALL   ?Subroutine58
??CrossCallReturnLabel_161:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??parseGWPackage_40:
        MOVX    @DPTR,A
// 1971                           //{ cyclesTo500 = cyclesDefaults[0];                       cycles2Step10Channel = cyclesDefaults[3]; }
// 1972                       else flags[ Cycle ] = TRUE;
// 1973             
// 1974                 BYTE b = bunch;
        MOV     DPTR,#??bunch
        MOVX    A,@DPTR
        MOV     R4,A
// 1975                 if( b!=255 && page.rbunch ) b %= page.rbunch;
        MOV     A,#-0x1
        XRL     A,R4
        JZ      ??parseGWPackage_41
        MOV     DPTR,#(page + 157)
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_41
        MOV     B,A
        MOV     A,R4
        DIV     AB
        MOV     R4,B
// 1976             
// 1977                 networkDelay = _slot * page.netId + _gw_delay - temperatureProtectionDelay;
??parseGWPackage_41:
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#_slot
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_181:
        MOV     A,R0
        MOV     B,R5
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,R5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#_gw_delay
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ?Subroutine59
??CrossCallReturnLabel_163:
        MOV     R2,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R3,A
// 1978 
// 1979                 if(    (b!=0xFF) && ( b == page.myBunch ) )
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x6
        LCALL   ?Subroutine56
??CrossCallReturnLabel_154:
        MOV     DPTR,#(page + 3)
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#-0x1
        XRL     A,R4
        JZ      ??parseGWPackage_42
        MOV     A,R6
        XRL     A,R4
        JNZ     ??parseGWPackage_42
// 1980                     atomicChange( SendData, networkDelay );
??parseGWPackage_43:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LJMP    ??parseGWPackage_44
// 1981                 else if( page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)<=18 ) && ((ndev & NDEV_MASK ) > page.netId) )
??parseGWPackage_42:
        MOV     ?V0 + 0,R4
        MOV     A,R6
        CLR     C
        SUBB    A,?V0 + 0
        MOV     ?V0 + 0,A
        CLR     A
        SUBB    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        ANL     A,#0x1f
        MOV     R7,A
        MOV     DPTR,#(page + 158)
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        MOV     A,?V0 + 2
        JNC     ??parseGWPackage_45
        JZ      ??parseGWPackage_46
        MOV     A,#-0x1
        XRL     A,R6
        JZ      ??parseGWPackage_46
        MOV     A,R4
        CLR     C
        SUBB    A,R6
        JC      $+5
        LJMP    ??parseGWPackage_47
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x13
        MOV     A,?V0 + 1
        LCALL   ??Subroutine64_0
??CrossCallReturnLabel_195:
        JC      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,R5
        CLR     C
        SUBB    A,R7
        JC      $+5
        LJMP    ??parseGWPackage_47
// 1982                     atomicChange( SendData, (page.myBunch-b)*lastCycle + networkDelay );
        MOV     DPTR,#lastCycle
        LCALL   ?Subroutine53
??CrossCallReturnLabel_135:
        XCH     A,R4
        MOV     R6,B
        MOV     B,?V0 + 1
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,?V0 + 0
        MOV     A,R5
        MUL     AB
        ADD     A,R6
        MOV     R5,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R5
??parseGWPackage_48:
        MOV     R3,A
        SJMP    ??parseGWPackage_43
// 1983                 else if( !page.use12kbod && page.gbunch && (page.myBunch != 0xFF) && (b < page.myBunch) && ( (page.myBunch-b)==1 ) && ((ndev & NDEV_MASK ) > page.netId) )
??parseGWPackage_45:
        JZ      ??parseGWPackage_46
        MOV     A,#-0x1
        XRL     A,R6
        JZ      ??parseGWPackage_46
        MOV     A,R4
        CLR     C
        SUBB    A,R6
        JC      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??parseGWPackage_49
        MOV     A,?V0 + 1
??parseGWPackage_49:
        JZ      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,R5
        CLR     C
        SUBB    A,R7
        JC      $+5
        LJMP    ??parseGWPackage_47
// 1984                     atomicChange( SendData, lastCycle + networkDelay );
        MOV     DPTR,#lastCycle
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        SJMP    ??parseGWPackage_48
// 1985                 else if( (page.myBunch == 0xFF) && (page.netId == 0xFF) && ((ndev & JOIN_MASK) == 0) ) {
??parseGWPackage_46:
        MOV     A,#-0x1
        XRL     A,R6
        JZ      $+5
        LJMP    ??parseGWPackage_47
        MOV     A,#-0x1
        XRL     A,R5
        JZ      $+5
        LJMP    ??parseGWPackage_47
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     $+5
        LJMP    ??parseGWPackage_47
// 1986                     ticks[ DelayedPrepareData ] = 0; 
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1987                     if( joinRequestWasSend > 0 )  joinRequestWasSend --;    
        MOV     DPTR,#joinRequestWasSend
        MOVX    A,@DPTR
        JZ      ??parseGWPackage_50
        DEC     A
        SJMP    ??parseGWPackage_44
// 1988                     else {
// 1989                         ADCCON1 &= 0xF3; ADCCON1 |= 4;
??parseGWPackage_50:
        ANL     0xb4,#0xf3
        MOV     A,0xb4
        ORL     0xb4,#0x4
// 1990                         joinRequestWasSend = page.network_cnst_1 + RNDH % page.network_cnst_2; 
        MOV     A,0xbd
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#(page + 229)
        MOVX    A,@DPTR
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        DIV     AB
        MOV     DPTR,#(page + 228)
        MOV     R2,B
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     DPTR,#joinRequestWasSend
        MOVX    @DPTR,A
// 1991                         atomicChange( SendData, (ndev & NDEV_MASK) * _slot + (RNDL % 5) * _join_slot + _gw_delay - temperatureProtectionDelay );    // 12 * 
        MOV     DPTR,#ndev
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1f
        ANL     A,R2
        MOV     ?V0 + 0,A
        MOV     DPTR,#_slot
        LCALL   ?Subroutine53
??CrossCallReturnLabel_136:
        MOV     R4,A
        MOV     R2,B
        MOV     B,?V0 + 0
        MOV     A,R5
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        MOV     A,0xbc
        MOV     B,#0x5
        DIV     AB
        MOV     ?V0 + 0,B
        MOV     DPTR,#_join_slot
        LCALL   ??Subroutine45_0
??CrossCallReturnLabel_110:
        MOV     A,R2
        MUL     AB
        MOV     R2,A
        MOV     R6,B
        MOV     B,?V0 + 0
        MOV     A,R3
        MUL     AB
        ADD     A,R6
        MOV     R3,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R5
        MOV     R3,A
        MOV     DPTR,#_gw_delay
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine11
// 1992                         flags[ PrepareJoin ] = TRUE; 
??CrossCallReturnLabel_367:
        MOV     DPTR,#flags
        LCALL   ?Subroutine50
??CrossCallReturnLabel_128:
        MOV     A,#0x1
??parseGWPackage_44:
        MOVX    @DPTR,A
// 1993                     }
// 1994                 }            
// 1995 
// 1996                 if( ticks[ SendData ] ){
??parseGWPackage_47:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??parseGWPackage_51
        INC     DPTR
        MOVX    A,@DPTR
??parseGWPackage_51:
        JZ      ??parseGWPackage_52
// 1997                 //signed char adjustment = 5*TICKS_IN_MS; // was 24;
// 1998                 //    if( bunch == 0 )                adjustment -= 8*TICKS_IN_MS;  // was 41;
// 1999                 signed char adjustment = -3*TICKS_IN_MS; 
        MOV     R2,#-0x6
// 2000                     if( plen == PACKET_LENGTH_GW_2) adjustment += 11*TICKS_IN_MS; // was 57; 
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        XRL     A,#0x12
        JNZ     ??parseGWPackage_53
        MOV     R2,#0x10
// 2001                     if( page.is500Always ){
??parseGWPackage_53:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??parseGWPackage_54
// 2002                         if( page.use250kbod )     adjustment -= 5*TICKS_IN_MS+3; 
        MOV     DPTR,#(page + 219)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??parseGWPackage_55
        MOV     A,#-0xd
        SJMP    ??parseGWPackage_56
// 2003                         else                      adjustment -= 5*TICKS_IN_MS; // was 22;
??parseGWPackage_55:
        MOV     A,#-0xa
??parseGWPackage_56:
        ADD     A,R2
        MOV     R2,A
// 2004                     }//else if( page.isRelay )        adjustment -= TICKS_IN_MS/2; // 2; // commented 20 Feb 16:45 in order to make sure that repeater works when it is right after slave
// 2005                     ticks[ SendData ] +=  adjustment;
??parseGWPackage_54:
        MOV     A,R2
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOVX    @DPTR,A
// 2006                 }
// 2007 
// 2008                 if( (!page.is500Always) && page.isRelay ) tickWait( 2*TICKS_IN_MS+1 ); // was 12
??parseGWPackage_52:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        JNZ     ??parseGWPackage_57
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x5
        LCALL   tickWait
// 2009                 parseCommands( plen-10 );
??parseGWPackage_57:
        ; Setup parameters for call to function parseCommands
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOV     R1,A
        LCALL   parseCommands
// 2010                 if( page.treatLastByteAsChannel ){ if( !page.is500Always && (cyclesTo500 < 200) ){ curChannel = CHANNR = radioPktBufferRx[ plen ]; } }
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x48
        XRL     A,#0x8
        JNZ     ??parseGWPackage_58
        MOV     DPTR,#cyclesTo500
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x38
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JNC     ??parseGWPackage_58
        MOV     DPTR,#??plen
        MOVX    A,@DPTR
        ADD     A,#(radioPktBufferRx & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((radioPktBufferRx >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
// 2011                 
// 2012                 //lastRssi = radioPktBufferRx[ plen ];
// 2013                 //setByte( SET_CUR_CHANNEL, radioPktBuffer[7] );
// 2014                 
// 2015                 if( ticks[ SendData ] < 0 ) ticks[ SendData ] = 0;
??parseGWPackage_58:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x6
        LCALL   ?Subroutine55
??CrossCallReturnLabel_147:
        LCALL   ?Subroutine61
??CrossCallReturnLabel_187:
        JNC     ??parseGWPackage_7
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2016             }
// 2017         }//else ticks[ ReceiveData ] = 2;
// 2018     }
// 2019     setupRepeater( FALSE ); 
??parseGWPackage_7:
        ; Setup parameters for call to function setupRepeater
        MOV     R1,#0x0
        LCALL   setupRepeater
// 2020     //if( !enable2SendData ){
// 2021     //    flags[ PrepareData ] = 0; flags[ SendData ] = 0; 
// 2022     //}else 
// 2023 //    if( (!page.is500Always) && page.isRelay ) setupRepeater( got_gw ); 
// 2024     if( (!page.is500Always) && page.isRelay ){ setupRepeater( got_gw ); receive(); }
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        ANL     A,#0x60
        XRL     A,#0x20
        JNZ     $+5
        LJMP    ??parseGWPackage_3
??parseGWPackage_5:
        LJMP    ??Subroutine121_1
        CFI EndBlock cfiBlock598
        REQUIRE _A_P1
        REQUIRE ADCCON1
        REQUIRE RNDL
        REQUIRE RNDH
// 2025 //    receive();  // uncomment to get G+ behaviour
// 2026 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond599 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_244
        CFI Block cfiCond600 Using cfiCommon0
        CFI (cfiCond600) NoFunction
        CFI (cfiCond600) Conditional ??CrossCallReturnLabel_245
        CFI Block cfiCond601 Using cfiCommon0
        CFI (cfiCond601) NoFunction
        CFI (cfiCond601) Conditional ??CrossCallReturnLabel_246
        CFI (cfiCond601) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond601) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond601) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond601) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond601) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond601) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond601) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond601) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond601) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond601) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond601) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond601) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond601) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond601) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond601) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond601) CFA_SP SP+0
        CFI (cfiCond601) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond602 Using cfiCommon0
        CFI (cfiCond602) NoFunction
        CFI (cfiCond602) Conditional ??CrossCallReturnLabel_247
        CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond602) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond602) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond602) CFA_SP SP+0
        CFI (cfiCond602) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond603 Using cfiCommon0
        CFI (cfiCond603) NoFunction
        CFI (cfiCond603) Conditional ??CrossCallReturnLabel_248
        CFI (cfiCond603) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond603) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond603) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond603) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond603) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond603) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond603) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond603) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond603) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond603) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond603) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond603) CFA_SP SP+0
        CFI (cfiCond603) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker604 Using cfiCommon1
        CFI (cfiPicker604) NoFunction
        CFI (cfiPicker604) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond599
        CFI EndBlock cfiCond600
        CFI EndBlock cfiCond601
        CFI EndBlock cfiCond602
        CFI EndBlock cfiCond603
        CFI EndBlock cfiPicker604

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond605 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_225
        CFI Block cfiCond606 Using cfiCommon0
        CFI (cfiCond606) NoFunction
        CFI (cfiCond606) Conditional ??CrossCallReturnLabel_226
        CFI (cfiCond606) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond606) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond606) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond606) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond606) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond606) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond606) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond606) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond606) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond606) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond606) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond606) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond606) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond606) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond606) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond606) CFA_SP SP+0
        CFI (cfiCond606) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker607 Using cfiCommon1
        CFI (cfiPicker607) NoFunction
        CFI (cfiPicker607) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function mymemcpy
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#((page + 208) & 0xff)
        MOV     R5,#(((page + 208) >> 8) & 0xff)
        MOV     R2,#(cycles2SoftKick & 0xff)
        MOV     R3,#((cycles2SoftKick >> 8) & 0xff)
        LCALL   mymemcpy
        RET
        CFI EndBlock cfiCond605
        CFI EndBlock cfiCond606
        CFI EndBlock cfiPicker607

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond608 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_380
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond609 Using cfiCommon0
        CFI (cfiCond609) NoFunction
        CFI (cfiCond609) Conditional ??CrossCallReturnLabel_381
        CFI (cfiCond609) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond609) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond609) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond609) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond609) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond609) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond609) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond609) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond609) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond609) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond609) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond609) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond609) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond609) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond609) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond609) CFA_SP SP+0
        CFI (cfiCond609) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker610 Using cfiCommon1
        CFI (cfiPicker610) NoFunction
        CFI (cfiPicker610) Picker
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        LJMP    ?Subroutine116
        CFI EndBlock cfiCond608
        CFI EndBlock cfiCond609
        CFI EndBlock cfiPicker610

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond611 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_186
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond612 Using cfiCommon0
        CFI (cfiCond612) NoFunction
        CFI (cfiCond612) Conditional ??CrossCallReturnLabel_187
        CFI (cfiCond612) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond612) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond612) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond612) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond612) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond612) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond612) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond612) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond612) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond612) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond612) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond612) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond612) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond612) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond612) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond612) CFA_SP SP+0
        CFI (cfiCond612) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker613 Using cfiCommon1
        CFI (cfiPicker613) NoFunction
        CFI (cfiPicker613) Picker
        CLR     C
        LCALL   ?Subroutine101
??CrossCallReturnLabel_323:
        RET
        CFI EndBlock cfiCond611
        CFI EndBlock cfiCond612
        CFI EndBlock cfiPicker613

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond614 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_162
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond615 Using cfiCommon0
        CFI (cfiCond615) NoFunction
        CFI (cfiCond615) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond615) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond615) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond615) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond615) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond615) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond615) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond615) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond615) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond615) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond615) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond615) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond615) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond615) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond615) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond615) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond615) CFA_SP SP+0
        CFI (cfiCond615) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker616 Using cfiCommon1
        CFI (cfiPicker616) NoFunction
        CFI (cfiPicker616) Picker
        LCALL   ?Subroutine97
??CrossCallReturnLabel_309:
        RET
        CFI EndBlock cfiCond614
        CFI EndBlock cfiCond615
        CFI EndBlock cfiPicker616

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine97:
        CFI Block cfiCond617 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_162
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond618 Using cfiCommon0
        CFI (cfiCond618) NoFunction
        CFI (cfiCond618) Conditional ??CrossCallReturnLabel_309, ??CrossCallReturnLabel_163
        CFI (cfiCond618) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond618) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond618) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond618) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond618) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond618) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond618) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond618) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond618) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond618) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond618) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond618) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond618) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond618) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond618) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond618) CFA_SP SP+0
        CFI (cfiCond618) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond619 Using cfiCommon0
        CFI (cfiCond619) NoFunction
        CFI (cfiCond619) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_38
        CFI (cfiCond619) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond619) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond619) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond619) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond619) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond619) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond619) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond619) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond619) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond619) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond619) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond619) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond619) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond619) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond619) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond619) CFA_SP SP+0
        CFI (cfiCond619) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond620 Using cfiCommon0
        CFI (cfiCond620) NoFunction
        CFI (cfiCond620) Conditional ??CrossCallReturnLabel_308, ??CrossCallReturnLabel_39
        CFI (cfiCond620) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond620) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond620) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond620) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond620) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond620) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond620) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond620) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond620) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond620) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond620) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond620) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond620) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond620) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond620) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond620) CFA_SP SP+0
        CFI (cfiCond620) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker621 Using cfiCommon1
        CFI (cfiPicker621) NoFunction
        CFI (cfiPicker621) Picker
        LCALL   ?Subroutine107
??CrossCallReturnLabel_335:
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        RET
        CFI EndBlock cfiCond617
        CFI EndBlock cfiCond618
        CFI EndBlock cfiCond619
        CFI EndBlock cfiCond620
        CFI EndBlock cfiPicker621

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond622 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_160
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond623 Using cfiCommon0
        CFI (cfiCond623) NoFunction
        CFI (cfiCond623) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond623) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond623) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond623) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond623) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond623) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond623) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond623) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond623) CFA_SP SP+0
        CFI (cfiCond623) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker624 Using cfiCommon1
        CFI (cfiPicker624) NoFunction
        CFI (cfiPicker624) Picker
        LCALL   ?Subroutine98
??CrossCallReturnLabel_311:
        RET
        CFI EndBlock cfiCond622
        CFI EndBlock cfiCond623
        CFI EndBlock cfiPicker624

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine98:
        CFI Block cfiCond625 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_311, ??CrossCallReturnLabel_160
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond626 Using cfiCommon0
        CFI (cfiCond626) NoFunction
        CFI (cfiCond626) Conditional ??CrossCallReturnLabel_311, ??CrossCallReturnLabel_161
        CFI (cfiCond626) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond626) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond626) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond626) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond626) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond626) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond626) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond626) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond626) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond626) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond626) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond626) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond626) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond626) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond626) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond626) CFA_SP SP+0
        CFI (cfiCond626) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond627 Using cfiCommon0
        CFI (cfiCond627) NoFunction
        CFI (cfiCond627) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_32
        CFI (cfiCond627) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond627) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond627) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond627) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond627) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond627) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond627) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond627) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond627) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond627) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond627) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond627) CFA_SP SP+0
        CFI (cfiCond627) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond628 Using cfiCommon0
        CFI (cfiCond628) NoFunction
        CFI (cfiCond628) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_33
        CFI (cfiCond628) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond628) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond628) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond628) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond628) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond628) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond628) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond628) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond628) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond628) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond628) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond628) CFA_SP SP+0
        CFI (cfiCond628) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker629 Using cfiCommon1
        CFI (cfiPicker629) NoFunction
        CFI (cfiPicker629) Picker
        MOV     DPTR,#(page + 206)
        LCALL   ?Subroutine107
??CrossCallReturnLabel_336:
        MOV     DPTR,#cycles2Step10Channel
        RET
        CFI EndBlock cfiCond625
        CFI EndBlock cfiCond626
        CFI EndBlock cfiCond627
        CFI EndBlock cfiCond628
        CFI EndBlock cfiPicker629

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond630 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_149
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond631 Using cfiCommon0
        CFI (cfiCond631) NoFunction
        CFI (cfiCond631) Conditional ??CrossCallReturnLabel_150
        CFI Block cfiCond632 Using cfiCommon0
        CFI (cfiCond632) NoFunction
        CFI (cfiCond632) Conditional ??CrossCallReturnLabel_151
        CFI Block cfiCond633 Using cfiCommon0
        CFI (cfiCond633) NoFunction
        CFI (cfiCond633) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond633) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond633) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond633) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond633) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond633) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond633) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond633) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond633) CFA_SP SP+0
        CFI (cfiCond633) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond634 Using cfiCommon0
        CFI (cfiCond634) NoFunction
        CFI (cfiCond634) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond634) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond634) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond634) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond634) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond634) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond634) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond634) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond634) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond634) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond634) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond634) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond634) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond634) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond634) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond634) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond634) CFA_SP SP+0
        CFI (cfiCond634) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond635 Using cfiCommon0
        CFI (cfiCond635) NoFunction
        CFI (cfiCond635) Conditional ??CrossCallReturnLabel_154
        CFI (cfiCond635) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond635) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond635) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond635) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond635) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond635) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond635) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond635) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond635) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond635) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond635) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond635) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond635) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond635) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond635) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond635) CFA_SP SP+0
        CFI (cfiCond635) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond636 Using cfiCommon0
        CFI (cfiCond636) NoFunction
        CFI (cfiCond636) Conditional ??CrossCallReturnLabel_155
        CFI (cfiCond636) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond636) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond636) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond636) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond636) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond636) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond636) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond636) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond636) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond636) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond636) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond636) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond636) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond636) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond636) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond636) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond636) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond636) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond636) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond636) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond636) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond636) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond636) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond636) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond636) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond636) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond636) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond636) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond636) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond636) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond636) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond636) CFA_SP SP+0
        CFI (cfiCond636) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker637 Using cfiCommon1
        CFI (cfiPicker637) NoFunction
        CFI (cfiPicker637) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond630
        CFI EndBlock cfiCond631
        CFI EndBlock cfiCond632
        CFI EndBlock cfiCond633
        CFI EndBlock cfiCond634
        CFI EndBlock cfiCond635
        CFI EndBlock cfiCond636
        CFI EndBlock cfiPicker637

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond638 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_135
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond639 Using cfiCommon0
        CFI (cfiCond639) NoFunction
        CFI (cfiCond639) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond639) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond639) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond639) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond639) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond639) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond639) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond639) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond639) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond639) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond639) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond639) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond639) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond639) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond639) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond639) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond639) CFA_SP SP+0
        CFI (cfiCond639) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker640 Using cfiCommon1
        CFI (cfiPicker640) NoFunction
        CFI (cfiPicker640) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        MOV     B,?V0 + 0
        MUL     AB
        RET
        CFI EndBlock cfiCond638
        CFI EndBlock cfiCond639
        CFI EndBlock cfiPicker640

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond641 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond642 Using cfiCommon0
        CFI (cfiCond642) NoFunction
        CFI (cfiCond642) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond642) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond642) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond642) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond642) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond642) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond642) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond642) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond642) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond642) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond642) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond642) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond642) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond642) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond642) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond642) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond642) CFA_SP SP+0
        CFI (cfiCond642) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker643 Using cfiCommon1
        CFI (cfiPicker643) NoFunction
        CFI (cfiPicker643) Picker
        LCALL   ?Subroutine96
??CrossCallReturnLabel_307:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond641
        CFI EndBlock cfiCond642
        CFI EndBlock cfiPicker643

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine96:
        CFI Block cfiCond644 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_306
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond645 Using cfiCommon0
        CFI (cfiCond645) NoFunction
        CFI (cfiCond645) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_127
        CFI (cfiCond645) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond645) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond645) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond645) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond645) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond645) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond645) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond645) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond645) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond645) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond645) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond645) CFA_SP SP+0
        CFI (cfiCond645) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond646 Using cfiCommon0
        CFI (cfiCond646) NoFunction
        CFI (cfiCond646) Conditional ??CrossCallReturnLabel_307, ??CrossCallReturnLabel_128
        CFI (cfiCond646) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond646) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond646) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond646) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond646) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond646) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond646) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond646) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond646) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond646) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond646) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond646) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond646) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond646) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond646) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond646) CFA_SP SP+0
        CFI (cfiCond646) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker647 Using cfiCommon1
        CFI (cfiPicker647) NoFunction
        CFI (cfiPicker647) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        RET
        CFI EndBlock cfiCond644
        CFI EndBlock cfiCond645
        CFI EndBlock cfiCond646
        CFI EndBlock cfiPicker647

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond648 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_93
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond649 Using cfiCommon0
        CFI (cfiCond649) NoFunction
        CFI (cfiCond649) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond649) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond649) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond649) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond649) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond649) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond649) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond649) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond649) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond649) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond649) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond649) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond649) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond649) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond649) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond649) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond649) CFA_SP SP+0
        CFI (cfiCond649) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker650 Using cfiCommon1
        CFI (cfiPicker650) NoFunction
        CFI (cfiPicker650) Picker
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x1a
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_290:
        RET
        CFI EndBlock cfiCond648
        CFI EndBlock cfiCond649
        CFI EndBlock cfiPicker650

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond651 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond652 Using cfiCommon0
        CFI (cfiCond652) NoFunction
        CFI (cfiCond652) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond652) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond652) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond652) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond652) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond652) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond652) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond652) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond652) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond652) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond652) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond652) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond652) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond652) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond652) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond652) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond652) CFA_SP SP+0
        CFI (cfiCond652) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker653 Using cfiCommon1
        CFI (cfiPicker653) NoFunction
        CFI (cfiPicker653) Picker
        LCALL   ?Subroutine93
??CrossCallReturnLabel_300:
        RET
        CFI EndBlock cfiCond651
        CFI EndBlock cfiCond652
        CFI EndBlock cfiPicker653

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine93:
        CFI Block cfiCond654 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_89
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond655 Using cfiCommon0
        CFI (cfiCond655) NoFunction
        CFI (cfiCond655) Conditional ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_90
        CFI (cfiCond655) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond655) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond655) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond655) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond655) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond655) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond655) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond655) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond655) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond655) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond655) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond655) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond655) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond655) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond655) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond655) CFA_SP SP+0
        CFI (cfiCond655) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond656 Using cfiCommon0
        CFI (cfiCond656) NoFunction
        CFI (cfiCond656) Conditional ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_59
        CFI (cfiCond656) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond656) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond656) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond656) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond656) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond656) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond656) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond656) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond656) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond656) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond656) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond656) CFA_SP SP+0
        CFI (cfiCond656) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond657 Using cfiCommon0
        CFI (cfiCond657) NoFunction
        CFI (cfiCond657) Conditional ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_60
        CFI (cfiCond657) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond657) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond657) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond657) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond657) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond657) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond657) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond657) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond657) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond657) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond657) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond657) CFA_SP SP+0
        CFI (cfiCond657) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker658 Using cfiCommon1
        CFI (cfiPicker658) NoFunction
        CFI (cfiPicker658) Picker
        MOV     DPTR,#(page + 204)
        LCALL   ?Subroutine107
??CrossCallReturnLabel_334:
        MOV     DPTR,#cyclesToStep500Channel
        LCALL   ?Subroutine111
??CrossCallReturnLabel_347:
        RET
        CFI EndBlock cfiCond654
        CFI EndBlock cfiCond655
        CFI EndBlock cfiCond656
        CFI EndBlock cfiCond657
        CFI EndBlock cfiPicker658

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond659 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond660 Using cfiCommon0
        CFI (cfiCond660) NoFunction
        CFI (cfiCond660) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond660) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond660) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond660) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond660) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond660) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond660) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond660) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond660) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond660) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond660) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond660) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond660) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond660) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond660) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond660) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond660) CFA_SP SP+0
        CFI (cfiCond660) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond661 Using cfiCommon0
        CFI (cfiCond661) NoFunction
        CFI (cfiCond661) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond661) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond661) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond661) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond661) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond661) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond661) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond661) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond661) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond661) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond661) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond661) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond661) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond661) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond661) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond661) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond661) CFA_SP SP+0
        CFI (cfiCond661) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond662 Using cfiCommon0
        CFI (cfiCond662) NoFunction
        CFI (cfiCond662) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond662) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond662) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond662) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond662) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond662) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond662) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond662) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond662) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond662) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond662) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond662) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond662) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond662) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond662) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond662) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond662) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond662) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond662) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond662) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond662) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond662) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond662) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond662) CFA_SP SP+0
        CFI (cfiCond662) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker663 Using cfiCommon1
        CFI (cfiPicker663) NoFunction
        CFI (cfiPicker663) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond659
        CFI EndBlock cfiCond660
        CFI EndBlock cfiCond661
        CFI EndBlock cfiCond662
        CFI EndBlock cfiPicker663

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond664 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond665 Using cfiCommon0
        CFI (cfiCond665) NoFunction
        CFI (cfiCond665) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond665) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond665) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond665) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond665) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond665) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond665) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond665) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond665) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond665) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond665) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond665) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond665) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond665) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond665) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond665) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond665) CFA_SP SP+0
        CFI (cfiCond665) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker666 Using cfiCommon1
        CFI (cfiPicker666) NoFunction
        CFI (cfiPicker666) Picker
        MOV     DPTR,#flags
        LCALL   ?Subroutine90
??CrossCallReturnLabel_296:
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond664
        CFI EndBlock cfiCond665
        CFI EndBlock cfiPicker666

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond667 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond668 Using cfiCommon0
        CFI (cfiCond668) NoFunction
        CFI (cfiCond668) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond668) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond668) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond668) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond668) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond668) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond668) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond668) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond668) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond668) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond668) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond668) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond668) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond668) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond668) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond668) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond668) CFA_SP SP+0
        CFI (cfiCond668) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker669 Using cfiCommon1
        CFI (cfiPicker669) NoFunction
        CFI (cfiPicker669) Picker
        MOV     DPTR,#cyclesFromStart
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPTR,#cyclesFromStart
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x33
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond667
        CFI EndBlock cfiCond668
        CFI EndBlock cfiPicker669

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond670 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond671 Using cfiCommon0
        CFI (cfiCond671) NoFunction
        CFI (cfiCond671) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond671) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond671) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond671) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond671) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond671) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond671) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond671) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond671) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond671) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond671) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond671) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond671) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond671) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond671) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond671) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond671) CFA_SP SP+0
        CFI (cfiCond671) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker672 Using cfiCommon1
        CFI (cfiPicker672) NoFunction
        CFI (cfiPicker672) Picker
        SUBB    A,#0x0
        MOV     R3,A
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ?Subroutine97
??CrossCallReturnLabel_308:
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        RET
        CFI EndBlock cfiCond670
        CFI EndBlock cfiCond671
        CFI EndBlock cfiPicker672

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond673 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_366
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond674 Using cfiCommon0
        CFI (cfiCond674) NoFunction
        CFI (cfiCond674) Conditional ??CrossCallReturnLabel_367
        CFI (cfiCond674) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond674) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond674) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond674) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond674) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond674) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond674) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond674) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond674) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond674) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond674) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond674) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond674) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond674) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond674) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond674) CFA_SP SP+0
        CFI (cfiCond674) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker675 Using cfiCommon1
        CFI (cfiPicker675) NoFunction
        CFI (cfiPicker675) Picker
        ADDC    A,R3
        MOV     R5,A
        MOV     DPTR,#temperatureProtectionDelay
        LCALL   ??Subroutine94_0
??CrossCallReturnLabel_390:
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        MOV     A,R5
        SUBB    A,R3
        MOV     R3,A
        LJMP    ?Subroutine114
        CFI EndBlock cfiCond673
        CFI EndBlock cfiCond674
        CFI EndBlock cfiPicker675

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine94:
        CFI Block cfiCond676 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_391, ??CrossCallReturnLabel_36
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond677 Using cfiCommon0
        CFI (cfiCond677) NoFunction
        CFI (cfiCond677) Conditional ??CrossCallReturnLabel_391, ??CrossCallReturnLabel_37
        CFI (cfiCond677) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond677) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond677) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond677) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond677) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond677) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond677) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond677) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond677) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond677) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond677) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond677) CFA_SP SP+0
        CFI (cfiCond677) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond678 Using cfiCommon0
        CFI (cfiCond678) NoFunction
        CFI (cfiCond678) Conditional ??CrossCallReturnLabel_392, ??CrossCallReturnLabel_368
        CFI Block cfiCond679 Using cfiCommon0
        CFI (cfiCond679) NoFunction
        CFI (cfiCond679) Conditional ??CrossCallReturnLabel_392, ??CrossCallReturnLabel_369
        CFI Block cfiPicker680 Using cfiCommon1
        CFI (cfiPicker680) NoFunction
        CFI (cfiPicker680) Picker
        MOV     DPTR,#lastCycle
        CFI Block cfiCond681 Using cfiCommon0
        CFI (cfiCond681) NoFunction
        CFI (cfiCond681) Conditional ??CrossCallReturnLabel_393, ??CrossCallReturnLabel_103
        CFI (cfiCond681) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond681) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond681) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond681) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond681) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond681) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond681) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond681) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond681) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond681) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond681) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond681) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond681) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond681) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond681) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond681) CFA_SP SP+0
        CFI (cfiCond681) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond682 Using cfiCommon0
        CFI (cfiCond682) NoFunction
        CFI (cfiCond682) Conditional ??CrossCallReturnLabel_393, ??CrossCallReturnLabel_104
        CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond682) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond682) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond682) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond682) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond682) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond682) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond682) CFA_SP SP+0
        CFI (cfiCond682) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond683 Using cfiCommon0
        CFI (cfiCond683) NoFunction
        CFI (cfiCond683) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_111
        CFI (cfiCond683) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond683) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond683) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond683) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond683) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond683) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond683) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond683) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond683) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond683) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond683) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond683) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond683) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond683) CFA_SP SP+0
        CFI (cfiCond683) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond684 Using cfiCommon0
        CFI (cfiCond684) NoFunction
        CFI (cfiCond684) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_112
        CFI (cfiCond684) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond684) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond684) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond684) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond684) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond684) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond684) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond684) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond684) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond684) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond684) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond684) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond684) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond684) CFA_SP SP+0
        CFI (cfiCond684) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond685 Using cfiCommon0
        CFI (cfiCond685) NoFunction
        CFI (cfiCond685) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_105
        CFI (cfiCond685) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond685) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond685) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond685) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond685) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond685) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond685) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond685) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond685) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond685) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond685) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond685) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond685) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond685) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond685) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond685) CFA_SP SP+0
        CFI (cfiCond685) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond686 Using cfiCommon0
        CFI (cfiCond686) NoFunction
        CFI (cfiCond686) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_106
        CFI (cfiCond686) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond686) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond686) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond686) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond686) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond686) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond686) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond686) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond686) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond686) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond686) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond686) CFA_SP SP+0
        CFI (cfiCond686) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond687 Using cfiCommon0
        CFI (cfiCond687) NoFunction
        CFI (cfiCond687) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_107
        CFI Block cfiCond688 Using cfiCommon0
        CFI (cfiCond688) NoFunction
        CFI (cfiCond688) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_108
        CFI (cfiCond688) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond688) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond688) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond688) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond688) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond688) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond688) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond688) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond688) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond688) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond688) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond688) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond688) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond688) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond688) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond688) CFA_SP SP+0
        CFI (cfiCond688) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond689 Using cfiCommon0
        CFI (cfiCond689) NoFunction
        CFI (cfiCond689) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_109
        CFI (cfiCond689) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond689) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond689) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond689) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond689) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond689) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond689) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond689) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond689) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond689) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond689) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond689) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond689) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond689) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond689) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond689) CFA_SP SP+0
        CFI (cfiCond689) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond690 Using cfiCommon0
        CFI (cfiCond690) NoFunction
        CFI (cfiCond690) Conditional ??CrossCallReturnLabel_394, ??CrossCallReturnLabel_110
        CFI (cfiCond690) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond690) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond690) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond690) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond690) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond690) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond690) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond690) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond690) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond690) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond690) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond690) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond690) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond690) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond690) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond690) CFA_SP SP+0
        CFI (cfiCond690) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond691 Using cfiCommon0
        CFI (cfiCond691) NoFunction
        CFI (cfiCond691) Conditional ??CrossCallReturnLabel_390, ??CrossCallReturnLabel_366
        CFI (cfiCond691) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond691) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond691) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond691) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond691) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond691) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond691) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond691) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond691) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond691) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond691) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond691) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond691) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond691) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond691) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond691) CFA_SP SP+0
        CFI (cfiCond691) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond692 Using cfiCommon0
        CFI (cfiCond692) NoFunction
        CFI (cfiCond692) Conditional ??CrossCallReturnLabel_390, ??CrossCallReturnLabel_367
        CFI (cfiCond692) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond692) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond692) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond692) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond692) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond692) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond692) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond692) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond692) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond692) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond692) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond692) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond692) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond692) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond692) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond692) CFA_SP SP+0
        CFI (cfiCond692) CFA_XSP16 add(XSP16, 15)
??Subroutine94_0:
        MOVX    A,@DPTR
        LJMP    ?Subroutine117
        CFI EndBlock cfiCond676
        CFI EndBlock cfiCond677
        CFI EndBlock cfiCond678
        CFI EndBlock cfiCond679
        CFI EndBlock cfiPicker680
        CFI EndBlock cfiCond681
        CFI EndBlock cfiCond682
        CFI EndBlock cfiCond683
        CFI EndBlock cfiCond684
        CFI EndBlock cfiCond685
        CFI EndBlock cfiCond686
        CFI EndBlock cfiCond687
        CFI EndBlock cfiCond688
        CFI EndBlock cfiCond689
        CFI EndBlock cfiCond690
        CFI EndBlock cfiCond691
        CFI EndBlock cfiCond692

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond693 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond694 Using cfiCommon0
        CFI (cfiCond694) NoFunction
        CFI (cfiCond694) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond694) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond694) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond694) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond694) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond694) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond694) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond694) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond694) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond694) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond694) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond694) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond694) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond694) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond694) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond694) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond694) CFA_SP SP+0
        CFI (cfiCond694) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond695 Using cfiCommon0
        CFI (cfiCond695) NoFunction
        CFI (cfiCond695) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond695) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond695) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond695) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond695) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond695) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond695) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond695) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond695) CFA_SP SP+0
        CFI (cfiCond695) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond696 Using cfiCommon0
        CFI (cfiCond696) NoFunction
        CFI (cfiCond696) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond696) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond696) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond696) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond696) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond696) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond696) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond696) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond696) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond696) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond696) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond696) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond696) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond696) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond696) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond696) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond696) CFA_SP SP+0
        CFI (cfiCond696) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker697 Using cfiCommon1
        CFI (cfiPicker697) NoFunction
        CFI (cfiPicker697) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        LCALL   ?Subroutine101
??CrossCallReturnLabel_322:
        RET
        CFI EndBlock cfiCond693
        CFI EndBlock cfiCond694
        CFI EndBlock cfiCond695
        CFI EndBlock cfiCond696
        CFI EndBlock cfiPicker697

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine101:
        CFI Block cfiCond698 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_186
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond699 Using cfiCommon0
        CFI (cfiCond699) NoFunction
        CFI (cfiCond699) Conditional ??CrossCallReturnLabel_323, ??CrossCallReturnLabel_187
        CFI (cfiCond699) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond699) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond699) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond699) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond699) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond699) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond699) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond699) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond699) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond699) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond699) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond699) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond699) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond699) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond699) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond699) CFA_SP SP+0
        CFI (cfiCond699) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond700 Using cfiCommon0
        CFI (cfiCond700) NoFunction
        CFI (cfiCond700) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_28
        CFI (cfiCond700) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond700) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond700) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond700) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond700) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond700) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond700) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond700) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond700) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond700) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond700) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond700) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond700) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond700) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond700) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond700) CFA_SP SP+0
        CFI (cfiCond700) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond701 Using cfiCommon0
        CFI (cfiCond701) NoFunction
        CFI (cfiCond701) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_29
        CFI (cfiCond701) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond701) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond701) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond701) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond701) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond701) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond701) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond701) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond701) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond701) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond701) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond701) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond701) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond701) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond701) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond701) CFA_SP SP+0
        CFI (cfiCond701) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond702 Using cfiCommon0
        CFI (cfiCond702) NoFunction
        CFI (cfiCond702) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_30
        CFI (cfiCond702) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond702) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond702) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond702) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond702) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond702) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond702) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond702) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond702) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond702) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond702) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond702) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond702) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond702) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond702) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond702) CFA_SP SP+0
        CFI (cfiCond702) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond703 Using cfiCommon0
        CFI (cfiCond703) NoFunction
        CFI (cfiCond703) Conditional ??CrossCallReturnLabel_322, ??CrossCallReturnLabel_31
        CFI (cfiCond703) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond703) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond703) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond703) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond703) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond703) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond703) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond703) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond703) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond703) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond703) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond703) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond703) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond703) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond703) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond703) CFA_SP SP+0
        CFI (cfiCond703) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker704 Using cfiCommon1
        CFI (cfiPicker704) NoFunction
        CFI (cfiPicker704) Picker
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine110
??CrossCallReturnLabel_387:
        RET
        CFI EndBlock cfiCond698
        CFI EndBlock cfiCond699
        CFI EndBlock cfiCond700
        CFI EndBlock cfiCond701
        CFI EndBlock cfiCond702
        CFI EndBlock cfiCond703
        CFI EndBlock cfiPicker704

        RSEG XDATA_Z:XDATA:NOROOT(0)
??bunch:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??plen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
??cnt:
        DS 1
        REQUIRE `?<Initializer for cnt>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_3f800000:
        DS 4
        REQUIRE `?<Initializer for __Constant_3f800000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_447a0000:
        DS 4
        REQUIRE `?<Initializer for __Constant_447a0000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_0:
        DS 4
        REQUIRE `?<Initializer for __Constant_0>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_42c80000:
        DS 4
        REQUIRE `?<Initializer for __Constant_42c80000>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
__Constant_c1c80000:
        DS 4
        REQUIRE `?<Initializer for __Constant_c1c80000>`
        REQUIRE __INIT_XDATA_I
// 2027 /******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2028 BYTE *nextSlot(){
nextSlot:
        CFI Block cfiBlock705 Using cfiCommon0
        CFI Function nextSlot
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2029     BYTE *ptr = (BYTE *)(PAGEADDR + PAGESIZE); 
        MOV     R2,#-0xe
        MOV     R3,#0x5c
        SJMP    ??nextSlot_0
// 2030     while( ptr && ( ptr <= (BYTE *)(PAGEADDR+0x3FF) ) ){ 
// 2031         BYTE i = 4; 
// 2032         do{ if( ptr[--i] != 0xFF ) break; }while(i);
// 2033         if( i ) ptr += 4; else return ptr; 
??nextSlot_1:
        LCALL   ?Subroutine87
??CrossCallReturnLabel_277:
        MOV     A,R2
        JNZ     ??nextSlot_2
        MOV     A,R3
??nextSlot_2:
        JZ      ??nextSlot_3
??nextSlot_0:
        CLR     C
        MOV     A,R3
        SUBB    A,#0x60
        JNC     ??nextSlot_3
        MOV     R4,#0x4
??nextSlot_4:
        DEC     R4
        MOV     ?V0 + 0,R4
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??nextSlot_5
        MOV     A,R4
        JNZ     ??nextSlot_4
??nextSlot_5:
        MOV     A,R4
        JNZ     ??nextSlot_1
        SJMP    ??nextSlot_6
// 2034     }
// 2035     return NULL;
??nextSlot_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??nextSlot_6:
        LJMP    ??Subroutine122_0
        CFI EndBlock cfiBlock705
// 2036 }
// 2037 /******************************************************************************
// 2038 * @fn  receive
// 2039 * @brief       This function switch radio into receiving radioMode
// 2040 * Parameters:
// 2041 * @return void
// 2042 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2043 void receive(void){
receive:
        CFI Block cfiBlock706 Using cfiCommon0
        CFI Function receive
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 2044     //if( page.fuseComm ) return;
// 2045     if( si->radioMode == RADIO_MODE_TX  ) { atomicChange( ReceiveData, 1 ); return; }
        LCALL   ?Subroutine25
??CrossCallReturnLabel_66:
        JNZ     ??receive_0
        LCALL   ?Subroutine1
??CrossCallReturnLabel_417:
        SJMP    ??receive_1
// 2046     RFST = STROBE_IDLE; si->radioMode = RADIO_MODE_UNDEF;            
??receive_0:
        MOV     0xe1,#0x4
        MOV     A,#-0x10
        LCALL   ??Subroutine72_0
// 2047     //INT_GLOBAL_ENABLE( INT_OFF );
// 2048         si->packetReceived = 0;
??CrossCallReturnLabel_235:
        ADD     A,#0x5f
        LCALL   ??Subroutine2_1
// 2049         radioPktBufferRx[0] = 0;    radioPktBufferRx[1] = 0;
??CrossCallReturnLabel_4:
        MOV     DPTR,#radioPktBufferRx
        MOVX    @DPTR,A
        MOV     DPTR,#(radioPktBufferRx + 1)
        MOVX    @DPTR,A
// 2050         //quartz();
// 2051         si->radioMode = RADIO_MODE_RX;
        LCALL   ?Subroutine43
??CrossCallReturnLabel_102:
        MOV     A,#0x20
        MOVX    @DPTR,A
// 2052         PKTLEN = PACKET_LENGTH_GW;  
        MOV     A,#0x22
        MOV     DPTR,#-0x20fe
        MOVX    @DPTR,A
// 2053         DMAARM = DMAARM_CHANNEL0;             // Arm DMA channel 0
        MOV     0xd6,#0x1
// 2054 //        P1_1 = 0;        
// 2055         RFST = STROBE_RX;                     // Switch radio to RX
        MOV     0xe1,#0x2
// 2056     //INT_GLOBAL_ENABLE( INT_ON );
// 2057 }
??receive_1:
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock706
        REQUIRE DMAARM
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond707 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_230
        CFI Block cfiCond708 Using cfiCommon0
        CFI (cfiCond708) NoFunction
        CFI (cfiCond708) Conditional ??CrossCallReturnLabel_231
        CFI Block cfiPicker709 Using cfiCommon1
        CFI (cfiPicker709) NoFunction
        CFI (cfiPicker709) Picker
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        CFI Block cfiCond710 Using cfiCommon0
        CFI (cfiCond710) NoFunction
        CFI (cfiCond710) Conditional ??CrossCallReturnLabel_232
        CFI Block cfiCond711 Using cfiCommon0
        CFI (cfiCond711) NoFunction
        CFI (cfiCond711) Conditional ??CrossCallReturnLabel_233
        CFI Block cfiCond712 Using cfiCommon0
        CFI (cfiCond712) NoFunction
        CFI (cfiCond712) Conditional ??CrossCallReturnLabel_234
        CFI Block cfiCond713 Using cfiCommon0
        CFI (cfiCond713) NoFunction
        CFI (cfiCond713) Conditional ??CrossCallReturnLabel_235
        CFI (cfiCond713) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond713) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond713) CFA_SP SP+-4
??Subroutine72_0:
        MOVX    @DPTR,A
        MOV     DPTR,#si
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond707
        CFI EndBlock cfiCond708
        CFI EndBlock cfiPicker709
        CFI EndBlock cfiCond710
        CFI EndBlock cfiCond711
        CFI EndBlock cfiCond712
        CFI EndBlock cfiCond713

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond714 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond715 Using cfiCommon0
        CFI (cfiCond715) NoFunction
        CFI (cfiCond715) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond715) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond715) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond715) CFA_SP SP+-4
        CFI Block cfiPicker716 Using cfiCommon1
        CFI (cfiPicker716) NoFunction
        CFI (cfiPicker716) Picker
        LCALL   ?Subroutine89
??CrossCallReturnLabel_293:
        RET
        CFI EndBlock cfiCond714
        CFI EndBlock cfiCond715
        CFI EndBlock cfiPicker716

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine89:
        CFI Block cfiCond717 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond718 Using cfiCommon0
        CFI (cfiCond718) NoFunction
        CFI (cfiCond718) Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_64
        CFI (cfiCond718) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond718) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond718) CFA_SP SP+-4
        CFI Block cfiCond719 Using cfiCommon0
        CFI (cfiCond719) NoFunction
        CFI (cfiCond719) Conditional ??CrossCallReturnLabel_293, ??CrossCallReturnLabel_101
        CFI (cfiCond719) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond719) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond719) CFA_SP SP+-4
        CFI Block cfiCond720 Using cfiCommon0
        CFI (cfiCond720) NoFunction
        CFI (cfiCond720) Conditional ??CrossCallReturnLabel_293, ??CrossCallReturnLabel_102
        CFI (cfiCond720) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond720) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond720) CFA_SP SP+-4
        CFI Block cfiPicker721 Using cfiCommon1
        CFI (cfiPicker721) NoFunction
        CFI (cfiPicker721) Picker
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        CFI Block cfiCond722 Using cfiCommon0
        CFI (cfiCond722) NoFunction
        CFI (cfiCond722) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_97
        CFI (cfiCond722) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond722) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond722) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond722) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond722) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond722) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond722) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond722) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond722) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond722) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond722) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond722) CFA_SP SP+0
        CFI (cfiCond722) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond723 Using cfiCommon0
        CFI (cfiCond723) NoFunction
        CFI (cfiCond723) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_98
        CFI (cfiCond723) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond723) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond723) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond723) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond723) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond723) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond723) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond723) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond723) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond723) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond723) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond723) CFA_SP SP+0
        CFI (cfiCond723) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond724 Using cfiCommon0
        CFI (cfiCond724) NoFunction
        CFI (cfiCond724) Conditional ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_42
        CFI (cfiCond724) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond724) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond724) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond724) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond724) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond724) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond724) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond724) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond724) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond724) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond724) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond724) CFA_SP SP+0
        CFI (cfiCond724) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond725 Using cfiCommon0
        CFI (cfiCond725) NoFunction
        CFI (cfiCond725) Conditional ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_44
        CFI (cfiCond725) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond725) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond725) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond725) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond725) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond725) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond725) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond725) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond725) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond725) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond725) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond725) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond725) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond725) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond725) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond725) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond725) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond725) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond725) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond725) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond725) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond725) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond725) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond725) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond725) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond725) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond725) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond725) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond725) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond725) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond725) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond725) CFA_SP SP+0
        CFI (cfiCond725) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond726 Using cfiCommon0
        CFI (cfiCond726) NoFunction
        CFI (cfiCond726) Conditional ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_43
        CFI Block cfiCond727 Using cfiCommon0
        CFI (cfiCond727) NoFunction
        CFI (cfiCond727) Conditional ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_363
        CFI (cfiCond727) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond727) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond727) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond727) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond727) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond727) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond727) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond727) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond727) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond727) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond727) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond727) CFA_SP SP+0
        CFI (cfiCond727) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond728 Using cfiCommon0
        CFI (cfiCond728) NoFunction
        CFI (cfiCond728) Conditional ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_364
        CFI Block cfiCond729 Using cfiCommon0
        CFI (cfiCond729) NoFunction
        CFI (cfiCond729) Conditional ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_365
        CFI (cfiCond729) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond729) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond729) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond729) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond729) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond729) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond729) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond729) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond729) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond729) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond729) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond729) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond729) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond729) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond729) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond729) CFA_SP SP+0
        CFI (cfiCond729) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond730 Using cfiCommon0
        CFI (cfiCond730) NoFunction
        CFI (cfiCond730) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_139
        CFI (cfiCond730) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond730) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond730) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond730) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond730) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond730) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond730) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond730) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond730) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond730) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond730) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond730) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond730) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond730) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond730) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond730) CFA_SP SP+0
        CFI (cfiCond730) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond731 Using cfiCommon0
        CFI (cfiCond731) NoFunction
        CFI (cfiCond731) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_140
        CFI (cfiCond731) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond731) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond731) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond731) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond731) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond731) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond731) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond731) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond731) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond731) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond731) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond731) CFA_SP SP+0
        CFI (cfiCond731) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond732 Using cfiCommon0
        CFI (cfiCond732) NoFunction
        CFI (cfiCond732) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_141
        CFI (cfiCond732) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond732) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond732) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond732) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond732) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond732) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond732) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond732) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond732) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond732) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond732) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond732) CFA_SP SP+0
        CFI (cfiCond732) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond733 Using cfiCommon0
        CFI (cfiCond733) NoFunction
        CFI (cfiCond733) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_142
        CFI Block cfiCond734 Using cfiCommon0
        CFI (cfiCond734) NoFunction
        CFI (cfiCond734) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_143
        CFI Block cfiCond735 Using cfiCommon0
        CFI (cfiCond735) NoFunction
        CFI (cfiCond735) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_144
        CFI Block cfiCond736 Using cfiCommon0
        CFI (cfiCond736) NoFunction
        CFI (cfiCond736) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_145
        CFI Block cfiCond737 Using cfiCommon0
        CFI (cfiCond737) NoFunction
        CFI (cfiCond737) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_146
        CFI Block cfiCond738 Using cfiCommon0
        CFI (cfiCond738) NoFunction
        CFI (cfiCond738) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_147
        CFI (cfiCond738) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond738) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond738) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond738) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond738) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond738) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond738) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond738) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond738) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond738) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond738) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond738) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond738) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond738) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond738) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond738) CFA_SP SP+0
        CFI (cfiCond738) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond739 Using cfiCommon0
        CFI (cfiCond739) NoFunction
        CFI (cfiCond739) Conditional ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_148
        CFI (cfiCond739) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond739) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond739) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond739) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond739) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond739) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond739) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond739) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond739) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond739) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond739) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond739) CFA_SP SP+0
        CFI (cfiCond739) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond740 Using cfiCommon0
        CFI (cfiCond740) NoFunction
        CFI (cfiCond740) Conditional ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_18
        CFI (cfiCond740) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond740) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond740) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond740) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond740) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond740) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond740) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond740) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond740) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond740) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond740) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond740) CFA_SP SP+0
        CFI (cfiCond740) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond741 Using cfiCommon0
        CFI (cfiCond741) NoFunction
        CFI (cfiCond741) Conditional ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_20
        CFI Block cfiCond742 Using cfiCommon0
        CFI (cfiCond742) NoFunction
        CFI (cfiCond742) Conditional ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_17
        CFI (cfiCond742) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond742) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond742) CFA_SP SP+-4
        CFI Block cfiCond743 Using cfiCommon0
        CFI (cfiCond743) NoFunction
        CFI (cfiCond743) Conditional ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_19
        CFI Block cfiCond744 Using cfiCommon0
        CFI (cfiCond744) NoFunction
        CFI (cfiCond744) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_93
        CFI (cfiCond744) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond744) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond744) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond744) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond744) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond744) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond744) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond744) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond744) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond744) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond744) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond744) CFA_SP SP+0
        CFI (cfiCond744) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond745 Using cfiCommon0
        CFI (cfiCond745) NoFunction
        CFI (cfiCond745) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_94
        CFI (cfiCond745) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond745) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond745) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond745) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond745) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond745) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond745) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond745) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond745) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond745) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond745) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond745) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond745) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond745) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond745) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond745) CFA_SP SP+0
        CFI (cfiCond745) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond746 Using cfiCommon0
        CFI (cfiCond746) NoFunction
        CFI (cfiCond746) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_99
        CFI Block cfiCond747 Using cfiCommon0
        CFI (cfiCond747) NoFunction
        CFI (cfiCond747) Conditional ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_100
        CFI (cfiCond747) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond747) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond747) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond747) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond747) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond747) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond747) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond747) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond747) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond747) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond747) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond747) CFA_SP SP+0
        CFI (cfiCond747) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond748 Using cfiCommon0
        CFI (cfiCond748) NoFunction
        CFI (cfiCond748) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_0
        CFI (cfiCond748) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond748) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond748) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond748) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond748) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond748) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond748) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond748) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond748) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond748) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond748) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond748) CFA_SP SP+0
        CFI (cfiCond748) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond749 Using cfiCommon0
        CFI (cfiCond749) NoFunction
        CFI (cfiCond749) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_1
        CFI (cfiCond749) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond749) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond749) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond749) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond749) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond749) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond749) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond749) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond749) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond749) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond749) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond749) CFA_SP SP+0
        CFI (cfiCond749) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond750 Using cfiCommon0
        CFI (cfiCond750) NoFunction
        CFI (cfiCond750) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_2
        CFI (cfiCond750) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond750) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond750) CFA_SP SP+-4
        CFI Block cfiCond751 Using cfiCommon0
        CFI (cfiCond751) NoFunction
        CFI (cfiCond751) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_3
        CFI (cfiCond751) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond751) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond751) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond751) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond751) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond751) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond751) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond751) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond751) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond751) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond751) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond751) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond751) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond751) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond751) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond751) CFA_SP SP+0
        CFI (cfiCond751) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond752 Using cfiCommon0
        CFI (cfiCond752) NoFunction
        CFI (cfiCond752) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_4
        CFI (cfiCond752) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond752) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond752) CFA_SP SP+-4
        CFI Block cfiCond753 Using cfiCommon0
        CFI (cfiCond753) NoFunction
        CFI (cfiCond753) Conditional ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_5
        CFI (cfiCond753) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond753) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond753) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond753) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond753) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond753) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond753) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond753) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond753) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond753) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond753) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond753) CFA_SP SP+0
        CFI (cfiCond753) CFA_XSP16 add(XSP16, 11)
??Subroutine89_0:
        LCALL   ?Subroutine108
??CrossCallReturnLabel_339:
        RET
        CFI EndBlock cfiCond717
        CFI EndBlock cfiCond718
        CFI EndBlock cfiCond719
        CFI EndBlock cfiCond720
        CFI EndBlock cfiPicker721
        CFI EndBlock cfiCond722
        CFI EndBlock cfiCond723
        CFI EndBlock cfiCond724
        CFI EndBlock cfiCond725
        CFI EndBlock cfiCond726
        CFI EndBlock cfiCond727
        CFI EndBlock cfiCond728
        CFI EndBlock cfiCond729
        CFI EndBlock cfiCond730
        CFI EndBlock cfiCond731
        CFI EndBlock cfiCond732
        CFI EndBlock cfiCond733
        CFI EndBlock cfiCond734
        CFI EndBlock cfiCond735
        CFI EndBlock cfiCond736
        CFI EndBlock cfiCond737
        CFI EndBlock cfiCond738
        CFI EndBlock cfiCond739
        CFI EndBlock cfiCond740
        CFI EndBlock cfiCond741
        CFI EndBlock cfiCond742
        CFI EndBlock cfiCond743
        CFI EndBlock cfiCond744
        CFI EndBlock cfiCond745
        CFI EndBlock cfiCond746
        CFI EndBlock cfiCond747
        CFI EndBlock cfiCond748
        CFI EndBlock cfiCond749
        CFI EndBlock cfiCond750
        CFI EndBlock cfiCond751
        CFI EndBlock cfiCond752
        CFI EndBlock cfiCond753

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine108:
        CFI Block cfiCond754 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond755 Using cfiCommon0
        CFI (cfiCond755) NoFunction
        CFI (cfiCond755) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_64
        CFI (cfiCond755) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond755) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond755) CFA_SP SP+-4
        CFI Block cfiCond756 Using cfiCommon0
        CFI (cfiCond756) NoFunction
        CFI (cfiCond756) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_293, ??CrossCallReturnLabel_101
        CFI (cfiCond756) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond756) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond756) CFA_SP SP+-4
        CFI Block cfiCond757 Using cfiCommon0
        CFI (cfiCond757) NoFunction
        CFI (cfiCond757) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_293, ??CrossCallReturnLabel_102
        CFI (cfiCond757) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond757) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond757) CFA_SP SP+-4
        CFI Block cfiCond758 Using cfiCommon0
        CFI (cfiCond758) NoFunction
        CFI (cfiCond758) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_97
        CFI (cfiCond758) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond758) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond758) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond758) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond758) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond758) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond758) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond758) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond758) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond758) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond758) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond758) CFA_SP SP+0
        CFI (cfiCond758) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond759 Using cfiCommon0
        CFI (cfiCond759) NoFunction
        CFI (cfiCond759) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_98
        CFI (cfiCond759) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond759) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond759) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond759) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond759) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond759) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond759) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond759) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond759) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond759) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond759) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond759) CFA_SP SP+0
        CFI (cfiCond759) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond760 Using cfiCommon0
        CFI (cfiCond760) NoFunction
        CFI (cfiCond760) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_42
        CFI (cfiCond760) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond760) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond760) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond760) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond760) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond760) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond760) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond760) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond760) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond760) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond760) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond760) CFA_SP SP+0
        CFI (cfiCond760) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond761 Using cfiCommon0
        CFI (cfiCond761) NoFunction
        CFI (cfiCond761) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_44
        CFI (cfiCond761) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond761) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond761) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond761) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond761) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond761) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond761) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond761) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond761) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond761) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond761) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond761) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond761) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond761) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond761) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond761) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond761) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond761) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond761) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond761) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond761) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond761) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond761) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond761) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond761) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond761) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond761) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond761) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond761) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond761) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond761) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond761) CFA_SP SP+0
        CFI (cfiCond761) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond762 Using cfiCommon0
        CFI (cfiCond762) NoFunction
        CFI (cfiCond762) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_43
        CFI Block cfiCond763 Using cfiCommon0
        CFI (cfiCond763) NoFunction
        CFI (cfiCond763) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_363
        CFI (cfiCond763) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond763) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond763) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond763) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond763) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond763) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond763) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond763) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond763) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond763) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond763) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond763) CFA_SP SP+0
        CFI (cfiCond763) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond764 Using cfiCommon0
        CFI (cfiCond764) NoFunction
        CFI (cfiCond764) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_364
        CFI Block cfiCond765 Using cfiCommon0
        CFI (cfiCond765) NoFunction
        CFI (cfiCond765) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_365
        CFI (cfiCond765) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond765) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond765) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond765) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond765) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond765) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond765) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond765) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond765) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond765) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond765) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond765) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond765) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond765) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond765) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond765) CFA_SP SP+0
        CFI (cfiCond765) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond766 Using cfiCommon0
        CFI (cfiCond766) NoFunction
        CFI (cfiCond766) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_139
        CFI (cfiCond766) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond766) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond766) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond766) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond766) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond766) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond766) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond766) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond766) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond766) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond766) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond766) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond766) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond766) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond766) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond766) CFA_SP SP+0
        CFI (cfiCond766) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond767 Using cfiCommon0
        CFI (cfiCond767) NoFunction
        CFI (cfiCond767) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_140
        CFI (cfiCond767) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond767) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond767) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond767) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond767) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond767) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond767) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond767) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond767) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond767) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond767) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond767) CFA_SP SP+0
        CFI (cfiCond767) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond768 Using cfiCommon0
        CFI (cfiCond768) NoFunction
        CFI (cfiCond768) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_141
        CFI (cfiCond768) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond768) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond768) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond768) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond768) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond768) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond768) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond768) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond768) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond768) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond768) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond768) CFA_SP SP+0
        CFI (cfiCond768) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond769 Using cfiCommon0
        CFI (cfiCond769) NoFunction
        CFI (cfiCond769) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_142
        CFI Block cfiCond770 Using cfiCommon0
        CFI (cfiCond770) NoFunction
        CFI (cfiCond770) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_143
        CFI Block cfiCond771 Using cfiCommon0
        CFI (cfiCond771) NoFunction
        CFI (cfiCond771) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_144
        CFI Block cfiCond772 Using cfiCommon0
        CFI (cfiCond772) NoFunction
        CFI (cfiCond772) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_145
        CFI Block cfiCond773 Using cfiCommon0
        CFI (cfiCond773) NoFunction
        CFI (cfiCond773) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_146
        CFI Block cfiCond774 Using cfiCommon0
        CFI (cfiCond774) NoFunction
        CFI (cfiCond774) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_147
        CFI (cfiCond774) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond774) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond774) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond774) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond774) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond774) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond774) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond774) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond774) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond774) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond774) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond774) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond774) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond774) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond774) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond774) CFA_SP SP+0
        CFI (cfiCond774) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond775 Using cfiCommon0
        CFI (cfiCond775) NoFunction
        CFI (cfiCond775) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_294, ??CrossCallReturnLabel_148
        CFI (cfiCond775) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond775) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond775) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond775) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond775) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond775) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond775) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond775) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond775) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond775) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond775) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond775) CFA_SP SP+0
        CFI (cfiCond775) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond776 Using cfiCommon0
        CFI (cfiCond776) NoFunction
        CFI (cfiCond776) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_18
        CFI (cfiCond776) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond776) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond776) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond776) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond776) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond776) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond776) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond776) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond776) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond776) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond776) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond776) CFA_SP SP+0
        CFI (cfiCond776) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond777 Using cfiCommon0
        CFI (cfiCond777) NoFunction
        CFI (cfiCond777) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_20
        CFI Block cfiCond778 Using cfiCommon0
        CFI (cfiCond778) NoFunction
        CFI (cfiCond778) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_17
        CFI (cfiCond778) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond778) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond778) CFA_SP SP+-4
        CFI Block cfiCond779 Using cfiCommon0
        CFI (cfiCond779) NoFunction
        CFI (cfiCond779) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_19
        CFI Block cfiCond780 Using cfiCommon0
        CFI (cfiCond780) NoFunction
        CFI (cfiCond780) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_93
        CFI (cfiCond780) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond780) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond780) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond780) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond780) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond780) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond780) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond780) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond780) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond780) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond780) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond780) CFA_SP SP+0
        CFI (cfiCond780) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond781 Using cfiCommon0
        CFI (cfiCond781) NoFunction
        CFI (cfiCond781) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_94
        CFI (cfiCond781) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond781) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond781) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond781) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond781) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond781) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond781) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond781) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond781) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond781) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond781) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond781) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond781) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond781) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond781) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond781) CFA_SP SP+0
        CFI (cfiCond781) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond782 Using cfiCommon0
        CFI (cfiCond782) NoFunction
        CFI (cfiCond782) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_99
        CFI Block cfiCond783 Using cfiCommon0
        CFI (cfiCond783) NoFunction
        CFI (cfiCond783) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_292, ??CrossCallReturnLabel_100
        CFI (cfiCond783) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond783) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond783) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond783) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond783) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond783) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond783) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond783) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond783) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond783) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond783) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond783) CFA_SP SP+0
        CFI (cfiCond783) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond784 Using cfiCommon0
        CFI (cfiCond784) NoFunction
        CFI (cfiCond784) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_0
        CFI (cfiCond784) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond784) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond784) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond784) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond784) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond784) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond784) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond784) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond784) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond784) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond784) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond784) CFA_SP SP+0
        CFI (cfiCond784) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond785 Using cfiCommon0
        CFI (cfiCond785) NoFunction
        CFI (cfiCond785) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_1
        CFI (cfiCond785) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond785) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond785) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond785) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond785) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond785) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond785) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond785) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond785) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond785) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond785) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond785) CFA_SP SP+0
        CFI (cfiCond785) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond786 Using cfiCommon0
        CFI (cfiCond786) NoFunction
        CFI (cfiCond786) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_2
        CFI (cfiCond786) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond786) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond786) CFA_SP SP+-4
        CFI Block cfiCond787 Using cfiCommon0
        CFI (cfiCond787) NoFunction
        CFI (cfiCond787) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_3
        CFI (cfiCond787) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond787) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond787) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond787) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond787) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond787) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond787) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond787) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond787) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond787) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond787) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond787) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond787) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond787) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond787) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond787) CFA_SP SP+0
        CFI (cfiCond787) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond788 Using cfiCommon0
        CFI (cfiCond788) NoFunction
        CFI (cfiCond788) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_4
        CFI (cfiCond788) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond788) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond788) CFA_SP SP+-4
        CFI Block cfiCond789 Using cfiCommon0
        CFI (cfiCond789) NoFunction
        CFI (cfiCond789) Conditional ??CrossCallReturnLabel_339, ??CrossCallReturnLabel_285, ??CrossCallReturnLabel_5
        CFI (cfiCond789) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond789) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond789) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond789) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond789) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond789) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond789) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond789) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond789) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond789) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond789) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond789) CFA_SP SP+0
        CFI (cfiCond789) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond790 Using cfiCommon0
        CFI (cfiCond790) NoFunction
        CFI (cfiCond790) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_65
        CFI (cfiCond790) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond790) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond790) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond790) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond790) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond790) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond790) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond790) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond790) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond790) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond790) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond790) CFA_SP SP+0
        CFI (cfiCond790) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond791 Using cfiCommon0
        CFI (cfiCond791) NoFunction
        CFI (cfiCond791) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_66
        CFI (cfiCond791) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond791) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond791) CFA_SP SP+-4
        CFI Block cfiCond792 Using cfiCommon0
        CFI (cfiCond792) NoFunction
        CFI (cfiCond792) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_80
        CFI (cfiCond792) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond792) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond792) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond792) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond792) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond792) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond792) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond792) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond792) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond792) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond792) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond792) CFA_SP SP+0
        CFI (cfiCond792) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond793 Using cfiCommon0
        CFI (cfiCond793) NoFunction
        CFI (cfiCond793) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_81
        CFI (cfiCond793) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond793) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond793) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond793) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond793) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond793) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond793) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond793) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond793) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond793) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond793) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond793) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond793) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond793) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond793) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond793) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond793) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond793) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond793) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond793) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond793) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond793) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond793) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond793) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond793) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond793) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond793) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond793) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond793) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond793) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond793) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond793) CFA_SP SP+0
        CFI (cfiCond793) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond794 Using cfiCommon0
        CFI (cfiCond794) NoFunction
        CFI (cfiCond794) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_388
        CFI Block cfiCond795 Using cfiCommon0
        CFI (cfiCond795) NoFunction
        CFI (cfiCond795) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_389
        CFI Block cfiCond796 Using cfiCommon0
        CFI (cfiCond796) NoFunction
        CFI (cfiCond796) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_82
        CFI (cfiCond796) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond796) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond796) CFA_SP SP+-4
        CFI Block cfiCond797 Using cfiCommon0
        CFI (cfiCond797) NoFunction
        CFI (cfiCond797) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_83
        CFI (cfiCond797) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond797) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond797) CFA_SP SP+-4
        CFI Block cfiCond798 Using cfiCommon0
        CFI (cfiCond798) NoFunction
        CFI (cfiCond798) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_137
        CFI (cfiCond798) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond798) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond798) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond798) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond798) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond798) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond798) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond798) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond798) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond798) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond798) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond798) CFA_SP SP+0
        CFI (cfiCond798) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond799 Using cfiCommon0
        CFI (cfiCond799) NoFunction
        CFI (cfiCond799) Conditional ??CrossCallReturnLabel_338, ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_138
        CFI (cfiCond799) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond799) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond799) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond799) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond799) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond799) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond799) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond799) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond799) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond799) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond799) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond799) CFA_SP SP+0
        CFI (cfiCond799) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker800 Using cfiCommon1
        CFI (cfiPicker800) NoFunction
        CFI (cfiPicker800) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond754
        CFI EndBlock cfiCond755
        CFI EndBlock cfiCond756
        CFI EndBlock cfiCond757
        CFI EndBlock cfiCond758
        CFI EndBlock cfiCond759
        CFI EndBlock cfiCond760
        CFI EndBlock cfiCond761
        CFI EndBlock cfiCond762
        CFI EndBlock cfiCond763
        CFI EndBlock cfiCond764
        CFI EndBlock cfiCond765
        CFI EndBlock cfiCond766
        CFI EndBlock cfiCond767
        CFI EndBlock cfiCond768
        CFI EndBlock cfiCond769
        CFI EndBlock cfiCond770
        CFI EndBlock cfiCond771
        CFI EndBlock cfiCond772
        CFI EndBlock cfiCond773
        CFI EndBlock cfiCond774
        CFI EndBlock cfiCond775
        CFI EndBlock cfiCond776
        CFI EndBlock cfiCond777
        CFI EndBlock cfiCond778
        CFI EndBlock cfiCond779
        CFI EndBlock cfiCond780
        CFI EndBlock cfiCond781
        CFI EndBlock cfiCond782
        CFI EndBlock cfiCond783
        CFI EndBlock cfiCond784
        CFI EndBlock cfiCond785
        CFI EndBlock cfiCond786
        CFI EndBlock cfiCond787
        CFI EndBlock cfiCond788
        CFI EndBlock cfiCond789
        CFI EndBlock cfiCond790
        CFI EndBlock cfiCond791
        CFI EndBlock cfiCond792
        CFI EndBlock cfiCond793
        CFI EndBlock cfiCond794
        CFI EndBlock cfiCond795
        CFI EndBlock cfiCond796
        CFI EndBlock cfiCond797
        CFI EndBlock cfiCond798
        CFI EndBlock cfiCond799
        CFI EndBlock cfiPicker800

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond801 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond802 Using cfiCommon0
        CFI (cfiCond802) NoFunction
        CFI (cfiCond802) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond802) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond802) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond802) CFA_SP SP+-4
        CFI Block cfiPicker803 Using cfiCommon1
        CFI (cfiPicker803) NoFunction
        CFI (cfiPicker803) Picker
        LCALL   ?Subroutine88
??CrossCallReturnLabel_280:
        XRL     A,#0x10
        RET
        CFI EndBlock cfiCond801
        CFI EndBlock cfiCond802
        CFI EndBlock cfiPicker803

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond804 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_415
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond805 Using cfiCommon0
        CFI (cfiCond805) NoFunction
        CFI (cfiCond805) Conditional ??CrossCallReturnLabel_416
        CFI (cfiCond805) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond805) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond805) CFA_SP SP+-4
        CFI Block cfiCond806 Using cfiCommon0
        CFI (cfiCond806) NoFunction
        CFI (cfiCond806) Conditional ??CrossCallReturnLabel_417
        CFI (cfiCond806) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond806) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond806) CFA_SP SP+-4
        CFI Block cfiCond807 Using cfiCommon0
        CFI (cfiCond807) NoFunction
        CFI (cfiCond807) Conditional ??CrossCallReturnLabel_418
        CFI (cfiCond807) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond807) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond807) CFA_SP SP+-4
        CFI Block cfiPicker808 Using cfiCommon1
        CFI (cfiPicker808) NoFunction
        CFI (cfiPicker808) Picker
        LCALL   ?Subroutine91
??CrossCallReturnLabel_297:
        MOV     A,#0x1
        LJMP    ?Subroutine119
        CFI EndBlock cfiCond804
        CFI EndBlock cfiCond805
        CFI EndBlock cfiCond806
        CFI EndBlock cfiCond807
        CFI EndBlock cfiPicker808
// 2058 /******************************************************************************
// 2059 * @fn  computeADCs
// 2060 * @brief       This function makes all the regular computations
// 2061 * Parameters:  
// 2062 * @return void
// 2063 ******************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
// 2064 float vref, t;
vref:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
t:
        DS 4
        REQUIRE __INIT_XDATA_Z
// 2065 //static float p1, c1, corrP, corrC;

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2066 float computeAdjustment( float *k ){ return 1.0 + t*(*k); } 
computeAdjustment:
        CFI Block cfiBlock809 Using cfiCommon0
        CFI Function computeAdjustment
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     DPTR,#t
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_3f800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
        LJMP    ?Subroutine124
        CFI EndBlock cfiBlock809

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2067 float multSaver( INT32 *p32, float *fptr ){ return ((float) *p32) * invRef * (*fptr); }
multSaver:
        CFI Block cfiBlock810 Using cfiCommon0
        CFI Function multSaver
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        LJMP    ?Subroutine124
        CFI EndBlock cfiBlock810
// 2068 
// 2069 //#pragma optimize=s 9

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2070 void computeADCs(BOOL timeout, BOOL accumulateEnergy){
computeADCs:
        CFI Block cfiBlock811 Using cfiCommon0
        CFI Function computeADCs
        FUNCALL computeADCs, substractGround
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, lin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, cube_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, addDF
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, computeAdjustment
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, computeAdjustment
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, computeAdjustment
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, lin_coeff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, convS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL computeADCs, checkVin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x1f
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        ; Saved register size: 31
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
// 2071 BYTE i, counter;
// 2072 // static is a way to reduce stack usage 
// 2073 INT32  *accptr;
// 2074 UINT16  *adcptr;
// 2075 static INT32  acc, df;//, thirtyThree_mV; 
// 2076 static float mV, rOff;
// 2077 #ifndef MidString
// 2078 static float tin;
// 2079 #endif
// 2080 static float temp[N_CHANNELS];
// 2081 float *coeff;
// 2082 signed char off = FSCTRL0;
        MOV     DPTR,#-0x20f8
        MOVX    A,@DPTR
// 2083 
// 2084     lastOff  = (INT32)off; 
        MOV     R0,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     DPTR,#lastOff
        LCALL   ??Subroutine67_0
// 2085     accptr = adcs;
??CrossCallReturnLabel_214:
        MOV     R2,#(adcs & 0xff)
        MOV     R3,#((adcs >> 8) & 0xff)
// 2086     adcptr = adcBuf[0]; // using the fact that one buffer is defined right after another
        MOV     ?V0 + 0,#(adcBuf & 0xff)
        MOV     ?V0 + 1,#((adcBuf >> 8) & 0xff)
// 2087                         // in general it is a VERY DANGEROUS ASSUMPTION, but with this C compiler it works
// 2088     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??computeADCs_0
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x2
        LCALL   ?Subroutine56
??CrossCallReturnLabel_155:
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??computeADCs_1
??computeADCs_0:
        LCALL   ?Subroutine15
??CrossCallReturnLabel_44:
        LJMP    ??computeADCs_2
// 2089     if( accumulateEnergy ){
??computeADCs_1:
        MOV     A,?V0 + 3
        JZ      ??computeADCs_3
// 2090         adcptr += (bufferCount - 1) & ( BUFFER_SIZE-1 );
        MOV     DPTR,#bufferCount
        MOVX    A,@DPTR
        MOV     R0,A
        DEC     R0
        MOV     A,#0x7
        ANL     A,R0
        CLR     C
        RLC     A
        ADD     A,#(adcBuf & 0xff)
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,#((adcBuf >> 8) & 0xff)
        MOV     ?V0 + 1,A
// 2091         for( i = 0; i < N_CHANNELS; i++, adcptr+=BUFFER_SIZE )
        MOV     R1,#0x9
// 2092             *accptr++ = *adcptr; 
??computeADCs_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine119
??CrossCallReturnLabel_413:
        INC     DPTR
        MOVX    @DPTR,A
        LCALL   ?Subroutine87
??CrossCallReturnLabel_278:
        MOV     A,?V0 + 0
        ADD     A,#0x10
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        DEC     R1
        MOV     A,R1
        JNZ     ??computeADCs_4
// 2093         adcs[ 3 ] += gnd_shift/8;
        MOV     DPTR,#gnd_shift
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_182:
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 8,R0
        MOV     A,R1
        LJMP    ??computeADCs_5
// 2094     }else{
// 2095         for( i = 0; i < N_CHANNELS; i++ ){ // 128 averaging
??computeADCs_3:
        MOV     ?V0 + 8,#0x0
// 2096             counter = BUFFER_SIZE;
??computeADCs_6:
        MOV     R4,#0x8
// 2097             acc = 0; while( counter-- )  acc += *adcptr++;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPTR,#??acc
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
        SJMP    ??computeADCs_7
??computeADCs_8:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,#0x0
        MOV     ?V0 + 15,#0x0
        MOV     DPTR,#??acc
        MOV     R0,#?V0 + 12
        LCALL   ?L_ADD_TO_X
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??computeADCs_7:
        MOV     A,R4
        DEC     R4
        JNZ     ??computeADCs_8
// 2098             if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 6
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2099            *accptr++ = acc;
        MOV     DPTR,#??acc
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
        LCALL   ?Subroutine87
// 2100         }
??CrossCallReturnLabel_279:
        INC     ?V0 + 8
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,#0x9
        JC      ??computeADCs_6
// 2101         adcs[ 3 ] += gnd_shift;
        MOV     DPTR,#gnd_shift
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 8,?V0 + 0
??computeADCs_5:
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     DPTR,#(adcs + 12)
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_TO_X
// 2102     }
// 2103     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2104     /*
// 2105     if( page.thirty_three_mv ){
// 2106         thirtyThree_mV = (INT32) ( 33 * ( adcs[ REF ] - adcs[ EXT_GND ] ) / ( page.vrefPolynom[0] - 33 ) );
// 2107         adcs[ EXT_GND ] -= thirtyThree_mV;
// 2108     }
// 2109     */
// 2110     substractGround( adcs, 0, N_CHANNELS );
        ; Setup parameters for call to function substractGround
        MOV     R4,#0x9
        MOV     R1,#0x0
        MOV     R2,#(adcs & 0xff)
        MOV     R3,#((adcs >> 8) & 0xff)
        LCALL   substractGround
// 2111     //if( page.thirty_three_mv ) adcs[ EXT_GND ] += thirtyThree_mV;
// 2112     
// 2113     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        LCALL   ?Subroutine18
??CrossCallReturnLabel_50:
        JNZ     ??computeADCs_9
        LCALL   ?Subroutine19
??CrossCallReturnLabel_52:
        JZ      ??computeADCs_10
??computeADCs_9:
        LJMP    ??computeADCs_0
// 2114     if( adcs[ REF ] == 0 ) return; 
??computeADCs_10:
        MOV     DPTR,#(adcs + 16)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_EQ_X
        JNZ     $+5
        LJMP    ??computeADCs_2
// 2115     invRef = 1.0 / (float)adcs[ REF ];
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#-0x80
        MOV     ?V0 + 11,#0x3f
        MOV     R0,#?V0 + 4
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 2116     // compute correct temperature, correct vref, coeffcient to convert sum of counts to physical values
// 2117     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??computeADCs_9
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JNZ     ??computeADCs_9
// 2118     _coeff = page.linearK[4];    t   = lin(  TEXT );
        MOV     DPTR,#_coeff
        MOV     A,#((page + 72) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 72) >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function lin
        MOV     R1,#0x6
        LCALL   lin
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2119 #ifndef MidString
// 2120     _coeff = page.linearK[5];    tin = -lin( TINT );
// 2121 #endif
// 2122     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??computeADCs_9
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JNZ     ??computeADCs_9
// 2123     adcs16[ 4 ]  = (INT16)mult(t,   100);
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPTR,#(adcs16 + 8)
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
// 2124 #ifndef MidString
// 2125     adcs16[ 5 ] = ((INT16)mult(tin, 100));
// 2126 #endif
// 2127     
// 2128     _coeff = page.dFk;
        MOV     DPTR,#_coeff
        MOV     A,#((page + 12) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((page + 12) >> 8) & 0xff)
        LCALL   ?Subroutine104
// 2129     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??CrossCallReturnLabel_326:
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2130     /*
// 2131     if( abs( t - tin ) > 20.0 ){
// 2132              rOff = cube_coeff( 0.5*( tin+t ) );
// 2133     }else    rOff = cube_coeff( t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
// 2134     */
// 2135     //if( abs( adcs16[ 4 ] - adcs16[ 5 ] ) > 2000 ) t = 0.5*( tin+t );
// 2136     rOff = cube_coeff( &t );    //rOff = ( ( ( coeff[0]*t + coeff[1] )*t + coeff[2] )*t + coeff[3] );
        ; Setup parameters for call to function cube_coeff
        MOV     R2,#(t & 0xff)
        MOV     R3,#((t >> 8) & 0xff)
        LCALL   cube_coeff
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#??rOff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2137     
// 2138     df = (INT32) rOff;
        MOV     DPTR,#??rOff
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     DPTR,#??df
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2139     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2140     theRealOffset = (INT8)( (delta + (lastOff<<2) - ( df )) >> 2 );
        MOV     DPTR,#delta
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#lastOff
        LCALL   ?Subroutine26
??CrossCallReturnLabel_70:
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 4
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 5
        MOV     R3,A
        MOV     DPTR,#??df
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,R2
        CLR     C
        SUBB    A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     A,R3
        SUBB    A,?V0 + 5
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,?V0 + 0
        MOV     DPTR,#theRealOffset
        MOVX    @DPTR,A
// 2141 
// 2142     // adjust frequency by temperature
// 2143     if( timeout && ( si->radioMode == RADIO_MODE_UNDEF ) ) addDF( df /*+ page.theDelta*/ - delta ); 
        MOV     A,?V0 + 2
        JZ      ??computeADCs_11
        LCALL   ?Subroutine32
??CrossCallReturnLabel_81:
        XRL     A,#0xf0
        JNZ     ??computeADCs_11
        ; Setup parameters for call to function addDF
        MOV     DPTR,#??df
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#delta
        MOV     R0,#?V0 + 4
        LCALL   ?L_SUB_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   addDF
// 2144     //RFST = STROBE_CAL; 
// 2145 
// 2146     coeff = page.vrefPolynom;
// 2147     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??computeADCs_11:
        LCALL   ?Subroutine18
??CrossCallReturnLabel_51:
        JNZ     ??computeADCs_12
        LCALL   ?Subroutine19
??CrossCallReturnLabel_53:
        JZ      ??computeADCs_13
??computeADCs_12:
        LJMP    ??computeADCs_0
// 2148     vref  = coeff[0] * ( 1.0 - coeff[1]*sqr( t - coeff[2] ) );
??computeADCs_13:
        MOV     DPTR,#t
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     DPTR,#(page + 36)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     DPTR,#(page + 28)
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     ?V0 + 16,#0x0
        MOV     ?V0 + 17,#0x0
        MOV     ?V0 + 18,#-0x80
        MOV     ?V0 + 19,#0x3f
        MOV     DPTR,#(page + 32)
        MOV     R0,#?V0 + 20
        LCALL   ?L_MOV_X
        MOV     ?V0 + 4,?V0 + 8
        MOV     ?V0 + 5,?V0 + 9
        MOV     ?V0 + 6,?V0 + 10
        MOV     ?V0 + 7,?V0 + 11
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 20
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 16
        MOV     R1,#?V0 + 20
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 16
        LCALL   ?FLT_MUL
        MOV     DPTR,#vref
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2149     t -= 25.0;
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_c1c80000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_ADD
        MOV     DPTR,#t
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2150     invRef  *= vref; // / ((float)adcs[ REF ]);  
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#vref
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 2151     // scale everything to physical units
// 2152     // Vout  0      Pin   1     Iout  2      Gnd ext 3        Ref 4      Vin  5       Text  6     Tin 7
// 2153     for( i = 0; i<N_CHANNELS; i++) 
        MOV     ?V0 + 8,#0x0
// 2154         /*if( indices[ i ] != 0xFF )*/ {
// 2155             mV = invRef * ((float)adcs[i]); //temp[i]; // adcs values (all but REF) should be scaled to fit into UINT16 - k should be accordingly set
??computeADCs_14:
        MOV     DPL,?V0 + 8
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 10
        LCALL   ?S_SHL
        MOV     ?V0 + 4,?V0 + 10
        MOV     ?V0 + 5,?V0 + 11
        MOV     DPTR,#invRef
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 4
        ADD     A,#(adcs & 0xff)
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,#((adcs >> 8) & 0xff)
        MOV     DPH,A
        MOV     R0,#?V0 + 16
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 16
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 16
        LCALL   ?FLT_MUL
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2156             if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2157 #ifdef MidString
// 2158             if( (i == 8) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
        MOV     A,#0x8
        XRL     A,?V0 + 8
        JZ      ??computeADCs_15
// 2159             if( (i == 7) && (REFERENCE == ADC_REF_AVDD) ) mV *= computeAdjustment( &page.tkCurrent ); // t - 25
        MOV     A,#0x7
        XRL     A,?V0 + 8
        JZ      ??computeADCs_15
// 2160 #else
// 2161             if( i == 1 )  mV *= computeAdjustment( &page.tkPower );   // t - 25
// 2162 #endif
// 2163             if( i == 2 )  mV *= computeAdjustment( &page.tkCurrent ); // t - 25
        MOV     A,#0x2
        XRL     A,?V0 + 8
        JNZ     ??computeADCs_16
??computeADCs_15:
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        ; Setup parameters for call to function computeAdjustment
        MOV     R2,#((page + 177) & 0xff)
        MOV     R3,#(((page + 177) >> 8) & 0xff)
        LCALL   computeAdjustment
        MOV     ?V0 + 16,R2
        MOV     ?V0 + 17,R3
        MOV     ?V0 + 18,R4
        MOV     ?V0 + 19,R5
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 16
        LCALL   ?FLT_MUL
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2164             if( indices[ i ] == 0xFF ){ temp[i] = mV; continue; }
??computeADCs_16:
        MOV     A,?V0 + 4
        ADD     A,#(??temp & 0xff)
        MOV     R0,A
        MOV     A,?V0 + 5
        ADDC    A,#((??temp >> 8) & 0xff)
        MOV     R1,A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        MOV     A,?V0 + 6
        ADD     A,#(indices & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((indices >> 8) & 0xff)
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,#-0x1
        XRL     A,?V0 + 6
        JNZ     ??computeADCs_17
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPL,?V0 + 4
        MOV     DPH,R1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
        SJMP    ??computeADCs_18
// 2165             _coeff = page.linearK[  indices[i] ];
??computeADCs_17:
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,#((page + 40) & 0xff)
        MOV     R0,A
        MOV     A,?V0 + 7
        ADDC    A,#(((page + 40) >> 8) & 0xff)
        MOV     R1,A
        MOV     DPTR,#_coeff
        LCALL   ??Subroutine67_0
// 2166             temp[i] = lin_coeff( mV );
??CrossCallReturnLabel_215:
        ; Setup parameters for call to function lin_coeff
        MOV     DPTR,#??mV
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        LCALL   lin_coeff
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     ?V0 + 14,R4
        MOV     ?V0 + 15,R5
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 2167             if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??computeADCs_0
// 2168         }
??computeADCs_18:
        INC     ?V0 + 8
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,#0x9
        JNC     $+5
        LJMP    ??computeADCs_14
// 2169 
// 2170     //temp[ 1 ] *= vref * invVref0;               // power correction
// 2171     // crosstalk   Istr
// 2172 
// 2173     //temp[ 0 ] -= mult( temp[2]*0.0001,  page.shunt );                  // Vout
// 2174     //                  Power           Vin
// 2175     //temp[ 5 ] += mult( temp[1]/temp[5], page.shunt );      // Vin
// 2176     
// 2177     #ifdef MidString    
// 2178         adcs16[ 0 ] = convU( temp[ 0 ] ); // temp[ 0 ] ); 
        ; Setup parameters for call to function convU
        MOV     DPTR,#??temp
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convU
        MOV     DPTR,#adcs16
        LCALL   ??Subroutine114_0
// 2179         adcs16[ 1 ] = convU( temp[ 1 ] ); // temp[ 1 ] ); 
??CrossCallReturnLabel_359:
        ; Setup parameters for call to function convU
        MOV     DPTR,#(??temp + 4)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convU
        MOV     DPTR,#(adcs16 + 2)
        LCALL   ?Subroutine3
// 2180         if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??CrossCallReturnLabel_6:
        JNZ     ??computeADCs_19
        LCALL   ?Subroutine6
??CrossCallReturnLabel_26:
        JZ      ??computeADCs_20
??computeADCs_19:
        LJMP    ??computeADCs_0
// 2181         adcs16[ 3 ] = convU( temp[ 5 ] ); // temp[ 5 ] );
??computeADCs_20:
        ; Setup parameters for call to function convU
        MOV     DPTR,#(??temp + 20)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convU
        MOV     DPTR,#(adcs16 + 6)
        LCALL   ??Subroutine114_0
// 2182         adcs16[ 5 ] = convS( temp[ 8 ] ); // Iin2 
??CrossCallReturnLabel_360:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(??temp + 32)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convS
        MOV     DPTR,#(adcs16 + 10)
        LCALL   ??Subroutine114_0
// 2183         //adcs16[ 7 ] = (INT16)(adcs[7]+adcs[3]);  //temp.debug stuff
// 2184         adcs16[ 6 ] = convS( temp[ 7 ] );
??CrossCallReturnLabel_361:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(??temp + 28)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convS
        MOV     DPTR,#(adcs16 + 12)
        LCALL   ??Subroutine114_0
// 2185     #else
// 2186         adcs16[ 0 ] = convU( temp[ 0 ] - mult( temp[2]*0.0001,  page.shunt ) ); //temp[ 0 ] ); 
// 2187         adcs16[ 1 ] = convU( temp[ 1 ] *= vref * invVref0 );   //temp[ 1 ] ); 
// 2188         adcs16[ 3 ] = convU( temp[ 5 ] + mult( temp[1]/temp[5], page.shunt ) );// temp[ 5 ] );
// 2189     #endif    
// 2190     adcs16[ 2 ] = convS( temp[ 2 ] );
??CrossCallReturnLabel_362:
        ; Setup parameters for call to function convS
        MOV     DPTR,#(??temp + 8)
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   convS
        MOV     DPTR,#(adcs16 + 4)
        LCALL   ?Subroutine3
// 2191     
// 2192     //adcs16[ 6 ] = (UINT16)adcs[ EXT_GND ];
// 2193     if( (flags[ PackageReceived ]) || (flags[DataSent]) ){ flags[AltCheckVin] = TRUE; return; }
??CrossCallReturnLabel_7:
        JNZ     ??computeADCs_19
        LCALL   ?Subroutine6
??CrossCallReturnLabel_27:
        JZ      $+5
        LJMP    ??computeADCs_0
// 2194     
// 2195     if( accumulateEnergy ){    
        MOV     A,?V0 + 3
        JZ      ??computeADCs_2
// 2196         //static BYTE _history = 0;
// 2197         checkVin();
        ; Setup parameters for call to function checkVin
        LCALL   checkVin
??computeADCs_2:
        MOV     R7,#0x18
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock811
// 2198         /*_history <<= 1; 
// 2199         if( ((INT16)adcs16[ 2 ]) > 15000 ){ //page.cur_noise ){ 
// 2200             deltaEnergy += (double) ( temp[2] * temp[0] * KE ); // W*h
// 2201             _history |= 1;
// 2202         }else{
// 2203             if( _history == 0xFE ){
// 2204                 //BYTE *ptr = nextSlot();
// 2205                 energy += deltaEnergy; 
// 2206                 zerofill( (BYTE *)&deltaEnergy, 4 ); 
// 2207                 //if(      ptr > ENERGY_WRITE_LIMIT ) savePB();
// 2208                 //else if( ptr ) initiateTransfer( (BYTE *)&energy, ptr, 4 );
// 2209             }
// 2210         }*/
// 2211     }
// 2212 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine87:
        CFI Block cfiCond812 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_277
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond813 Using cfiCommon0
        CFI (cfiCond813) NoFunction
        CFI (cfiCond813) Conditional ??CrossCallReturnLabel_278
        CFI (cfiCond813) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond813) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond813) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond813) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond813) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond813) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond813) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond813) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond813) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond813) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond813) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond813) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond813) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond813) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond813) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond813) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond813) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond813) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond813) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond813) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond813) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond813) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond813) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond813) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond813) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond813) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond813) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond813) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond813) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond813) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond813) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond813) CFA_SP SP+0
        CFI (cfiCond813) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond814 Using cfiCommon0
        CFI (cfiCond814) NoFunction
        CFI (cfiCond814) Conditional ??CrossCallReturnLabel_279
        CFI (cfiCond814) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond814) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond814) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond814) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond814) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond814) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond814) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond814) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond814) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond814) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond814) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond814) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond814) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond814) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond814) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond814) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond814) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond814) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond814) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond814) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond814) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond814) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond814) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond814) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond814) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond814) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond814) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond814) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond814) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond814) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond814) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond814) CFA_SP SP+0
        CFI (cfiCond814) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker815 Using cfiCommon1
        CFI (cfiPicker815) NoFunction
        CFI (cfiPicker815) Picker
        MOV     A,R2
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond812
        CFI EndBlock cfiCond813
        CFI EndBlock cfiCond814
        CFI EndBlock cfiPicker815

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond816 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_200
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond817 Using cfiCommon0
        CFI (cfiCond817) NoFunction
        CFI (cfiCond817) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond817) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond817) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond817) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond817) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond817) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond817) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond817) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond817) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond817) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond817) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond817) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond817) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond817) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond817) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond817) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond817) CFA_SP SP+0
        CFI (cfiCond817) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond818 Using cfiCommon0
        CFI (cfiCond818) NoFunction
        CFI (cfiCond818) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond818) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond818) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond818) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond818) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond818) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond818) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond818) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond818) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond818) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond818) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond818) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond818) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond818) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond818) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond818) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond818) CFA_SP SP+0
        CFI (cfiCond818) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond819 Using cfiCommon0
        CFI (cfiCond819) NoFunction
        CFI (cfiCond819) Conditional ??CrossCallReturnLabel_203
        CFI (cfiCond819) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond819) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond819) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond819) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond819) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond819) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond819) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond819) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond819) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond819) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond819) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond819) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond819) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond819) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond819) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond819) CFA_SP SP+0
        CFI (cfiCond819) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiPicker820 Using cfiCommon1
        CFI (cfiPicker820) NoFunction
        CFI (cfiPicker820) Picker
        MOV     DPTR,#??protectionModuleOffTimer
        CFI Block cfiCond821 Using cfiCommon0
        CFI (cfiCond821) NoFunction
        CFI (cfiCond821) Conditional ??CrossCallReturnLabel_204
        CFI (cfiCond821) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond821) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond821) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond821) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond821) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond821) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond821) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond821) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond821) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond821) CFA_SP SP+0
        CFI (cfiCond821) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond822 Using cfiCommon0
        CFI (cfiCond822) NoFunction
        CFI (cfiCond822) Conditional ??CrossCallReturnLabel_205
        CFI (cfiCond822) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond822) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond822) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond822) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond822) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond822) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond822) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond822) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond822) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond822) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond822) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond822) CFA_SP SP+0
        CFI (cfiCond822) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond823 Using cfiCommon0
        CFI (cfiCond823) NoFunction
        CFI (cfiCond823) Conditional ??CrossCallReturnLabel_206
        CFI Block cfiCond824 Using cfiCommon0
        CFI (cfiCond824) NoFunction
        CFI (cfiCond824) Conditional ??CrossCallReturnLabel_207
        CFI Block cfiCond825 Using cfiCommon0
        CFI (cfiCond825) NoFunction
        CFI (cfiCond825) Conditional ??CrossCallReturnLabel_208
        CFI Block cfiCond826 Using cfiCommon0
        CFI (cfiCond826) NoFunction
        CFI (cfiCond826) Conditional ??CrossCallReturnLabel_209
        CFI (cfiCond826) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond826) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond826) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond826) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond826) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond826) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond826) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond826) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond826) CFA_SP SP+0
        CFI (cfiCond826) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond827 Using cfiCommon0
        CFI (cfiCond827) NoFunction
        CFI (cfiCond827) Conditional ??CrossCallReturnLabel_210
        CFI (cfiCond827) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond827) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond827) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond827) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond827) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond827) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond827) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond827) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond827) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond827) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond827) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond827) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond827) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond827) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond827) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond827) CFA_SP SP+0
        CFI (cfiCond827) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond828 Using cfiCommon0
        CFI (cfiCond828) NoFunction
        CFI (cfiCond828) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond828) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond828) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond828) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond828) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond828) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond828) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond828) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond828) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond828) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond828) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond828) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond828) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond828) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond828) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond828) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond828) CFA_SP SP+0
        CFI (cfiCond828) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond829 Using cfiCommon0
        CFI (cfiCond829) NoFunction
        CFI (cfiCond829) Conditional ??CrossCallReturnLabel_212
        CFI (cfiCond829) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond829) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond829) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond829) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond829) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond829) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond829) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond829) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond829) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond829) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond829) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond829) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond829) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond829) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond829) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond829) CFA_SP SP+0
        CFI (cfiCond829) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond830 Using cfiCommon0
        CFI (cfiCond830) NoFunction
        CFI (cfiCond830) Conditional ??CrossCallReturnLabel_213
        CFI (cfiCond830) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond830) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond830) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond830) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond830) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond830) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond830) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond830) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond830) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond830) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond830) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond830) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond830) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond830) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond830) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond830) CFA_SP SP+0
        CFI (cfiCond830) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond831 Using cfiCommon0
        CFI (cfiCond831) NoFunction
        CFI (cfiCond831) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond831) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond831) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond831) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond831) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond831) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond831) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond831) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond831) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond831) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond831) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond831) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond831) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond831) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond831) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond831) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond831) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond831) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond831) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond831) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond831) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond831) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond831) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond831) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond831) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond831) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond831) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond831) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond831) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond831) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond831) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond831) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond831) CFA_SP SP+0
        CFI (cfiCond831) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond832 Using cfiCommon0
        CFI (cfiCond832) NoFunction
        CFI (cfiCond832) Conditional ??CrossCallReturnLabel_215
        CFI (cfiCond832) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond832) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond832) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond832) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond832) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond832) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond832) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond832) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond832) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond832) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond832) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond832) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond832) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond832) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond832) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond832) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond832) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond832) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond832) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond832) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond832) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond832) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond832) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond832) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond832) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond832) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond832) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond832) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond832) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond832) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond832) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond832) CFA_SP SP+0
        CFI (cfiCond832) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond833 Using cfiCommon0
        CFI (cfiCond833) NoFunction
        CFI (cfiCond833) Conditional ??CrossCallReturnLabel_216
        CFI (cfiCond833) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond833) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond833) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond833) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond833) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond833) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond833) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond833) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond833) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond833) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond833) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond833) CFA_SP SP+0
        CFI (cfiCond833) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond834 Using cfiCommon0
        CFI (cfiCond834) NoFunction
        CFI (cfiCond834) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond834) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond834) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond834) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond834) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond834) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond834) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond834) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond834) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond834) CFA_SP SP+0
        CFI (cfiCond834) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond835 Using cfiCommon0
        CFI (cfiCond835) NoFunction
        CFI (cfiCond835) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond835) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond835) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond835) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond835) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond835) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond835) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond835) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond835) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond835) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond835) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond835) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond835) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond835) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond835) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond835) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond835) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond835) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond835) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond835) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond835) CFA_SP SP+0
        CFI (cfiCond835) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond836 Using cfiCommon0
        CFI (cfiCond836) NoFunction
        CFI (cfiCond836) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond836) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond836) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond836) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond836) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond836) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond836) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond836) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond836) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond836) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond836) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond836) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond836) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond836) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond836) CFA_SP SP+0
        CFI (cfiCond836) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond837 Using cfiCommon0
        CFI (cfiCond837) NoFunction
        CFI (cfiCond837) Conditional ??CrossCallReturnLabel_220
        CFI (cfiCond837) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond837) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond837) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond837) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond837) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond837) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond837) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond837) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond837) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond837) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond837) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond837) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond837) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond837) CFA_SP SP+0
        CFI (cfiCond837) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond838 Using cfiCommon0
        CFI (cfiCond838) NoFunction
        CFI (cfiCond838) Conditional ??CrossCallReturnLabel_221
        CFI (cfiCond838) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond838) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond838) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond838) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond838) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond838) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond838) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond838) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond838) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond838) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond838) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond838) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond838) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond838) CFA_SP SP+0
        CFI (cfiCond838) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond839 Using cfiCommon0
        CFI (cfiCond839) NoFunction
        CFI (cfiCond839) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond839) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond839) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond839) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond839) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond839) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond839) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond839) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond839) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond839) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond839) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond839) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond839) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond839) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond839) CFA_SP SP+0
        CFI (cfiCond839) CFA_XSP16 add(XSP16, 13)
??Subroutine67_0:
        LCALL   ?Subroutine111
??CrossCallReturnLabel_346:
        RET
        CFI EndBlock cfiCond816
        CFI EndBlock cfiCond817
        CFI EndBlock cfiCond818
        CFI EndBlock cfiCond819
        CFI EndBlock cfiPicker820
        CFI EndBlock cfiCond821
        CFI EndBlock cfiCond822
        CFI EndBlock cfiCond823
        CFI EndBlock cfiCond824
        CFI EndBlock cfiCond825
        CFI EndBlock cfiCond826
        CFI EndBlock cfiCond827
        CFI EndBlock cfiCond828
        CFI EndBlock cfiCond829
        CFI EndBlock cfiCond830
        CFI EndBlock cfiCond831
        CFI EndBlock cfiCond832
        CFI EndBlock cfiCond833
        CFI EndBlock cfiCond834
        CFI EndBlock cfiCond835
        CFI EndBlock cfiCond836
        CFI EndBlock cfiCond837
        CFI EndBlock cfiCond838
        CFI EndBlock cfiCond839

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine111:
        CFI Block cfiCond840 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_87
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond841 Using cfiCommon0
        CFI (cfiCond841) NoFunction
        CFI (cfiCond841) Conditional ??CrossCallReturnLabel_344, ??CrossCallReturnLabel_88
        CFI Block cfiCond842 Using cfiCommon0
        CFI (cfiCond842) NoFunction
        CFI (cfiCond842) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_89
        CFI (cfiCond842) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond842) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond842) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond842) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond842) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond842) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond842) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond842) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond842) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond842) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond842) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond842) CFA_SP SP+0
        CFI (cfiCond842) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond843 Using cfiCommon0
        CFI (cfiCond843) NoFunction
        CFI (cfiCond843) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_300, ??CrossCallReturnLabel_90
        CFI (cfiCond843) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond843) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond843) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond843) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond843) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond843) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond843) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond843) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond843) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond843) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond843) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond843) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond843) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond843) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond843) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond843) CFA_SP SP+0
        CFI (cfiCond843) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond844 Using cfiCommon0
        CFI (cfiCond844) NoFunction
        CFI (cfiCond844) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_59
        CFI (cfiCond844) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond844) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond844) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond844) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond844) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond844) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond844) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond844) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond844) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond844) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond844) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond844) CFA_SP SP+0
        CFI (cfiCond844) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond845 Using cfiCommon0
        CFI (cfiCond845) NoFunction
        CFI (cfiCond845) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_299, ??CrossCallReturnLabel_60
        CFI (cfiCond845) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond845) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond845) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond845) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond845) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond845) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond845) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond845) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond845) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond845) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond845) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond845) CFA_SP SP+0
        CFI (cfiCond845) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond846 Using cfiCommon0
        CFI (cfiCond846) NoFunction
        CFI (cfiCond846) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_200
        CFI (cfiCond846) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond846) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond846) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond846) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond846) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond846) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond846) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond846) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond846) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond846) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond846) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond846) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond846) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond846) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond846) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond846) CFA_SP SP+0
        CFI (cfiCond846) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond847 Using cfiCommon0
        CFI (cfiCond847) NoFunction
        CFI (cfiCond847) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_201
        CFI (cfiCond847) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond847) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond847) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond847) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond847) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond847) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond847) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond847) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond847) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond847) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond847) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond847) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond847) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond847) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond847) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond847) CFA_SP SP+0
        CFI (cfiCond847) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond848 Using cfiCommon0
        CFI (cfiCond848) NoFunction
        CFI (cfiCond848) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_202
        CFI (cfiCond848) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond848) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond848) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond848) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond848) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond848) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond848) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond848) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond848) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond848) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond848) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond848) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond848) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond848) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond848) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond848) CFA_SP SP+0
        CFI (cfiCond848) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond849 Using cfiCommon0
        CFI (cfiCond849) NoFunction
        CFI (cfiCond849) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_203
        CFI (cfiCond849) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond849) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond849) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond849) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond849) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond849) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond849) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond849) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond849) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond849) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond849) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond849) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond849) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond849) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond849) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond849) CFA_SP SP+0
        CFI (cfiCond849) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond850 Using cfiCommon0
        CFI (cfiCond850) NoFunction
        CFI (cfiCond850) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_204
        CFI (cfiCond850) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond850) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond850) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond850) V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond850) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond850) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond850) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond850) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond850) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond850) CFA_SP SP+0
        CFI (cfiCond850) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond851 Using cfiCommon0
        CFI (cfiCond851) NoFunction
        CFI (cfiCond851) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_205
        CFI (cfiCond851) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond851) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond851) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond851) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond851) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond851) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond851) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond851) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond851) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond851) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond851) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond851) CFA_SP SP+0
        CFI (cfiCond851) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond852 Using cfiCommon0
        CFI (cfiCond852) NoFunction
        CFI (cfiCond852) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_206
        CFI Block cfiCond853 Using cfiCommon0
        CFI (cfiCond853) NoFunction
        CFI (cfiCond853) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_207
        CFI Block cfiCond854 Using cfiCommon0
        CFI (cfiCond854) NoFunction
        CFI (cfiCond854) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_208
        CFI Block cfiCond855 Using cfiCommon0
        CFI (cfiCond855) NoFunction
        CFI (cfiCond855) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_209
        CFI (cfiCond855) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond855) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond855) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond855) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond855) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond855) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond855) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond855) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond855) CFA_SP SP+0
        CFI (cfiCond855) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond856 Using cfiCommon0
        CFI (cfiCond856) NoFunction
        CFI (cfiCond856) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_210
        CFI (cfiCond856) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond856) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond856) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond856) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond856) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond856) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond856) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond856) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond856) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond856) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond856) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond856) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond856) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond856) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond856) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond856) CFA_SP SP+0
        CFI (cfiCond856) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond857 Using cfiCommon0
        CFI (cfiCond857) NoFunction
        CFI (cfiCond857) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_211
        CFI (cfiCond857) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond857) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond857) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond857) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond857) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond857) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond857) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond857) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond857) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond857) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond857) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond857) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond857) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond857) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond857) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond857) CFA_SP SP+0
        CFI (cfiCond857) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond858 Using cfiCommon0
        CFI (cfiCond858) NoFunction
        CFI (cfiCond858) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_212
        CFI (cfiCond858) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond858) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond858) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond858) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond858) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond858) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond858) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond858) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond858) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond858) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond858) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond858) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond858) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond858) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond858) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond858) CFA_SP SP+0
        CFI (cfiCond858) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond859 Using cfiCommon0
        CFI (cfiCond859) NoFunction
        CFI (cfiCond859) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_213
        CFI (cfiCond859) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond859) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond859) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond859) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond859) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond859) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond859) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond859) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond859) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond859) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond859) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond859) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond859) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond859) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond859) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond859) CFA_SP SP+0
        CFI (cfiCond859) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond860 Using cfiCommon0
        CFI (cfiCond860) NoFunction
        CFI (cfiCond860) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_214
        CFI (cfiCond860) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond860) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond860) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond860) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond860) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond860) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond860) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond860) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond860) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond860) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond860) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond860) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond860) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond860) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond860) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond860) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond860) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond860) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond860) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond860) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond860) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond860) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond860) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond860) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond860) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond860) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond860) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond860) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond860) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond860) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond860) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond860) CFA_SP SP+0
        CFI (cfiCond860) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond861 Using cfiCommon0
        CFI (cfiCond861) NoFunction
        CFI (cfiCond861) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_215
        CFI (cfiCond861) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond861) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond861) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond861) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond861) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond861) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond861) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond861) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond861) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond861) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond861) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond861) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond861) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond861) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond861) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond861) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond861) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond861) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond861) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond861) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond861) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond861) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond861) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond861) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond861) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond861) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond861) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond861) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond861) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond861) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond861) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond861) CFA_SP SP+0
        CFI (cfiCond861) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond862 Using cfiCommon0
        CFI (cfiCond862) NoFunction
        CFI (cfiCond862) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_216
        CFI (cfiCond862) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond862) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond862) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond862) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond862) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond862) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond862) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond862) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond862) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond862) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond862) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond862) CFA_SP SP+0
        CFI (cfiCond862) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond863 Using cfiCommon0
        CFI (cfiCond863) NoFunction
        CFI (cfiCond863) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_217
        CFI (cfiCond863) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond863) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond863) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond863) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond863) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond863) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond863) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond863) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond863) CFA_SP SP+0
        CFI (cfiCond863) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond864 Using cfiCommon0
        CFI (cfiCond864) NoFunction
        CFI (cfiCond864) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_218
        CFI (cfiCond864) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond864) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond864) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond864) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond864) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond864) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond864) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond864) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond864) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond864) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond864) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond864) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond864) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond864) V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond864) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond864) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond864) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond864) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond864) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond864) CFA_SP SP+0
        CFI (cfiCond864) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond865 Using cfiCommon0
        CFI (cfiCond865) NoFunction
        CFI (cfiCond865) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_219
        CFI (cfiCond865) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond865) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond865) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond865) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond865) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond865) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond865) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond865) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond865) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond865) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond865) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond865) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond865) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond865) CFA_SP SP+0
        CFI (cfiCond865) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond866 Using cfiCommon0
        CFI (cfiCond866) NoFunction
        CFI (cfiCond866) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_220
        CFI (cfiCond866) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond866) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond866) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond866) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond866) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond866) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond866) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond866) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond866) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond866) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond866) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond866) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond866) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond866) CFA_SP SP+0
        CFI (cfiCond866) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond867 Using cfiCommon0
        CFI (cfiCond867) NoFunction
        CFI (cfiCond867) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_221
        CFI (cfiCond867) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond867) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond867) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond867) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond867) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond867) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond867) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond867) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond867) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond867) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond867) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond867) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond867) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond867) CFA_SP SP+0
        CFI (cfiCond867) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond868 Using cfiCommon0
        CFI (cfiCond868) NoFunction
        CFI (cfiCond868) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_222
        CFI (cfiCond868) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond868) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond868) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond868) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond868) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond868) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond868) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond868) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond868) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond868) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond868) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond868) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond868) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond868) CFA_SP SP+0
        CFI (cfiCond868) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond869 Using cfiCommon0
        CFI (cfiCond869) NoFunction
        CFI (cfiCond869) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_91
        CFI (cfiCond869) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond869) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond869) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond869) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond869) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond869) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond869) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond869) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond869) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond869) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond869) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond869) CFA_SP SP+0
        CFI (cfiCond869) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond870 Using cfiCommon0
        CFI (cfiCond870) NoFunction
        CFI (cfiCond870) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_92
        CFI (cfiCond870) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond870) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond870) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond870) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond870) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond870) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond870) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond870) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond870) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond870) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond870) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond870) CFA_SP SP+0
        CFI (cfiCond870) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond871 Using cfiCommon0
        CFI (cfiCond871) NoFunction
        CFI (cfiCond871) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_32
        CFI (cfiCond871) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond871) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond871) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond871) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond871) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond871) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond871) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond871) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond871) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond871) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond871) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond871) CFA_SP SP+0
        CFI (cfiCond871) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond872 Using cfiCommon0
        CFI (cfiCond872) NoFunction
        CFI (cfiCond872) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_33
        CFI (cfiCond872) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond872) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond872) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond872) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond872) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond872) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond872) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond872) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond872) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond872) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond872) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond872) CFA_SP SP+0
        CFI (cfiCond872) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond873 Using cfiCommon0
        CFI (cfiCond873) NoFunction
        CFI (cfiCond873) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_32
        CFI (cfiCond873) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond873) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond873) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond873) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond873) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond873) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond873) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond873) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond873) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond873) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond873) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond873) CFA_SP SP+0
        CFI (cfiCond873) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond874 Using cfiCommon0
        CFI (cfiCond874) NoFunction
        CFI (cfiCond874) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_33
        CFI (cfiCond874) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond874) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond874) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond874) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond874) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond874) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond874) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond874) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond874) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond874) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond874) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond874) CFA_SP SP+0
        CFI (cfiCond874) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker875 Using cfiCommon1
        CFI (cfiPicker875) NoFunction
        CFI (cfiPicker875) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond840
        CFI EndBlock cfiCond841
        CFI EndBlock cfiCond842
        CFI EndBlock cfiCond843
        CFI EndBlock cfiCond844
        CFI EndBlock cfiCond845
        CFI EndBlock cfiCond846
        CFI EndBlock cfiCond847
        CFI EndBlock cfiCond848
        CFI EndBlock cfiCond849
        CFI EndBlock cfiCond850
        CFI EndBlock cfiCond851
        CFI EndBlock cfiCond852
        CFI EndBlock cfiCond853
        CFI EndBlock cfiCond854
        CFI EndBlock cfiCond855
        CFI EndBlock cfiCond856
        CFI EndBlock cfiCond857
        CFI EndBlock cfiCond858
        CFI EndBlock cfiCond859
        CFI EndBlock cfiCond860
        CFI EndBlock cfiCond861
        CFI EndBlock cfiCond862
        CFI EndBlock cfiCond863
        CFI EndBlock cfiCond864
        CFI EndBlock cfiCond865
        CFI EndBlock cfiCond866
        CFI EndBlock cfiCond867
        CFI EndBlock cfiCond868
        CFI EndBlock cfiCond869
        CFI EndBlock cfiCond870
        CFI EndBlock cfiCond871
        CFI EndBlock cfiCond872
        CFI EndBlock cfiCond873
        CFI EndBlock cfiCond874
        CFI EndBlock cfiPicker875

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond876 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond877 Using cfiCommon0
        CFI (cfiCond877) NoFunction
        CFI (cfiCond877) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond877) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond877) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond877) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond877) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond877) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond877) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond877) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond877) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond877) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond877) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond877) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond877) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond877) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond877) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond877) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond877) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond877) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond877) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond877) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond877) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond877) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond877) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond877) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond877) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond877) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond877) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond877) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond877) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond877) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond877) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond877) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond877) CFA_SP SP+0
        CFI (cfiCond877) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker878 Using cfiCommon1
        CFI (cfiPicker878) NoFunction
        CFI (cfiPicker878) Picker
        LCALL   ?Subroutine88
??CrossCallReturnLabel_281:
        RET
        CFI EndBlock cfiCond876
        CFI EndBlock cfiCond877
        CFI EndBlock cfiPicker878

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine88:
        CFI Block cfiCond879 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond880 Using cfiCommon0
        CFI (cfiCond880) NoFunction
        CFI (cfiCond880) Conditional ??CrossCallReturnLabel_280, ??CrossCallReturnLabel_66
        CFI (cfiCond880) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond880) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond880) CFA_SP SP+-4
        CFI Block cfiCond881 Using cfiCommon0
        CFI (cfiCond881) NoFunction
        CFI (cfiCond881) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_80
        CFI (cfiCond881) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond881) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond881) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond881) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond881) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond881) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond881) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond881) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond881) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond881) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond881) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond881) CFA_SP SP+0
        CFI (cfiCond881) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond882 Using cfiCommon0
        CFI (cfiCond882) NoFunction
        CFI (cfiCond882) Conditional ??CrossCallReturnLabel_281, ??CrossCallReturnLabel_81
        CFI (cfiCond882) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond882) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond882) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond882) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond882) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond882) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond882) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond882) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond882) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond882) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond882) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond882) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond882) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond882) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond882) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond882) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond882) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond882) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond882) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond882) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond882) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond882) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond882) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond882) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond882) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond882) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond882) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond882) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond882) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond882) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond882) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond882) CFA_SP SP+0
        CFI (cfiCond882) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker883 Using cfiCommon1
        CFI (cfiPicker883) NoFunction
        CFI (cfiPicker883) Picker
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x3a
        CFI Block cfiCond884 Using cfiCommon0
        CFI (cfiCond884) NoFunction
        CFI (cfiCond884) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_388
        CFI Block cfiCond885 Using cfiCommon0
        CFI (cfiCond885) NoFunction
        CFI (cfiCond885) Conditional ??CrossCallReturnLabel_283, ??CrossCallReturnLabel_389
        CFI Block cfiCond886 Using cfiCommon0
        CFI (cfiCond886) NoFunction
        CFI (cfiCond886) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_82
        CFI (cfiCond886) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond886) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond886) CFA_SP SP+-4
        CFI Block cfiCond887 Using cfiCommon0
        CFI (cfiCond887) NoFunction
        CFI (cfiCond887) Conditional ??CrossCallReturnLabel_282, ??CrossCallReturnLabel_83
        CFI (cfiCond887) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond887) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond887) CFA_SP SP+-4
        CFI Block cfiCond888 Using cfiCommon0
        CFI (cfiCond888) NoFunction
        CFI (cfiCond888) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_137
        CFI (cfiCond888) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond888) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond888) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond888) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond888) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond888) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond888) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond888) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond888) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond888) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond888) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond888) CFA_SP SP+0
        CFI (cfiCond888) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond889 Using cfiCommon0
        CFI (cfiCond889) NoFunction
        CFI (cfiCond889) Conditional ??CrossCallReturnLabel_284, ??CrossCallReturnLabel_138
        CFI (cfiCond889) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond889) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond889) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond889) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond889) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond889) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond889) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond889) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond889) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond889) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond889) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond889) CFA_SP SP+0
        CFI (cfiCond889) CFA_XSP16 add(XSP16, 11)
??Subroutine88_0:
        LCALL   ?Subroutine108
??CrossCallReturnLabel_338:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond879
        CFI EndBlock cfiCond880
        CFI EndBlock cfiCond881
        CFI EndBlock cfiCond882
        CFI EndBlock cfiPicker883
        CFI EndBlock cfiCond884
        CFI EndBlock cfiCond885
        CFI EndBlock cfiCond886
        CFI EndBlock cfiCond887
        CFI EndBlock cfiCond888
        CFI EndBlock cfiCond889

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond890 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond891 Using cfiCommon0
        CFI (cfiCond891) NoFunction
        CFI (cfiCond891) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond891) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond891) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond891) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond891) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond891) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond891) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond891) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond891) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond891) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond891) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond891) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond891) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond891) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond891) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond891) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond891) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond891) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond891) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond891) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond891) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond891) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond891) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond891) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond891) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond891) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond891) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond891) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond891) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond891) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond891) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond891) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond891) CFA_SP SP+0
        CFI (cfiCond891) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker892 Using cfiCommon1
        CFI (cfiPicker892) NoFunction
        CFI (cfiPicker892) Picker
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x2
        INC     R0
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond890
        CFI EndBlock cfiCond891
        CFI EndBlock cfiPicker892

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond893 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond894 Using cfiCommon0
        CFI (cfiCond894) NoFunction
        CFI (cfiCond894) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond894) R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI (cfiCond894) VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI (cfiCond894) V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI (cfiCond894) V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI (cfiCond894) V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI (cfiCond894) V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI (cfiCond894) V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI (cfiCond894) V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond894) V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond894) V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond894) V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond894) V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond894) V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond894) V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond894) V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond894) V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond894) V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond894) V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond894) V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond894) V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond894) V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond894) V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond894) V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond894) V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond894) V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond894) V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond894) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond894) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond894) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond894) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond894) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond894) CFA_SP SP+0
        CFI (cfiCond894) CFA_XSP16 add(XSP16, 31)
        CFI Block cfiPicker895 Using cfiCommon1
        CFI (cfiPicker895) NoFunction
        CFI (cfiPicker895) Picker
        MOV     DPTR,#flags
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond893
        CFI EndBlock cfiCond894
        CFI EndBlock cfiPicker895

        RSEG XDATA_Z:XDATA:NOROOT(0)
??acc:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??df:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??mV:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??rOff:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??temp:
        DS 36
        REQUIRE __INIT_XDATA_Z
// 2213 //______________________________________________________________________________________________________________________________
// 2214 //BOOL checkPage( BYTE val ){ return val && val != 0x1F && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ); }
// 2215 //______________________________________________________________________________________________________________________________
// 2216 /******************************************************************************
// 2217 * @fn  setByte
// 2218 * @brief       set the byte value to register
// 2219 * Parameters:  byte reg - register, byte val - value
// 2220 * @return      void
// 2221 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2222 void setByte( BYTE reg, BYTE val ){
setByte:
        CFI Block cfiBlock896 Using cfiCommon0
        CFI Function setByte
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, ov_startup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, refreshTheFlash
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setByte, softKick
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 2,R2
// 2223 BYTE *ptr; BYTE *pptr = (BYTE *)&page;
        MOV     R4,#(page & 0xff)
        MOV     R5,#((page >> 8) & 0xff)
// 2224     /*
// 2225     if(page.isRelay && !page.is500Always ) switch(reg){
// 2226         case SET_CUR_CHANNEL: case SET_CHANNEL:     case RADIO_POWER:
// 2227         case IS_RELAY:        case IS_500_ALWAYS:   case REPEATER_POWER:
// 2228             tickWait( 3+2*TICKS_IN_MS );  // give repeater chance to finish transmission
// 2229         break;
// 2230     }*/
// 2231     switch(reg){
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    A,@DPTR
        ANL     A,#0xc0
        MOV     ?V0 + 3,A
        MOV     DPL,R1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,#0x0
        MOV     A,R1
        ADD     A,#(page & 0xff)
        MOV     R6,A
        CLR     A
        ADDC    A,#((page >> 8) & 0xff)
        MOV     R7,A
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setByte>_0`:
        DATA
        DB        7
        DB        16
        DB        21
        DW        ??setByte_0
        DB        46
        DB        48
        DW        ??setByte_1
        DB        61
        DB        70
        DW        ??setByte_2
        DB        73
        DB        78
        DW        ??setByte_2
        DB        79
        DB        81
        DW        ??CrossCallReturnLabel_85
        DB        85
        DB        86
        DW        ??setByte_3
        DB        87
        DB        88
        DW        ??setByte_4
        DB        40
        DB        1
        DW        ??setByte_5
        DB        4
        DW        ??setByte_6
        DB        5
        DW        ??setByte_7
        DB        11
        DW        ??setByte_8
        DB        12
        DW        ??setByte_9
        DB        13
        DW        ??setByte_10
        DB        14
        DW        ??setByte_11
        DB        22
        DW        ??setByte_12
        DB        23
        DW        ??setByte_13
        DB        26
        DW        ??setByte_14
        DB        28
        DW        ??setByte_15
        DB        29
        DW        ??setByte_16
        DB        31
        DW        ??setByte_17
        DB        32
        DW        ??setByte_18
        DB        33
        DW        ??setByte_19
        DB        35
        DW        ??setByte_20
        DB        37
        DW        ??setByte_21
        DB        40
        DW        ??setByte_22
        DB        41
        DW        ??setByte_23
        DB        42
        DW        ??setByte_24
        DB        43
        DW        ??setByte_25
        DB        44
        DW        ??setByte_26
        DB        45
        DW        ??setByte_27
        DB        49
        DW        ??setByte_28
        DB        51
        DW        ??setByte_29
        DB        53
        DW        ??setByte_30
        DB        54
        DW        ??setByte_31
        DB        56
        DW        ??setByte_32
        DB        57
        DW        ??setByte_33
        DB        58
        DW        ??setByte_34
        DB        59
        DW        ??setByte_35
        DB        82
        DW        ??setByte_36
        DB        92
        DW        ??setByte_37
        DB        93
        DW        ??setByte_38
        DB        94
        DW        ??setByte_39
        DB        95
        DW        ??setByte_40
        DB        96
        DW        ??setByte_41
        DB        97
        DW        ??setByte_42
        DB        100
        DW        ??setByte_43
        DB        113
        DW        ??setByte_44
        DW        ??setByte_45
        CODE
// 2232         case MPP:  /* MPP on (1) / off (0) */
// 2233             if( val > 1 )
??setByte_6:
        MOV     A,R2
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??setByte_45
// 2234               break;
// 2235             if ((ProtectionLimitsExceeded & VoutAndIoutLimitMask) != 0)
        MOV     A,?V0 + 3
        JZ      $+5
        LJMP    ??setByte_45
// 2236               break;
// 2237             if( val )
        MOV     A,R2
        JZ      ??setByte_46
// 2238               P1_3 = 1;
        SETB    0x90.3
// 2239             else 
// 2240               P1_3 = 0;
// 2241             if( val )
// 2242             { 
// 2243               atomicChange( BypassMode, 0 ); // do not need that delayed mpp off anymore
        LCALL   ?Subroutine17
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2244               if( turnOnFlag || ticks[ TurnOn ] )
        MOV     DPTR,#turnOnFlag
        MOVX    A,@DPTR
        JNZ     ??setByte_47
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine54
??CrossCallReturnLabel_138:
        JNZ     ??setByte_48
        INC     DPTR
        MOVX    A,@DPTR
??setByte_48:
        JNZ     $+5
        LJMP    ??setByte_45
// 2245               {
// 2246                 ov_startup();
??setByte_47:
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
// 2247                 turnOnFlag = FALSE; 
        CLR     A
        MOV     DPTR,#turnOnFlag
        LCALL   ?Subroutine76
// 2248                 ticks[ TurnOn ] = 0; } 
??CrossCallReturnLabel_247:
        ADD     A,#0x14
??setByte_49:
        LCALL   ?Subroutine55
??CrossCallReturnLabel_148:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LJMP    ??setByte_50
// 2249             }
??setByte_46:
        CLR     0x90.3
        LJMP    ??setByte_45
// 2250             break;
// 2251             
// 2252         case MODULE: /* Module on (1) / off (0) */
// 2253             if( val > 1 ) 
??setByte_7:
        MOV     A,R2
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??setByte_45
// 2254               break;
// 2255             if ((ProtectionLimitsExceeded & VoutAndIoutLimitMask) != 0)
        MOV     A,?V0 + 3
        JZ      $+5
        LJMP    ??setByte_45
// 2256               break;            
// 2257             if (val == 1) // If Module on, then set FET failure check appropriately
        MOV     A,#0x1
        XRL     A,?V0 + 2
        JNZ     ??setByte_51
// 2258             {
// 2259               *ModuleOffRememberedPtr = ModuleStatusCanTurnOn; // Module On command resets this
        CLR     A
        MOV     DPTR,#-0x3
        MOVX    @DPTR,A
// 2260               ProtectionLimitsExceeded = NoProtectionsSetMask;
        MOV     DPTR,#ProtectionLimitsExceeded
        MOVX    @DPTR,A
// 2261               fetFailure = FALSE; // Module On command resets this
        MOV     DPTR,#fetFailure
        MOVX    @DPTR,A
// 2262               netValue = MainNetValueStandard;  // Set base value back for main image
        MOV     DPTR,#netValue
        MOV     A,#0x32
        LCALL   ?Subroutine119
// 2263               if (page.fetFailureCount != 0)
??CrossCallReturnLabel_414:
        MOV     DPTR,#(page + 128)
        MOVX    A,@DPTR
        JNZ     ??setByte_52
        INC     DPTR
        MOVX    A,@DPTR
??setByte_52:
        JZ      ??setByte_53
// 2264                 checkForFETFailure = TRUE; // Re-enable check
        MOV     A,#0x1
??setByte_54:
        MOV     DPTR,#checkForFETFailure
        MOVX    @DPTR,A
        SJMP    ??setByte_55
// 2265               else
// 2266                 checkForFETFailure = FALSE; // PB indicates don't check
??setByte_53:
        CLR     A
        SJMP    ??setByte_54
// 2267             }
// 2268             if( val && ((P1 & 0x18)==0) )
??setByte_51:
        MOV     A,R2
        JZ      ??setByte_56
??setByte_55:
        MOV     A,#0x18
        ANL     A,0x90
        JNZ     ??setByte_57
// 2269             { 
// 2270               P1_3 = 1; 
        SETB    0x90.3
// 2271               ov_startup(); /*P1 |= 0x18;*/ 
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
// 2272               atomicChange( BypassMode, TICKS_IN_SEC );
        LCALL   ?Subroutine10
??CrossCallReturnLabel_35:
        LJMP    ??setByte_50
// 2273             } // bypass mode with delay
// 2274             else 
// 2275             { 
// 2276               if( val )
// 2277               { 
// 2278                 if( P1_4 == 0 ) 
// 2279                   ov_startup(); 
// 2280               }
// 2281               else 
// 2282               { 
// 2283                 P1_4 = 0; 
??setByte_56:
        CLR     0x90.4
// 2284                 *ModuleOffRememberedPtr = ModuleStatusOff; 
        MOV     A,#-0x19
        MOV     DPTR,#-0x3
        LJMP    ??setByte_50
// 2285               } 
??setByte_57:
        MOV     C,0x90.4
        JNC     $+5
        LJMP    ??setByte_45
        ; Setup parameters for call to function ov_startup
        LCALL   ov_startup
        LJMP    ??setByte_45
// 2286             }
// 2287             break;
// 2288             
// 2289         case SET_T3CH0:  
// 2290             //if( !page.fuseOVOC ){ 
// 2291                 T3CC0 = val;                                      
??setByte_12:
        MOV     0xcd,?V0 + 2
        LJMP    ??setByte_45
// 2292             //}
// 2293         break;
// 2294         
// 2295         case SET_T3CH1:
// 2296           //if( !page.fuseOVOC ){
// 2297               T3CC1 = oc2timer( theOC = ( setOC = val ) ); 
??setByte_13:
        MOV     A,R2
        MOV     DPTR,#setOC
        MOVX    @DPTR,A
        LCALL   ?Subroutine71
??CrossCallReturnLabel_228:
        LJMP    ??setByte_45
// 2298               // 06/29/2017 -- added next 4 lines
// 2299               /*
// 2300 #ifdef MidString
// 2301               ocLimit1 = FALSE;
// 2302               ocLimit2 = FALSE;
// 2303 #endif
// 2304               */
// 2305 //              #ifdef MidString
// 2306 //              compute98();
// 2307 //              #endif
// 2308           //}
// 2309         break;
// 2310 
// 2311         case MAC0: case MAC1: case MAC2: case MAC3: case MAC4: case MAC5:   page.myMac[ reg-MAC0 ] = val;         break;
??setByte_0:
        MOV     A,R6
        ADD     A,#-0xa
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#-0x1
??setByte_58:
        MOV     DPH,A
        MOV     A,R2
        LJMP    ??setByte_50
// 2312         /*
// 2313         case SET_CUR_CHANNEL:
// 2314             if( !page.is500Always && (cyclesTo500 < 200) ){ RFST = STROBE_IDLE; curChannel = CHANNR = val;  }
// 2315         break;
// 2316         */
// 2317         case SET_CHANNEL:    
// 2318             page.channel = val;  setup_hopper( page.channel );   
??setByte_14:
        MOV     A,R2
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
        ; Setup parameters for call to function setup_hopper
        MOV     R1,A
        LCALL   setup_hopper
// 2319             if( !page.is500Always ){
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JC      ??setByte_9
// 2320                 //P1_1 ^= 1;
// 2321                 curChannel = CHANNR = page.channel;
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fa
        MOVX    @DPTR,A
        LCALL   ?Subroutine2
// 2322                 ticks[ Hop ] = 0; 
// 2323                 cycles2Step10Channel = cyclesTo500 = 300;
??CrossCallReturnLabel_1:
        MOV     DPTR,#cyclesTo500
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#cycles2Step10Channel
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2324                 RFST = STROBE_IDLE; 
        MOV     0xe1,#0x4
// 2325                 softKick(); 
        ; Setup parameters for call to function softKick
        LCALL   softKick
// 2326             }
// 2327         case RANDOMIZE:
// 2328             RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
??setByte_9:
        LCALL   ?Subroutine28
??CrossCallReturnLabel_74:
        LJMP    ??setByte_45
// 2329             //srand( page.myMac[4]*256 + page.myMac[5] ); 
// 2330         break;
// 2331 
// 2332         case FLASH_REFRESH2:   refreshTheFlash();   break;
??setByte_8:
        ; Setup parameters for call to function refreshTheFlash
        LCALL   refreshTheFlash
        LJMP    ??setByte_45
// 2333   
// 2334         //case FUSE_Comm:  page.fuseComm = 1; savePB();   break;
// 2335         //case FUSE_OVOC:  if( !page.fuseOVOC ){ page.fuseOVOC = 1; page.ov = T3CC0; page.oc = setOC; savePB(); }  break;
// 2336 
// 2337         case FLASH_AVAILABLE: 
// 2338             page.mpp    = P1_3;
??setByte_15:
        MOV     C,0x90.3
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#(page + 185)
        MOVX    @DPTR,A
// 2339             page.module = P1_4;
        MOV     C,0x90.4
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#(page + 186)
        MOVX    @DPTR,A
// 2340             //if( !page.fuseOVOC ){ page.ov = T3CC0; page.oc = setOC; }
// 2341             page.ov = T3CC0; page.oc = setOC;
        MOV     A,0xcd
        MOV     DPTR,#(page + 187)
        MOVX    @DPTR,A
        MOV     DPTR,#setOC
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 188)
        MOVX    @DPTR,A
// 2342             // go through
// 2343         case COEFFICIENTS_AVAILABLE:  
// 2344             savePB();
??setByte_19:
        ; Setup parameters for call to function savePB
        LCALL   savePB
        LJMP    ??setByte_45
// 2345         break;
// 2346         /*
// 2347         case CW_MODE:   
// 2348             //HAL_INT_ENABLE(INUM_RF,  INT_OFF);    // Disable RF general interrupt
// 2349             real_cw_mode = TRUE;
// 2350             //ticks[ SendData ] = 1; ticks[ ReceiveData ] = 0;
// 2351         break;
// 2352         */
// 2353         //case RESTART_MEASUREMENT:   bufferCount = 0; adcCount = 0xFF; tempAdcsCount = 0; enable2SendData = FALSE;    break;
// 2354         case DISSOLVE_NETWORK:      
// 2355           RNDL = page.myMac[4]; RNDL = page.myMac[5]; 
??setByte_17:
        LCALL   ?Subroutine28
// 2356           //srand( page.myMac[4]*256 + page.myMac[5] );
// 2357           page.netId = page.myBunch =  0xFF;  
??CrossCallReturnLabel_75:
        MOV     A,#-0x1
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 2)
        LCALL   ?Subroutine76
// 2358           //savePB();
// 2359           //maxBunch = 0;  
// 2360           ticks[ DelayedPrepareData ] = 0; ticks[ SendData ] = 0; 
??CrossCallReturnLabel_248:
        ADD     A,#0x1a
        LCALL   ??Subroutine2_1
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine30
??CrossCallReturnLabel_77:
        LJMP    ??CrossCallReturnLabel_148
// 2361         break;
// 2362 
// 2363         case CALIBRATION_FROM_FLASH:   pptr = (BYTE *)PAGEADDR; //0x400;        /* go through */
??setByte_33:
        MOV     R4,#0x0
        MOV     R5,#0x5c
// 2364         case REPORT_SCALING:   
// 2365           if( !reportScaling ){
??setByte_18:
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??setByte_45
// 2366                 if( base_ptr==NULL ){
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        JNZ     ??setByte_59
        INC     DPTR
        MOVX    A,@DPTR
??setByte_59:
        JNZ     ??setByte_60
// 2367                     base_ptr = pptr; //(BYTE *)&page;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     DPTR,#base_ptr
        LCALL   ??Subroutine67_0
// 2368                     reportScaling    = (PAGESIZE/24) * calibrationRepeat;      
??CrossCallReturnLabel_216:
        MOV     B,#0xa
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
??setByte_61:
        MUL     AB
        MOV     DPTR,#reportScaling
        LJMP    ??setByte_50
// 2369                 }else reportScaling    = val * calibrationRepeat;
??setByte_60:
        MOV     DPTR,#calibrationRepeat
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R2
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        SJMP    ??setByte_61
// 2370           }
// 2371         break;
// 2372         case READ_COEFFICIENTS: reportScaling = val; base_ptr = coefficients_buffer; if( reportScaling == 0 ) reportScaling = 1; break;
??setByte_44:
        MOV     A,R2
        MOV     DPTR,#reportScaling
        MOVX    @DPTR,A
        MOV     DPTR,#base_ptr
        MOV     A,#(coefficients_buffer & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((coefficients_buffer >> 8) & 0xff)
        MOVX    @DPTR,A
        MOV     DPTR,#reportScaling
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??setByte_45
        MOV     A,#0x1
        LJMP    ??setByte_50
// 2373 
// 2374         //case CHECK_FLASH:            reportFlashCheck = calibrationRepeat*5 + 1; /* 5*4-1 */;    break;
// 2375         
// 2376         case RADIO_POWER: page.radioPower = val;      PA_TABLE0 = val;  break;
??setByte_20:
        MOV     A,R2
        MOV     DPTR,#(page + 189)
        MOVX    @DPTR,A
        MOV     DPTR,#-0x20d2
        LJMP    ??setByte_50
// 2377         
// 2378 //        case PRODUCTION:       page.production = val;                   break;
// 2379         case ENSURE_WD_RESET:  page.ensureWDReset = val;                break;
??setByte_21:
        MOV     DPTR,#(page + 194)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        LJMP    ??setByte_50
// 2380         //case USE_12_kBod:   
// 2381         //  page.use12kbod = val;  
// 2382           //savePB();
// 2383           //tickWait(8*TICKS_IN_MS); 
// 2384         //  softKick(); 
// 2385         //break; /* write to flash as well */
// 2386         
// 2387         //case USE_FEC:          page.useFEC = val;     if( page.useFEC ) MDMCFG1 |= 0x80; else MDMCFG1 &= 0x7F;     break;
// 2388         case ENABLE_HOPPING:   page.hoppingAllowed  = val; break;     
??setByte_22:
        MOV     DPTR,#(page + 194)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.4,C
        LJMP    ??setByte_50
// 2389         case REPEATER_CHANNEL: page.repeaterChannel = val; break;     
??setByte_25:
        MOV     A,R2
        MOV     DPTR,#(page + 192)
        LJMP    ??setByte_50
// 2390         case IS_RELAY:         page.isRelay = val;   
??setByte_23:
        MOV     DPTR,#(page + 194)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.5,C
        MOVX    @DPTR,A
// 2391                                if( !val ) setupRadio( curChannel );     
        MOV     A,R2
        JZ      $+5
        LJMP    ??setByte_45
??setByte_62:
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#curChannel
??setByte_63:
        LCALL   ??Subroutine51_0
??CrossCallReturnLabel_131:
        LJMP    ??setByte_45
// 2392         break;   
// 2393         case USE250:           page.use250kbod = val; 
??setByte_35:
        MOV     DPTR,#(page + 219)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        MOVX    @DPTR,A
// 2394                                // go through
// 2395         case IS_500_ALWAYS:    
// 2396             if( reg == IS_500_ALWAYS ) page.is500Always = val;     
??setByte_24:
        MOV     A,#0x2a
        XRL     A,R1
        JNZ     ??setByte_64
        MOV     DPTR,#(page + 194)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.6,C
        MOVX    @DPTR,A
// 2397             if( page.is500Always ){ 
??setByte_64:
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??setByte_65
// 2398                  cyclesTo10 = page.defCyclesTo10; //cyclesDefaults[1]; //page.defCyclesTo10; 
        LCALL   ?Subroutine37
// 2399                  cyclesTo500 = 0;             
??CrossCallReturnLabel_92:
        MOV     DPTR,#cyclesTo500
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine22
// 2400                  cyclesToStep500Channel =  page.defCyclesToStep500Channel; //cyclesDefaults[2]; //page.defCyclesToStep500Channel; 
// 2401                  setupRadio( curChannel = page.starting500Channel );
??CrossCallReturnLabel_60:
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        ; Setup parameters for call to function setupRadio
        MOV     R1,A
        LCALL   setupRadio
// 2402                  atomicChange( Hop, 0 );                  
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        LJMP    ??setByte_49
// 2403             }else{      
// 2404                  cyclesTo10 = 0;                  
??setByte_65:
        MOV     DPTR,#cyclesTo10
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2405                  cyclesTo500 = page.defCyclesTo500; 
        LCALL   ?Subroutine9
// 2406                  cycles2Step10Channel   = page.defCyclesToStep10Channel;//cyclesDefaults[3]; //page.defCyclesToStep10Channel;
// 2407                  curChannel = page.channel;
??CrossCallReturnLabel_33:
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     DPTR,#curChannel
        LJMP    ??setByte_50
// 2408                  //setupRadio( curChannel = page.channel ); 
// 2409             }    
// 2410             //softKick();
// 2411         break;     
// 2412         case REPEATER_POWER:           page.repeaterPower = val;   if( page.is500Always ) setupRadio( page.channel ); break;
??setByte_26:
        MOV     A,R2
        MOV     DPTR,#(page + 193)
        LCALL   ?Subroutine74
??CrossCallReturnLabel_237:
        JC      $+5
        LJMP    ??setByte_45
        ; Setup parameters for call to function setupRadio
        MOV     DPTR,#(page + 164)
        SJMP    ??setByte_63
// 2413         case SEARCH_FOR_COMMUNICATION: page.searchCommunication = search_stat = val;  break;
??setByte_27:
        MOV     A,R2
        MOV     DPTR,#search_stat
        MOVX    @DPTR,A
        MOV     C,0xE0 /* A   */.0
        MOV     DPH,#(((page + 194) >> 8) & 0xff)
        MOV     DPL,#((page + 194) & 0xff)
??setByte_66:
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.7,C
        LJMP    ??setByte_50
// 2414 
// 2415         // win 7 bytes. 
// 2416         case SET_SHOW_STATE:  case SetCriticalLevel500:   case SetCriticalLevel10:
// 2417             (&page.showState)[ reg-SET_SHOW_STATE ]  = (signed char)val;            
??setByte_1:
        MOV     A,R6
        ADD     A,#-0x6b
??setByte_67:
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        LJMP    ??setByte_58
// 2418         break;
// 2419         
// 2420         case END_OF_TEST: 
// 2421             page.channel = 0;
??setByte_28:
        CLR     A
        MOV     DPTR,#(page + 164)
        MOVX    @DPTR,A
// 2422             page.myBunch = 0xFF; page.netId = 0xFF;  page.groupId = 0xFFFF;
        MOV     A,#-0x1
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 4)
        LCALL   ?Subroutine68
// 2423             page.edAddr = 2; page.gwAddr = 1;
// 2424             savePB();
??CrossCallReturnLabel_224:
        ; Setup parameters for call to function savePB
        LCALL   savePB
// 2425         // go through ...
// 2426         //case CLEAR_MAX_BUNCH:             maxBunch = 0;                         break;
// 2427         case SYNCHRONIZE_MPP_CYCLES:      ticks[ MppCycle ]        = _mppCycle; break; 
??setByte_29:
        LCALL   ??Subroutine47_0
??CrossCallReturnLabel_121:
        MOV     A,#0x78
??setByte_68:
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LJMP    ??setByte_50
// 2428         case SET_START500_CHANNEL:
// 2429             page.starting500Channel = val; if( page.is500Always ) setupRadio( curChannel = val );
??setByte_30:
        MOV     A,R2
        MOV     DPTR,#(page + 218)
        LCALL   ?Subroutine74
??CrossCallReturnLabel_238:
        JC      $+5
        LJMP    ??setByte_45
        MOV     A,R2
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        LJMP    ??setByte_62
// 2430         break;
// 2431         /*
// 2432         case CLEAR_THE_PAGE:
// 2433           val <<= 1;  
// 2434           if( !P1_4 && ( val > 48 ) && ( val < 64 ) ){
// 2435              tickWait( 8 * TICKS_IN_MS );
// 2436              clearAndHop( val );
// 2437              //clearThePage( val );
// 2438              ticks[ ReceiveData ] = 25*TICKS_IN_MS;
// 2439              //ticks[ ClearThePage ] = 12*TICKS_IN_MS;
// 2440              //page2clear = val;
// 2441           }
// 2442             //val <<= 1;  if( val && (val < 0x3E) && ( ( val ^ (page.imageAddr>>9) ) & 0x20 ) ) clearThePage( val );
// 2443         break;
// 2444         */
// 2445         case TRY_OTHER_IMAGE:            page.tryOtherImageFirst = val;        break;
??setByte_31:
        MOV     DPTR,#(page + 219)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.0,C
        LJMP    ??setByte_50
// 2446         case SWITCH_SECURITY:
// 2447             mymemcpy( (BYTE *)page.curKey, nextKey, 16 ); mymemcpy( (BYTE *)page.curIV, nextIV, 16 );
??setByte_32:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(nextKey & 0xff)
        MOV     R5,#((nextKey >> 8) & 0xff)
        MOV     R2,#((page + 96) & 0xff)
        MOV     R3,#(((page + 96) >> 8) & 0xff)
        LCALL   mymemcpy
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x10
        MOV     R4,#(nextIV & 0xff)
        MOV     R5,#((nextIV >> 8) & 0xff)
        MOV     R2,#((page + 112) & 0xff)
        MOV     R3,#(((page + 112) >> 8) & 0xff)
        LCALL   mymemcpy
// 2448             zerofill( nextKey, 32 );
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x20
        MOV     R2,#(nextKey & 0xff)
        MOV     R3,#((nextKey >> 8) & 0xff)
        LCALL   zerofill
// 2449             loadKey(  page.curKey );
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
??CrossCallReturnLabel_261:
        LJMP    ??setByte_45
// 2450         break;
// 2451         case CALIBRATION_REPEAT:
// 2452             if( val > 0 && val < 32 ) calibrationRepeat = val; else calibrationRepeat = 4;
??setByte_34:
        MOV     A,R2
        JZ      ??setByte_69
        CLR     C
        SUBB    A,#0x20
        JNC     ??setByte_69
        MOV     A,R2
??setByte_70:
        MOV     DPTR,#calibrationRepeat
        LJMP    ??setByte_50
??setByte_69:
        MOV     A,#0x4
        SJMP    ??setByte_70
// 2453         break;
// 2454         //case SPECULATIVE_REPORT: page.speculative_report = val;                  break;
// 2455         case STAY_IN_RX:         page.stay_in_rx  = val;                         break;
??setByte_10:
        MOV     DPTR,#(page + 219)
??setByte_71:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.3,C
        LJMP    ??setByte_50
// 2456         //case THIRTY_THREE_MV:    page.thirty_three_mv = val;                     break;        
// 2457         
// 2458         // 06/27/2017 commented out case TEST_1:  case TEST_2:   case TEST_3:   case TEST_4:
// 2459         //    ptr = (BYTE *)&page.tests[reg-TEST_1]; 
// 2460         //    *ptr++ = val; 
// 2461         // go through
// 2462         case INSTALL_DATE:
// 2463             if( reg == INSTALL_DATE ) ptr = (BYTE *)&page.installDate;
??setByte_11:
        MOV     A,#0xe
        XRL     A,R1
        JNZ     ??setByte_72
        MOV     R2,#((page + 148) & 0xff)
        MOV     R3,#(((page + 148) >> 8) & 0xff)
// 2464             mymemcpy( ptr, (BYTE *)&utcLocal, 4); 
??setByte_72:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utcLocal & 0xff)
        MOV     R5,#((utcLocal >> 8) & 0xff)
??setByte_73:
        LCALL   mymemcpy
        LJMP    ??setByte_45
// 2465         break;
// 2466         
// 2467         case REP_STEP:   if( val < 5 && val >50 )  break;  // else go through
// 2468         
// 2469         case OV_STEP:  case T_OC_JUMP: case OV_STARTUP: 
// 2470             //if( page.fuseOVOC )       break;
// 2471         // go through 
// 2472         case T_SUPERHOT:              case T_HOT:          
// 2473         case T_COLD:                  case T_TIME:
// 2474         case NETWORK_CNST_1:          case NETWORK_CNST_2:  
// 2475         case OC_STEP:                 case SHUNT:  
// 2476         case MAX_OFF:                 case VIN_LIMIT: 
// 2477         case VIN_TURN_ON:             case VIN_SWITCH_OFF:
// 2478             ptr = (BYTE *)&page.repStep; ptr[ reg-REP_STEP ] = val; break;
??setByte_2:
        MOV     A,R6
        ADD     A,#-0x5f
        LJMP    ??setByte_67
// 2479             
// 2480         case SHORT_CIRCUIT_LEVEL: 
// 2481             #ifdef MidString
// 2482                 if( val == 0 )
??setByte_36:
        MOV     A,R2
        JNZ     ??setByte_74
// 2483                     { ocShortCircuitLimit = 255; T3CC1 = oc2timer( theOC ); }
        MOV     A,#-0x1
        MOV     DPTR,#ocShortCircuitLimit
        SJMP    ??setByte_75
// 2484                 else if( ocShortCircuitLimit < 255 )
??setByte_74:
        MOV     DPTR,#ocShortCircuitLimit
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??CrossCallReturnLabel_85
// 2485                     { ocShortCircuitLimit = val; T3CC1 = oc2timer( theOC ); }
        MOV     A,R2
??setByte_75:
        LCALL   ?Subroutine34
// 2486             #endif
// 2487             /*go through */
// 2488         case VIN_DISABLE_RADIO: case SET_RBUNCH: case SET_GBUNCH: //DEV250:
// 2489             ptr = (BYTE *)&page.vin_disable_radio; ptr[ reg-VIN_DISABLE_RADIO ] = val; 
??CrossCallReturnLabel_85:
        MOV     A,R6
        ADD     A,#0x4d
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,?V0 + 2
        SJMP    ??setByte_50
// 2490         break;
// 2491         case LOW_UTC: case HIGH_UTC: 
// 2492             mymemcpy( ((BYTE *)(&page.utcLow))+4*(reg-LOW_UTC), (BYTE *)&utcLast, 4);
??setByte_3:
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#((page + 85) & 0xff)
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#(((page - 171) >> 8) & 0xff)
        MOV     R3,A
        SJMP    ??setByte_73
// 2493         break;
// 2494 
// 2495         //case TEST_STAND: if( val == 1 ) isOnTestStand = 11; break; 
// 2496         
// 2497         case REPORT_UTC: page.reportUTC = val; break;
??setByte_16:
        MOV     DPTR,#(page + 219)
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        LJMP    ??setByte_66
// 2498         case BANDWIDTH_500:  mdm_rate1[0] = val; softKick(); break;
??setByte_43:
        MOV     A,R2
        MOV     DPTR,#mdm_rate1
        MOVX    @DPTR,A
// 2499         case TREAT_LB_AS_CHAN : page.treatLastByteAsChannel = val; break;
// 2500         case SYNCH_PHASE:   page.synch_phase = val;  break;
// 2501         case SYNCH_FREQ:    page.synch_freq = val;   break;              
// 2502         case BANDWIDTH250:  page.bandwidth250 = val; break;
// 2503         case TEMP_CALIBRATE:softKick(); break;
??setByte_41:
        ; Setup parameters for call to function softKick
        LCALL   softKick
        SJMP    ??setByte_45
??setByte_5:
        MOV     DPTR,#(page + 194)
        SJMP    ??setByte_71
??setByte_38:
        MOV     A,R2
        MOV     DPTR,#(page + 161)
        SJMP    ??setByte_50
??setByte_39:
        MOV     A,R2
        MOV     DPTR,#(page + 162)
        SJMP    ??setByte_50
??setByte_40:
        MOV     A,R2
        MOV     DPTR,#(page + 163)
        SJMP    ??setByte_50
// 2504         case SET_MPPF:  si->mppCycle = val;  break;
??setByte_42:
        LCALL   ?Subroutine42
??CrossCallReturnLabel_100:
        MOV     A,R2
        LJMP    ??setByte_68
// 2505        
// 2506         case K_OV_VOLT:  case K_OC_CUR:
// 2507             ptr = (BYTE *)&page.k_ov_volt; ptr[ reg - K_OV_VOLT ] = val; 
??setByte_4:
        MOV     A,R6
        ADD     A,#0x41
        LJMP    ??setByte_67
// 2508         break;
// 2509         
// 2510         case XTAL_OFF: if( val == 1 ){
??setByte_37:
        MOV     A,#0x1
        XRL     A,?V0 + 2
        JNZ     ??setByte_45
// 2511           //BYTE counter = 127;
// 2512           //CLKCON |= OSC_BIT;                    // starting the RC Oscillator
// 2513           //while(!HIGH_FREQUENCY_RC_OSC_STABLE && counter-- ) halWait(2); 
// 2514           //SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
// 2515           rcgen = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#rcgen
??setByte_50:
        MOVX    @DPTR,A
// 2516         }break;
// 2517     }
// 2518 }
??setByte_45:
        LJMP    ?Subroutine123
        CFI EndBlock cfiBlock896
        REQUIRE _A_P1
        REQUIRE RNDL
        REQUIRE T3CC0
        REQUIRE T3CC1
        REQUIRE RFST

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond897 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_236
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond898 Using cfiCommon0
        CFI (cfiCond898) NoFunction
        CFI (cfiCond898) Conditional ??CrossCallReturnLabel_237
        CFI (cfiCond898) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond898) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond898) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond898) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond898) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond898) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond898) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond898) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond898) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond898) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond898) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond898) CFA_SP SP+0
        CFI (cfiCond898) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond899 Using cfiCommon0
        CFI (cfiCond899) NoFunction
        CFI (cfiCond899) Conditional ??CrossCallReturnLabel_238
        CFI (cfiCond899) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond899) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond899) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond899) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond899) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond899) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond899) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond899) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond899) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond899) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond899) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond899) CFA_SP SP+0
        CFI (cfiCond899) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker900 Using cfiCommon1
        CFI (cfiPicker900) NoFunction
        CFI (cfiPicker900) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        RET
        CFI EndBlock cfiCond897
        CFI EndBlock cfiCond898
        CFI EndBlock cfiCond899
        CFI EndBlock cfiPicker900

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond901 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_223
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond902 Using cfiCommon0
        CFI (cfiCond902) NoFunction
        CFI (cfiCond902) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond902) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond902) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond902) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond902) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond902) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond902) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond902) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond902) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond902) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond902) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond902) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond902) CFA_SP SP+0
        CFI (cfiCond902) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker903 Using cfiCommon1
        CFI (cfiPicker903) NoFunction
        CFI (cfiPicker903) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x2
        MOV     DPTR,#(page + 190)
        MOVX    @DPTR,A
        MOV     A,#0x1
        MOV     DPTR,#(page + 191)
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond901
        CFI EndBlock cfiCond902
        CFI EndBlock cfiPicker903

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond904 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_137
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond905 Using cfiCommon0
        CFI (cfiCond905) NoFunction
        CFI (cfiCond905) Conditional ??CrossCallReturnLabel_138
        CFI (cfiCond905) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond905) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond905) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond905) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond905) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond905) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond905) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond905) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond905) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond905) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond905) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond905) CFA_SP SP+0
        CFI (cfiCond905) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker906 Using cfiCommon1
        CFI (cfiPicker906) NoFunction
        CFI (cfiPicker906) Picker
        LCALL   ??Subroutine88_0
??CrossCallReturnLabel_284:
        RET
        CFI EndBlock cfiCond904
        CFI EndBlock cfiCond905
        CFI EndBlock cfiPicker906

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond907 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_99
        CFI Block cfiCond908 Using cfiCommon0
        CFI (cfiCond908) NoFunction
        CFI (cfiCond908) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond908) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond908) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond908) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond908) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond908) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond908) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond908) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond908) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond908) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond908) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond908) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond908) CFA_SP SP+0
        CFI (cfiCond908) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker909 Using cfiCommon1
        CFI (cfiPicker909) NoFunction
        CFI (cfiPicker909) Picker
        MOV     DPTR,#si
        MOVX    A,@DPTR
        ADD     A,#0x5b
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_292:
        RET
        CFI EndBlock cfiCond907
        CFI EndBlock cfiCond908
        CFI EndBlock cfiPicker909

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond910 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond911 Using cfiCommon0
        CFI (cfiCond911) NoFunction
        CFI (cfiCond911) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond911) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond911) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond911) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond911) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond911) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond911) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond911) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond911) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond911) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond911) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond911) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond911) CFA_SP SP+0
        CFI (cfiCond911) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker912 Using cfiCommon1
        CFI (cfiPicker912) NoFunction
        CFI (cfiPicker912) Picker
        MOV     DPTR,#(page + 202)
        LCALL   ?Subroutine99
??CrossCallReturnLabel_318:
        MOV     DPTR,#cyclesTo10
        LCALL   ?Subroutine111
??CrossCallReturnLabel_345:
        RET
        CFI EndBlock cfiCond910
        CFI EndBlock cfiCond911
        CFI EndBlock cfiPicker912

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond913 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond914 Using cfiCommon0
        CFI (cfiCond914) NoFunction
        CFI (cfiCond914) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond914) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond914) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond914) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond914) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond914) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond914) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond914) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond914) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond914) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond914) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond914) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond914) CFA_SP SP+0
        CFI (cfiCond914) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker915 Using cfiCommon1
        CFI (cfiPicker915) NoFunction
        CFI (cfiPicker915) Picker
        LCALL   ?Subroutine92
??CrossCallReturnLabel_395:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond913
        CFI EndBlock cfiCond914
        CFI EndBlock cfiPicker915

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond916 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI Block cfiCond917 Using cfiCommon0
        CFI (cfiCond917) NoFunction
        CFI (cfiCond917) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond917) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond917) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond917) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond917) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond917) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond917) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond917) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond917) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond917) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond917) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond917) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond917) CFA_SP SP+0
        CFI (cfiCond917) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond918 Using cfiCommon0
        CFI (cfiCond918) NoFunction
        CFI (cfiCond918) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond918) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond918) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond918) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond918) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond918) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond918) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond918) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond918) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond918) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond918) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond918) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond918) CFA_SP SP+0
        CFI (cfiCond918) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker919 Using cfiCommon1
        CFI (cfiPicker919) NoFunction
        CFI (cfiPicker919) Picker
        MOV     DPTR,#(page + 10)
        MOVX    A,@DPTR
        MOV     0xbc,A
        MOV     DPTR,#(page + 11)
        MOVX    A,@DPTR
        MOV     0xbc,A
        RET
        CFI EndBlock cfiCond916
        CFI EndBlock cfiCond917
        CFI EndBlock cfiCond918
        CFI EndBlock cfiPicker919

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond920 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond921 Using cfiCommon0
        CFI (cfiCond921) NoFunction
        CFI (cfiCond921) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond921) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond921) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond921) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond921) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond921) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond921) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond921) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond921) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond921) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond921) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond921) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond921) CFA_SP SP+0
        CFI (cfiCond921) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker922 Using cfiCommon1
        CFI (cfiPicker922) NoFunction
        CFI (cfiPicker922) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine93
??CrossCallReturnLabel_299:
        MOV     DPTR,#(page + 218)
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond920
        CFI EndBlock cfiCond921
        CFI EndBlock cfiPicker922

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond923 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond924 Using cfiCommon0
        CFI (cfiCond924) NoFunction
        CFI (cfiCond924) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond924) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond924) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond924) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond924) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond924) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond924) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond924) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond924) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond924) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond924) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond924) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond924) CFA_SP SP+0
        CFI (cfiCond924) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker925 Using cfiCommon1
        CFI (cfiPicker925) NoFunction
        CFI (cfiPicker925) Picker
        MOV     DPTR,#ticks
        LCALL   ?Subroutine90
??CrossCallReturnLabel_295:
        INC     DPTR
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        RET
        CFI EndBlock cfiCond923
        CFI EndBlock cfiCond924
        CFI EndBlock cfiPicker925

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine90:
        CFI Block cfiCond926 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond927 Using cfiCommon0
        CFI (cfiCond927) NoFunction
        CFI (cfiCond927) Conditional ??CrossCallReturnLabel_296, ??CrossCallReturnLabel_46
        CFI (cfiCond927) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond927) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond927) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond927) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond927) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond927) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond927) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond927) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond927) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond927) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond927) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond927) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond927) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond927) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond927) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond927) CFA_SP SP+0
        CFI (cfiCond927) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond928 Using cfiCommon0
        CFI (cfiCond928) NoFunction
        CFI (cfiCond928) Conditional ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_34
        CFI (cfiCond928) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond928) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond928) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond928) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond928) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond928) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond928) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond928) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond928) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond928) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond928) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond928) CFA_SP SP+0
        CFI (cfiCond928) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond929 Using cfiCommon0
        CFI (cfiCond929) NoFunction
        CFI (cfiCond929) Conditional ??CrossCallReturnLabel_295, ??CrossCallReturnLabel_35
        CFI (cfiCond929) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond929) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond929) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond929) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond929) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond929) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond929) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond929) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond929) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond929) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond929) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond929) CFA_SP SP+0
        CFI (cfiCond929) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker930 Using cfiCommon1
        CFI (cfiPicker930) NoFunction
        CFI (cfiPicker930) Picker
        LCALL   ?Subroutine106
??CrossCallReturnLabel_398:
        INC     DPTR
        RET
        CFI EndBlock cfiCond926
        CFI EndBlock cfiCond927
        CFI EndBlock cfiCond928
        CFI EndBlock cfiCond929
        CFI EndBlock cfiPicker930

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond931 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond932 Using cfiCommon0
        CFI (cfiCond932) NoFunction
        CFI (cfiCond932) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond932) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond932) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond932) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond932) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond932) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond932) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond932) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond932) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond932) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond932) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond932) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond932) CFA_SP SP+0
        CFI (cfiCond932) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker933 Using cfiCommon1
        CFI (cfiPicker933) NoFunction
        CFI (cfiPicker933) Picker
        MOV     DPTR,#(page + 200)
        LCALL   ?Subroutine99
??CrossCallReturnLabel_313:
        MOV     DPTR,#cyclesTo500
        LCALL   ?Subroutine111
??CrossCallReturnLabel_342:
        LCALL   ?Subroutine98
??CrossCallReturnLabel_310:
        LCALL   ?Subroutine111
??CrossCallReturnLabel_343:
        RET
        CFI EndBlock cfiCond931
        CFI EndBlock cfiCond932
        CFI EndBlock cfiPicker933

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond934 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond935 Using cfiCommon0
        CFI (cfiCond935) NoFunction
        CFI (cfiCond935) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond935) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond935) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond935) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond935) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond935) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond935) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond935) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond935) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond935) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond935) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond935) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond935) CFA_SP SP+0
        CFI (cfiCond935) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker936 Using cfiCommon1
        CFI (cfiPicker936) NoFunction
        CFI (cfiPicker936) Picker
        MOV     DPTR,#curChannel
        MOVX    @DPTR,A
        CFI Block cfiCond937 Using cfiCommon0
        CFI (cfiCond937) NoFunction
        CFI (cfiCond937) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond937) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond937) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond937) CFA_SP SP+-4
??Subroutine2_0:
        MOV     DPTR,#ticks
        MOVX    A,@DPTR
        ADD     A,#0x10
        CFI Block cfiCond938 Using cfiCommon0
        CFI (cfiCond938) NoFunction
        CFI (cfiCond938) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond938) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond938) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond938) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond938) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond938) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond938) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond938) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond938) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond938) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond938) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond938) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond938) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond938) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond938) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond938) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond938) CFA_SP SP+0
        CFI (cfiCond938) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond939 Using cfiCommon0
        CFI (cfiCond939) NoFunction
        CFI (cfiCond939) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond939) DPL0 Frame(CFA_SP, 3)
        CFI (cfiCond939) DPH0 Frame(CFA_SP, 4)
        CFI (cfiCond939) CFA_SP SP+-4
        CFI Block cfiCond940 Using cfiCommon0
        CFI (cfiCond940) NoFunction
        CFI (cfiCond940) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond940) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond940) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond940) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond940) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond940) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond940) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond940) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond940) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond940) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond940) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond940) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond940) CFA_SP SP+0
        CFI (cfiCond940) CFA_XSP16 add(XSP16, 11)
??Subroutine2_1:
        LCALL   ??Subroutine89_0
??CrossCallReturnLabel_285:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond934
        CFI EndBlock cfiCond935
        CFI EndBlock cfiPicker936
        CFI EndBlock cfiCond937
        CFI EndBlock cfiCond938
        CFI EndBlock cfiCond939
        CFI EndBlock cfiCond940
// 2519 

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2520 void savePB(){
savePB:
        CFI Block cfiBlock941 Using cfiCommon0
        CFI Function savePB
        FUNCALL savePB, reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, tickWait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, initiateTransfer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL savePB, tickWait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
// 2521 //new   rc();
// 2522   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2523   asm( "NOP" );
        NOP
// 2524   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2525   asm( "NOP" );
        NOP
// 2526   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2527   asm( "NOP" );
        NOP
// 2528   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2529   asm( "NOP" );
        NOP
// 2530   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2531   asm( "NOP" );
        NOP
// 2532   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2533   asm( "NOP" );
        NOP
// 2534   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2535   asm( "NOP" );
        NOP
// 2536   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2537   asm( "NOP" );
        NOP
// 2538   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2539   asm( "NOP" );
        NOP
// 2540 //  if( !isOnTestStand ) return;
// 2541   //if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; return; }
// 2542   if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" );  return; }  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??savePB_0
        LCALL   ?Subroutine48
??CrossCallReturnLabel_122:
        SJMP    ??savePB_1
// 2543   if( *((BYTE *)0xF53B) != 0xAA ) reset(); 
??savePB_0:
        MOV     DPTR,#-0xac5
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JZ      ??savePB_2
        ; Setup parameters for call to function reset
        LCALL   reset
// 2544   //clearAndHop( 2 ); 
// 2545   //clearThePage( 2 );
// 2546   //page.barrier = 0xAAAA; page.post_barrier = 0x5555;
// 2547   //P1_4 = 1; // debug statement for measuring save PB time
// 2548   asm("CLR  0xA8.7");
??savePB_2:
        CLR  0xA8.7
// 2549   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2550   asm( "NOP" );
        NOP
// 2551   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2552   asm( "NOP" );
        NOP
// 2553   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2554   asm( "NOP" );
        NOP
// 2555   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2556   asm( "NOP" );
        NOP
// 2557   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2558   asm( "NOP" );
        NOP
// 2559   asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2560   asm( "NOP" );
        NOP
// 2561   if( !isOnTestStand ) reset();  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??savePB_3
        ; Setup parameters for call to function reset
        LCALL   reset
// 2562   FADDRH = 0x2E; FWT = 0x21; FCTL = 1; asm("NOP"); // this line actually clears the page
??savePB_3:
        MOV     0xad,#0x2e
        MOV     0xab,#0x21
        MOV     0xae,#0x1
        NOP
// 2563   FADDRH = 0;   
        MOV     0xad,#0x0
// 2564   asm("SETB 0xA8.7");
        SETB 0xA8.7
// 2565   tickWait( 25*TICKS_IN_MS );
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x32
        LCALL   tickWait
// 2566 //  if( !isOnTestStand ) return;
// 2567   initiateTransfer( (BYTE *)&page, (BYTE *)PAGEADDR, PAGESIZE ); //+8 );
        ; Setup parameters for call to function initiateTransfer
        MOV     R1,#-0xe
        MOV     R4,#0x0
        MOV     R5,#0x5c
        MOV     R2,#(page & 0xff)
        MOV     R3,#((page >> 8) & 0xff)
        LCALL   initiateTransfer
// 2568   tickWait( 11*TICKS_IN_MS );  // was 5 ms
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x16
        LCALL   tickWait
// 2569   //softKick();
// 2570   //FADDRH = 0; 
// 2571   restoreRadio();
        LCALL   ?Subroutine1
// 2572   isOnTestStand = 0;
??CrossCallReturnLabel_418:
        MOV     DPTR,#isOnTestStand
        MOVX    @DPTR,A
// 2573   //P1_4 = 0; // debug statement for measuring save PB time
// 2574   CLKCON = 0x89;  asm( "NOP" );
        MOV     0xc6,#-0x77
        NOP
// 2575    asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" ); asm( "NOP" );
        NOP
        NOP
        NOP
        NOP
??savePB_1:
        NOP
// 2576 }
        LJMP    ??Subroutine115_0
        CFI EndBlock cfiBlock941
        REQUIRE FWT
        REQUIRE FADDRH
        REQUIRE FCTL
        REQUIRE CLKCON
// 2577 /*
// 2578 BYTE clearAndHop( BYTE p ){
// 2579    clearThePage( p );
// 2580    if( ticks[ Hop ] && page.hoppingAllowed && !page.is500Always ){
// 2581        CHANNR = curChannel; hop(); curChannel = CHANNR; 
// 2582        atomicChange( Hop, lastCycle ); //- _slot );  
// 2583    }
// 2584    return 1;
// 2585 }
// 2586 */
// 2587 /******************************************************************************
// 2588 * @fn  setInt
// 2589 * @brief       set the int16 value to register
// 2590 * Parameters:  byte reg - register, int val - value
// 2591 * @return      void
// 2592 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2593 void setInt( BYTE reg, UINT16 val ){
setInt:
        CFI Block cfiBlock942 Using cfiCommon0
        CFI Function setInt
        FUNCALL setInt, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2594 UINT16 *ptr = &page.defCyclesTo500;
// 2595 BYTE *pptr = (BYTE *)&page;
        MOV     R4,#(page & 0xff)
        MOV     R5,#((page >> 8) & 0xff)
// 2596 INT16 *ptr_int16 = NULL;
// 2597 
// 2598     switch(reg){     
        MOV     A,R6
        ANL     A,#0xf
        MOV     ?V0 + 0,A
        MOV     A,R3
        MOV     R2,A
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setInt>_0`:
        DATA
        DB        1
        DB        4
        DB        10
        DW        ??setInt_0
        DB        17
        DB        1
        DW        ??setInt_1
        DB        2
        DW        ??setInt_2
        DB        3
        DW        ??setInt_3
        DB        13
        DW        ??setInt_4
        DB        14
        DW        ??setInt_5
        DB        16
        DW        ??setInt_6
        DB        17
        DW        ??setInt_7
        DB        19
        DW        ??setInt_8
        DB        24
        DW        ??setInt_9
        DB        25
        DW        ??setInt_10
        DB        26
        DW        ??setInt_11
        DB        27
        DW        ??setInt_12
        DB        28
        DW        ??setInt_13
        DB        33
        DW        ??setInt_14
        DB        34
        DW        ??setInt_15
        DB        35
        DW        ??setInt_16
        DB        36
        DW        ??setInt_17
        DW        ??setInt_18
        CODE
// 2599         case SET_GROUP_ID: page.groupId = val; break;
??setInt_1:
        MOV     DPTR,#(page + 4)
??setInt_19:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LJMP    ??setInt_20
// 2600         case JOIN: page.netId = (val & 0xF); page.myBunch = ( val >> 8 ) & 0xFF;  break;
??setInt_2:
        MOV     A,?V0 + 0
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#(page + 3)
        LJMP    ??setInt_20
// 2601         case SET_ED_GW:
// 2602             // this check for not 0 is a mistake, because it prohibits setting addr to 0, was a big issue on Remington Hi-Volts !!!
// 2603             //if( val & 0xFF   ) page.edAddr = val & 0xFF;
// 2604             //if( val & 0xFF00 ) page.gwAddr = ( val >> 8 ) & 0xFF;
// 2605             page.edAddr = val & 0xFF;
??setInt_3:
        MOV     A,R6
        MOV     DPTR,#(page + 190)
        MOVX    @DPTR,A
// 2606             page.gwAddr = ( val >> 8 ) & 0xFF;
        MOV     A,R2
        MOV     DPTR,#(page + 191)
        LCALL   ?Subroutine80
// 2607             ADDR = page.edAddr;
??CrossCallReturnLabel_258:
        LJMP    ??setInt_20
// 2608         break;
// 2609         case FetFailureCount:
// 2610           // The following if is meant to use = (not ==), set value
// 2611           // and then compare if fetFailureCount to 0 to set check logic
// 2612           if ((page.fetFailureCount = val) != 0)
??setInt_11:
        MOV     DPTR,#(page + 128)
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 128)
        MOVX    A,@DPTR
        JNZ     ??setInt_21
        INC     DPTR
        MOVX    A,@DPTR
??setInt_21:
        JZ      ??setInt_22
// 2613             checkForFETFailure = TRUE;
        MOV     A,#0x1
??setInt_23:
        MOV     DPTR,#checkForFETFailure
        LJMP    ??setInt_20
// 2614           else
// 2615             checkForFETFailure = FALSE;
??setInt_22:
        CLR     A
        SJMP    ??setInt_23
// 2616           break;
// 2617         case FetCurrentThreshold:                                                                          
// 2618           page.fetCurrentThreshold = val;
??setInt_12:
        MOV     DPTR,#(page + 130)
        SJMP    ??setInt_19
// 2619         break;
// 2620         case FetDeltaCurrent:
// 2621 	  page.fetDeltaCurrent = val;
??setInt_13:
        MOV     DPTR,#(page + 132)
??setInt_24:
        SJMP    ??setInt_19
// 2622         break;
// 2623         case BootImage: // try before buy
// 2624             tickWait( 12 * TICKS_IN_MS);
??setInt_4:
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x18
        LCALL   tickWait
// 2625             // changing timers to boot (old) values
// 2626             /*if( val == 0x603F ){
// 2627                 T1CTL &= 0xFC;
// 2628                 SET_WORD(T1CNTH, T1CNTL, 0);
// 2629                 SET_WORD(T1CC0H, T1CC0L, 600 - 1);
// 2630                 T1CTL |= 0x04  | 0x02;
// 2631                 T1CCTL0 = 0x44;
// 2632                 si->mppCycle = 300;   // change when we change 8k image and Boot
// 2633             }*/
// 2634             if( val == 0x83F ) break;
        MOV     A,#0x3f
        XRL     A,R6
        JNZ     ??setInt_25
        MOV     A,#0x8
        XRL     A,R7
??setInt_25:
        JNZ     $+5
        LJMP    ??setInt_18
// 2635             {void (*f)( void ) = ( void (*)( void ) )val;  /*si->interImageCommunications[ JustLoaded ] = TRUE;*/ (*f)();}          
        ; Setup parameters for indirect call
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?CALL_IND
        LJMP    ??setInt_18
// 2636         break;
// 2637         case SyncWord: 
// 2638           SYNC0 = val & 0xFF;    SYNC1 = ( val >> 8 ) & 0xFF;
??setInt_5:
        MOV     A,R6
        MOV     DPTR,#-0x20ff
        MOVX    @DPTR,A
        MOV     A,R2
        MOV     DPTR,#-0x2100
        MOVX    @DPTR,A
// 2639           page.syncword = val; 
        MOV     DPTR,#(page + 154)
        SJMP    ??setInt_19
// 2640         break;
// 2641         /*
// 2642         case SetCyclesTo500:            page.defCyclesTo500 = val;            break;
// 2643         case SetCyclesTo10:             page.defCyclesTo10  = val;            break;
// 2644         case SetCyclesToStep500Channel: page.defCyclesToStep500Channel = val; break;
// 2645         case SetCyclesToStep10Channel:  page.defCyclesToStep10Channel  = val; break;
// 2646         case SetCyclesToLightKick:      page.defCycles2LightKick = val;       break;
// 2647         case SetCyclesToSoftKick:       page.defCycles2SoftKick = val;        break;
// 2648         case SetCyclesToHardKick:       page.defCycles2HardKick =val;         break;
// 2649         */
// 2650         
// 2651         case SetCyclesTo500:                    case SetCyclesTo10:             
// 2652         case SetCyclesToStep500Channel:         case SetCyclesToStep10Channel:  
// 2653         case SetCyclesToSoftKick:               case SetCyclesToHardKick:   
// 2654         case SetImageAddr:
// 2655         // 06/27/2017 Version no longer settable case SetVersionLow:                     case SetVersionHigh:
// 2656         //default:
// 2657             //if( (reg > (SetCyclesTo500-1) ) && ( reg < (SetVersionHigh+1) ) ){
// 2658                 //UINT16 *ptr = &page.defCyclesTo500;
// 2659                 ptr[ reg - SetCyclesTo500 ] = val;
??setInt_0:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        ADD     A,#((page + 192) & 0xff)
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#(((page + 192) >> 8) & 0xff)
        MOV     DPH,A
        LJMP    ??setInt_19
// 2660             //}
// 2661         break;
// 2662         case SetBasePtr:
// 2663             if( (base_ptr == NULL) && (((UINT16)val) > 0x3FF) && (((UINT16)val) < 0x800) )  base_ptr = (BYTE *)val;
??setInt_6:
        MOV     DPTR,#base_ptr
        MOVX    A,@DPTR
        JNZ     ??setInt_26
        INC     DPTR
        MOVX    A,@DPTR
??setInt_26:
        JNZ     ??setInt_18
        CLR     C
        MOV     A,R7
        SUBB    A,#0x4
        JC      ??setInt_18
        CLR     C
        MOV     A,R7
        SUBB    A,#0x8
        JNC     ??setInt_18
        MOV     DPTR,#base_ptr
        LJMP    ??setInt_19
// 2664         break;  
// 2665         case SetCurNoise: page.cur_noise = val; break;
??setInt_7:
        MOV     DPTR,#(page + 232)
??setInt_27:
        LJMP    ??setInt_19
// 2666         //case GndShift:    gnd_shift = val;      break;
// 2667         case SetLowCurrentLimitTo255:
// 2668           page.LowCurrentLimitTo255 = (INT16)val;
??setInt_8:
        MOV     DPTR,#(page + 134)
        LJMP    ??setInt_19
// 2669           break;
// 2670         case SetVoutLimitCount:
// 2671           page.VoutLimitCount = (INT16)val;
??setInt_14:
        MOV     DPTR,#(page + 136)
        SJMP    ??setInt_24
// 2672           break;
// 2673         case SetVoutLimit:
// 2674           page.VoutLimit = (UINT16)val;
??setInt_15:
        MOV     DPTR,#(page + 138)
        LJMP    ??setInt_19
// 2675           break;
// 2676         case SetIoutLimitCount:
// 2677           page.IoutLimitCount = (INT16)val;
??setInt_16:
        MOV     DPTR,#(page + 140)
        SJMP    ??setInt_27
// 2678           break;
// 2679         case SetIoutLimit:
// 2680           page.IoutLimit = (INT16)val;
??setInt_17:
        MOV     DPTR,#(page + 142)
        LJMP    ??setInt_19
// 2681           break;
// 2682           // 01/09/2017 ptr_int16 = &page.LowCurrentLimitTo255;
// 2683           // 01/09/2017 ptr_int16[reg - SetLowCurrentLimitTo255] = val;
// 2684           /*
// 2685 #ifdef MidString
// 2686           ocLimit1 = FALSE;  // Ensure new values are used in checkVin (in case either ocLimit is TRUE)
// 2687           ocLimit2 = FALSE;  // 06/29/2017 - changes (2 lines)
// 2688 #endif
// 2689           */
// 2690         case ReadPBOneCommand: 
// 2691             if( (val>>12)&0xF ) pptr = (BYTE *)0x5C00; 
??setInt_9:
        MOV     A,#-0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??setInt_28
        MOV     A,R1
??setInt_28:
        JZ      ??setInt_29
        MOV     R4,#0x0
        MOV     R5,#0x5c
// 2692             base_ptr = pptr + 24*((val>>8)&0xF);
??setInt_29:
        MOV     A,#0xf
        ANL     A,R2
        MOV     B,#0x18
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,R4
        ADD     A,R0
        MOV     R0,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#base_ptr
        LCALL   ??Subroutine67_0
// 2693             calibrationRepeat = (val>>4)&0xF;
??CrossCallReturnLabel_217:
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        MOV     DPTR,#calibrationRepeat
        MOVX    @DPTR,A
// 2694             reportScaling  = (val&0xF) * calibrationRepeat; 
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        MOV     B,A
        POP     A
        CFI CFA_SP SP+0
        MUL     AB
        MOV     DPTR,#reportScaling
        SJMP    ??setInt_20
// 2695         break;
// 2696         case SetPBByte: pptr[ ( val >> 8 )&0xFF ] = val & 0xFF; break;
??setInt_10:
        MOV     A,R2
        ADD     A,#(page & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((page >> 8) & 0xff)
        MOV     DPH,A
        MOV     A,R6
??setInt_20:
        MOVX    @DPTR,A
// 2697     }
// 2698 }
??setInt_18:
        LJMP    ?Subroutine120
        CFI EndBlock cfiBlock942

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiCond943 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_257
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond944 Using cfiCommon0
        CFI (cfiCond944) NoFunction
        CFI (cfiCond944) Conditional ??CrossCallReturnLabel_258
        CFI (cfiCond944) R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond944) VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond944) V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond944) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond944) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond944) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond944) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond944) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond944) CFA_SP SP+0
        CFI (cfiCond944) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker945 Using cfiCommon1
        CFI (cfiPicker945) NoFunction
        CFI (cfiPicker945) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 190)
        MOVX    A,@DPTR
        MOV     DPTR,#-0x20fb
        RET
        CFI EndBlock cfiCond943
        CFI EndBlock cfiCond944
        CFI EndBlock cfiPicker945
// 2699 /******************************************************************************
// 2700 * @fn  setLong
// 2701 * @brief       set the long value to register
// 2702 * Parameters:  byte reg - register, long val - value
// 2703 * @return      void
// 2704 ******************************************************************************/
// 2705 //void setLong( BYTE reg, UINT32 val ){  if( reg == SET_DF_TOLERANCE ){ page.dF_Tolerance = val;  } }
// 2706 /******************************************************************************
// 2707 * @fn  setFloat
// 2708 * @brief       set the float value to register
// 2709 * Parameters:  byte reg - register, float val - value
// 2710 * @return      void
// 2711 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2712 void setFloat( BYTE reg, float *ptr){
setFloat:
        CFI Block cfiBlock946 Using cfiCommon0
        CFI Function setFloat
        FUNCALL setFloat, zerofill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setFloat, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL setFloat, oc2timer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2713 //BYTE oc = 0;
// 2714 //float val = *ptr;
// 2715 BYTE *dst = NULL;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
// 2716 BOOL recomputeOC2Timer = FALSE;
        MOV     ?V0 + 3,#0x0
// 2717     switch(reg){     
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#(page & 0xff)
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,#((page >> 8) & 0xff)
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for setFloat>_0`:
        DATA
        DB        4
        DB        1
        DB        4
        DW        ??setFloat_0
        DB        5
        DB        6
        DW        ??setFloat_1
        DB        10
        DB        23
        DW        ??setFloat_2
        DB        25
        DB        26
        DW        ??setFloat_3
        DB        1
        DB        24
        DW        ??setFloat_4
        DW        ??setFloat_5
        CODE
// 2718         case SET_DFK0:  case SET_DFK1:  case SET_DFK2:  case SET_DFK3:     
// 2719             //page.dFk[reg-SET_DFK0] = val;    
// 2720             dst = (BYTE *) &page.dFk[reg-SET_DFK0];
??setFloat_0:
        MOV     A,R2
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
// 2721             if( reg == SET_DFK3 ) page.pureOffset = ((INT16) (*ptr))+20;
        MOV     A,#0x4
        XRL     A,?V0 + 2
        JZ      $+5
        LJMP    ??setFloat_5
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     A,#0x14
        ADD     A,?V0 + 4
        MOV     R0,A
        CLR     A
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     DPTR,#(page + 198)
        LCALL   ??Subroutine67_0
??CrossCallReturnLabel_218:
        SJMP    ??setFloat_5
// 2722         break;
// 2723         //case SET_VIN_TURN_ON: case SET_VIN_SHUT_OFF: (&page.VinTurnOn)[reg-SET_VIN_TURN_ON]  = val;      return;
// 2724         
// 2725         case SET_TK_CUR: case SET_TK_POW:          
// 2726             //(&page.tkCurrent)[reg-SET_TK_CUR] = val;   
// 2727             dst = (BYTE *) &( (&page.tkCurrent)[reg-SET_TK_CUR] );
??setFloat_1:
        MOV     A,R2
        ADD     A,#-0x63
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        SJMP    ??setFloat_6
// 2728         break;
// 2729         
// 2730         //case SET_VIN_DISABLE_RADIO:                                        page.VinDisableRadio  = val;  return;
// 2731 
// 2732         case SET_LC00:  case SET_LC01:  case SET_LC10:  case SET_LC11:  
// 2733         case SET_LC20:  case SET_LC21:  case SET_LC30:  case SET_LC31:  
// 2734         case SET_LC40:  case SET_LC41:  case SET_LC50:  case SET_LC51:  // linearK [6][2]  
// 2735         case SET_LC60:  case SET_LC61:
// 2736             if( reg == 14 ){ zerofill( (BYTE *)&k_oc2timer, 4 );  recomputeOC2Timer = TRUE; }
??setFloat_2:
        MOV     A,#0xe
        XRL     A,?V0 + 2
        JNZ     ??setFloat_7
        ; Setup parameters for call to function zerofill
        MOV     R1,#0x4
        MOV     R2,#(k_oc2timer & 0xff)
        MOV     R3,#((k_oc2timer >> 8) & 0xff)
        LCALL   zerofill
        MOV     ?V0 + 3,#0x1
// 2737             reg -= SET_LC00;
??setFloat_7:
        MOV     A,#-0xa
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
// 2738             //page.linearK[reg>>1][reg&1]     = val; 
// 2739             dst = (BYTE *) &page.linearK[reg>>1][reg&1]; 
        CLR     C
        RRC     A
        MOV     ?V0 + 0,A
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,#((page + 40) & 0xff)
        MOV     R0,A
        CLR     A
        ADDC    A,#(((page + 40) >> 8) & 0xff)
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        SJMP    ??setFloat_6
// 2740 //            if( reg == 4 ){
// 2741 //                T3CC1 = oc2timer( theOC ); // lin coeff for 
// 2742 //                #ifdef MidString
// 2743 //                compute98();
// 2744 //                #endif
// 2745 //            }
// 2746         break;
// 2747         case SET_VREF0:                   invVref0 = 1 / (*ptr);                    // go through
??setFloat_4:
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#-0x80
        MOV     ?V0 + 11,#0x3f
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#invVref0
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 2748         case SET_VREF1: case SET_VREF2:   
// 2749             //mymemcpy( (BYTE *) &page.vrefPolynom[reg-SET_VREF0], (BYTE *) ptr, 4 );
// 2750             dst = (BYTE *) &page.vrefPolynom[reg-SET_VREF0];
??setFloat_3:
        MOV     A,R2
        ADD     A,#-0x44
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#-0x1
??setFloat_6:
        MOV     ?V0 + 1,A
// 2751         break;
// 2752     }
// 2753     if( dst ) mymemcpy( dst, (BYTE *) ptr, 4 );
??setFloat_5:
        MOV     A,?V0 + 0
        JNZ     ??setFloat_8
        MOV     A,?V0 + 1
??setFloat_8:
        JZ      ??setFloat_9
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   mymemcpy
// 2754     if( recomputeOC2Timer ) T3CC1 = oc2timer( theOC );
??setFloat_9:
        MOV     A,?V0 + 3
        JZ      ??CrossCallReturnLabel_86
        ; Setup parameters for call to function oc2timer
        LCALL   ??Subroutine34_0
// 2755 }
??CrossCallReturnLabel_86:
        LJMP    ?Subroutine113
        CFI EndBlock cfiBlock946
        REQUIRE T3CC1
// 2756 /******************************************************************************/
// 2757 #define NULLOP          0
// 2758 #define SETREG          0x10
// 2759 #define RESET           0x20
// 2760 #define SILENCE         0x30
// 2761 #define CALIBRATE_R     0x40
// 2762 #define SET_MAC_CMD     0x50
// 2763 #define BOOT_OVER_AIR   0x60
// 2764 #define SET_NEXT_KEY    0x70
// 2765 #define SET_NEXT_IV     0x80
// 2766 #define ASVOL_NETCMD    0x90
// 2767 #define SHORT_NETJOIN   0xF0
// 2768 
// 2769 #define BROADCAST       0
// 2770 #define STRINGADDR      1
// 2771 #define NIADDR          2
// 2772 #define MACADDR         3
// 2773 
// 2774 #define FLOAT_VAL       0
// 2775 #define BYTE_VAL        (1<<2)
// 2776 #define SHORT_VAL       (2<<2)
// 2777 #define LONG_VAL        (3<<2)
// 2778 
// 2779 /******************************************************************************
// 2780 * @fn  parseCommands
// 2781 * @brief       This function parses commands and sets global flags
// 2782 * Parameters:
// 2783 * @return void
// 2784 ******************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
// 2785 void parseCommands(BYTE l){
parseCommands:
        CFI Block cfiBlock947 Using cfiCommon0
        CFI Function parseCommands
        FUNCALL parseCommands, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setFloat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setInt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, tickWait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, `code`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, load
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, wait_aes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, mymemcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, savePB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setup_hopper
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL parseCommands, setupRadio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 4,R1
// 2786 BYTE *ptr     = radioPktBuffer + 8;
        MOV     R6,#((radioPktBuffer + 8) & 0xff)
        MOV     R7,#(((radioPktBuffer + 8) >> 8) & 0xff)
// 2787 BYTE cmd, reg;
// 2788 BOOL flag = TRUE, /*addrFlag = FALSE,*/ individualAddr = FALSE;
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        SJMP    ??parseCommands_0
// 2789 static UINT16 cmdCnt = 0; //, i;
// 2790     while( *ptr && (l--) ){
// 2791         cmd = *ptr++; 
// 2792         if( (cmd & 0xF0) == SHORT_NETJOIN ){
// 2793             reg = *ptr++;
??parseCommands_1:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
// 2794             if( mymemcmp( page.myMac, ptr, 6 ) == 0 ){ page.netId = (cmd & 0xF); page.myBunch = reg; }
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseCommands_2
        MOV     A,#0xf
        ANL     A,?V0 + 5
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     A,?V0 + 0
        MOV     DPTR,#(page + 3)
        MOVX    @DPTR,A
// 2795             ptr += 6;
??parseCommands_2:
        MOV     A,R6
        ADD     A,#0x6
??parseCommands_3:
        MOV     R6,A
??parseCommands_4:
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 2796         }else{
??parseCommands_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_262
        MOV     R3,?V0 + 4
        MOV     A,#-0x1
        ADD     A,R3
        MOV     ?V0 + 4,A
        MOV     A,R3
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_262
        MOV     ?V0 + 5,R2
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,#-0x10
        ANL     A,?V0 + 5
        MOV     ?V0 + 0,A
        MOV     A,#-0x10
        XRL     A,?V0 + 0
        JZ      ??parseCommands_1
// 2797             if( search_stat == 2 ) search_stat = page.searchCommunication;
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??CrossCallReturnLabel_134
        LCALL   ?Subroutine52
// 2798             //mymemcpy( (BYTE *)&cmdCnt, ptr, 2 ); 
// 2799             cmdCnt = *((UINT16 *)ptr);
??CrossCallReturnLabel_134:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_183:
        MOV     DPTR,#??cmdCnt
        LCALL   ??Subroutine67_0
// 2800             ptr+=2;
??CrossCallReturnLabel_219:
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 2801             switch( cmd & 0x3 ){ 
        MOV     A,R6
        ADD     A,#0x2
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x3
        ANL     A,?V0 + 5
        MOV     ?V0 + 1,A
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for parseCommands>_0`:
        DATA
        DB        0
        DB        3
        DW        ??parseCommands_5
        DW        ??parseCommands_6
        DW        ??parseCommands_7
        DW        ??parseCommands_8
        DW        ??parseCommands_9
        CODE
// 2802                 case BROADCAST:                                                             flag = TRUE; break;
??parseCommands_6:
        MOV     ?V0 + 2,#0x1
        SJMP    ??parseCommands_5
// 2803                 case STRINGADDR: flag = ( *((UINT16 *) ptr) == page.groupId );              ptr += 2;    break;
??parseCommands_7:
        LCALL   ?Subroutine45
??CrossCallReturnLabel_111:
        MOV     DPTR,#(page + 4)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??parseCommands_10:
        JNZ     ??parseCommands_11
        MOV     R2,#0x1
        SJMP    ??parseCommands_12
??parseCommands_11:
        MOV     R2,#0x0
??parseCommands_12:
        MOV     ?V0 + 2,R2
??parseCommands_13:
        INC     R6
        INC     R6
        MOV     A,R1
        SJMP    ??parseCommands_14
// 2804                 case NIADDR:     flag = ( ptr[0] == page.myBunch && ptr[1] == page.netId ); individualAddr = flag; ptr += 2;    break;
??parseCommands_8:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 3)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_15
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 2)
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??parseCommands_15
        MOV     R2,#0x1
        SJMP    ??parseCommands_16
??parseCommands_15:
        MOV     R2,#0x0
??parseCommands_16:
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,?V0 + 2
        SJMP    ??parseCommands_13
// 2805                 case MACADDR:    
// 2806                     flag = ( mymemcmp( page.myMac, ptr, 6 ) == 0 );// flag = TRUE; else flag = FALSE;
??parseCommands_9:
        ; Setup parameters for call to function mymemcmp
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcmp
        MOV     A,R1
        JNZ     ??parseCommands_17
        MOV     R2,#0x1
        SJMP    ??parseCommands_18
??parseCommands_17:
        MOV     R2,#0x0
??parseCommands_18:
        MOV     ?V0 + 2,R2
// 2807                     individualAddr = flag;
        MOV     ?V0 + 3,?V0 + 2
// 2808                     ptr += 6;
        MOV     A,R6
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
??parseCommands_14:
        MOV     R7,A
// 2809                 break;
// 2810             }
// 2811             //addrFlag = flag;
// 2812             if( cmdCnt ){
??parseCommands_5:
        MOV     DPTR,#??cmdCnt
        MOVX    A,@DPTR
        JNZ     ??parseCommands_19
        INC     DPTR
        MOVX    A,@DPTR
??parseCommands_19:
        JZ      ??parseCommands_20
// 2813                 if( cmdCount > 0xFF00 &&  cmdCnt < 0x100 ) cmdCount = cmdCnt;
        MOV     DPTR,#cmdCount
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#-0x1
        JC      ??parseCommands_21
        CLR     C
        MOV     DPTR,#(??cmdCnt + 1)
        MOVX    A,@DPTR
        SUBB    A,#0x1
        JNC     ??parseCommands_21
        MOV     DPTR,#??cmdCnt
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_184:
        MOV     DPTR,#cmdCount
        LCALL   ??Subroutine67_0
??CrossCallReturnLabel_220:
        SJMP    ??parseCommands_20
// 2814                 else                                       flag = flag && (cmdCnt > cmdCount);
??parseCommands_21:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_22
        LCALL   ?Subroutine23
??CrossCallReturnLabel_61:
        JNC     ??parseCommands_22
        MOV     R2,#0x1
        SJMP    ??parseCommands_23
??parseCommands_22:
        MOV     R2,#0x0
??parseCommands_23:
        MOV     ?V0 + 2,R2
// 2815             }
// 2816             if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
??parseCommands_20:
        LCALL   ?Subroutine23
??CrossCallReturnLabel_62:
        JNC     ??CrossCallReturnLabel_221
        MOV     DPTR,#cmdCount
        LCALL   ??Subroutine67_0
// 2817             switch( cmd & 0xF0 ){
??CrossCallReturnLabel_221:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,?V0 + 0
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for parseCommands>_1`:
        DATA
        DB        0
        DB        6
        DB        16
        DW        ??parseCommands_24
        DB        32
        DW        ??parseCommands_25
        DB        80
        DW        ??parseCommands_26
        DB        112
        DW        ??parseCommands_27
        DB        128
        DW        ??parseCommands_27
        DB        144
        DW        ??parseCommands_28
        DW        ??parseCommands_0
        CODE
// 2818                 case SET_MAC_CMD:
// 2819                   if( flag && ( ( cmd & 0x3 ) == MACADDR ) ) {
??parseCommands_26:
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??parseCommands_2
        MOV     A,#0x3
        XRL     A,?V0 + 1
        JZ      $+5
        LJMP    ??parseCommands_2
// 2820                       mymemcpy( page.myMac, ptr, 6 );
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x6
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#((page + 6) & 0xff)
        MOV     R3,#(((page + 6) >> 8) & 0xff)
        LCALL   mymemcpy
        LJMP    ??parseCommands_2
// 2821                       //savePB();
// 2822                   }
// 2823                   ptr += 6;
// 2824                 break;
// 2825                 case SETREG:
// 2826                     if( search_stat != page.searchCommunication ) page.searchCommunication = search_stat;
??parseCommands_24:
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        XRL     A,R2
        JZ      ??parseCommands_29
        MOV     DPTR,#search_stat
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        MOV     DPH,#(((page + 194) >> 8) & 0xff)
        MOV     DPL,#((page + 194) & 0xff)
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.7,C
        MOVX    @DPTR,A
// 2827                     reg = *ptr++;
??parseCommands_29:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 2828                     switch( cmd&0xC ){
        MOV     A,#0xc
        ANL     A,?V0 + 5
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for parseCommands>_2`:
        DATA
        DB        0
        DB        3
        DB        0
        DW        ??parseCommands_30
        DB        4
        DW        ??parseCommands_31
        DB        8
        DW        ??parseCommands_32
        DW        ??parseCommands_0
        CODE
// 2829                         case FLOAT_VAL:  if( flag ) setFloat( reg, (float *)ptr );       ptr+=4;  break;
??parseCommands_30:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_33
        ; Setup parameters for call to function setFloat
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   setFloat
??parseCommands_33:
        MOV     A,R6
        ADD     A,#0x4
        LJMP    ??parseCommands_3
// 2830                         case BYTE_VAL:   if( flag ) setByte ( reg, *ptr );               ptr++;   break;
??parseCommands_31:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_34
        ; Setup parameters for call to function setByte
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0 + 0
        LCALL   setByte
??parseCommands_34:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        LJMP    ??parseCommands_0
// 2831                         case SHORT_VAL:  if( flag ) setInt  ( reg, *((UINT16*)ptr) );    ptr+=2;  break;
??parseCommands_32:
        MOV     A,?V0 + 2
        JZ      ??parseCommands_35
        ; Setup parameters for call to function setInt
        LCALL   ?Subroutine45
??CrossCallReturnLabel_112:
        MOV     R1,?V0 + 0
        LCALL   setInt
??parseCommands_35:
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        LJMP    ??parseCommands_4
// 2832                     }
// 2833                 break;
// 2834                 case RESET: if( flag ){ tickWait( 12 * TICKS_IN_MS ); reset(); }else break; // ticks[ Reset ] = TICKS_IN_SEC; else break;
??parseCommands_25:
        MOV     A,?V0 + 2
        JNZ     $+5
        LJMP    ??parseCommands_0
        ; Setup parameters for call to function tickWait
        MOV     R1,#0x18
        LCALL   tickWait
        ; Setup parameters for call to function reset
        LCALL   reset
// 2835                 /*
// 2836                 case BOOT_OVER_AIR: if( addrFlag && !P1_4 ) {
// 2837                 UINT16 addr;  
// 2838                     page.searchCommunication = FALSE;
// 2839                     reg = *ptr++; addr = *((UINT16*)ptr);  
// 2840                     if( ( addr > 0x3FF ) && ( 0x4000 & ( addr ^ page.imageAddr ) ) && ( addr < PAGEADDR ) ){
// 2841                     //static BYTE bootBuf[18];
// 2842                         ptr += 2;
// 2843                         //for( cmd = 0; cmd < reg; cmd++ ) bootBuf[ cmd ] = *ptr++;
// 2844                         //mymemcpy( bootBuf, ptr, reg );
// 2845                         if( reg & 1 ) reg++;
// 2846                         tickWait( 12 * TICKS_IN_MS );
// 2847                         initiateTransfer( ptr, (BYTE *)addr, reg );
// 2848                     }
// 2849                 }return;
// 2850                 */
// 2851                 case SET_NEXT_KEY: case SET_NEXT_IV: 
// 2852                     if( individualAddr ){ 
??parseCommands_27:
        MOV     A,?V0 + 3
        JZ      ??CrossCallReturnLabel_262
// 2853                         loadKey( (char *)0x3E0 ); loadIV( (char *)0x3F0 ); 
        ; Setup parameters for call to function load
        MOV     R2,#-0x20
        MOV     R3,#0x3
        LCALL   ??Subroutine81_0
??CrossCallReturnLabel_263:
        ; Setup parameters for call to function load
        MOV     R2,#-0x10
        MOV     R3,#0x3
        MOV     R1,#0x6
        LCALL   ??Subroutine81_1
// 2854                         decode( 16, (char *)ptr, ((cmd&0xF0)==SET_NEXT_IV) ? (char *)nextIV : (char *)nextKey ); 
??CrossCallReturnLabel_266:
        MOV     A,#-0x80
        XRL     A,?V0 + 0
        JNZ     ??parseCommands_36
        MOV     ?V0 + 0,#(nextIV & 0xff)
        MOV     ?V0 + 1,#((nextIV >> 8) & 0xff)
        SJMP    ??parseCommands_37
??parseCommands_36:
        MOV     ?V0 + 0,#(nextKey & 0xff)
        MOV     ?V0 + 1,#((nextKey >> 8) & 0xff)
??parseCommands_37:
        ; Setup parameters for call to function code
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x10
        MOV     R1,#0x2
        LCALL   `code`
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
// 2855                         loadKey( page.curKey );
        ; Setup parameters for call to function load
        LCALL   ?Subroutine81
??CrossCallReturnLabel_262:
        MOV     R7,#0x6
        LJMP    ?FUNC_LEAVE_XDATA
// 2856                     }
// 2857                 return;
// 2858                 case ASVOL_NETCMD:
// 2859                     if( individualAddr ){
??parseCommands_28:
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 3
        JZ      ??parseCommands_38
// 2860                         BYTE *saved_ptr = ptr;
// 2861                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2862                         asm( "NOP" );
        NOP
// 2863                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2864                         asm( "NOP" );
        NOP
// 2865                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2866                         asm( "NOP" );
        NOP
// 2867                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2868                         asm( "NOP" );
        NOP
// 2869                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2870                         asm( "NOP" );
        NOP
// 2871                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2872                         asm( "NOP" );
        NOP
// 2873                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2874                         asm( "NOP" );
        NOP
// 2875                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2876                         asm( "NOP" );
        NOP
// 2877                         asm( "ORL 0xC6, #0x40");              // starting the RC Oscillator
        ORL 0xC6, #0x40
// 2878                         asm( "NOP" );
        NOP
// 2879                         if( !isOnTestStand ){ isOnTestStand = 20; cmdCount--; CLKCON = 0x89; asm( "NOP" ); ptr += 7; break; }  
        MOV     DPTR,#isOnTestStand
        MOVX    A,@DPTR
        JNZ     ??parseCommands_39
        LCALL   ?Subroutine48
??CrossCallReturnLabel_123:
        NOP
// 2880                       
// 2881                         cmd = *ptr++;
// 2882                         page.channel = page.starting500Channel = *ptr++;                // 7 bytes so far, 1 bit free
// 2883                         page.edAddr  =                           *ptr++;
// 2884                         page.gwAddr  =                           *ptr++;
// 2885                         page.myBunch =                           *ptr++;
// 2886                         page.groupId =                           *((UINT16 *) ptr);  ptr += 2;
// 2887 
// 2888                         page.netId   =     0xF & cmd;
// 2889                         page.use12kbod  = (0!=(0x10 & cmd ) )?1:0;
// 2890                         page.useFEC     = (0!=(0x20 & cmd ) )?1:0;
// 2891                         page.use250kbod = (0!=(0x40 & cmd ) )?1:0;
// 2892                         
// 2893                         mymemcpy( (BYTE *)(&page.installDate), (BYTE *)&utcLast, 4);
// 2894                         savePB();
// 2895                         ptr = saved_ptr+7;
// 2896                         setup_hopper( page.channel );
// 2897                         setupRadio(   page.channel ); //page.is500Always ? page.starting500Channel : page.channel );  // global interrupts are inabled inside the setupRadio
// 2898                     }else ptr+=7;
??parseCommands_38:
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        LJMP    ??parseCommands_0
??parseCommands_39:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     DPTR,#(page + 218)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 164)
        LCALL   ?Subroutine104
??CrossCallReturnLabel_327:
        MOVX    A,@DPTR
        MOV     DPTR,#(page + 190)
        LCALL   ?Subroutine77
??CrossCallReturnLabel_249:
        MOV     DPTR,#(page + 191)
        LCALL   ?Subroutine77
??CrossCallReturnLabel_250:
        MOV     DPTR,#(page + 3)
        LCALL   ?Subroutine104
??CrossCallReturnLabel_328:
        INC     DPTR
        LCALL   ??Subroutine60_0
??CrossCallReturnLabel_185:
        MOV     DPTR,#(page + 4)
        LCALL   ??Subroutine67_0
??CrossCallReturnLabel_222:
        MOV     A,#0xf
        ANL     A,?V0 + 5
        MOV     DPTR,#(page + 2)
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 194)
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.4
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.2,C
        MOVX    @DPTR,A
        MOV     DPTR,#(page + 219)
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.5
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.4,C
        MOVX    @DPTR,A
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.6
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.1,C
        MOVX    @DPTR,A
        ; Setup parameters for call to function mymemcpy
        MOV     R1,#0x4
        MOV     R4,#(utcLast & 0xff)
        MOV     R5,#((utcLast >> 8) & 0xff)
        MOV     R2,#((page + 148) & 0xff)
        MOV     R3,#(((page + 148) >> 8) & 0xff)
        LCALL   mymemcpy
        ; Setup parameters for call to function savePB
        LCALL   savePB
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        ; Setup parameters for call to function setup_hopper
        MOV     DPTR,#(page + 164)
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   setup_hopper
        ; Setup parameters for call to function setupRadio
        LCALL   ??Subroutine51_0
??CrossCallReturnLabel_132:
        LJMP    ??parseCommands_0
        CFI EndBlock cfiBlock947
        REQUIRE CLKCON
// 2899                 break;
// 2900             }
// 2901             //if( cmdCnt > cmdCount ) cmdCount = cmdCnt;
// 2902         }
// 2903     }
// 2904 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine104:
        CFI Block cfiCond948 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_326
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-31)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-30)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-29)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-28)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-27)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-26)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-25)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V16 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V17 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V18 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V19 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V20 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V21 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V22 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V23 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 31)
        CFI Block cfiCond949 Using cfiCommon0
        CFI (cfiCond949) NoFunction
        CFI (cfiCond949) Conditional ??CrossCallReturnLabel_327
        CFI (cfiCond949) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond949) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond949) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond949) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond949) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond949) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond949) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond949) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond949) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond949) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond949) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond949) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond949) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond949) CFA_SP SP+0
        CFI (cfiCond949) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond950 Using cfiCommon0
        CFI (cfiCond950) NoFunction
        CFI (cfiCond950) Conditional ??CrossCallReturnLabel_328
        CFI (cfiCond950) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond950) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond950) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond950) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond950) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond950) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond950) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond950) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond950) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond950) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond950) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond950) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond950) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond950) CFA_SP SP+0
        CFI (cfiCond950) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond951 Using cfiCommon0
        CFI (cfiCond951) NoFunction
        CFI (cfiCond951) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_249
        CFI (cfiCond951) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond951) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond951) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond951) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond951) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond951) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond951) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond951) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond951) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond951) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond951) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond951) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond951) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond951) CFA_SP SP+0
        CFI (cfiCond951) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond952 Using cfiCommon0
        CFI (cfiCond952) NoFunction
        CFI (cfiCond952) Conditional ??CrossCallReturnLabel_329, ??CrossCallReturnLabel_250
        CFI (cfiCond952) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond952) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond952) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond952) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond952) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond952) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond952) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond952) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond952) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond952) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond952) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond952) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond952) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond952) CFA_SP SP+0
        CFI (cfiCond952) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker953 Using cfiCommon1
        CFI (cfiPicker953) NoFunction
        CFI (cfiPicker953) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond948
        CFI EndBlock cfiCond949
        CFI EndBlock cfiCond950
        CFI EndBlock cfiCond951
        CFI EndBlock cfiCond952
        CFI EndBlock cfiPicker953

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiCond954 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_249
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond955 Using cfiCommon0
        CFI (cfiCond955) NoFunction
        CFI (cfiCond955) Conditional ??CrossCallReturnLabel_250
        CFI (cfiCond955) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond955) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond955) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond955) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond955) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond955) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond955) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond955) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond955) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond955) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond955) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond955) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond955) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond955) CFA_SP SP+0
        CFI (cfiCond955) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker956 Using cfiCommon1
        CFI (cfiPicker956) NoFunction
        CFI (cfiPicker956) Picker
        LCALL   ?Subroutine104
??CrossCallReturnLabel_329:
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond954
        CFI EndBlock cfiCond955
        CFI EndBlock cfiPicker956

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond957 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_133
        CFI Block cfiCond958 Using cfiCommon0
        CFI (cfiCond958) NoFunction
        CFI (cfiCond958) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond958) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond958) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond958) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond958) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond958) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond958) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond958) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond958) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond958) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond958) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond958) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond958) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond958) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond958) CFA_SP SP+0
        CFI (cfiCond958) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker959 Using cfiCommon1
        CFI (cfiPicker959) NoFunction
        CFI (cfiPicker959) Picker
        MOV     DPTR,#(page + 194)
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        CLR     A
        MOV     0xE0 /* A   */.0,C
        MOV     DPTR,#search_stat
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond957
        CFI EndBlock cfiCond958
        CFI EndBlock cfiPicker959

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond960 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_122
        CFI DPL0 Frame(CFA_SP, 3)
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        CFI Block cfiCond961 Using cfiCommon0
        CFI (cfiCond961) NoFunction
        CFI (cfiCond961) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond961) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond961) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond961) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond961) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond961) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond961) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond961) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond961) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond961) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond961) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond961) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond961) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond961) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond961) CFA_SP SP+0
        CFI (cfiCond961) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker962 Using cfiCommon1
        CFI (cfiPicker962) NoFunction
        CFI (cfiPicker962) Picker
        MOV     A,#0x14
        MOVX    @DPTR,A
        MOV     DPTR,#cmdCount
        LCALL   ?Subroutine102
??CrossCallReturnLabel_324:
        MOVX    @DPTR,A
        MOV     0xc6,#-0x77
        RET
        CFI EndBlock cfiCond960
        CFI EndBlock cfiCond961
        CFI EndBlock cfiPicker962

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond963 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond964 Using cfiCommon0
        CFI (cfiCond964) NoFunction
        CFI (cfiCond964) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond964) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond964) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond964) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond964) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond964) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond964) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond964) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond964) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond964) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond964) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond964) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond964) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond964) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond964) CFA_SP SP+0
        CFI (cfiCond964) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker965 Using cfiCommon1
        CFI (cfiPicker965) NoFunction
        CFI (cfiPicker965) Picker
        MOV     DPTR,#??cmdCnt
        LCALL   ?Subroutine99
??CrossCallReturnLabel_316:
        MOV     DPH,#((cmdCount >> 8) & 0xff)
        MOV     DPL,#(cmdCount & 0xff)
        LCALL   ?Subroutine95
??CrossCallReturnLabel_305:
        RET
        CFI EndBlock cfiCond963
        CFI EndBlock cfiCond964
        CFI EndBlock cfiPicker965

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine95:
        CFI Block cfiCond966 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_301
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond967 Using cfiCommon0
        CFI (cfiCond967) NoFunction
        CFI (cfiCond967) Conditional ??CrossCallReturnLabel_302
        CFI (cfiCond967) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond967) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond967) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond967) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond967) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond967) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond967) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond967) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond967) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond967) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond967) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond967) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond967) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond967) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond967) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond967) CFA_SP SP+0
        CFI (cfiCond967) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond968 Using cfiCommon0
        CFI (cfiCond968) NoFunction
        CFI (cfiCond968) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_370
        CFI (cfiCond968) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond968) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond968) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond968) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond968) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond968) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond968) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond968) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond968) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond968) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond968) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond968) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond968) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond968) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond968) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond968) CFA_SP SP+0
        CFI (cfiCond968) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond969 Using cfiCommon0
        CFI (cfiCond969) NoFunction
        CFI (cfiCond969) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_371
        CFI (cfiCond969) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond969) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond969) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond969) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond969) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond969) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond969) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond969) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond969) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond969) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond969) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond969) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond969) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond969) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond969) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond969) CFA_SP SP+0
        CFI (cfiCond969) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond970 Using cfiCommon0
        CFI (cfiCond970) NoFunction
        CFI (cfiCond970) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_376
        CFI (cfiCond970) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond970) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond970) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond970) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond970) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond970) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond970) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond970) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond970) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond970) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond970) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond970) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond970) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond970) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond970) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond970) CFA_SP SP+0
        CFI (cfiCond970) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond971 Using cfiCommon0
        CFI (cfiCond971) NoFunction
        CFI (cfiCond971) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_377
        CFI (cfiCond971) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond971) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond971) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond971) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond971) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond971) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond971) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond971) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond971) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond971) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond971) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond971) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond971) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond971) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond971) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond971) CFA_SP SP+0
        CFI (cfiCond971) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond972 Using cfiCommon0
        CFI (cfiCond972) NoFunction
        CFI (cfiCond972) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_372
        CFI (cfiCond972) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond972) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond972) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond972) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond972) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond972) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond972) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond972) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond972) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond972) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond972) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond972) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond972) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond972) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond972) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond972) CFA_SP SP+0
        CFI (cfiCond972) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond973 Using cfiCommon0
        CFI (cfiCond973) NoFunction
        CFI (cfiCond973) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_373
        CFI (cfiCond973) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond973) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond973) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond973) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond973) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond973) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond973) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond973) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond973) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond973) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond973) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond973) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond973) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond973) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond973) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond973) CFA_SP SP+0
        CFI (cfiCond973) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond974 Using cfiCommon0
        CFI (cfiCond974) NoFunction
        CFI (cfiCond974) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_374
        CFI (cfiCond974) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond974) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond974) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond974) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond974) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond974) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond974) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond974) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond974) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond974) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond974) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond974) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond974) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond974) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond974) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond974) CFA_SP SP+0
        CFI (cfiCond974) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond975 Using cfiCommon0
        CFI (cfiCond975) NoFunction
        CFI (cfiCond975) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_375
        CFI (cfiCond975) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond975) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond975) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond975) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond975) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond975) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond975) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond975) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond975) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond975) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond975) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond975) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond975) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond975) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond975) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond975) CFA_SP SP+0
        CFI (cfiCond975) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond976 Using cfiCommon0
        CFI (cfiCond976) NoFunction
        CFI (cfiCond976) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_378
        CFI (cfiCond976) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond976) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond976) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond976) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond976) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond976) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond976) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond976) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond976) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond976) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond976) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond976) CFA_SP SP+0
        CFI (cfiCond976) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond977 Using cfiCommon0
        CFI (cfiCond977) NoFunction
        CFI (cfiCond977) Conditional ??CrossCallReturnLabel_304, ??CrossCallReturnLabel_379
        CFI (cfiCond977) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond977) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond977) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond977) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond977) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond977) V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond977) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond977) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond977) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond977) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond977) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond977) CFA_SP SP+0
        CFI (cfiCond977) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond978 Using cfiCommon0
        CFI (cfiCond978) NoFunction
        CFI (cfiCond978) Conditional ??CrossCallReturnLabel_303
        CFI (cfiCond978) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond978) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond978) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond978) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond978) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond978) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond978) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond978) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond978) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond978) V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond978) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond978) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond978) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond978) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond978) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond978) CFA_SP SP+0
        CFI (cfiCond978) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond979 Using cfiCommon0
        CFI (cfiCond979) NoFunction
        CFI (cfiCond979) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_61
        CFI (cfiCond979) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond979) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond979) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond979) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond979) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond979) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond979) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond979) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond979) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond979) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond979) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond979) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond979) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond979) CFA_SP SP+0
        CFI (cfiCond979) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond980 Using cfiCommon0
        CFI (cfiCond980) NoFunction
        CFI (cfiCond980) Conditional ??CrossCallReturnLabel_305, ??CrossCallReturnLabel_62
        CFI (cfiCond980) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond980) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond980) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond980) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond980) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond980) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond980) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond980) V5 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond980) R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond980) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond980) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond980) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond980) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond980) CFA_SP SP+0
        CFI (cfiCond980) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker981 Using cfiCommon1
        CFI (cfiPicker981) NoFunction
        CFI (cfiPicker981) Picker
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        RET
        CFI EndBlock cfiCond966
        CFI EndBlock cfiCond967
        CFI EndBlock cfiCond968
        CFI EndBlock cfiCond969
        CFI EndBlock cfiCond970
        CFI EndBlock cfiCond971
        CFI EndBlock cfiCond972
        CFI EndBlock cfiCond973
        CFI EndBlock cfiCond974
        CFI EndBlock cfiCond975
        CFI EndBlock cfiCond976
        CFI EndBlock cfiCond977
        CFI EndBlock cfiCond978
        CFI EndBlock cfiCond979
        CFI EndBlock cfiCond980
        CFI EndBlock cfiPicker981

        RSEG XDATA_Z:XDATA:NOROOT(0)
??cmdCnt:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _slot>`:
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _join_slot>`:
        DW 48

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _gw_delay>`:
        DW 60

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _loop_delay>`:
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for _datarate>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for search_stat>`:
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for lastCycle>`:
        DW 1680

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesTo500>`:
        DW 120

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesTo10>`:
        DW 220

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cyclesToStep500Channel>`:
        DW 20

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2Step10Channel>`:
        DW 30

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2SoftKick>`:
        DW 8

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cycles2HardKick>`:
        DW 80

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for calibrationRepeat>`:
        DB 4

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ocShortCircuitLimit>`:
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ModuleOffRememberedPtr>`:
        DW 0FFFDH

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for alignMPP>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for gnd_shift>`:
        DW -600

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for checkForFETFailure>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for netValue>`:
        DW 50

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for si>`:
        DW 0F500H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for adcChannels>`:
        DB 177, 178, 179, 188, 183, 176, 181, 180, 182

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for indices>`:
        DB 0, 1, 2, 255, 255, 3, 255, 6, 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for switchTo255Lim>`:
        DW 44500

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for switchFrom255Lim>`:
        DW 42000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for shortCircuitProtectionOn>`:
        DW 10000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for shortCircuitProtectionOff>`:
        DW 13400

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for theKey>`:
        DB 65, 78, 68, 83, 0, 108, 97, 114, 65, 117, 103, 117, 115, 116, 0, 7
        DB 65, 117, 103, 117, 115, 116, 0, 7, 65, 117, 103, 117, 115, 116, 0, 7

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for defFreq>`:
        DD 6580906

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for the_frequency>`:
        DB 100, 106, 170

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for sleepCounter>`:
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for wasAHardResetOrPowerOn>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for xored>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for theShift>`:
        DW 50

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for cnt>`:
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_3f800000>`:
        DD 3F800000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_447a0000>`:
        DD 447A0000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_0>`:
        DD 0

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_42c80000>`:
        DD 42C80000H

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for __Constant_c1c80000>`:
        DD 0C1C80000H

        END
// 2905 inline void rc(void){
// 2906 //    CLKCON |= OSC_BIT;                    // starting the RC Oscillator
// 2907 //    asm( "NOP" );
// 2908 //    SLEEP |= OSC_PD_BIT;                  // powering down the unused oscillator
// 2909 }
// 2910 /*==== END OF FILE ==========================================================*/
// 
// 13 249 bytes in segment NEAR_CODE
//     40 bytes in segment SFR_AN
//    127 bytes in segment XDATA_I
//    127 bytes in segment XDATA_ID
//    242 bytes in segment XDATA_ROM_C
//    709 bytes in segment XDATA_Z
// 
// 13 356 bytes of CODE  memory (+ 20 bytes shared)
//    242 bytes of CONST memory
//      0 bytes of DATA  memory (+ 40 bytes shared)
//    816 bytes of XDATA memory (+ 20 bytes shared)
//
//Errors: none
//Warnings: 3
